basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a2247
[0x140765772]=0x140940747
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140940747 <- ByteCode
basic block ends with indirect unconditional branch
	0x14084b7b9: mov r9, rbp
	0x14084b7bc: add r9, 0x141
Store [EBP+0x141](STATIC)
	0x14084b7cd: mov dword ptr [r9], 0
	0x14084b7d4: mov r9, 0
	0x14084b7db: mov r15, rbp
	0x14084b7de: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14084b7e5: mov r15, qword ptr [r15]
	0x14084b7e8: add r15, 8
	0x14084b7f2: mov r9w, word ptr [r15]
	0x14084b7fd: add r9, rbp
	0x14084b800: mov r11, 0
	0x14084b80a: mov rsi, rbp
	0x14084b80d: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14084b814: mov rsi, qword ptr [rsi]
	0x14084b81a: add rsi, 0xa
	0x14084b828: mov r11w, word ptr [rsi]
	0x14084b832: add r11, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14084b835: push qword ptr [r9]
Load [EBP+0xe0](VM_REGISTER)
	0x14084b838: push qword ptr [r11]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14084b83b: pop qword ptr [r9]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14084b83e: pop qword ptr [r11]
	0x14084b841: mov r13, rbp
	0x14084b844: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14084b84b: mov r13, qword ptr [r13]
	0x14084b84f: add r13, 6
	0x14084b856: movzx rsi, word ptr [r13]
	0x14084b85b: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14084b85e: mov rsi, qword ptr [rsi]
	0x14084b861: sub r12, rsi
	0x14084b864: pushfq
	0x14084b88c: pop r12
	0x14084b8a3: mov rbx, 0
	0x14084b8b1: mov r9, rbp
	0x14084b8c1: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14084b8d2: mov r9, qword ptr [r9]
	0x14084b8ea: add r9, 2
	0x14084b8f1: mov bx, word ptr [r9]
	0x14084b90a: shl rbx, 3
	0x14084b923: mov rsi, rbp
	0x14084b929: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14084b930: mov r10, qword ptr [rsi]
	0x14084b940: add r10, rbx
	0x14084b943: mov rax, qword ptr [r10]
	0x14084b946: mov r9, rbp
	0x14084b957: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940753
	0x14084b95e: add qword ptr [r9], 0xc
	0x14084b965: jmp rax
handlers outputs:



basic block ends with indirect unconditional branch
	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x64](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094075b
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x14085179e: mov rax, rbp
	0x1408517a1: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408517a7: or dword ptr [rax], 0x7684443a
	0x1408517b7: mov r8, rbp
	0x1408517ba: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408517c1: mov edi, dword ptr [r8]
	0x1408517c4: and edi, 1
	0x1408517ca: cmp edi, 0
	0x1408517d0: je 0x1408517e0
	0x1408517e3: mov r15, rbp
	0x1408517ed: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140851801: mov r15, qword ptr [r15]
	0x14085180b: add r15, 0
	0x14085181c: movzx rdi, word ptr [r15]
	0x14085182a: add rdi, rbp
Store VM_REG [EBP+0x2e]
	0x140851830: mov qword ptr [rdi], rsp
	0x140851833: mov r12, rbp
	0x140851836: mov r11, rbp
	0x140851839: add r12, 0xa7
	0x140851840: add r11, 0x145
Load [EBP+0xa7](STATIC)
	0x140851847: mov r15d, dword ptr [r12]
Load [EBP+0x145](STATIC)
	0x14085184b: mov r11, qword ptr [r11]
	0x14085184e: and r15d, 1
	0x140851855: cmp r15d, 0
	0x14085185c: je 0x140851874
	0x140851874: add r11, 4
	0x14085187b: mov eax, dword ptr [r11]
	0x14085187e: mov rsi, rbp
	0x140851881: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140851888: add dword ptr [rsi], eax
	0x140851891: mov r14, 0
	0x1408518a6: mov rbx, rbp
	0x1408518a9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1408518b0: mov rbx, qword ptr [rbx]
	0x1408518ba: add rbx, 2
	0x1408518d6: mov r14w, word ptr [rbx]
	0x1408518ee: shl r14, 3
	0x1408518f5: mov rcx, rbp
	0x140851902: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x140851917: mov r11, qword ptr [rcx]
	0x140851924: add r11, r14
	0x140851927: mov rdi, qword ptr [r11]
	0x140851938: mov r8, rbp
	0x14085194c: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940763
	0x140851953: add qword ptr [r8], 8
	0x14085195a: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940771
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094077f
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x105]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094078d
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x7a]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940795
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094079d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407ab
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xe0]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407b9
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407c7
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xb7]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407cf
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407dd
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x131]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407e5
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407ed
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407f5
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409407fd
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xce]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940805
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094080d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940813
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408103a1: mov r13, rbp
	0x1408103a7: mov rcx, rbp
	0x1408103b7: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408103be: mov rcx, qword ptr [rcx]
	0x1408103c8: add rcx, 0xe
	0x1408103dd: movzx rcx, byte ptr [rcx]
	0x1408103f2: add rsp, rcx
	0x1408103f5: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408103fc: mov r13, qword ptr [r13]
	0x140810400: add r13, 6
	0x140810418: movzx r13, word ptr [r13]
	0x140810420: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140810426: add qword ptr [r13], rcx
	0x140810434: mov r9, rbp
	0x14081043a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140810441: mov r9, qword ptr [r9]
	0x140810452: add r9, 2
	0x140810459: mov r8d, dword ptr [r9]
	0x14081045f: mov r13, rbp
	0x140810462: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140810469: xor dword ptr [r13], r8d
	0x14081047a: mov r10, rbp
	0x14081047d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140810487: mov r10, qword ptr [r10]
	0x140810491: add r10, 8
	0x14081049c: mov r13d, dword ptr [r10]
	0x1408104a5: mov rdi, rbp
	0x1408104a8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408104b2: or dword ptr [rdi], r13d
	0x1408104bf: mov r12b, 0x13
	0x1408104c9: mov r10, rbp
	0x1408104cc: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408104da: and byte ptr [r10], r12b
	0x140810500: mov rcx, rbp
	0x140810503: mov r12, rbp
	0x140810506: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14081050d: mov rcx, qword ptr [rcx]
	0x140810517: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140810528: mov r12, qword ptr [r12]
	0x14081052c: add r12, 0
	0x140810533: movzx r12, word ptr [r12]
	0x140810538: mov rax, rbp
	0x140810545: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140810559: sub r12d, dword ptr [rax]
	0x14081058b: and r12, 0xffff
	0x14081059c: shl r12, 3
	0x1408105ae: add rcx, r12
	0x1408105b1: mov rbx, qword ptr [rcx]
	0x1408105b4: mov rsi, rbp
	0x1408105cc: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940824
	0x1408105d3: add qword ptr [rsi], 0x11
	0x1408105da: jmp rbx
handlers outputs:



basic block ends with ret
	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094082a
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940832
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088adfe: mov rax, rbp
	0x14088ae16: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14088ae31: mov rax, qword ptr [rax]
	0x14088ae41: add rax, 4
	0x14088ae4e: movzx r8, byte ptr [rax]
	0x14088ae52: mov r12, rbp
	0x14088ae55: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088ae6d: xor r8d, dword ptr [r12]
	0x14088ae78: mov rsi, rbp
	0x14088ae82: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088ae90: add r8d, dword ptr [rsi]
	0x14088ae96: mov rcx, rbp
	0x14088ae99: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088aea0: or dword ptr [rcx], r8d
	0x14088aeb4: mov r14, rbp
	0x14088aec1: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088aedc: xor dword ptr [r14], 0x5cd99c10
	0x14088aeea: mov r14, rbp
	0x14088aef4: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088af0c: add dword ptr [r14], r8d
	0x14088af12: mov rbx, rbp
	0x14088af15: add rbx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088af28: add dword ptr [rbx], r8d
	0x14088af39: mov r13, rbp
	0x14088af3c: sub rcx, 0x80
	0x14088af43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14088af54: mov r13, qword ptr [r13]
	0x14088af58: add r13, 0
	0x14088af6c: movzx r9, word ptr [r13]
	0x14088af80: mov rbx, rbp
	0x14088af83: add rbx, 0xbf
	0x14088af91: xor rcx, 0x10
Load [EBP+0xbf](STATIC)
	0x14088af98: xor r9d, dword ptr [rbx]
	0x14088af9e: and rcx, 0x90
	0x14088afa5: mov rbx, rbp
	0x14088afb6: add rbx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14088afc4: add r9d, dword ptr [rbx]
	0x14088afc7: mov r15, rbp
	0x14088afca: mov rdx, 1
	0x14088afd4: add r15, 0xbf
	0x14088afe1: xor rcx, r15
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088afe4: add dword ptr [r15], r9d
	0x14088afe7: mov r10, rbp
	0x14088aff3: or rdx, 1
	0x14088affa: add r10, 0xa7
	0x14088b004: sub rdx, rcx
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088b00a: sub dword ptr [r10], 0x5353bd69
	0x14088b011: or rdx, r10
	0x14088b014: mov rsi, rbp
	0x14088b017: add rsi, 0x130
Load [EBP+0x130](STATIC)
	0x14088b024: mov r11b, byte ptr [rsi]
	0x14088b027: cmp r11b, 0xc2
	0x14088b02b: jbe 0x14088b058
	0x14088b06d: mov rdi, rbp
	0x14088b076: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088b084: add word ptr [rdi], r9w
	0x14088b088: mov r10, rbp
	0x14088b08b: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088b092: mov r10, qword ptr [r10]
	0x14088b095: mov r11, rbp
	0x14088b098: add r11, 0x145
	0x14088b09f: add r10, 4
	0x14088b0a6: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x14088b0ac: mov r11, qword ptr [r11]
	0x14088b0af: add r8, 0xab
	0x14088b0c0: add r11, 7
	0x14088b0c7: movzx r11, word ptr [r11]
Load [EBP+0xab](STATIC)
	0x14088b0cb: mov r8, qword ptr [r8]
	0x14088b0ce: mov r9, rbp
	0x14088b0d1: add r9, 0xbf
	0x14088b0d8: add r11d, 0x4f0e9e0a
	0x14088b0e8: and r11, 0xffff
	0x14088b0ef: shl r11, 3
	0x14088b0f3: add r8, r11
	0x14088b0f6: mov rcx, qword ptr [r8]
	0x14088b0f9: mov r11, rbp
	0x14088b0fc: add r11, 0xfd
Store [EBP+0xfd](STATIC)
	0x14088b103: mov qword ptr [r11], rcx
	0x14088b10d: mov rax, rbp
	0x14088b110: mov r8, rbp
	0x14088b113: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14088b119: mov rax, qword ptr [rax]
	0x14088b11c: add rax, 5
	0x14088b122: add r8, 0xa7
	0x14088b129: movzx r12, word ptr [rax]
	0x14088b12d: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14088b130: mov r12, qword ptr [r12]
	0x14088b134: or rcx, r12
	0x14088b137: pushfq
	0x14088b13f: mov rsi, rbp
	0x14088b142: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088b149: mov rsi, qword ptr [rsi]
	0x14088b14c: add rsi, 2
	0x14088b15a: pop rcx
	0x14088b15b: mov rbx, rbp
	0x14088b15e: add r12, 0xffff
	0x14088b168: mov r11, rbp
	0x14088b16b: mov rax, 0
	0x14088b172: mov r15, 0xd5
	0x14088b179: add rbx, 0x16e
	0x14088b180: and rax, 0x400
	0x14088b186: add r12, r15
	0x14088b189: or r10, 4
Load [EBP+0x16e](STATIC)
	0x14088b190: movzx rbx, word ptr [rbx]
	0x14088b194: xor bx, 0xd389
	0x14088b199: add rdx, 0x90
	0x14088b1a0: add r11, 0x58
	0x14088b1a7: add rbx, rbp
	0x14088b1aa: sub r15, r10
	0x14088b1ad: sub r15, 0x10
Load [EBP+0x58](STATIC)
	0x14088b1b4: mov r11d, dword ptr [r11]
	0x14088b1b7: xor r11d, 0x1a6ccceb
Store VM_REG [EBP+0x65]
	0x14088b1be: mov byte ptr [rbx], r11b
	0x14088b1c1: and r11, 4
	0x14088b1c8: sub rax, -0x80000000
	0x14088b1ce: mov r13, r11
	0x14088b1d1: mov r12b, 0x56
	0x14088b1d4: xor rbx, 0x40
	0x14088b1db: sub r11, 0x20
	0x14088b1e2: mov rcx, rbp
	0x14088b1e5: sub rax, 0x20
	0x14088b1eb: xor r13, 0x78
	0x14088b1f2: add r11, 0xf0
	0x14088b1f9: add rcx, 0x130
	0x14088b200: xor r13, rcx
	0x14088b203: or r13, 0x400
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088b20a: sub byte ptr [rcx], r12b
	0x14088b20d: mov rdi, 0x400
	0x14088b214: or rdi, 0xf0
	0x14088b21b: xor rdi, 8
	0x14088b222: sub rdi, 0x3f
	0x14088b229: xor rax, 0x400
	0x14088b22f: push 0x5c3de500
	0x14088b234: push rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x90 + (((0x1 + ((0xffffffffffffffff * (((((((((0xbf + context) & 0xffffffffffffffff) >> 8) & 0xffffffffffffff)) << 1 | (((((0x3f + context) & 0xffffffffffffffff) >> 7) & 0x1) ^ ((((0xbf + (context & 0xff)) & 0xff) >> 7) & 0x1))) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 1 | ((~(((((0x3f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1) ^ ((((0x1f + (context & 0x1f)) & 0x1f) >> 4) & 0x1))) << 4 | ((0xf + (context & 0xf)) & 0xf))) & 0xffffffffffffffff)) & 0xffffffffffffffff) | ((0xa7 + context) & 0xffffffffffffffff))) & 0xffffffffffffffff)
	0x14088b235: pop qword ptr [rsp]
	0x14088b238: sub rsp, 8
	0x14088b23c: push 0xdb1ac3e
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x14088b241: mov qword ptr [rsp], rcx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x14088b245: pop qword ptr [rsp]
	0x14088b248: mov rcx, rbp
	0x14088b24b: push rax
	0x14088b24c: mov rax, rcx
	0x14088b24f: mov rdx, rax
	0x14088b252: pop rax
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14088b253: mov rcx, qword ptr [rsp]
	0x14088b257: add rsp, 8
	0x14088b25b: push 0x25341a44
	0x14088b260: push rbx
	0x14088b261: push r12
	0x14088b263: pop rbx
	0x14088b264: push 0x78f0546f
	0x14088b269: mov qword ptr [rsp], rbx
	0x14088b26d: pop qword ptr [rsp + 8]
	0x14088b271: pop rbx
	0x14088b272: push rdx
	0x14088b273: sub qword ptr [rsp], 0x7bdff020
	0x14088b27b: pop r12
	0x14088b27d: push r9
	0x14088b27f: movabs r9, 0x7f9fc60f
	0x14088b289: xor r9, 0x440362f
	0x14088b290: add r12, r9
	0x14088b293: pop r9
	0x14088b295: push 0x2f6a7022
	0x14088b29a: mov qword ptr [rsp], rsi
	0x14088b29e: mov rsi, r12
	0x14088b2a1: mov r14, rsi
	0x14088b2a4: pop rsi
	0x14088b2a5: pop r12
	0x14088b2a7: mov rdx, qword ptr [rsp]
	0x14088b2ab: add rsp, 8
	0x14088b2b2: add r13, 0xf0
	0x14088b2b9: push r12
	0x14088b2bb: movabs r12, 0x5faf0387
	0x14088b2c5: sub rsp, 8
	0x14088b2cc: mov qword ptr [rsp], r14
	0x14088b2d0: movabs r14, 0x77cd2b41
	0x14088b2da: push rax
	0x14088b2db: movabs rax, 0x7dfd96df
	0x14088b2e5: xor r14, rax
	0x14088b2e8: pop rax
	0x14088b2e9: push r15
	0x14088b2eb: movabs r15, 0x71df83f5
	0x14088b2f5: xor r14, r15
	0x14088b2f8: pop r15
	0x14088b2fa: add r12, r14
	0x14088b2fd: pop r14
	0x14088b2ff: push rax
	0x14088b300: push 0x5056b767
	0x14088b305: mov qword ptr [rsp], r10
	0x14088b309: movabs r10, 0x7eb43112
	0x14088b313: mov rax, r10
	0x14088b316: pop r10
	0x14088b318: shl rax, 6
	0x14088b31c: sub rsp, 8
	0x14088b320: push rcx
	0x14088b321: pop qword ptr [rsp]
	0x14088b324: movabs rcx, 0xffffffe092f0a44d
	0x14088b32e: sub rax, 0x7fdaba92
	0x14088b334: add rax, rcx
	0x14088b337: add rax, 0x7fdaba92
	0x14088b33d: mov rcx, qword ptr [rsp]
	0x14088b341: add rsp, 8
	0x14088b345: sub r12, rax
	0x14088b348: pop rax
	0x14088b349: shr r12, 7
	0x14088b34d: push rcx
	0x14088b34e: movabs rcx, 0x45fffb74
	0x14088b358: not rcx
	0x14088b35b: neg rcx
	0x14088b35e: sub rsp, 8
	0x14088b362: mov qword ptr [rsp], r11
	0x14088b366: movabs r11, 0x7fe45971
	0x14088b370: and r11, 0x7cbba763
	0x14088b377: push rsi
	0x14088b378: movabs rsi, 0x3560e31
	0x14088b382: xor r11, rsi
	0x14088b389: add rsp, 8
	0x14088b390: or rcx, r11
	0x14088b393: pop r11
	0x14088b395: xor rcx, 0x7ec8bc82
	0x14088b39c: xor r12, rcx
	0x14088b39f: mov rcx, qword ptr [rsp]
	0x14088b3a3: add rsp, 8
	0x14088b3a7: add r14, r12
	0x14088b3aa: push qword ptr [rsp]
	0x14088b3ad: pop r12
	0x14088b3af: add rsp, 8
	0x14088b3b3: push 0x5e8931e2
	0x14088b3b8: mov qword ptr [rsp], rcx
	0x14088b3bc: push 0x68dd6793
	0x14088b3c1: push r8
	0x14088b3c3: push r13
	0x14088b3c5: add qword ptr [rsp], 0x1fdb5ca8
	0x14088b3cd: pop r8
	0x14088b3cf: sub r8, 0x1fdb5ca8
	0x14088b3d6: push rax
	0x14088b3d7: mov rax, r8
	0x14088b3da: mov qword ptr [rsp + 0x10], rax
	0x14088b3df: pop rax
	0x14088b3e0: pop r8
	0x14088b3e2: push r8
	0x14088b3e4: push rbx
	0x14088b3e5: movabs rbx, 0x5ffd08a3
	0x14088b3ef: mov r8, rbx
	0x14088b3f2: pop rbx
	0x14088b3f3: movabs r13, 0xd6f2ce68
	0x14088b3fd: sub r13, r8
	0x14088b400: mov r8, qword ptr [rsp]
	0x14088b404: push rbp
	0x14088b405: mov rbp, rsp
	0x14088b408: add rbp, 8
	0x14088b40c: add rbp, 8
	0x14088b413: xchg qword ptr [rsp], rbp
	0x14088b417: pop rsp
	0x14088b418: push rdi
	0x14088b419: mov rdi, r13
	0x14088b41c: mov rcx, rdi
	0x14088b41f: pop rdi
	0x14088b424: add rsp, 8
	0x14088b428: shr rcx, 7
	0x14088b42c: xor rcx, 0xedeb82
Load [EBP+0x145](STATIC)
bytecode=0xe11e6b3e
	0x14088b433: sub qword ptr [r14], 0x5f759cf4
	0x14088b43a: sub rsp, 8
	0x14088b43e: mov qword ptr [rsp], rdx
	0x14088b442: push r14
	0x14088b444: push 0x77ff25c7
	0x14088b449: mov r14, qword ptr [rsp]
	0x14088b44d: add rsp, 8
	0x14088b451: or r14, 0x3dd75701
	0x14088b458: and r14, 0x5b93a6b9
	0x14088b45f: sub r14d, 0x5b932681
	0x14088b466: mov rdx, r14
	0x14088b469: pop r14
	0x14088b46b: add rdx, r14
Load [EBP+0x145](STATIC)
bytecode=0xe11e6b47
	0x14088b46e: add qword ptr [rdx], rcx
	0x14088b471: pop rdx
Load [EBP+0x145](STATIC)
bytecode=0x14094083b
	0x14088b472: add qword ptr [r14], 0x5f759cf4
	0x14088b47d: push r8
	0x14088b47f: mov r8, rsp
	0x14088b482: add r8, 8
	0x14088b486: add r8, 8
	0x14088b48d: xchg qword ptr [rsp], r8
	0x14088b491: pop rsp
	0x14088b4c8: mov r15, rbp
	0x14088b4dc: add r15, 0xfd
Load [EBP+0xfd](STATIC)
	0x14088b4f1: mov r12, qword ptr [r15]
	0x14088b508: push r12
	0x14088b526: pop rcx
	0x14088b527: jmp rcx
handlers outputs:



basic block ends with ret
	0x14087bc77: mov r8, rbp
	0x14087bc84: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14087bc9c: mov r8, qword ptr [r8]
	0x14087bc9f: add r8, 0
	0x14087bcad: movzx rdx, word ptr [r8]
	0x14087bcb1: mov r14, rbp
	0x14087bcc5: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087bccc: xor edx, dword ptr [r14]
	0x14087bcfd: mov r9, rbp
	0x14087bd0a: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087bd18: or dword ptr [r9], 0x155c337f
	0x14087bd26: mov r8, rbp
	0x14087bd37: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x14087bd45: mov r10b, byte ptr [r8]
	0x14087bd48: cmp r10b, 0xe
	0x14087bd4c: jbe 0x14087bd6e
	0x14087bd7f: mov r8, rbp
	0x14087bd90: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14087bd97: sub word ptr [r8], dx
	0x14087bda2: mov rdx, 0
	0x14087bdb7: mov rsi, rbp
	0x14087bdc7: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087bdce: mov rsi, qword ptr [rsi]
	0x14087bddb: add rsi, 4
	0x14087bdf7: mov dx, word ptr [rsi]
	0x14087be01: mov r13, rbp
	0x14087be0e: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087be2a: xor edx, dword ptr [r13]
	0x14087be35: mov rax, rbp
	0x14087be38: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14087be53: add edx, dword ptr [rax]
	0x14087be6f: mov r9, rbp
	0x14087be87: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087be8e: add dword ptr [r9], 0x26707aa
	0x14087be95: mov r9, rbp
	0x14087be98: add r9, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14087bead: sub word ptr [r9], dx
	0x14087beb1: mov rdi, rbp
	0x14087bebb: mov r9, rbp
	0x14087bec5: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14087bed6: mov rdi, qword ptr [rdi]
	0x14087bee7: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14087bef1: mov r9, qword ptr [r9]
	0x14087bef7: add rdi, 2
	0x14087bf05: movzx rdi, word ptr [rdi]
	0x14087bf1a: mov r15, rbp
	0x14087bf24: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087bf2b: add edi, dword ptr [r15]
	0x14087bf35: sub edi, 0x5abf4271
	0x14087bf49: mov rdx, rbp
	0x14087bf61: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087bf6e: and dword ptr [rdx], edi
	0x14087bf70: and rdi, 0xffff
	0x14087bf93: shl rdi, 3
	0x14087bf97: add r9, rdi
	0x14087bf9a: mov rbx, 0
	0x14087bfa7: mov r15, qword ptr [r9]
	0x14087bfad: mov r12, rbp
	0x14087bfb0: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x14087bfb7: mov qword ptr [r12], r15
	0x14087bfc5: mov rcx, 0x12
	0x14087bfcc: mov r10, rbp
	0x14087bfcf: xor rcx, 0xf0
	0x14087bfd6: add r10, 0xbf
	0x14087bfdd: mov rsi, 0
	0x14087bfe4: mov r8, r10
	0x14087bfe7: mov r9, rbp
	0x14087bfea: mov rax, rbp
	0x14087bfed: mov r12, rbp
	0x14087bff0: and rsi, r8
	0x14087bffa: and rsi, 0x800
	0x14087c001: add r12, 0x120
	0x14087c008: add r9, 0x16e
Load [EBP+0x16e](STATIC)
	0x14087c00f: movzx r9, word ptr [r9]
	0x14087c013: sub rsi, 4
	0x14087c01e: add rax, 0xd6
	0x14087c024: or rcx, 0x20
	0x14087c02b: add rsi, r9
	0x14087c02e: mov r10, 0x200
	0x14087c035: sub r9w, 0xa2
	0x14087c03b: sub r10, 0x20
	0x14087c042: or r10, 0x3f
	0x14087c049: add r9, rbp
Load [EBP+0xd6](STATIC)
	0x14087c04c: movzx rax, word ptr [rax]
	0x14087c053: xor ax, 0x24df
	0x14087c057: or r10, 0x90
	0x14087c065: add rax, rbp
	0x14087c06f: mov r13, r12
Load [EBP+0xe8](VM_REGISTER)
	0x14087c072: mov rax, qword ptr [rax]
	0x14087c075: and rsi, 4
Store VM_REG [EBP+0x155]
	0x14087c07c: mov word ptr [r9], ax
	0x14087c080: sub rbx, r10
	0x14087c083: xor rbx, 0x400
	0x14087c08a: add rax, 0x20
	0x14087c090: sub rax, r12
	0x14087c093: and rbx, 0x80
	0x14087c09a: mov r9, rbp
	0x14087c09d: or rbx, 4
	0x14087c0a4: and r8, 0x3f
	0x14087c0ab: or rbx, 0x80
	0x14087c0b2: add rbx, rbx
	0x14087c0b5: add r9, 0xfd
	0x14087c0bc: mov r11, 0
	0x14087c0c3: sub rax, 4
	0x14087c0c9: or r8, 4
	0x14087c0d0: add r11, r13
Load [EBP+0xfd](STATIC)
	0x14087c0d3: mov r14, qword ptr [r9]
	0x14087c0d6: sub r8, r8
	0x14087c0d9: xor rbx, 0x3f
	0x14087c0e0: push rdi
	0x14087c0e1: mov rdi, rsp
	0x14087c0e4: add rdi, 8
	0x14087c0e8: sub rdi, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14087c0ef: xor rdi, qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14087c0f3: xor qword ptr [rsp], rdi
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14087c0f7: xor rdi, qword ptr [rsp]
	0x14087c0fb: pop rsp
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xbf + context) & 0xffffffffffffffff)
	0x14087c0fc: mov qword ptr [rsp], rdx
	0x14087c100: push rsp
	0x14087c101: pop rdx
	0x14087c102: add rdx, 8
	0x14087c106: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0xe2
	0x14087c10a: mov qword ptr [rsp], rcx
	0x14087c10e: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfd + context) & 0xffffffffffffffff)
	0x14087c115: mov qword ptr [rsp], r9
	0x14087c119: movabs r9, 0x79edd091
	0x14087c123: movabs rcx, 0xffffffff86122f77
	0x14087c12d: add rcx, r9
	0x14087c130: pop r9
	0x14087c132: sub rdx, 0x9bf8208
	0x14087c139: sub rdx, 0xfeebbf3
	0x14087c140: sub rdx, rcx
	0x14087c143: add rdx, 0xfeebbf3
	0x14087c14a: add rdx, 0x9bf8208
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14087c151: push qword ptr [rsp]
	0x14087c154: pop rcx
	0x14087c155: add rsp, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14087c15c: xchg qword ptr [rsp], rdx
	0x14087c160: pop rsp
	0x14087c161: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x14087c168: mov qword ptr [rsp], rsi
	0x14087c16c: push r15
	0x14087c16e: push r14
	0x14087c170: xor qword ptr [rsp], 0x7eb47c3
	0x14087c178: pop r15
	0x14087c17a: xor r15, 0x7eb47c3
	0x14087c181: mov rsi, r15
	0x14087c184: pop r15
	0x14087c186: push rsi
	0x14087c187: pop qword ptr [rsp + 8]
	0x14087c18b: mov rsi, qword ptr [rsp]
	0x14087c18f: add rsp, 8
	0x14087c196: xor rax, r9
	0x14087c199: and r11, r14
	0x14087c19c: mov r9, 0x12
	0x14087c1a3: push rbp
	0x14087c1a4: push r15
	0x14087c1a6: movabs r15, 0x65f647bb
	0x14087c1b0: xor qword ptr [rsp + 8], r15
	0x14087c1b5: pop r15
	0x14087c1b7: pop rdx
	0x14087c1b8: push 0x5e35663b
	0x14087c1bd: mov qword ptr [rsp], rbx
	0x14087c1c1: movabs rbx, 0x466b24fe
	0x14087c1cb: sub rsp, 8
	0x14087c1d2: push 0x5dd7a8d0
	0x14087c1d7: mov qword ptr [rsp], r13
	0x14087c1db: pop qword ptr [rsp]
	0x14087c1de: push 0x706f0697
	0x14087c1e3: mov qword ptr [rsp], rax
	0x14087c1e7: movabs rax, 0x2bbb534d
	0x14087c1f1: movabs r13, 0x53e1ba58
	0x14087c1fb: add r13, rax
	0x14087c1fe: mov rax, qword ptr [rsp]
	0x14087c202: push r8
	0x14087c204: mov r8, rsp
	0x14087c207: add r8, 8
	0x14087c20b: add r8, 8
	0x14087c212: xchg qword ptr [rsp], r8
	0x14087c216: pop rsp
	0x14087c217: and rbx, r13
	0x14087c21a: pop r13
	0x14087c21c: and rbx, 0x7cb73d48
	0x14087c223: push r15
	0x14087c225: mov r15, 0
	0x14087c22c: sub r15, rbx
	0x14087c22f: xchg rbx, r15
	0x14087c232: pop r15
	0x14087c234: push 0x64e0d360
	0x14087c239: push rdi
	0x14087c23a: pop qword ptr [rsp]
	0x14087c23d: movabs rdi, 0xa9f74bbb
	0x14087c247: add rbx, 0x3cfca301
	0x14087c24e: sub rbx, 0x7e7ee941
	0x14087c255: add rbx, rdi
	0x14087c258: add rbx, 0x7e7ee941
	0x14087c25f: sub rbx, 0x3cfca301
	0x14087c266: pop rdi
	0x14087c267: xor rdx, rbx
	0x14087c26a: push qword ptr [rsp]
	0x14087c271: add rsp, 8
	0x14087c275: add rsp, 8
	0x14087c27c: and r9, 1
	0x14087c291: sub rsp, 8
	0x14087c295: push rsi
	0x14087c296: mov rsi, r9
	0x14087c299: mov qword ptr [rsp + 8], rsi
	0x14087c29e: pop rsi
	0x14087c29f: movabs r9, 0xf7e2cdd
	0x14087c2a9: xor r9, 0x7183c339
	0x14087c2b0: push r13
	0x14087c2b2: push rdx
	0x14087c2b3: movabs rdx, 0x76c2ed52
	0x14087c2bd: mov r13, rdx
	0x14087c2c0: pop rdx
	0x14087c2c1: or r13, 0x7ffcb93b
	0x14087c2c8: inc r13
	0x14087c2cb: and r13, 0x7b5682ed
	0x14087c2d2: sub rsp, 8
	0x14087c2d9: mov qword ptr [rsp], rcx
	0x14087c2dd: movabs rcx, 0x7d708545
	0x14087c2e7: add r13, rcx
	0x14087c2ea: pop rcx
	0x14087c2eb: add r13, 0x33f88d00
	0x14087c2f2: push r15
	0x14087c2f4: movabs r15, 0xaede1602
	0x14087c2fe: sub r13, 0xfe69079
	0x14087c305: sub r13, 0xfde0461
	0x14087c30c: sub r13, r15
	0x14087c30f: add r13, 0xfde0461
	0x14087c316: add r13, 0xfe69079
	0x14087c31d: pop r15
	0x14087c31f: sub r9, 0xeff3961
	0x14087c326: sub r9, r13
	0x14087c329: add r9, 0xeff3961
	0x14087c330: pop r13
	0x14087c332: sub rsp, 8
	0x14087c339: mov qword ptr [rsp], rcx
	0x14087c33d: movabs rcx, 0x7d99b114
	0x14087c347: dec rcx
	0x14087c34a: not rcx
	0x14087c34d: push r12
	0x14087c34f: push r13
	0x14087c351: movabs r13, 0x7ddf7ab4
	0x14087c35b: movabs r12, 0xddd2dc3d
	0x14087c365: sub r12, r13
	0x14087c368: pop r13
	0x14087c36a: neg r12
	0x14087c36d: push r14
	0x14087c36f: movabs r14, 0xbde29c7d
	0x14087c379: add r12, r14
	0x14087c37c: pop r14
	0x14087c37e: and rcx, r12
	0x14087c381: push qword ptr [rsp]
	0x14087c384: pop r12
	0x14087c386: add rsp, 8
	0x14087c38a: or rcx, 0x7ffd4f74
	0x14087c391: sub rcx, -1
	0x14087c395: shl rcx, 4
	0x14087c399: push rdx
	0x14087c39a: movabs rdx, 0x7fed88ce0
	0x14087c3a4: sub rcx, rdx
	0x14087c3a7: pop rdx
	0x14087c3a8: xor r9, rcx
	0x14087c3ab: pop rcx
	0x14087c3ac: add rdx, r9
	0x14087c3af: pop r9
	0x14087c3b1: mov r15, 0x400
	0x14087c3c6: sub rsp, 8
	0x14087c3ca: mov qword ptr [rsp], rax
	0x14087c3ce: movabs rax, 0x7fac2987
	0x14087c3d8: neg rax
	0x14087c3db: push r10
	0x14087c3dd: movabs r10, 0xffffffff22549a46
	0x14087c3e7: sub rax, r10
	0x14087c3ea: pop r10
	0x14087c3ec: sub rsp, 8
	0x14087c3f3: mov qword ptr [rsp], r13
	0x14087c3f7: push r12
	0x14087c3f9: push 0x374a5c9b
	0x14087c3fe: mov qword ptr [rsp], r13
	0x14087c402: movabs r13, 0x17d53e5c
	0x14087c40c: push r11
	0x14087c40e: movabs r11, 0x57aa5818
	0x14087c418: mov r12, r11
	0x14087c41b: pop r11
	0x14087c41d: add r12, r13
	0x14087c420: pop r13
	0x14087c422: mov r13, r12
	0x14087c425: pop r12
	0x14087c427: dec r13
	0x14087c42a: shl r13, 2
	0x14087c42e: sub r13, 1
	0x14087c432: shr r13, 8
	0x14087c436: shr r13, 2
	0x14087c43a: xor r13, 0x36b099d8
	0x14087c441: or rax, r13
	0x14087c444: mov r13, qword ptr [rsp]
	0x14087c448: add rsp, 8
	0x14087c44f: sub rsp, 8
	0x14087c453: mov qword ptr [rsp], r15
	0x14087c457: push rsi
	0x14087c458: movabs rsi, 0x5fffa37d
	0x14087c462: movabs r15, 0x97ff08c4
	0x14087c46c: sub r15, rsi
	0x14087c46f: pop rsi
	0x14087c470: or rax, r15
	0x14087c473: push qword ptr [rsp]
	0x14087c476: pop r15
	0x14087c478: add rsp, 8
	0x14087c47c: push rdx
	0x14087c47d: movabs rdx, 0x5fbbe38a
	0x14087c487: shr rdx, 1
	0x14087c48b: not rdx
	0x14087c48e: xor rdx, 0x7f3b61a7
	0x14087c495: push r13
	0x14087c497: movabs r13, 0xd0e68fdc
	0x14087c4a1: sub rdx, 0x7bf79c1d
	0x14087c4a8: add rdx, r13
	0x14087c4ab: add rdx, 0x7bf79c1d
	0x14087c4b2: pop r13
	0x14087c4b4: xor rax, rdx
	0x14087c4b7: mov rdx, qword ptr [rsp]
	0x14087c4bb: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140940841
	0x14087c4c2: add qword ptr [rdx], rax
	0x14087c4c9: add rsp, 8
	0x14087c505: ret 0
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940849
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408040aa: mov rsi, 0x16713659
	0x1408040c2: mov r15, rbp
	0x1408040c8: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408040cf: xor dword ptr [r15], esi
	0x1408040d9: mov rax, rbp
	0x1408040e6: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1408040f3: mov rax, qword ptr [rax]
	0x140804104: add rax, 0
	0x140804114: movzx rdi, word ptr [rax]
	0x140804118: mov r13, rbp
	0x140804122: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804137: add edi, dword ptr [r13]
	0x140804145: mov rcx, rbp
	0x140804148: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140804159: xor edi, dword ptr [rcx]
	0x14080415b: mov r11, rbp
	0x14080415e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140804173: sub dword ptr [r11], edi
	0x140804184: mov rbx, rbp
	0x140804187: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140804195: and dword ptr [rbx], 0x4384686a
	0x1408041a1: mov rbx, rbp
	0x1408041b2: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1408041c3: mov r8b, byte ptr [rbx]
	0x1408041c6: cmp r8b, 0xa4
	0x1408041ca: jbe 0x1408041e4
	0x1408041e4: mov r15, rbp
	0x1408041f5: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408041fc: add word ptr [r15], di
	0x14080420a: mov rsi, rbp
	0x140804217: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140804225: mov rsi, qword ptr [rsi]
	0x14080422f: add rsi, 7
	0x140804236: movzx rcx, byte ptr [rsi]
	0x140804241: mov r9, rbp
	0x14080424e: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804255: sub ecx, dword ptr [r9]
	0x140804266: mov rdi, rbp
	0x140804270: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140804281: sub ecx, dword ptr [rdi]
	0x140804291: mov r10, rbp
	0x14080429e: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408042a5: or dword ptr [r10], ecx
	0x1408042c2: mov rdi, rbp
	0x1408042d3: add rdi, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408042e4: xor dword ptr [rdi], ecx
	0x1408042e6: mov rdi, rbp
	0x1408042e9: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1408042fe: add dword ptr [rdi], ecx
	0x140804303: mov r8, rbp
	0x140804306: mov r10, rbp
	0x140804310: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x14080431e: movzx r8, word ptr [r8]
	0x140804330: add r10, 0x58
Load [EBP+0x58](STATIC)
	0x14080434f: mov r10d, dword ptr [r10]
	0x140804360: add r8, rbp
	0x140804366: mov rax, r8
	0x140804377: mov rcx, r10
	0x14080437a: mov r8b, cl
	0x14080438b: and r8b, 0x3f
	0x14080438f: cmp r8b, 0
	0x140804393: je 0x1408043a7
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140804399: shr dword ptr [rax], cl
	0x1408043ea: mov rsi, rax
	0x1408043f7: add rsi, 4
Store VM_REG [EBP+0x159]
	0x14080440c: mov dword ptr [rsi], 0
	0x140804434: mov rbx, rbp
	0x14080443d: mov r12, rbp
	0x140804447: add rbx, 0xab
	0x140804451: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140804458: mov r12, qword ptr [r12]
	0x140804463: add r12, 2
Load [EBP+0xab](STATIC)
	0x140804470: mov rbx, qword ptr [rbx]
	0x140804473: movzx r12, word ptr [r12]
	0x140804478: mov r8, rbp
	0x14080447b: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804488: xor r12d, dword ptr [r8]
	0x140804495: sub r12d, 0x637e5523
	0x1408044a2: mov rsi, rbp
	0x1408044a8: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408044b8: sub dword ptr [rsi], r12d
	0x1408044c5: and r12, 0xffff
	0x1408044d6: shl r12, 3
	0x1408044e1: add rbx, r12
	0x1408044e7: mov r8, qword ptr [rbx]
	0x1408044ea: mov rax, rbp
	0x1408044f4: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940853
	0x1408044fa: add qword ptr [rax], 0xa
	0x140804501: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x14079cc95: mov rdx, rax
	0x14079cc98: mov r9, 0
	0x14079cca6: mov r14, rbp
	0x14079ccb7: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14079ccbe: mov r14, qword ptr [r14]
	0x14079ccc1: add r14, 6
	0x14079ccc8: mov r9w, word ptr [r14]
	0x14079cccc: mov r13, rbp
	0x14079ccdd: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14079cceb: sub r9d, dword ptr [r13]
	0x14079ccef: mov rsi, 0
	0x14079ccf6: mov rax, rbp
	0x14079ccf9: and rsi, 4
	0x14079cd00: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14079cd0d: sub r9d, dword ptr [rax]
	0x14079cd1a: mov rdi, rbp
	0x14079cd20: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079cd27: xor dword ptr [rdi], r9d
	0x14079cd2a: add rsi, 0x400
	0x14079cd31: mov r14, rbp
	0x14079cd34: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14079cd3b: and dword ptr [r14], 0x12c0dde1
	0x14079cd48: mov r11, rbp
	0x14079cd4b: add r11, 0xd6
	0x14079cd55: sub rsi, rdx
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14079cd58: sub word ptr [r11], r9w
	0x14079cd63: mov rdx, rbp
	0x14079cd69: mov r8, rbp
	0x14079cd76: add r8, 0x145
	0x14079cd80: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14079cd8d: mov rdx, qword ptr [rdx]
	0x14079cd90: add rdx, 4
Load [EBP+0x145](STATIC)
	0x14079cd97: mov r8, qword ptr [r8]
	0x14079cda1: movzx r11, word ptr [rdx]
	0x14079cdac: mov r9, rbp
	0x14079cdaf: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14079cdbc: sub r11d, dword ptr [r9]
	0x14079cdbf: add r8, 8
	0x14079cdcd: movzx r9, word ptr [r8]
	0x14079cdd1: add r9, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14079cde8: mov r9, qword ptr [r9]
	0x14079cdff: mov rax, rbp
	0x14079ce0c: add rax, 0xbf
	0x14079ce12: xor rsi, r9
	0x14079ce15: pushfq
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079ce2b: and dword ptr [rax], r11d
	0x14079ce35: mov r15, rbp
	0x14079ce5a: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14079ce67: sub dword ptr [r15], 0x66ccb78a
	0x14079ce6e: mov r15, rbp
	0x14079ce71: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14079ce7f: mov r8b, byte ptr [r15]
	0x14079ce9d: cmp r8b, 0x71
	0x14079cea1: jbe 0x14079ceb1
	0x14079cec0: mov r12, rbp
	0x14079ceca: pop rsi
	0x14079cecb: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14079ced9: add word ptr [r12], r11w
	0x14079cf8a: mov r8, rbp
	0x14079cf9b: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x14079cfb0: mov r8, qword ptr [r8]
	0x14079cfba: mov rax, rbp
	0x14079cfbd: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14079cfc9: mov rax, qword ptr [rax]
	0x14079cfda: add rax, 2
	0x14079cfe0: movzx rax, word ptr [rax]
	0x14079cfea: mov r13, rbp
	0x14079cffb: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14079d00c: sub eax, dword ptr [r13]
	0x14079d010: mov rsi, rbp
	0x14079d021: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079d028: xor dword ptr [rsi], eax
	0x14079d038: and rax, 0xffff
	0x14079d053: shl rax, 3
	0x14079d05e: add r8, rax
	0x14079d061: mov rdx, qword ptr [r8]
	0x14079d06e: mov r8, rbp
	0x14079d071: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094085d
	0x14079d078: add qword ptr [r8], 0xa
	0x14079d07f: jmp rdx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407ff4d9: mov rbx, 0
	0x1407ff4ee: mov r11, rbp
	0x1407ff506: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff514: mov r11, qword ptr [r11]
	0x1407ff525: add r11, 6
	0x1407ff53a: mov bx, word ptr [r11]
	0x1407ff553: mov rax, rbp
	0x1407ff55d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff563: sub ebx, dword ptr [rax]
	0x1407ff573: mov r13, rbp
	0x1407ff57d: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x1407ff592: sub ebx, dword ptr [r13]
	0x1407ff59d: mov r13, rbp
	0x1407ff5ae: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff5b5: and dword ptr [r13], ebx
	0x1407ff5c0: mov r13, rbp
	0x1407ff5ca: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff5d8: or dword ptr [r13], 0x33e8a2f6
	0x1407ff5e0: mov rax, rbp
	0x1407ff5ed: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407ff600: sub word ptr [rax], bx
	0x1407ff603: mov r12, rbp
	0x1407ff606: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff60d: sub dword ptr [r12], 0x2dc38491
	0x1407ff615: mov rcx, rbp
	0x1407ff618: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff61f: and dword ptr [rcx], 0x1f40d224
	0x1407ff62f: mov r14, rbp
	0x1407ff632: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff646: mov r14, qword ptr [r14]
	0x1407ff649: add r14, 2
	0x1407ff650: movzx rdx, word ptr [r14]
	0x1407ff65b: mov rdi, rbp
	0x1407ff661: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff676: add edx, dword ptr [rdi]
	0x1407ff6ae: mov r8, rbp
	0x1407ff6c2: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff6d6: sub dword ptr [r8], edx
	0x1407ff6dc: mov r9, rbp
	0x1407ff6e6: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff6ed: or dword ptr [r9], 0x4dac0675
	0x1407ff6f4: mov r15, rbp
	0x1407ff708: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407ff716: mov dil, byte ptr [r15]
	0x1407ff719: cmp dil, 0xf6
	0x1407ff71d: jbe 0x1407ff737
	0x1407ff73e: mov r13, rbp
	0x1407ff74f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407ff767: add word ptr [r13], dx
	0x1407ff76c: mov r9, rbp
	0x1407ff77b: mov rsi, rbp
	0x1407ff785: add rsi, 0x16e
	0x1407ff78c: add r9, 0xd6
Load [EBP+0x16e](STATIC)
	0x1407ff7a0: movzx rsi, word ptr [rsi]
	0x1407ff7b2: sub si, 0xbe38
	0x1407ff7be: add rsi, rbp
Load [EBP+0xd6](STATIC)
	0x1407ff7c1: movzx r9, word ptr [r9]
	0x1407ff7d2: xor r9w, 0x9dec
	0x1407ff7e2: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407ff7e8: mov r9, qword ptr [r9]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407ff7eb: and dword ptr [rsi], r9d
	0x1407ff7ee: pushfq
	0x1407ff7ef: add rsi, 4
Store VM_REG [EBP+0x159]
	0x1407ff7f9: mov dword ptr [rsi], 0
	0x1407ff7ff: mov rdi, 0
	0x1407ff81b: mov r9, rbp
	0x1407ff828: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff82f: mov r9, qword ptr [r9]
	0x1407ff832: add r9, 8
	0x1407ff840: mov dil, byte ptr [r9]
	0x1407ff843: cmp dil, 0
	0x1407ff847: je 0x1407ff8ba
	0x1407ff857: mov r9, rbp
	0x1407ff868: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff876: mov r9, qword ptr [r9]
	0x1407ff88a: add r9, 0
	0x1407ff89b: mov di, word ptr [r9]
	0x1407ff8a6: add rdi, rbp
	0x1407ff8b0: pop r12
Store VM_REG [EBP+0x26]
	0x1407ff8b2: mov qword ptr [rdi], r12
	0x1407ff934: mov rsi, rbp
	0x1407ff937: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff941: mov rsi, qword ptr [rsi]
	0x1407ff955: add rsi, 4
	0x1407ff95f: mov rdi, rbp
	0x1407ff970: add rdi, 0xab
	0x1407ff977: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407ff97b: mov rdi, qword ptr [rdi]
	0x1407ff981: mov r11, rbp
	0x1407ff999: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff9a9: sub esi, dword ptr [r11]
	0x1407ff9ba: xor esi, 0x70a2a845
	0x1407ff9c7: mov r11, rbp
	0x1407ff9df: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff9ed: add dword ptr [r11], esi
	0x1407ff9f7: and rsi, 0xffff
	0x1407ffa01: shl rsi, 3
	0x1407ffa05: add rdi, rsi
	0x1407ffa0f: mov r9, qword ptr [rdi]
	0x1407ffa23: mov rdx, rbp
	0x1407ffa34: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940866
	0x1407ffa3b: add qword ptr [rdx], 9
	0x1407ffa42: jmp r9
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940874
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094087c
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408258b4: mov rcx, 0
	0x1408258bb: mov r14, rbp
	0x1408258c1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408258c8: mov r14, qword ptr [r14]
	0x1408258cb: add r14, 2
	0x1408258d9: mov cx, word ptr [r14]
	0x1408258e0: mov rdx, rbp
	0x1408258f7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408258fe: add ecx, dword ptr [rdx]
	0x14082590a: mov rax, rbp
	0x14082590d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825913: add dword ptr [rax], ecx
	0x140825915: mov r8, rbp
	0x140825918: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14082591f: and dword ptr [r8], 0x15921e58
	0x140825926: mov rsi, rbp
	0x140825929: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140825930: add word ptr [rsi], cx
	0x140825951: mov r10, rbp
	0x140825969: add r10, 0x145
	0x140825985: mov r8, rbp
	0x14082598e: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140825995: mov r10, qword ptr [r10]
	0x14082599f: add r10, 0xa
	0x1408259a6: movzx rdi, word ptr [r10]
Load [EBP+0x145](STATIC)
	0x1408259b1: mov r8, qword ptr [r8]
	0x1408259be: mov r9, rbp
	0x1408259c1: add r8, 4
	0x1408259c8: movzx r12, word ptr [r8]
	0x1408259d9: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1408259e3: mov r12, qword ptr [r12]
	0x1408259e7: and r8, r12
	0x1408259ea: pushfq
	0x140825a37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140825a50: sub edi, dword ptr [r9]
	0x140825a5f: pop r8
	0x140825a8a: mov r14, rbp
	0x140825a9b: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825aa2: sub dword ptr [r14], edi
	0x140825ad5: mov rbx, rbp
	0x140825ae6: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140825af7: mov r13b, byte ptr [rbx]
	0x140825afa: cmp r13b, 0x65
	0x140825afe: jbe 0x140825b2d
	0x140825b30: mov r10, rbp
	0x140825b41: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140825b48: xor word ptr [r10], di
	0x140825b5a: mov rax, rbp
	0x140825b6b: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x140825b7f: movzx rax, word ptr [rax]
	0x140825b91: xor ax, 0xf1f5
	0x140825b95: add rax, rbp
	0x140825b9f: mov r14, rbp
	0x140825ba2: add r14, 0xd6
Load [EBP+0xd6](STATIC)
	0x140825bb0: movzx r14, word ptr [r14]
	0x140825bc1: add r14w, 0x5bc0
	0x140825bce: add r14, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140825bd1: mov r14, qword ptr [r14]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140825bdb: sub dword ptr [rax], r14d
	0x140825bf3: add rax, 4
Store VM_REG [EBP+0xd2]
	0x140825c07: mov dword ptr [rax], 0
	0x140825c59: mov rdi, rbp
	0x140825c66: mov rsi, rbp
	0x140825c69: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x140825c70: mov rdi, qword ptr [rdi]
	0x140825c81: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140825c88: mov rsi, qword ptr [rsi]
	0x140825c9c: add rsi, 6
	0x140825ca3: movzx rsi, word ptr [rsi]
	0x140825caa: mov rcx, rbp
	0x140825cad: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140825cb4: sub esi, dword ptr [rcx]
	0x140825cc4: sub esi, 0x47915659
	0x140825cca: mov r13, rbp
	0x140825cd0: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825cd7: sub dword ptr [r13], esi
	0x140825ce8: and rsi, 0xffff
	0x140825cf9: shl rsi, 3
	0x140825d00: add rdi, rsi
	0x140825d0d: mov r15, qword ptr [rdi]
	0x140825d1a: mov rbx, rbp
	0x140825d1d: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940888
	0x140825d24: add qword ptr [rbx], 0xc
	0x140825d2b: jmp r15
handlers outputs:



	0x1408258b4: mov rcx, 0
	0x1408258bb: mov r14, rbp
	0x1408258c1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408258c8: mov r14, qword ptr [r14]
	0x1408258cb: add r14, 2
	0x1408258d9: mov cx, word ptr [r14]
	0x1408258e0: mov rdx, rbp
	0x1408258f7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408258fe: add ecx, dword ptr [rdx]
	0x14082590a: mov rax, rbp
	0x14082590d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825913: add dword ptr [rax], ecx
	0x140825915: mov r8, rbp
	0x140825918: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14082591f: and dword ptr [r8], 0x15921e58
	0x140825926: mov rsi, rbp
	0x140825929: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140825930: add word ptr [rsi], cx
	0x140825951: mov r10, rbp
	0x140825969: add r10, 0x145
	0x140825985: mov r8, rbp
	0x14082598e: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140825995: mov r10, qword ptr [r10]
	0x14082599f: add r10, 0xa
	0x1408259a6: movzx rdi, word ptr [r10]
Load [EBP+0x145](STATIC)
	0x1408259b1: mov r8, qword ptr [r8]
	0x1408259be: mov r9, rbp
	0x1408259c1: add r8, 4
	0x1408259c8: movzx r12, word ptr [r8]
	0x1408259d9: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1408259e3: mov r12, qword ptr [r12]
	0x1408259e7: and r8, r12
	0x1408259ea: pushfq
	0x140825a37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140825a50: sub edi, dword ptr [r9]
	0x140825a5f: pop r8
	0x140825a8a: mov r14, rbp
	0x140825a9b: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825aa2: sub dword ptr [r14], edi
	0x140825ad5: mov rbx, rbp
	0x140825ae6: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140825af7: mov r13b, byte ptr [rbx]
	0x140825afa: cmp r13b, 0x65
	0x140825afe: jbe 0x140825b2d
	0x140825b30: mov r10, rbp
	0x140825b41: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140825b48: xor word ptr [r10], di
	0x140825b5a: mov rax, rbp
	0x140825b6b: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x140825b7f: movzx rax, word ptr [rax]
	0x140825b91: xor ax, 0xf1f5
	0x140825b95: add rax, rbp
	0x140825b9f: mov r14, rbp
	0x140825ba2: add r14, 0xd6
Load [EBP+0xd6](STATIC)
	0x140825bb0: movzx r14, word ptr [r14]
	0x140825bc1: add r14w, 0x5bc0
	0x140825bce: add r14, rbp
Load [EBP+0x131](VM_REGISTER)
	0x140825bd1: mov r14, qword ptr [r14]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140825bdb: sub dword ptr [rax], r14d
	0x140825bf3: add rax, 4
Store VM_REG [EBP+0xd2]
	0x140825c07: mov dword ptr [rax], 0
	0x140825c59: mov rdi, rbp
	0x140825c66: mov rsi, rbp
	0x140825c69: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x140825c70: mov rdi, qword ptr [rdi]
	0x140825c81: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140825c88: mov rsi, qword ptr [rsi]
	0x140825c9c: add rsi, 6
	0x140825ca3: movzx rsi, word ptr [rsi]
	0x140825caa: mov rcx, rbp
	0x140825cad: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140825cb4: sub esi, dword ptr [rcx]
	0x140825cc4: sub esi, 0x47915659
	0x140825cca: mov r13, rbp
	0x140825cd0: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140825cd7: sub dword ptr [r13], esi
	0x140825ce8: and rsi, 0xffff
	0x140825cf9: shl rsi, 3
	0x140825d00: add rdi, rsi
	0x140825d0d: mov r15, qword ptr [rdi]
	0x140825d1a: mov rbx, rbp
	0x140825d1d: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940894
	0x140825d24: add qword ptr [rbx], 0xc
	0x140825d2b: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x14077e860: mov r14, 0
	0x14077e867: mov r10, rbp
	0x14077e86a: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14077e871: mov r10, qword ptr [r10]
	0x14077e874: add r10, 0xa
	0x14077e87b: mov r14w, word ptr [r10]
	0x14077e87f: add r14, rbp
	0x14077e882: mov r9, 0
	0x14077e889: mov r11, rbp
	0x14077e88c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14077e893: mov r11, qword ptr [r11]
	0x14077e896: add r11, 0
	0x14077e89d: mov r9w, word ptr [r11]
	0x14077e8a1: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14077e8a4: push qword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
	0x14077e8a7: push qword ptr [r9]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14077e8aa: pop qword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14077e8ad: pop qword ptr [r9]
	0x14077e8b7: mov rdx, rbp
	0x14077e8c1: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14077e8cf: mov rdx, qword ptr [rdx]
	0x14077e8d2: add rdx, 8
	0x14077e8d9: movzx r10, word ptr [rdx]
	0x14077e8dd: mov r8, rbp
	0x14077e8e0: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077e8ee: sub r10d, dword ptr [r8]
	0x14077e8f8: mov rdx, rbp
	0x14077e8fb: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077e909: sub r10d, dword ptr [rdx]
	0x14077e90c: mov r9, rbp
	0x14077e916: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077e927: xor dword ptr [r9], r10d
	0x14077e934: mov rsi, rbp
	0x14077e941: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077e956: xor dword ptr [rsi], 0x798757a2
	0x14077e963: mov rsi, rbp
	0x14077e966: add rsi, 0x130
Load [EBP+0x130](STATIC)
	0x14077e96d: mov r8b, byte ptr [rsi]
	0x14077e970: cmp r8b, 0xf4
	0x14077e974: jbe 0x14077e98b
	0x14077e98b: mov r9, rbp
	0x14077e98e: add r9, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077e99b: xor word ptr [r9], r10w
	0x14077e9a9: mov rbx, rbp
	0x14077e9ba: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14077e9cb: mov rbx, qword ptr [rbx]
	0x14077e9d8: add rbx, 2
	0x14077e9ed: movzx rdx, byte ptr [rbx]
	0x14077e9f8: mov r9, rbp
	0x14077e9fb: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077ea09: xor edx, dword ptr [r9]
	0x14077ea13: mov rax, rbp
	0x14077ea1d: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14077ea26: xor edx, dword ptr [rax]
	0x14077ea39: mov r12, rbp
	0x14077ea3c: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ea49: and dword ptr [r12], 0x70c5d7d8
	0x14077ea54: mov r11, rbp
	0x14077ea57: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14077ea65: add dword ptr [r11], edx
	0x14077ea87: mov r9, rbp
	0x14077ea94: add r9, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077ea9b: movzx r9, word ptr [r9]
	0x14077ea9f: sub r9w, 0xd3cb
	0x14077eaa5: add r9, rbp
	0x14077eaa8: mov rdi, rbp
	0x14077eaab: add rdi, 0x58
Load [EBP+0x58](STATIC)
	0x14077eab2: mov edi, dword ptr [rdi]
	0x14077eab4: add edi, 0x618f7a54
Load [EBP+0xce](VM_REGISTER)
	0x14077eaba: test byte ptr [r9], dil
	0x14077eabd: pushfq
	0x14077eada: mov r13, 0
	0x14077eae4: mov r10, rbp
	0x14077eaf5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14077eafc: mov r10, qword ptr [r10]
	0x14077eaff: add r10, 7
	0x14077eb0d: mov r13b, byte ptr [r10]
	0x14077eb10: cmp r13b, 0
	0x14077eb14: je 0x14077eb67
	0x14077eb20: mov r10, rbp
	0x14077eb23: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14077eb2a: mov r10, qword ptr [r10]
	0x14077eb2d: add r10, 5
	0x14077eb34: mov r13w, word ptr [r10]
	0x14077eb3e: add r13, rbp
	0x14077eb4f: pop rdi
Store VM_REG [EBP+0x26]
	0x14077eb50: mov qword ptr [r13], rdi
	0x14077eb98: mov r11, rbp
	0x14077eba9: mov r13, rbp
	0x14077ebb3: add r13, 0xab
	0x14077ebba: add r11, 0x145
Load [EBP+0xab](STATIC)
	0x14077ebc8: mov r13, qword ptr [r13]
Load [EBP+0x145](STATIC)
	0x14077ebda: mov r11, qword ptr [r11]
	0x14077ebdd: add r11, 3
	0x14077ebe4: movzx r11, word ptr [r11]
	0x14077ebe8: mov rbx, rbp
	0x14077ebf5: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077ec03: add r11d, dword ptr [rbx]
	0x14077ec0c: sub r11d, 0x774f9795
	0x14077ec1d: mov rax, rbp
	0x14077ec20: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ec34: add dword ptr [rax], r11d
	0x14077ec3e: and r11, 0xffff
	0x14077ec53: shl r11, 3
	0x14077ec57: add r13, r11
	0x14077ec5a: mov rax, qword ptr [r13]
	0x14077ec68: mov r12, rbp
	0x14077ec75: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408a0
	0x14077ec7c: add qword ptr [r12], 0xc
	0x14077ec84: jmp rax
handlers outputs:



basic block ends with ret
	0x140888ef1: mov r13, rbp
	0x140888f01: mov rcx, rbp
	0x140888f0b: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140888f15: mov r13, qword ptr [r13]
	0x140888f2a: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140888f38: mov rcx, qword ptr [rcx]
	0x140888f48: add rcx, 2
	0x140888f56: movzx rcx, word ptr [rcx]
	0x140888f5a: mov r10, rbp
	0x140888f64: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140888f6b: sub ecx, dword ptr [r10]
	0x140888f71: add ecx, 0x4ee50c77
	0x140888f77: mov r10, rbp
	0x140888f7a: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140888f96: xor dword ptr [r10], ecx
	0x140888fa0: and rcx, 0xffff
	0x140888fbc: shl rcx, 3
	0x140888fc7: add r13, rcx
	0x140888fd0: mov rbx, qword ptr [r13]
	0x140888fdb: mov r12, rbp
	0x140888fde: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140888fec: mov qword ptr [r12], rbx
	0x140888ff3: mov rcx, rbp
	0x140889000: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14088900e: mov rcx, qword ptr [rcx]
	0x140889018: add rcx, 0
	0x14088901f: movzx r10, word ptr [rcx]
	0x140889026: mov r8, rbp
	0x140889033: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088903a: xor r10d, dword ptr [r8]
	0x140889043: mov r8, rbp
	0x140889046: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140889057: xor r10d, dword ptr [r8]
	0x140889064: mov rdx, rbp
	0x14088906a: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140889071: or dword ptr [rdx], r10d
	0x1408890aa: mov r8, rbp
	0x1408890b0: add r8, 0x130
	0x1408890b7: mov r14, 0
Load [EBP+0x130](STATIC)
	0x1408890be: mov sil, byte ptr [r8]
	0x1408890c1: cmp sil, 0x66
	0x1408890c5: jbe 0x1408890d2
	0x1408890d9: mov rdx, rbp
	0x1408890e6: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408890f4: sub word ptr [rdx], r10w
	0x1408890fb: mov rbx, 0
	0x140889102: mov r8, rbp
	0x140889105: add r8, 0x145
	0x140889113: add r14, 0xf0
	0x14088911a: add r14, 4
Load [EBP+0x145](STATIC)
	0x140889121: mov r8, qword ptr [r8]
	0x140889124: add r8, 4
	0x14088912b: mov bx, word ptr [r8]
	0x140889136: or r14, 0x90
	0x140889144: mov r13, rbp
	0x140889147: mov rdx, 0x200
	0x14088914e: sub rdx, 4
	0x140889155: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088915c: xor ebx, dword ptr [r13]
	0x140889160: or r14, 0x88
	0x140889167: mov r13, rbp
	0x14088916a: and rdx, 4
	0x140889174: add r13, 0x120
	0x14088917b: add rdx, r10
Load [EBP+0x120](STATIC)
	0x14088918c: add ebx, dword ptr [r13]
	0x140889190: and r14, rdx
	0x14088919a: mov r11, rbp
	0x1408891a4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408891ab: xor dword ptr [r11], ebx
	0x1408891b1: mov r14, r14
	0x1408891c9: mov rax, rbp
	0x1408891d3: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408891e6: xor word ptr [rax], bx
	0x1408891f0: sub rcx, 0xf0
	0x1408891fe: mov rbx, rbp
	0x140889216: mov rdi, rbp
	0x140889220: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
	0x140889227: movzx rbx, word ptr [rbx]
	0x140889232: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140889239: movzx rdi, word ptr [rdi]
	0x14088923d: sub bx, 0xe299
	0x140889249: add rbx, rbp
	0x14088924c: mov rdx, rcx
	0x140889256: add di, 0xeecb
Load [EBP+0x15d](VM_REGISTER)
	0x140889262: mov rbx, qword ptr [rbx]
	0x140889268: add rdi, rbp
Store VM_REG [EBP+0xce]
	0x14088926b: mov byte ptr [rdi], bl
	0x14088926d: mov r12, 0x12
	0x140889274: or r11, 0x800
	0x14088927b: mov rax, 0x7be20f29
	0x140889282: add r11, -0x80000000
	0x140889289: xor r11, 0x40
	0x140889290: mov dl, 0xc1
	0x140889292: or r11, 0x80
	0x140889299: and rcx, r11
	0x14088929c: mov r9, rbp
	0x14088929f: and r12, r12
	0x1408892a2: sub r11, r10
	0x1408892a5: add r9, 0xa7
	0x1408892ac: mov rdi, 1
	0x1408892b3: add rdi, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408892ba: or dword ptr [r9], eax
	0x1408892bd: sub r11, 0x40
	0x1408892c4: sub r12, r9
	0x1408892c7: mov rsi, rbp
	0x1408892ca: xor rcx, 0x80
	0x1408892d1: mov r13, 0x400
	0x1408892d8: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408892df: add byte ptr [rsi], dl
	0x1408892e1: and r13, 0x400
	0x1408892e8: push 0x53e8dd48
	0x1408892ed: push 0x204a9d32
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((~(((~(((((0xffffffffffffff10 + bytecode) & 0xffffffffffffffff) >> 8) & 0xffffffffffffff)) & 0xffffffffffffff) | (~(((((0xffffffff80000000 + (((((((0xbf + context) & 0xffffffffffffffff) >> 12) & 0xfffffffffffff)) << 1 | 0x1) << 11 | ((0xbf + (context & 0x7ff)) & 0x7ff))) & 0xffffffffffffffff) >> 8) & 0xffffffffffffff)) & 0xffffffffffffff))) & 0xffffffffffffff)) << 1 | (~(((((0xffffffffffffff10 + bytecode) & 0xffffffffffffffff) >> 7) & 0x1)) & 0x1)) << 7 | (~(((~(((0x10 + (bytecode & 0x7f)) & 0x7f)) & 0x7f) | ((((((0xffffffff80000000 + (((((((0xbf + context) & 0xffffffffffffffff) >> 12) & 0xfffffffffffff)) << 1 | 0x1) << 11 | ((0xbf + (context & 0x7ff)) & 0x7ff))) & 0xffffffffffffffff) >> 6) & 0x1)) << 6 | (~(((0x3f + (context & 0x3f)) & 0x3f)) & 0x3f)))) & 0x7f))
	0x1408892f2: mov qword ptr [rsp], rcx
	0x1408892f6: mov rcx, rbp
	0x1408892f9: push rcx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1408892fa: pop qword ptr [rsp + 8]
	0x1408892fe: pop rcx
	0x1408892ff: push rcx
	0x140889300: movabs rcx, 0x777df78f
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x777df78f + context) & 0xffffffffffffffff)
	0x14088930a: add qword ptr [rsp + 8], rcx
	0x14088930f: pop rcx
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140889310: push qword ptr [rsp]
	0x140889313: pop rcx
	0x140889314: add rsp, 8
	0x14088931b: push 0x36b3634a
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x400
	0x140889320: mov qword ptr [rsp], r13
	0x140889324: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x4e95c296
	0x14088932b: mov qword ptr [rsp], r10
	0x14088932f: movabs r10, 0x7df3842b
	0x140889339: movabs r13, 0xd9d28868
	0x140889343: sub r13, 0xfff4b08
	0x14088934a: add r13, 0xfdfbc82
	0x140889351: sub r13, r10
	0x140889354: sub r13, 0xfdfbc82
	0x14088935b: add r13, 0xfff4b08
	0x140889362: pop r10
	0x140889364: push rdi
	0x140889365: movabs rdi, 0x7bef71dc
	0x14088936f: or rdi, 0x6ef3f5b2
	0x140889376: shr rdi, 2
	0x14088937a: push rbx
	0x14088937b: mov rbx, -0x1ffffd80
	0x140889382: add rdi, rbx
	0x140889385: pop rbx
	0x140889386: add r13, rdi
	0x140889389: pop rdi
	0x14088938a: and r13, 0x77791a51
	0x140889391: xor r13, 0x2c06c982
	0x140889398: xor r13, 0x8223e1d
	0x14088939f: sub rcx, r13
	0x1408893a2: push qword ptr [rsp]
	0x1408893a5: mov r13, qword ptr [rsp]
	0x1408893a9: add rsp, 8
	0x1408893ad: add rsp, 8
	0x1408893b1: push 0x53831122
	0x1408893b6: mov qword ptr [rsp], r13
	0x1408893ba: push 0x7bfdb3bc
	0x1408893bf: push 0x56caec53
	0x1408893c4: mov qword ptr [rsp], rdx
	0x1408893c8: pop qword ptr [rsp]
	0x1408893cb: movabs rdx, 0x7ffff2d2
	0x1408893d5: movabs r13, 0x7faf6004
	0x1408893df: add r13, 0xfffd442
	0x1408893e6: not r13
	0x1408893e9: push r13
	0x1408893eb: not qword ptr [rsp]
	0x1408893ef: mov r13, qword ptr [rsp]
	0x1408893f3: add rsp, 8
	0x1408893fa: push rsi
	0x1408893fb: movabs rsi, 0x39bfefc0
	0x140889405: not rsi
	0x140889408: push r11
	0x14088940a: movabs r11, 0xffffffff5dc0c20b
	0x140889414: sub rsi, r11
	0x140889417: pop r11
	0x140889419: sub r13, rsi
	0x14088941c: pop rsi
	0x14088941d: xor r13, 0x58d01585
	0x140889424: xor r13, rdx
	0x140889427: push qword ptr [rsp]
	0x14088942a: pop rdx
	0x14088942b: add rsp, 8
	0x14088942f: add rcx, 0x3ddcf974
	0x140889436: sub rcx, 0x1ddbc13c
	0x14088943d: add rcx, 0x7d9be400
	0x140889444: add rcx, r13
	0x140889447: sub rcx, 0x7d9be400
	0x14088944e: add rcx, 0x1ddbc13c
	0x140889455: sub rcx, 0x3ddcf974
	0x14088945c: push qword ptr [rsp]
	0x140889463: add rsp, 8
	0x140889467: push rsi
	0x140889468: mov rsi, rsp
	0x14088946b: add rsi, 8
	0x14088946f: add rsi, 8
	0x140889476: xor rsi, qword ptr [rsp]
	0x14088947a: xor qword ptr [rsp], rsi
	0x14088947e: xor rsi, qword ptr [rsp]
	0x140889482: pop rsp
	0x140889490: sub rsp, 8
	0x140889497: mov qword ptr [rsp], r11
	0x14088949b: movabs r11, 0x5fff1653
	0x1408894a5: sub r11, 0x6d750345
	0x1408894ac: and r11, 0x5d3f8469
	0x1408894b3: not r11
	0x1408894b6: shr r11, 2
	0x1408894ba: push 0x7a46b25b
	0x1408894bf: mov qword ptr [rsp], rcx
	0x1408894c3: movabs rcx, 0xc000000014028009
	0x1408894cd: add r11, rcx
unknown read addr: ff0 0xff0
	0x1408894d0: push qword ptr [rsp]
	0x1408894d3: pop rcx
	0x1408894d4: add rsp, 8
	0x1408894d8: push 0x725108ca
	0x1408894dd: mov qword ptr [rsp], r9
	0x1408894e1: push 0x3d265937
	0x1408894e6: mov qword ptr [rsp], r10
	0x1408894ea: sub rsp, 8
	0x1408894ee: mov qword ptr [rsp], rax
	0x1408894f8: pop rax
	0x1408894f9: push rbx
	0x1408894fa: movabs rbx, 0x3ee1aebe
	0x140889504: neg rbx
	0x140889507: push 0x33b853d8
	0x14088950c: mov qword ptr [rsp], rsi
	0x140889510: mov rsi, 0x3ee1aebe
	0x140889517: add rbx, rsi
	0x14088951a: pop rsi
	0x14088951b: mov qword ptr [rsp + 8], rbx
	0x140889520: pop rbx
	0x140889521: pop r9
	0x140889523: add r9, 0x73d13c81
	0x14088952a: add r9, rcx
	0x14088952d: sub r9, 0x73d13c81
Load [EBP+0x145](STATIC)
bytecode=0x1409408a6
	0x140889534: add qword ptr [r9], r11
	0x14088953b: add rsp, 8
	0x14088953f: push qword ptr [rsp]
	0x140889542: pop r11
	0x140889544: push rax
	0x140889545: mov rax, rsp
	0x140889548: add rax, 8
	0x14088954c: add rax, 8
	0x140889552: xchg qword ptr [rsp], rax
	0x140889556: pop rsp
	0x140889557: mov rcx, 0x2e909511
	0x14088955e: mov r8, rbp
	0x140889561: mov rbx, rbp
	0x140889564: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088956b: add dword ptr [r8], ecx
	0x14088956e: add rbx, 0xfd
Load [EBP+0xfd](STATIC)
	0x140889575: mov r8, qword ptr [rbx]
	0x140889578: push 0x6864c2b6
	0x14088957d: push rsi
	0x14088957e: sub rsp, 8
	0x140889582: mov qword ptr [rsp], rsp
	0x140889586: add qword ptr [rsp], 8
	0x14088958b: mov rsi, qword ptr [rsp]
	0x14088958f: add rsp, 8
	0x140889593: add rsi, 8
	0x140889597: push r8
	0x140889599: movabs r8, 0x7d5746df
	0x1408895a3: shl r8, 4
	0x1408895a7: xor r8, 0x3bed02c1
	0x1408895ae: not r8
	0x1408895b1: push r14
	0x1408895b3: movabs r14, 0xfffffff80172f58a
	0x1408895bd: sub r8, r14
	0x1408895c0: pop r14
	0x1408895c2: inc r8
	0x1408895c5: dec r8
	0x1408895c8: shr r8, 3
	0x1408895cc: push r12
	0x1408895ce: movabs r12, 0x7f0bf5d3
	0x1408895d8: or r12, 0x7ff73b00
	0x1408895df: inc r12
	0x1408895e2: not r12
	0x1408895e5: and r12, 0x1bff6258
	0x1408895ec: not r12
	0x1408895ef: push rcx
	0x1408895f0: mov rcx, -0x27bf5f35
	0x1408895f7: sub r12, rcx
	0x1408895fa: pop rcx
	0x1408895fb: or r12, 0x11cf6016
	0x140889602: push rbx
	0x140889603: movabs rbx, 0x4fea2649
	0x14088960d: and r12, rbx
	0x140889610: pop rbx
	0x140889611: xor r12, 0x3917f6de
	0x140889618: and r8, r12
	0x14088961b: pop r12
	0x14088961d: neg r8
	0x140889620: push rdx
	0x140889621: mov rdx, -0xfc5048
	0x140889628: sub r8, rdx
	0x14088962b: pop rdx
	0x14088962c: sub rsi, r8
	0x14088962f: push qword ptr [rsp]
	0x140889632: pop r8
	0x140889634: add rsp, 8
	0x14088963b: xchg qword ptr [rsp], rsi
	0x14088963f: pop rsp
	0x140889640: sub rsp, 8
	0x140889644: push 0x665b16ab
	0x140889649: push r8
	0x14088964b: pop qword ptr [rsp]
	0x14088964e: pop qword ptr [rsp]
	0x140889651: pop qword ptr [rsp]
	0x140889654: pop qword ptr [rsp]
	0x140889665: ret 0
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xce]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408b4
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408bc
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



basic block ends with indirect unconditional branch
	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408c6
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x140789824: mov r9, rbp
	0x140789827: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078982e: mov r9, qword ptr [r9]
	0x140789831: add r9, 6
	0x140789838: mov r10d, dword ptr [r9]
	0x14078983b: mov r9, rbp
	0x14078983e: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140789845: and dword ptr [r9], r10d
	0x140789859: mov r10, rbp
	0x140789863: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14078986a: mov r10, qword ptr [r10]
	0x14078986d: add r10, 0
	0x14078987a: movzx rdi, word ptr [r10]
	0x14078987e: mov r12, rbp
	0x14078988f: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407898a4: sub edi, dword ptr [r12]
	0x1407898af: mov rsi, rbp
	0x1407898bf: add rsi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407898d7: xor edi, dword ptr [rsi]
	0x1407898e0: mov r10, rbp
	0x1407898e3: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407898f3: xor dword ptr [r10], edi
	0x140789904: mov r11, rbp
	0x14078990d: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078991e: and dword ptr [r11], 0x1ba47718
	0x14078992c: mov r10, rbp
	0x140789940: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x14078994d: mov r14b, byte ptr [r10]
	0x140789950: cmp r14b, 0x8a
	0x140789954: jbe 0x140789975
	0x14078997b: mov rsi, rbp
	0x140789985: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078998f: xor word ptr [rsi], di
	0x140789995: mov rsi, 0
	0x1407899b1: mov r12, rbp
	0x1407899c4: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407899cb: mov r12, qword ptr [r12]
	0x1407899dc: add r12, 4
	0x1407899e3: mov si, word ptr [r12]
	0x1407899ef: mov rcx, rbp
	0x1407899f2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140789a00: xor esi, dword ptr [rcx]
	0x140789a05: mov r13, rbp
	0x140789a0f: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x140789a24: sub esi, dword ptr [r13]
	0x140789a39: mov r14, rbp
	0x140789a3c: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140789a4a: and dword ptr [r14], esi
	0x140789a54: mov rdi, rbp
	0x140789a5a: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140789a6e: add dword ptr [rdi], 0x4cbba78e
	0x140789a74: mov rbx, rbp
	0x140789a81: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140789a8f: add word ptr [rbx], si
	0x140789a92: mov r14, rbp
	0x140789a95: add r14, 0xa7
Load [EBP+0xa7](STATIC)
	0x140789a9c: mov r10d, dword ptr [r14]
	0x140789a9f: and r10d, 1
	0x140789aa6: mov rsi, rbp
	0x140789aa9: cmp r10d, 0
	0x140789ab0: je 0x140789ac7
	0x140789ac7: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140789ace: movzx rsi, word ptr [rsi]
	0x140789ad2: sub si, 0xfca7
	0x140789ad7: mov r9, rbp
	0x140789ada: add r9, 0xd6
	0x140789ae1: add rsi, rbp
Load [EBP+0xd6](STATIC)
	0x140789ae4: movzx r9, word ptr [r9]
	0x140789ae8: xor r9w, 0x4dd4
	0x140789aee: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140789af1: mov r9, qword ptr [r9]
Load [EBP+0x156](VM_REGISTER)
Store VM_REG [EBP+0x156]
	0x140789af4: xor byte ptr [rsi], r9b
	0x140789b28: mov rax, rbp
	0x140789b32: mov r9, rbp
	0x140789b38: add r9, 0x145
	0x140789b4d: add rax, 0xab
Load [EBP+0x145](STATIC)
	0x140789b61: mov r9, qword ptr [r9]
	0x140789b64: add r9, 2
Load [EBP+0xab](STATIC)
	0x140789b6e: mov rax, qword ptr [rax]
	0x140789b71: movzx r9, word ptr [r9]
	0x140789b75: mov rsi, rbp
	0x140789b86: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x140789b8d: sub r9d, dword ptr [rsi]
	0x140789b90: sub r9d, 0x2ba55da0
	0x140789ba5: mov rsi, rbp
	0x140789baf: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140789bb6: and dword ptr [rsi], r9d
	0x140789bc7: and r9, 0xffff
	0x140789bec: shl r9, 3
	0x140789bf7: add rax, r9
	0x140789c01: mov r9, qword ptr [rax]
	0x140789c15: mov rdi, rbp
	0x140789c22: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408d0
	0x140789c29: add qword ptr [rdi], 0xa
	0x140789c30: jmp r9
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408d6
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407fb958: mov rdi, rbp
	0x1407fb95b: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407fb96c: mov rdi, qword ptr [rdi]
	0x1407fb976: add rdi, 6
	0x1407fb97d: movzx r15, word ptr [rdi]
	0x1407fb981: mov rax, rbp
	0x1407fb984: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fb98a: add r15d, dword ptr [rax]
	0x1407fb99b: mov r14, rbp
	0x1407fb99e: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407fb9ac: add r15d, dword ptr [r14]
	0x1407fb9b2: mov rbx, rbp
	0x1407fb9b5: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fb9bc: add dword ptr [rbx], r15d
	0x1407fb9bf: mov rdx, rbp
	0x1407fb9c2: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fb9d3: or dword ptr [rdx], 0x2be1340e
	0x1407fb9dc: mov r8, rbp
	0x1407fb9df: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x1407fb9e6: mov cl, byte ptr [r8]
	0x1407fb9e9: cmp cl, 0xb9
	0x1407fb9ec: jbe 0x1407fba07
	0x1407fba07: mov rdx, rbp
	0x1407fba0d: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407fba14: xor word ptr [rdx], r15w
	0x1407fba18: mov r8, rbp
	0x1407fba22: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407fba29: mov r8, qword ptr [r8]
	0x1407fba2c: add r8, 1
	0x1407fba3d: movzx rdi, byte ptr [r8]
	0x1407fba41: mov r14, rbp
	0x1407fba44: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fba4b: xor edi, dword ptr [r14]
	0x1407fba7e: mov r8, rbp
	0x1407fba81: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fba92: add dword ptr [r8], edi
	0x1407fba9c: mov r13, rbp
	0x1407fbaad: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fbac2: and dword ptr [r13], 0x6a70d22c
	0x1407fbad4: mov r13, rbp
	0x1407fbade: add r13, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407fbae5: xor dword ptr [r13], edi
	0x1407fbb22: mov r8, rbp
	0x1407fbb38: mov rdx, rbp
	0x1407fbb47: add r8, 0x16e
	0x1407fbb5c: add rdx, 0x58
Load [EBP+0x16e](STATIC)
	0x1407fbb6a: movzx r8, word ptr [r8]
	0x1407fbb8d: xor r8w, 0x72b0
	0x1407fbb96: add r8, rbp
Load [EBP+0x58](STATIC)
	0x1407fbb9c: mov edx, dword ptr [rdx]
	0x1407fbba5: add edx, 0x19448503
Load [EBP+0xcf](VM_REGISTER)
	0x1407fbbab: test byte ptr [r8], dl
	0x1407fbbae: pushfq
	0x1407fbbb6: mov rcx, 0
	0x1407fbbcb: mov r8, rbp
	0x1407fbbce: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407fbbd5: mov r8, qword ptr [r8]
	0x1407fbbd8: add r8, 0
	0x1407fbbed: mov cl, byte ptr [r8]
	0x1407fbbf0: cmp cl, 0
	0x1407fbbf3: je 0x1407fbc43
	0x1407fbc00: mov r8, rbp
	0x1407fbc0d: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407fbc1e: mov r8, qword ptr [r8]
	0x1407fbc28: add r8, 2
	0x1407fbc2f: mov cx, word ptr [r8]
	0x1407fbc33: add rcx, rbp
	0x1407fbc36: pop r10
Store VM_REG [EBP+0x26]
	0x1407fbc38: mov qword ptr [rcx], r10
	0x1407fbc75: mov r9, rbp
	0x1407fbc78: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407fbc7f: mov r9, qword ptr [r9]
	0x1407fbc85: add r9, 4
	0x1407fbc8c: movzx r9, word ptr [r9]
	0x1407fbc9e: mov rbx, rbp
	0x1407fbca1: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1407fbca8: mov rbx, qword ptr [rbx]
	0x1407fbcb5: mov r12, rbp
	0x1407fbcc2: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fbccc: add r9d, dword ptr [r12]
	0x1407fbcd0: sub r9d, 0x5a6e6baa
	0x1407fbcda: mov r15, rbp
	0x1407fbce3: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fbced: and dword ptr [r15], r9d
	0x1407fbcf0: and r9, 0xffff
	0x1407fbd04: shl r9, 3
	0x1407fbd16: add rbx, r9
	0x1407fbd27: mov r9, qword ptr [rbx]
	0x1407fbd31: mov r14, rbp
	0x1407fbd3e: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408de
	0x1407fbd45: add qword ptr [r14], 8
	0x1407fbd4c: jmp r9
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088ecfb: mov rdx, rbp
	0x14088ed13: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088ed1a: mov rdx, qword ptr [rdx]
	0x14088ed27: add rdx, 2
	0x14088ed2e: movzx rcx, word ptr [rdx]
	0x14088ed5a: mov r8, rbp
	0x14088ed67: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x14088ed71: xor ecx, dword ptr [r8]
	0x14088ed82: mov r11, rbp
	0x14088ed8b: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088eda6: and dword ptr [r11], ecx
	0x14088edcf: mov r14, rbp
	0x14088edd9: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x14088ede0: mov r15b, byte ptr [r14]
	0x14088ede3: cmp r15b, 0x14
	0x14088ede7: jbe 0x14088ee04
	0x14088edf7: sub ecx, 0x7eb03daf
	0x14088ee0d: mov r11, rbp
	0x14088ee17: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088ee2b: xor word ptr [r11], cx
	0x14088ee51: mov rax, 0
	0x14088ee5f: mov rsi, rbp
	0x14088ee73: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088ee88: mov rsi, qword ptr [rsi]
	0x14088ee92: add rsi, 4
	0x14088ee99: mov ax, word ptr [rsi]
	0x14088eecf: mov r10, rbp
	0x14088eee0: add r10, 0x120
Load [EBP+0x120](STATIC)
	0x14088eee7: xor eax, dword ptr [r10]
	0x14088eeea: mov r10, rbp
	0x14088eeed: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088eef4: and dword ptr [r10], eax
	0x14088ef01: mov r8, rbp
	0x14088ef12: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088ef1c: sub dword ptr [r8], 0x2c70890f
	0x14088ef31: mov rcx, rbp
	0x14088ef45: add rcx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14088ef5a: add word ptr [rcx], ax
	0x14088ef64: mov rax, rbp
	0x14088ef67: mov r10, rbp
	0x14088ef74: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x14088ef89: movzx r10, word ptr [r10]
	0x14088ef97: add r10, rbp
	0x14088efa1: add rax, 0xd6
Load [EBP+0xd6](STATIC)
	0x14088efb1: movzx rax, word ptr [rax]
	0x14088efcd: add rax, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14088efe1: mov rax, qword ptr [rax]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x14088eff9: xor word ptr [r10], ax
	0x14088f009: mov sil, 0x3a
	0x14088f013: mov r13, rbp
	0x14088f01f: add r13, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088f034: or byte ptr [r13], sil
	0x14088f04c: mov r13, rbp
	0x14088f052: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14088f05c: mov r13, qword ptr [r13]
	0x14088f066: mov r8, rbp
	0x14088f069: add r13, 0
	0x14088f070: add r8, 0xab
	0x14088f077: movzx r13, word ptr [r13]
Load [EBP+0xab](STATIC)
	0x14088f082: mov r8, qword ptr [r8]
	0x14088f09f: add r13d, 0x4643fcc7
	0x14088f0a6: mov rbx, rbp
	0x14088f0b3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088f0ba: xor dword ptr [rbx], r13d
	0x14088f0d1: and r13, 0xffff
	0x14088f0ea: shl r13, 3
	0x14088f103: add r8, r13
	0x14088f114: mov r11, qword ptr [r8]
	0x14088f11a: mov rcx, rbp
	0x14088f11d: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408e4
	0x14088f124: add qword ptr [rcx], 6
	0x14088f12b: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x14087f071: mov rdx, rbp
	0x14087f085: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14087f09a: mov rdx, qword ptr [rdx]
	0x14087f09d: add rdx, 5
	0x14087f0a4: movzx rcx, word ptr [rdx]
	0x14087f0ae: mov rdx, rbp
	0x14087f0c6: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087f0cd: add ecx, dword ptr [rdx]
	0x14087f0d9: mov r13, rbp
	0x14087f0e3: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x14087f0ea: xor ecx, dword ptr [r13]
	0x14087f0fb: mov rdi, rbp
	0x14087f0fe: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087f11a: and dword ptr [rdi], ecx
	0x14087f123: mov rdi, rbp
	0x14087f130: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087f13e: sub dword ptr [rdi], 0x4d96b9ba
	0x14087f154: mov r8, rbp
	0x14087f16b: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x14087f183: mov r12b, byte ptr [r8]
	0x14087f186: cmp r12b, 0xae
	0x14087f18a: jbe 0x14087f1a2
	0x14087f1a2: mov r9, rbp
	0x14087f1a5: add r9, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14087f1ba: xor word ptr [r9], cx
	0x14087f1cb: mov r11, 0
	0x14087f1e7: mov r14, rbp
	0x14087f1ea: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14087f205: mov r14, qword ptr [r14]
	0x14087f208: add r14, 0
	0x14087f20f: mov r11w, word ptr [r14]
	0x14087f220: mov r9, rbp
	0x14087f22a: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087f231: xor r11d, dword ptr [r9]
	0x14087f242: mov r13, rbp
	0x14087f245: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x14087f253: sub r11d, dword ptr [r13]
	0x14087f257: mov r13, rbp
	0x14087f261: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087f26f: or dword ptr [r13], r11d
	0x14087f27f: mov rbx, rbp
	0x14087f297: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087f2a8: or dword ptr [rbx], 0x72f55562
	0x14087f2bc: mov r8, rbp
	0x14087f2c6: add r8, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14087f2d4: add word ptr [r8], r11w
	0x14087f2d8: mov r13, rbp
	0x14087f2db: mov rbx, rbp
	0x14087f2de: add r13, 0xd6
	0x14087f2e5: mov r15, rbp
	0x14087f2e8: add r15, 0x16e
Load [EBP+0x16e](STATIC)
	0x14087f2ef: movzx r15, word ptr [r15]
Load [EBP+0xd6](STATIC)
	0x14087f2f3: movzx r13, word ptr [r13]
	0x14087f2f8: sub r13w, 0x498f
	0x14087f2fe: add rbx, 0xbf
	0x14087f305: add r13, rbp
	0x14087f308: add r15, rbp
Load [EBP+0xcf](VM_REGISTER)
	0x14087f30b: mov r13, qword ptr [r13]
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087f30f: sub dword ptr [rbx], 0x7f54dfc4
Load [EBP+0x156](VM_REGISTER)
Store VM_REG [EBP+0x156]
	0x14087f315: add byte ptr [r15], r13b
	0x14087f318: pushfq
	0x14087f319: mov r10, rbp
	0x14087f31c: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087f323: or dword ptr [r10], 0x6771fc02
	0x14087f33a: mov rdx, 0
	0x14087f363: mov r10, rbp
	0x14087f37e: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14087f385: mov r10, qword ptr [r10]
	0x14087f3ae: add r10, 4
	0x14087f3c2: mov dl, byte ptr [r10]
	0x14087f3c5: cmp dl, 0
	0x14087f3c8: je 0x14087f427
	0x14087f3d5: mov r10, rbp
	0x14087f3e2: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14087f3e9: mov r10, qword ptr [r10]
	0x14087f401: add r10, 2
	0x14087f408: mov dx, word ptr [r10]
	0x14087f413: add rdx, rbp
	0x14087f41d: pop r11
Store VM_REG [EBP+0x26]
	0x14087f41f: mov qword ptr [rdx], r11
	0x14087f478: mov r14, rbp
	0x14087f47b: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x14087f490: mov r14, qword ptr [r14]
	0x14087f493: mov r9, rbp
	0x14087f49d: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14087f4ae: mov r9, qword ptr [r9]
	0x14087f4b8: add r9, 7
	0x14087f4c9: movzx r9, word ptr [r9]
	0x14087f4cd: mov rdi, rbp
	0x14087f4d7: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087f4e8: sub r9d, dword ptr [rdi]
	0x14087f4fc: sub r9d, 0x157534a
	0x14087f518: mov rbx, rbp
	0x14087f51b: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087f530: xor dword ptr [rbx], r9d
	0x14087f541: and r9, 0xffff
	0x14087f55d: shl r9, 3
	0x14087f56b: add r14, r9
	0x14087f56e: mov r13, qword ptr [r14]
	0x14087f578: mov r12, rbp
	0x14087f57b: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408ed
	0x14087f582: add qword ptr [r12], 9
	0x14087f58a: jmp r13
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409408f5
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x140871faf: mov r11, rbp
	0x140871fb2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140871fce: mov r11, qword ptr [r11]
	0x140871fd1: add r11, 0xb
	0x140871fdf: movzx r10, word ptr [r11]
	0x140871fe6: mov rsi, rbp
	0x140871ff9: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087200a: add r10d, dword ptr [rsi]
	0x14087200d: mov rdi, rbp
	0x140872017: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14087201e: xor r10d, dword ptr [rdi]
	0x14087202d: mov r11, rbp
	0x14087203e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872059: or dword ptr [r11], r10d
	0x14087205c: mov rcx, rbp
	0x14087206f: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872087: add dword ptr [rcx], 0x1e759f86
	0x14087208d: mov rcx, rbp
	0x140872090: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1408720a5: mov dl, byte ptr [rcx]
	0x1408720a7: cmp dl, 0xc1
	0x1408720aa: jbe 0x1408720c4
	0x1408720c4: mov rax, rbp
	0x1408720d4: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408720ef: add word ptr [rax], r10w
	0x1408720f3: mov rsi, rbp
	0x1408720f6: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087210e: mov rsi, qword ptr [rsi]
	0x140872114: add rsi, 1
	0x14087211b: mov edx, dword ptr [rsi]
	0x140872127: mov r15, rbp
	0x14087213a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087214f: xor edx, dword ptr [r15]
	0x140872159: mov rcx, rbp
	0x14087215c: or rsi, 0x800
	0x14087216d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x140872189: xor edx, dword ptr [rcx]
	0x140872195: mov r13, rbp
	0x1408721a2: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408721ac: add dword ptr [r13], edx
	0x1408721c1: mov rcx, rbp
	0x1408721ca: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408721d1: add dword ptr [rcx], 0x569676f7
	0x1408721de: mov r12, rbp
	0x1408721e1: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408721f2: sub dword ptr [r12], edx
	0x140872217: mov rcx, rbp
	0x14087221a: mov r9, 0x2ef0f74e
	0x140872221: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x140872228: movzx rcx, word ptr [rcx]
	0x14087222c: mov r8, rbp
	0x14087222f: mov r15, rbp
	0x140872232: add r8, 0x58
	0x140872239: add cx, 0x40cc
Load [EBP+0x58](STATIC)
	0x14087223e: mov r8d, dword ptr [r8]
	0x140872241: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872248: and dword ptr [r15], r9d
	0x14087224b: add rcx, rbp
	0x14087224e: sub r8d, 0x3712a838
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140872255: sub qword ptr [rcx], r8
	0x140872258: pushfq
	0x140872259: mov r10, rbp
	0x14087225c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140872263: mov r10, qword ptr [r10]
	0x140872266: add r10, 9
	0x14087226d: movzx r11, word ptr [r10]
	0x140872271: add r11, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140872274: mov r11, qword ptr [r11]
	0x140872277: xor rsi, r11
	0x14087227a: pushfq
	0x1408722a4: pop rsi
	0x1408722a5: mov r15, 0
	0x1408722b6: mov rdx, rbp
	0x1408722bc: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408722d8: mov rdx, qword ptr [rdx]
	0x1408722e2: add rdx, 0
	0x1408722f3: mov r15b, byte ptr [rdx]
	0x1408722f6: cmp r15b, 0
	0x1408722fa: je 0x14087237a
	0x14087230e: mov rdx, rbp
	0x140872317: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140872328: mov rdx, qword ptr [rdx]
	0x140872339: add rdx, 0xd
	0x140872343: mov r15w, word ptr [rdx]
	0x14087235c: add r15, rbp
	0x140872366: pop r13
Store VM_REG [EBP+0x26]
	0x140872368: mov qword ptr [r15], r13
	0x1408723c8: mov r12, rbp
	0x1408723cb: mov rdi, rbp
	0x1408723d5: add rdi, 0xab
	0x1408723dc: add r12, 0x145
Load [EBP+0xab](STATIC)
	0x1408723ea: mov rdi, qword ptr [rdi]
Load [EBP+0x145](STATIC)
	0x1408723f0: mov r12, qword ptr [r12]
	0x1408723fe: add r12, 7
	0x14087240c: movzx r12, word ptr [r12]
	0x140872422: mov r9, rbp
	0x14087242c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087243a: add r12d, dword ptr [r9]
	0x140872450: sub r12d, 0x72d7c606
	0x140872457: mov rbx, rbp
	0x14087245d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872464: and dword ptr [rbx], r12d
	0x14087246e: and r12, 0xffff
	0x14087247f: shl r12, 3
	0x140872494: add rdi, r12
	0x140872497: mov rbx, qword ptr [rdi]
	0x1408724a7: mov r9, rbp
	0x1408724b4: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940904
	0x1408724bb: add qword ptr [r9], 0xf
	0x1408724c2: jmp rbx
handlers outputs:



basic block ends with indirect unconditional branch
	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940914
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



basic block ends with ret
	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094091a
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



basic block ends with ret
	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x155](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x97]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x7)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x1)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x7)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x1)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x140940926
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



basic block ends with ret
	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t262
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a47950
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a4795c
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140940932
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094093a
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407fd9e8: mov rbx, 0
	0x1407fd9fd: mov rcx, rbp
	0x1407fda10: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407fda28: mov rcx, qword ptr [rcx]
	0x1407fda31: add rcx, 0
	0x1407fda3e: mov bx, word ptr [rcx]
	0x1407fda41: mov rsi, rbp
	0x1407fda51: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fda5f: sub ebx, dword ptr [rsi]
	0x1407fdaa8: mov r15, rbp
	0x1407fdab1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdac5: sub dword ptr [r15], ebx
	0x1407fdad6: mov rcx, rbp
	0x1407fdae6: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fdb02: and dword ptr [rcx], 0x647be2f7
	0x1407fdb16: mov rcx, rbp
	0x1407fdb2e: add rcx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407fdb3b: add word ptr [rcx], bx
	0x1407fdb71: mov r8, rbp
	0x1407fdb74: mov r15, rbp
	0x1407fdb85: add r15, 0xab
	0x1407fdb8c: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407fdb9a: mov r8, qword ptr [r8]
	0x1407fdba0: add r8, 2
Load [EBP+0xab](STATIC)
	0x1407fdbaa: mov r15, qword ptr [r15]
	0x1407fdbbe: movzx r8, word ptr [r8]
	0x1407fdbc9: mov r10, rbp
	0x1407fdbcc: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fdbe8: sub r8d, dword ptr [r10]
	0x1407fdbf5: mov rdx, rbp
	0x1407fdbfb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdc0f: and dword ptr [rdx], r8d
	0x1407fdc19: and r8, 0xffff
	0x1407fdc34: shl r8, 3
	0x1407fdc38: add r15, r8
	0x1407fdc3b: mov r8, qword ptr [r15]
	0x1407fdc3e: mov r13, rbp
	0x1407fdc4f: add r13, 0xfd
Store [EBP+0xfd](STATIC)
	0x1407fdc67: mov qword ptr [r13], r8
	0x1407fdc6b: mov rsi, rbp
	0x1407fdc75: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407fdc86: mov rsi, qword ptr [rsi]
	0x1407fdc96: add rsi, 6
	0x1407fdc9d: movzx rdx, word ptr [rsi]
	0x1407fdca7: mov r14, rsi
	0x1407fdcaa: mov rcx, rbp
	0x1407fdcc2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fdcd7: sub edx, dword ptr [rcx]
	0x1407fdce0: mov rcx, 0x400
	0x1407fdce7: mov r15, rbp
	0x1407fdcf0: or rcx, 0x78
	0x1407fdcf7: add r15, 0xf0
	0x1407fdd05: sub rcx, r14
Load [EBP+0xf0](STATIC)
	0x1407fdd08: sub edx, dword ptr [r15]
	0x1407fdd18: mov rbx, rbp
	0x1407fdd22: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdd33: sub dword ptr [rbx], edx
	0x1407fdd35: mov r13, rbp
	0x1407fdd3b: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fdd49: add dword ptr [r13], 0x523132f7
	0x1407fdd51: and rcx, rbx
	0x1407fdd5b: mov r15, rbp
	0x1407fdd65: and rcx, 0x80
	0x1407fdd73: add r15, 0x130
	0x1407fdd81: or rcx, rdx
	0x1407fdd84: mov rax, 0x12
Load [EBP+0x130](STATIC)
	0x1407fdd8b: mov bl, byte ptr [r15]
	0x1407fdd8e: cmp bl, 7
	0x1407fdd91: jbe 0x1407fddb4
	0x1407fdda1: sub edx, 0x3928b11e
	0x1407fddaa: or rax, rcx
	0x1407fddb4: mov r10, rbp
	0x1407fddb7: sub rcx, 0x80
	0x1407fddc5: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407fddd3: sub word ptr [r10], dx
	0x1407fddd7: mov r14, rbp
	0x1407fddda: mov r12, rbp
	0x1407fdddd: add r14, 0x145
	0x1407fdde4: mov r15, rbp
	0x1407fdde7: add r12, 0x16e
Load [EBP+0x145](STATIC)
	0x1407fddee: mov r14, qword ptr [r14]
Load [EBP+0x16e](STATIC)
	0x1407fddf1: movzx r12, word ptr [r12]
	0x1407fddf6: add r14, 4
	0x1407fddfd: movzx r11, word ptr [r14]
	0x1407fde01: add r11, rbp
	0x1407fde04: xor r12w, 0x57c9
	0x1407fde0a: add r15, 0xd6
Load [EBP+0xb7](VM_REGISTER)
	0x1407fde11: mov r11, qword ptr [r11]
Load [EBP+0xd6](STATIC)
	0x1407fde14: movzx r15, word ptr [r15]
	0x1407fde18: add r12, rbp
	0x1407fde1b: add r15, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407fde1e: mov r15, qword ptr [r15]
Load [EBP+0x14d](VM_REGISTER)
	0x1407fde21: mov r12, qword ptr [r12]
	0x1407fde25: mov qword ptr [r12], r15
	0x1407fde29: or r11, 0xffffffff80000000
	0x1407fde30: and r11, 0x400
	0x1407fde41: add r11, r10
	0x1407fde44: and r13, r10
	0x1407fde55: and rcx, 0xffff
	0x1407fde66: add rcx, r10
	0x1407fde69: mov r9, 0x400
	0x1407fde77: sub rcx, 0x7fffffff
	0x1407fde7e: or rcx, r10
	0x1407fde8f: push 0x7aa69978
	0x1407fde94: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407fde95: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1407fde98: push qword ptr [rsp]
	0x1407fde9b: pop rdi
	0x1407fde9c: push 0x6bfcfcef
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0xffffffff8000016f + ((0x0) << 16 | ((0xff80 + (((0x3) << 3 | (~((((~(((((0x472 + ((0xffffffffffffffff * bytecode) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 6) & 0x7)) & 0x7) | (~(((((0xbf + context) & 0xffffffffffffffff) >> 6) & 0x7)) & 0x7)) | 0x5)) & 0x7)) << 6 | 0x35)) & 0xffff))) & 0xffffffffffffffff) + context) & 0xffffffffffffffff) | ((0x16e + context) & 0xffffffffffffffff))
	0x1407fdea1: mov qword ptr [rsp], rcx
	0x1407fdea5: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x1407fdea9: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407fdead: add qword ptr [rsp], 8
	0x1407fdeb2: pop rcx
	0x1407fdeb3: add rcx, 8
	0x1407fdeb7: push r10
	0x1407fdeb9: movabs r10, 0x75bf5845
	0x1407fdec3: add r10, 0x79f660c7
	0x1407fdeca: not r10
	0x1407fdecd: sub r10, 0x77fee9f5
	0x1407fded4: push rax
	0x1407fded5: movabs rax, 0x3f5bc9d4
	0x1407fdedf: add rax, 0x7f990f12
	0x1407fdee5: sub rax, 0x2fe59058
	0x1407fdeeb: xor rax, 0x7e777880
	0x1407fdef1: push rbx
	0x1407fdef2: movabs rbx, 0xffffffff33fdb2f5
	0x1407fdefc: add rax, rbx
	0x1407fdeff: pop rbx
	0x1407fdf00: xor r10, rax
	0x1407fdf03: pop rax
	0x1407fdf04: push rcx
	0x1407fdf05: movabs rcx, 0xfffffffebd3ebff5
	0x1407fdf0f: sub r10, rcx
	0x1407fdf12: pop rcx
	0x1407fdf13: sub rcx, 0x67e23f6f
	0x1407fdf1a: add rcx, r10
	0x1407fdf1d: add rcx, 0x67e23f6f
	0x1407fdf24: pop r10
	0x1407fdf26: sub rsp, 8
	0x1407fdf2a: mov qword ptr [rsp], rcx
	0x1407fdf2e: push qword ptr [rsp + 8]
	0x1407fdf36: push rdi
	0x1407fdf37: mov rdi, rsp
	0x1407fdf3a: add rdi, 8
	0x1407fdf3e: add rdi, 8
	0x1407fdf45: push rdi
	0x1407fdf46: push qword ptr [rsp + 8]
	0x1407fdf4a: push qword ptr [rsp]
	0x1407fdf4d: pop rdi
	0x1407fdf4e: add rsp, 8
	0x1407fdf52: pop qword ptr [rsp]
	0x1407fdf55: pop rsp
	0x1407fdf56: pop qword ptr [rsp]
	0x1407fdf59: mov rsp, qword ptr [rsp]
	0x1407fdf5d: add r9, 0x400
	0x1407fdf67: mov r10, rbp
	0x1407fdf6a: push 0x378a487b
	0x1407fdf6f: push r10
	0x1407fdf71: pop qword ptr [rsp]
	0x1407fdf74: push rdi
	0x1407fdf75: push rax
	0x1407fdf76: movabs rax, 0x7cf2d391
	0x1407fdf80: shr rax, 4
	0x1407fdf84: shr rax, 3
	0x1407fdf88: or rax, 0x1dad2941
	0x1407fdf8e: shr rax, 1
	0x1407fdf92: not rax
	0x1407fdf95: push rdi
	0x1407fdf96: mov rdi, -0x7b38e423
	0x1407fdf9d: sub rax, rdi
	0x1407fdfa0: pop rdi
	0x1407fdfa1: push rbx
	0x1407fdfa2: movabs rbx, 0x1b466a1a
	0x1407fdfac: movabs rdi, 0x87805684
	0x1407fdfb6: sub rdi, rbx
	0x1407fdfb9: push qword ptr [rsp]
	0x1407fdfbc: pop rbx
	0x1407fdfbd: add rsp, 8
	0x1407fdfc1: xor rdi, rax
	0x1407fdfc4: pop rax
	0x1407fdfc5: push 0x7d0473fb
	0x1407fdfca: push r14
	0x1407fdfcc: pop qword ptr [rsp]
	0x1407fdfcf: push 0x13167231
	0x1407fdfd4: mov qword ptr [rsp], rdi
	0x1407fdfd8: pop r14
	0x1407fdfda: mov r10, r14
	0x1407fdfdd: pop r14
	0x1407fdfdf: mov rdi, qword ptr [rsp]
	0x1407fdfe3: add rsp, 8
	0x1407fdfea: sub rdi, 0x6aa21911
	0x1407fdff1: sub rdi, 0x7b7cbc02
	0x1407fdff8: add rdi, r10
	0x1407fdffb: add rdi, 0x7b7cbc02
	0x1407fe002: add rdi, 0x6aa21911
	0x1407fe009: mov r10, qword ptr [rsp]
	0x1407fe00d: push r14
	0x1407fe00f: mov r14, rsp
	0x1407fe012: add r14, 8
	0x1407fe016: add r14, 8
	0x1407fe01d: push r14
	0x1407fe01f: push qword ptr [rsp + 8]
	0x1407fe023: pop r14
	0x1407fe025: pop qword ptr [rsp]
	0x1407fe028: pop rsp
	0x1407fe029: xor r9, r10
	0x1407fe02c: mov r12, r9
	0x1407fe02f: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407fe036: mov r8, qword ptr [r10]
	0x1407fe039: xor r12, r8
	0x1407fe03c: and r11, rbx
	0x1407fe03f: and r12, 0x90
	0x1407fe046: xor r8, 0x2bc7a80c
	0x1407fe054: push 0x6a4359e0
	0x1407fe059: mov qword ptr [rsp], r10
	0x1407fe05d: movabs r10, 0x7fdf8bc3
	0x1407fe067: shr r10, 4
	0x1407fe06b: push r11
	0x1407fe06d: mov r11, rsp
	0x1407fe070: add r11, 8
	0x1407fe074: sub r11, 8
	0x1407fe07b: xor r11, qword ptr [rsp]
	0x1407fe07f: xor qword ptr [rsp], r11
	0x1407fe087: mov rsp, qword ptr [rsp]
	0x1407fe08b: push r12
unknown read addr: fe8 ((0xfffffffffffffff8 + t280) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: t280, simplified_source_node: (((((0x0) << 1 | (~(((context >> 7) & 0x1)) & 0x1)) << 2 | 0x0) << 1 | ((context >> 4) & 0x1)) << 4 | 0x0)
	0x1407fe08d: pop qword ptr [rsp]
	0x1407fe090: push r13
	0x1407fe092: movabs r13, 0x7fdf8b4
	0x1407fe09c: push rdi
	0x1407fe09d: mov rdi, r13
	0x1407fe0a0: push rdi
unknown read addr: fd8 ((0xffffffffffffffe8 + t280) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffe8 + t280) & 0xffffffffffffffff), simplified_source_node: 0x577d3cb4
	0x1407fe0a1: add qword ptr [rsp], 0x4f7f4400
unknown read addr: fd8 ((0xffffffffffffffe8 + t280) & 0xffffffffffffffff)
	0x1407fe0a9: mov r12, qword ptr [rsp]
	0x1407fe0ad: add rsp, 8
	0x1407fe0b1: sub r12, 0x4f7f4400
	0x1407fe0b8: pop rdi
	0x1407fe0bd: add rsp, 8
	0x1407fe0c1: xor r10, r12
	0x1407fe0c4: pop r12
Load [EBP+0x145](STATIC)
bytecode=0x125a1c92b
	0x1407fe0c6: sub qword ptr [rdi], 0x1af2400f
Load [EBP+0x145](STATIC)
bytecode=0xbdae10d9
	0x1407fe0cd: sub qword ptr [rdi], 0x67f3b852
Load [EBP+0x145](STATIC)
bytecode=0x115299b1c
	0x1407fe0d4: add qword ptr [rdi], 0x577b8a43
Load [EBP+0x145](STATIC)
bytecode=0x115299b24
	0x1407fe0db: add qword ptr [rdi], r10
Load [EBP+0x145](STATIC)
bytecode=0xbdae10e1
	0x1407fe0de: sub qword ptr [rdi], 0x577b8a43
Load [EBP+0x145](STATIC)
bytecode=0x125a1c933
	0x1407fe0e5: add qword ptr [rdi], 0x67f3b852
Load [EBP+0x145](STATIC)
bytecode=0x140940942
	0x1407fe0ec: add qword ptr [rdi], 0x1af2400f
unknown read addr: ff8 ((0x8 + t280) & 0xffffffffffffffff)
	0x1407fe0f3: push qword ptr [rsp]
unknown read addr: ff0 t280
	0x1407fe0f6: push qword ptr [rsp]
	0x1407fe0f9: pop r10
	0x1407fe0fb: add rsp, 8
	0x1407fe102: add rsp, 8
	0x1407fe106: push r8
	0x1407fe126: pop r12
	0x1407fe128: xor r12, 0x2bc7a80c
	0x1407fe12f: jmp r12
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89f2: xor ebx, 0x3c650d1
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x97]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094094a
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407753a0: mov rax, rbp
	0x1407753a3: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407753a9: mov rax, qword ptr [rax]
	0x1407753bd: add rax, 4
	0x1407753c3: movzx r12, word ptr [rax]
	0x1407753d8: mov r9, rbp
	0x1407753e1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407753f2: sub r12d, dword ptr [r9]
	0x140775406: mov r10, rbp
	0x140775417: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x140775425: add r12d, dword ptr [r10]
	0x140775428: mov r10, rbp
	0x14077542b: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140775440: add dword ptr [r10], r12d
	0x140775478: mov rcx, rbp
	0x14077547b: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140775489: mov r10b, byte ptr [rcx]
	0x14077548c: cmp r10b, 0x48
	0x140775490: jbe 0x1407754a0
	0x1407754b4: mov r13, rbp
	0x1407754b7: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407754cc: add word ptr [r13], r12w
	0x1407754db: mov rcx, rbp
	0x1407754de: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407754e5: mov rcx, qword ptr [rcx]
	0x1407754f9: add rcx, 6
	0x140775511: mov r9d, dword ptr [rcx]
	0x140775544: mov rdi, rbp
	0x140775555: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140775571: add r9d, dword ptr [rdi]
	0x140775582: mov r15, rbp
	0x140775585: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077559a: add dword ptr [r15], r9d
	0x1407755b2: mov rax, rbp
	0x1407755b5: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407755bb: xor dword ptr [rax], 0x10f93f15
	0x1407755cb: mov r12, rbp
	0x1407755d5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407755e6: add dword ptr [r12], r9d
	0x1407755ff: mov rdx, rbp
	0x140775602: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140775609: sub dword ptr [rdx], r9d
	0x14077561d: mov r15, rbp
	0x140775623: mov rdx, rbp
	0x140775626: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077562d: movzx rdx, word ptr [rdx]
	0x140775631: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14077563e: mov r15d, dword ptr [r15]
	0x14077566b: add rdx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14077566e: sub qword ptr [rdx], r15
	0x140775671: pushfq
	0x14077567c: mov r12, 0
	0x14077568a: mov rsi, rbp
	0x14077569e: mov rbx, rbp
	0x1407756ab: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407756b5: mov rbx, qword ptr [rbx]
	0x1407756c6: add rbx, 0xa
	0x1407756e2: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407756f0: mov r15d, dword ptr [rsi]
	0x1407756fa: mov r12b, byte ptr [rbx]
	0x1407756fd: cmp r12b, 0
	0x140775701: je 0x140775770
	0x140775707: mov rbx, rbp
	0x14077570a: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140775722: mov rbx, qword ptr [rbx]
	0x140775725: add rbx, 2
	0x14077573d: mov r12w, word ptr [rbx]
	0x14077574f: add r12, rbp
	0x140775755: pop rcx
Store VM_REG [EBP+0x26]
	0x140775756: mov qword ptr [r12], rcx
	0x14077579d: and r15d, 1
	0x1407757a4: cmp r15d, 0
	0x1407757ab: je 0x1407757d6
	0x1407757b8: mov rsi, rbp
	0x1407757bb: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407757d0: and dword ptr [rsi], 0x22dc62d3
	0x1407757e7: mov r13b, 0xdb
	0x1407757fb: mov r11, rbp
	0x14077580b: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140775819: add byte ptr [r11], r13b
	0x14077582d: mov rsi, rbp
	0x14077583e: mov r15, rbp
	0x14077584f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140775856: mov r15, qword ptr [r15]
	0x140775859: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140775860: mov rsi, qword ptr [rsi]
	0x140775863: add rsi, 0
	0x14077586d: movzx rsi, word ptr [rsi]
	0x140775871: mov r14, rbp
	0x140775877: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140775885: xor esi, dword ptr [r14]
	0x140775888: xor esi, 0x1ebd7866
	0x140775895: mov r10, rbp
	0x1407758a5: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407758bd: sub dword ptr [r10], esi
	0x1407758c0: and rsi, 0xffff
	0x1407758df: shl rsi, 3
	0x1407758e3: add r15, rsi
	0x1407758e9: mov r8, qword ptr [r15]
	0x1407758f3: mov rcx, rbp
	0x140775900: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940955
	0x140775907: add qword ptr [rcx], 0xb
	0x14077590e: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0x155](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940961
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407e1334: mov r14, rbp
	0x1407e1337: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e133e: xor dword ptr [r14], 0x3477f352
	0x1407e1345: mov r11, rbp
	0x1407e1348: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e134f: or dword ptr [r11], 0x7e323802
	0x1407e1356: mov r15, rbp
	0x1407e136e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e137c: mov r15, qword ptr [r15]
	0x1407e137f: add r15, 4
	0x1407e1393: mov esi, dword ptr [r15]
	0x1407e13a3: mov r14, rbp
	0x1407e13a6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e13bb: sub esi, dword ptr [r14]
	0x1407e13c1: mov r13, rbp
	0x1407e13d1: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407e13df: xor esi, dword ptr [r13]
	0x1407e140f: mov r12, rbp
	0x1407e141f: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1426: xor dword ptr [r12], 0x5cfc2cec
	0x1407e1438: mov rcx, rbp
	0x1407e144c: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407e1453: add dword ptr [rcx], esi
	0x1407e1455: mov r13, 0x12
	0x1407e145f: mov rax, rbp
	0x1407e1477: add rax, 0x120
	0x1407e147d: and r13, 0x20
	0x1407e1484: sub r13, 0x40
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407e148b: add dword ptr [rax], esi
	0x1407e1493: mov r9, rbp
	0x1407e14aa: add r9, 0x58
Load [EBP+0x58](STATIC)
	0x1407e14bb: mov r13d, dword ptr [r9]
	0x1407e14c5: xor r13d, 0x2bbdd85c
	0x1407e14dd: push r13
	0x1407e14ed: mov r10, 0
	0x1407e1502: mov rsi, rbp
	0x1407e150f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1524: mov rsi, qword ptr [rsi]
	0x1407e1527: add rsi, 2
	0x1407e152e: mov r10w, word ptr [rsi]
	0x1407e1532: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e153b: sub qword ptr [r10], 8
	0x1407e1591: mov r8, rbp
	0x1407e159b: add r8, 0x145
	0x1407e15b3: mov r10, rbp
	0x1407e15b6: add r10, 0xab
Load [EBP+0x145](STATIC)
	0x1407e15c3: mov r8, qword ptr [r8]
	0x1407e15cd: add r8, 0
Load [EBP+0xab](STATIC)
	0x1407e15d4: mov r10, qword ptr [r10]
	0x1407e15da: movzx r8, word ptr [r8]
	0x1407e15e5: mov rax, rbp
	0x1407e15ef: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1606: xor r8d, dword ptr [rax]
	0x1407e161a: xor r8d, 0x3e3fae90
	0x1407e1632: mov rdx, rbp
	0x1407e1635: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e163f: xor dword ptr [rdx], r8d
	0x1407e1653: and r8, 0xffff
	0x1407e1664: shl r8, 3
	0x1407e166b: add r10, r8
	0x1407e1678: mov rax, qword ptr [r10]
	0x1407e168c: mov rsi, rbp
	0x1407e169c: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940969
	0x1407e16a3: add qword ptr [rsi], 8
	0x1407e16aa: jmp rax
handlers outputs:



basic block ends with ret
	0x14085bc98: mov rdx, rbp
	0x14085bca2: add rdx, 0xab
Load [EBP+0xab](STATIC)
	0x14085bcb6: mov rdx, qword ptr [rdx]
	0x14085bcb9: mov rbx, rbp
	0x14085bcca: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14085bcd1: mov rbx, qword ptr [rbx]
	0x14085bcde: add rbx, 2
	0x14085bce5: movzx rbx, word ptr [rbx]
	0x14085bd1b: mov r9, rbp
	0x14085bd2c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14085bd33: add dword ptr [r9], ebx
	0x14085bd40: and rbx, 0xffff
	0x14085bd4e: shl rbx, 3
	0x14085bd55: add rdx, rbx
	0x14085bd65: mov r14, qword ptr [rdx]
	0x14085bd79: mov rax, rbp
	0x14085bd7c: add rax, 0xfd
Store [EBP+0xfd](STATIC)
	0x14085bd8c: mov qword ptr [rax], r14
	0x14085bdb3: mov r13, rbp
	0x14085bdbc: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14085bdd1: mov r13, qword ptr [r13]
	0x14085bddf: add r13, 0
	0x14085bde6: movzx r8, word ptr [r13]
	0x14085bdeb: mov rax, rbp
	0x14085bdee: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bdf4: xor r8d, dword ptr [rax]
	0x14085bdfe: mov rcx, rbp
	0x14085be0f: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14085be16: add r8d, dword ptr [rcx]
	0x14085be50: mov r9, rbp
	0x14085be5d: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085be6b: and dword ptr [r9], 0x530458cb
	0x14085be79: mov r9, rbp
	0x14085be83: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14085be98: mov dl, byte ptr [r9]
	0x14085be9b: cmp dl, 0x8b
	0x14085be9e: jbe 0x14085bec6
	0x14085beae: xor r8d, 0x7b1fff45
	0x14085becd: mov rbx, rbp
	0x14085bed0: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14085bede: xor word ptr [rbx], r8w
	0x14085bee2: add rbx, 0xffff
	0x14085bee9: mov rcx, 0
	0x14085bef7: mov r8, rbp
	0x14085bf0b: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14085bf1c: mov r8, qword ptr [r8]
	0x14085bf30: add r8, 4
	0x14085bf3e: mov cx, word ptr [r8]
	0x14085bf50: mov r12, rbp
	0x14085bf61: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bf79: xor ecx, dword ptr [r12]
	0x14085bfa9: mov r10, rbp
	0x14085bfb3: add r10, 0xbf
	0x14085bfdd: mov r14, rbp
	0x14085bfe3: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085bfea: or dword ptr [r14], 0x6b521e5a
	0x14085c006: mov r11, rbp
	0x14085c009: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14085c017: sub word ptr [r11], cx
	0x14085c01b: and r10, 8
	0x14085c022: mov r12, rbp
	0x14085c025: mov rdi, rbp
	0x14085c028: add r12, 0xd6
	0x14085c043: add rdi, 0x16e
	0x14085c04a: mov r15, 0x200
Load [EBP+0xd6](STATIC)
	0x14085c058: movzx r12, word ptr [r12]
Load [EBP+0x16e](STATIC)
	0x14085c05d: movzx rdi, word ptr [rdi]
	0x14085c06f: add r12w, 0x2aa3
	0x14085c07c: add r15, r10
	0x14085c07f: add di, 0xc313
	0x14085c084: mov r13, r15
	0x14085c087: add r12, rbp
	0x14085c091: add rdi, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14085c094: mov r12, qword ptr [r12]
Load [EBP+0x2e](VM_REGISTER)
	0x14085c0a6: mov rdi, qword ptr [rdi]
	0x14085c0af: or r13, 0xffff
	0x14085c0bd: mov qword ptr [rdi], r12
	0x14085c0c7: xor r13, 0xffff
	0x14085c0ce: mov r15, rbp
	0x14085c0d1: add r15, 0x145
	0x14085c0d8: add r13, 0xf0
Load [EBP+0x145](STATIC)
	0x14085c0df: mov r15, qword ptr [r15]
	0x14085c0e9: add r15, 4
	0x14085c0fe: movzx rax, word ptr [r15]
	0x14085c102: mov r12, rbp
	0x14085c113: add r12, 0xbf
	0x14085c121: mov r9, 0x400
	0x14085c128: mov rcx, rbp
	0x14085c12b: mov r15, 1
Load [EBP+0xbf](STATIC)
	0x14085c139: add eax, dword ptr [r12]
	0x14085c13d: add rcx, 0xfd
Load [EBP+0xfd](STATIC)
	0x14085c144: mov r14, qword ptr [rcx]
	0x14085c147: add r15, 0x88
	0x14085c151: push 0x20a063d2
	0x14085c156: push 0x503d5533
	0x14085c15b: push 0x162599c4
	0x14085c160: sub rsp, 8
	0x14085c164: push 0x3ee8804b
	0x14085c169: sub rsp, 8
	0x14085c16d: push 0x7943cff9
	0x14085c172: push 0x5daad038
	0x14085c177: sub rsp, 8
unknown store addr: fb8, lea_ast: ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c17e: mov qword ptr [rsp], r14
unknown read addr: fb8 ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff)
unknown store addr: fc0, lea_ast: ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c182: pop qword ptr [rsp]
unknown read addr: fc0 ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff)
unknown store addr: fc8, lea_ast: ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c185: pop qword ptr [rsp]
unknown read addr: fc8 ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c188: pop qword ptr [rsp]
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c18b: pop qword ptr [rsp]
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14085c18e: pop qword ptr [rsp]
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14085c191: pop qword ptr [rsp]
	0x14085c194: pop qword ptr [rsp]
	0x14085c197: pop qword ptr [rsp]
	0x14085c1a4: xor r15, 8
	0x14085c1b9: or r9, r9
	0x14085c1c3: mov rsi, 0x200
	0x14085c1ca: mov r11, 1
	0x14085c1d1: xor r11, 1
	0x14085c1d8: or rbx, 0xffff
	0x14085c1df: and rbx, 0x40
	0x14085c1e6: mov rdx, rbx
	0x14085c1e9: xor r11, 0x20
	0x14085c1f0: mov r12, 0
	0x14085c1f7: xor rsi, rdx
	0x14085c1fa: xor rsi, 0x20
	0x14085c201: sub rbx, r11
	0x14085c204: sub rsp, 8
	0x14085c208: push 0xb277873
	0x14085c20d: push rbp
	0x14085c20e: pop qword ptr [rsp]
	0x14085c211: pop qword ptr [rsp]
	0x14085c214: mov r14, qword ptr [rsp]
	0x14085c218: push 0x3e0d514b
	0x14085c21d: mov qword ptr [rsp], rdx
	0x14085c221: mov rdx, rsp
	0x14085c224: add rdx, 8
	0x14085c228: push 0x70bd5f62
	0x14085c22d: mov qword ptr [rsp], r15
	0x14085c231: push r14
	0x14085c233: movabs r14, 0x73fbaeec
	0x14085c23d: mov r15, r14
	0x14085c240: pop r14
	0x14085c242: xor r15, 0x73fbaee4
	0x14085c249: sub rdx, 0x7bdf3817
	0x14085c250: add rdx, r15
	0x14085c253: add rdx, 0x7bdf3817
	0x14085c25a: mov r15, qword ptr [rsp]
	0x14085c25e: sub rsp, 8
	0x14085c262: mov qword ptr [rsp], r11
	0x14085c266: mov r11, rsp
	0x14085c269: add r11, 8
	0x14085c26d: add r11, 8
	0x14085c274: push 0x5e4d91fd
	0x14085c279: mov qword ptr [rsp], r11
	0x14085c27d: push qword ptr [rsp + 8]
	0x14085c281: pop r11
	0x14085c283: pop qword ptr [rsp]
	0x14085c286: pop rsp
	0x14085c287: xor rdx, qword ptr [rsp]
	0x14085c28b: xor qword ptr [rsp], rdx
	0x14085c28f: xor rdx, qword ptr [rsp]
	0x14085c293: mov rsp, qword ptr [rsp]
	0x14085c297: sub r12, rsi
	0x14085c29a: push 0x27af3006
	0x14085c29f: mov qword ptr [rsp], r15
	0x14085c2a3: movabs r15, 0x5eeb6e51
	0x14085c2ad: push rbx
	0x14085c2ae: movabs rbx, 0x7e97a781
	0x14085c2b8: and r15, rbx
unknown read addr: fe8 0xfe8
	0x14085c2bb: push qword ptr [rsp]
	0x14085c2be: pop rbx
	0x14085c2bf: sub rsp, 8
	0x14085c2c3: mov qword ptr [rsp], r8
	0x14085c2c7: push rsp
	0x14085c2c8: pop r8
	0x14085c2ca: add r8, 8
	0x14085c2ce: sub rsp, 8
	0x14085c2d2: mov qword ptr [rsp], r12
	0x14085c2d6: movabs r12, 0x7f7e1a84
	0x14085c2e0: and r12, 0x7e9710d1
	0x14085c2e7: inc r12
	0x14085c2ea: dec r12
	0x14085c2ed: xor r12, 0x7e161088
	0x14085c2f4: add r8, r12
	0x14085c2f7: pop r12
	0x14085c2f9: push r8
	0x14085c2fb: push qword ptr [rsp + 8]
	0x14085c2ff: pop r8
	0x14085c301: pop qword ptr [rsp]
	0x14085c304: mov rsp, qword ptr [rsp]
	0x14085c308: push 0x4e8d6a20
	0x14085c30d: mov qword ptr [rsp], r12
	0x14085c311: movabs r12, 0x6febf981
	0x14085c31b: xor r15, r12
	0x14085c31e: pop r12
	0x14085c320: shl r15, 5
	0x14085c324: push 0xc6b92b9
	0x14085c329: push 0x3a8c1b88
	0x14085c32e: mov qword ptr [rsp], r13
	0x14085c332: pop qword ptr [rsp]
	0x14085c335: movabs r13, 0xfffffff9d2e41145
	0x14085c33f: sub r15, 0x6fbe6200
	0x14085c346: add r15, r13
	0x14085c349: add r15, 0x6fbe6200
	0x14085c350: pop r13
	0x14085c352: sub r14, 0x6f17a6ca
	0x14085c359: sub r14, 0x33ab1736
	0x14085c360: add r14, r15
	0x14085c363: add r14, 0x33ab1736
	0x14085c36a: add r14, 0x6f17a6ca
	0x14085c371: pop r15
	0x14085c373: push rax
	0x14085c374: movabs rax, 0x5f8f4497
	0x14085c37e: dec rax
	0x14085c381: not rax
	0x14085c384: push rcx
	0x14085c385: mov rcx, 0x5f8f449d
	0x14085c38c: add rax, rcx
	0x14085c38f: pop rcx
Load [EBP+0x145](STATIC)
bytecode=0x102e4e3ac
	0x14085c390: sub qword ptr [r14], 0x3daf25bd
	0x14085c397: push rdx
	0x14085c398: push rsi
	0x14085c399: mov rsi, rsp
	0x14085c39c: add rsi, 8
	0x14085c3a0: push r9
	0x14085c3a2: movabs r9, 8
	0x14085c3ac: sub rsi, r9
	0x14085c3af: pop r9
	0x14085c3b1: xor rsi, qword ptr [rsp]
	0x14085c3b5: xor qword ptr [rsp], rsi
	0x14085c3bd: pop rsp
	0x14085c3be: mov qword ptr [rsp], r15
	0x14085c3c2: movabs r15, 0x5fd83cc1
	0x14085c3cc: push r8
	0x14085c3ce: movabs r8, 0x203c3108
	0x14085c3d8: xor r15, r8
	0x14085c3df: add rsp, 8
	0x14085c3e3: shr r15, 6
	0x14085c3e7: push r12
	0x14085c3e9: movabs r12, 0xfffffffffe006fc9
	0x14085c3f3: add r15, r12
	0x14085c3f6: pop r12
	0x14085c3f8: mov rdx, r15
	0x14085c3ff: add rsp, 8
	0x14085c406: add rdx, 0x16727e90
	0x14085c40d: add rdx, r14
	0x14085c410: sub rdx, 0x16727e90
Load [EBP+0x145](STATIC)
bytecode=0x11a9c4fdd
	0x14085c417: add qword ptr [rdx], 0x17b76c31
Load [EBP+0x145](STATIC)
bytecode=0x11a9c4fe3
	0x14085c41e: add qword ptr [rdx], rax
Load [EBP+0x145](STATIC)
bytecode=0x102e4e3b2
	0x14085c421: sub qword ptr [rdx], 0x17b76c31
unknown read addr: fe8 0xfe8
	0x14085c428: push qword ptr [rsp]
	0x14085c42f: add rsp, 8
	0x14085c436: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x14094096f
	0x14085c43a: add qword ptr [r14], 0x3daf25bd
	0x14085c445: add rsp, 8
	0x14085c45e: ret 0
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd1d: xor r13d, 0x393b4259
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x2e](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x14d]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x7)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x1)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x7)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x1)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x14094097b
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940983
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407eb5ac: mov rbx, rbp
	0x1407eb5af: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5b6: mov edi, dword ptr [rbx]
	0x1407eb5b8: and edi, 1
	0x1407eb5be: cmp edi, 0
	0x1407eb5c4: je 0x1407eb5d4
	0x1407eb5e1: mov r11, rbp
	0x1407eb5e7: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5ee: mov eax, dword ptr [r11]
	0x1407eb5f1: and eax, 1
	0x1407eb5f6: cmp eax, 0
	0x1407eb5fb: je 0x1407eb612
	0x1407eb620: mov r10, rbp
	0x1407eb623: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb630: mov r10, qword ptr [r10]
	0x1407eb63d: add r10, 2
	0x1407eb644: movzx r12, word ptr [r10]
	0x1407eb66e: mov r13, rbp
	0x1407eb686: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407eb694: xor r12d, dword ptr [r13]
	0x1407eb69b: mov r9, rbp
	0x1407eb6a1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb6ab: add dword ptr [r9], r12d
	0x1407eb6ba: mov rbx, rbp
	0x1407eb6d1: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb6d8: xor dword ptr [rbx], 0x516cdefe
	0x1407eb6e4: mov rdx, rbp
	0x1407eb6e7: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407eb6ee: mov bl, byte ptr [rdx]
	0x1407eb6f0: cmp bl, 0x4c
	0x1407eb6f3: jbe 0x1407eb709
	0x1407eb709: mov r13, rbp
	0x1407eb70c: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407eb71d: xor word ptr [r13], r12w
	0x1407eb72c: mov r8, rbp
	0x1407eb73d: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407eb752: movzx r14, word ptr [r8]
	0x1407eb75c: sub r14w, 0x345c
	0x1407eb770: add r14, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1407eb773: mov r14, qword ptr [r14]
	0x1407eb776: pop rcx
	0x1407eb78c: mov qword ptr [r14], rcx
	0x1407eb792: mov r8, r14
	0x1407eb79f: mov rdi, 0
	0x1407eb7a6: mov r10, rbp
	0x1407eb7ba: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb7c7: mov r10, qword ptr [r10]
	0x1407eb7d1: add r10, 4
	0x1407eb7e9: mov di, word ptr [r10]
	0x1407eb7f4: add rdi, rbp
	0x1407eb7f7: cmp r8, rdi
	0x1407eb7fa: je 0x1407eb82d
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407eb826: add qword ptr [rdi], 8
	0x1407eb85d: mov rsi, rbp
	0x1407eb863: add rsi, 0x145
	0x1407eb877: mov rax, rbp
Load [EBP+0x145](STATIC)
	0x1407eb881: mov rsi, qword ptr [rsi]
	0x1407eb895: add rsi, 0
	0x1407eb8a6: add rax, 0xab
	0x1407eb8b6: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407eb8cf: mov rax, qword ptr [rax]
	0x1407eb8df: mov rbx, rbp
	0x1407eb8f3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407eb8fa: xor esi, dword ptr [rbx]
	0x1407eb8fc: add esi, 0x500f8777
	0x1407eb932: and rsi, 0xffff
	0x1407eb943: shl rsi, 3
	0x1407eb947: add rax, rsi
	0x1407eb94a: mov r13, qword ptr [rax]
	0x1407eb957: mov rsi, rbp
	0x1407eb961: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940989
	0x1407eb968: add qword ptr [rsi], 6
	0x1407eb96f: jmp r13
handlers outputs:



basic block ends with indirect unconditional branch
	0x140780204: mov r13, rbp
	0x140780207: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078020e: mov edx, dword ptr [r13]
	0x140780212: and edx, 1
	0x140780218: cmp edx, 0
	0x14078021e: je 0x140780236
	0x140780236: mov r15, 0x46c76392
	0x14078023d: mov r12, rbp
	0x140780240: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140780247: sub dword ptr [r12], r15d
	0x140780260: mov rax, rbp
	0x14078026a: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140780270: mov rax, qword ptr [rax]
	0x140780273: add rax, 0
	0x140780280: mov r8d, dword ptr [rax]
	0x140780294: mov r15, rbp
	0x1407802a1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407802a8: add r8d, dword ptr [r15]
	0x1407802d0: mov rsi, rbp
	0x1407802d3: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407802e8: add dword ptr [rsi], r8d
	0x1407802eb: mov r15, rbp
	0x1407802f8: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407802ff: add dword ptr [r15], 0x37ac7f16
	0x140780313: mov r15, rbp
	0x14078031d: add r15, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140780324: xor dword ptr [r15], r8d
	0x14078032e: mov rsi, rbp
	0x140780342: add rsi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078035a: sub dword ptr [rsi], r8d
	0x14078036e: mov rax, rbp
	0x140780378: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14078038c: mov rax, qword ptr [rax]
	0x140780399: add rax, 4
	0x1407803b4: movzx r9, word ptr [rax]
	0x1407803b8: mov rax, rbp
	0x1407803c9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407803d6: sub r9d, dword ptr [rax]
	0x1407803d9: mov r10, rbp
	0x1407803ea: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407803f4: xor r9d, dword ptr [r10]
	0x140780401: mov r14, rbp
	0x14078040e: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140780415: xor dword ptr [r14], r9d
	0x14078044d: mov rax, rbp
	0x140780461: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x14078046e: mov r13b, byte ptr [rax]
	0x140780471: cmp r13b, 0x6f
	0x140780475: jbe 0x140780485
	0x14078047e: add r9d, 0x11f89e86
	0x14078048b: mov r14, rbp
	0x140780498: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407804ad: xor word ptr [r14], r9w
	0x1407804b1: mov rbx, 0x5d7d8089
	0x1407804b8: mov rcx, rbp
	0x1407804bb: add rcx, 0xbf
	0x1407804c2: mov rsi, rbp
	0x1407804c5: mov rdx, rbp
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407804c8: sub dword ptr [rcx], ebx
	0x1407804ca: add rsi, 0x16e
	0x1407804d1: add rdx, 0x58
Load [EBP+0x58](STATIC)
	0x1407804d8: mov edx, dword ptr [rdx]
Load [EBP+0x16e](STATIC)
	0x1407804da: movzx rsi, word ptr [rsi]
	0x1407804de: add si, 0xd986
	0x1407804e3: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407804e6: sub qword ptr [rsi], rdx
	0x1407804f7: mov bl, 0xc1
	0x1407804fc: mov rdx, rbp
	0x14078050c: add rdx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140780528: sub byte ptr [rdx], bl
	0x140780542: mov rax, rbp
	0x14078054f: mov r14, rbp
	0x140780552: add rax, 0xab
	0x140780558: add r14, 0x145
Load [EBP+0xab](STATIC)
	0x140780566: mov rax, qword ptr [rax]
Load [EBP+0x145](STATIC)
	0x140780569: mov r14, qword ptr [r14]
	0x14078057d: add r14, 6
	0x140780584: movzx r14, word ptr [r14]
	0x140780592: mov r8, rbp
	0x1407805a3: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407805b7: xor r14d, dword ptr [r8]
	0x1407805cf: xor r14d, 0x1c09fe1
	0x1407805d6: mov r9, rbp
	0x1407805d9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407805e7: add dword ptr [r9], r14d
	0x1407805f8: and r14, 0xffff
	0x140780606: shl r14, 3
	0x14078060a: add rax, r14
	0x14078061e: mov rcx, qword ptr [rax]
	0x140780628: mov rax, rbp
	0x140780635: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940991
	0x14078063b: add qword ptr [rax], 8
	0x140780642: jmp rcx
handlers outputs:



	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409a1
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



	0x140871faf: mov r11, rbp
	0x140871fb2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140871fce: mov r11, qword ptr [r11]
	0x140871fd1: add r11, 0xb
	0x140871fdf: movzx r10, word ptr [r11]
	0x140871fe6: mov rsi, rbp
	0x140871ff9: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087200a: add r10d, dword ptr [rsi]
	0x14087200d: mov rdi, rbp
	0x140872017: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14087201e: xor r10d, dword ptr [rdi]
	0x14087202d: mov r11, rbp
	0x14087203e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872059: or dword ptr [r11], r10d
	0x14087205c: mov rcx, rbp
	0x14087206f: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872087: add dword ptr [rcx], 0x1e759f86
	0x14087208d: mov rcx, rbp
	0x140872090: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1408720a5: mov dl, byte ptr [rcx]
	0x1408720a7: cmp dl, 0xc1
	0x1408720aa: jbe 0x1408720c4
	0x1408720b0: sub r10d, 0x5681688c
	0x1408720c4: mov rax, rbp
	0x1408720d4: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408720ef: add word ptr [rax], r10w
	0x1408720f3: mov rsi, rbp
	0x1408720f6: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087210e: mov rsi, qword ptr [rsi]
	0x140872114: add rsi, 1
	0x14087211b: mov edx, dword ptr [rsi]
	0x140872127: mov r15, rbp
	0x14087213a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087214f: xor edx, dword ptr [r15]
	0x140872159: mov rcx, rbp
	0x14087215c: or rsi, 0x800
	0x14087216d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x140872189: xor edx, dword ptr [rcx]
	0x140872195: mov r13, rbp
	0x1408721a2: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408721ac: add dword ptr [r13], edx
	0x1408721c1: mov rcx, rbp
	0x1408721ca: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408721d1: add dword ptr [rcx], 0x569676f7
	0x1408721de: mov r12, rbp
	0x1408721e1: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408721f2: sub dword ptr [r12], edx
	0x140872217: mov rcx, rbp
	0x14087221a: mov r9, 0x2ef0f74e
	0x140872221: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x140872228: movzx rcx, word ptr [rcx]
	0x14087222c: mov r8, rbp
	0x14087222f: mov r15, rbp
	0x140872232: add r8, 0x58
	0x140872239: add cx, 0x40cc
Load [EBP+0x58](STATIC)
	0x14087223e: mov r8d, dword ptr [r8]
	0x140872241: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872248: and dword ptr [r15], r9d
	0x14087224b: add rcx, rbp
	0x14087224e: sub r8d, 0x3712a838
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140872255: sub qword ptr [rcx], r8
	0x140872258: pushfq
	0x140872259: mov r10, rbp
	0x14087225c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140872263: mov r10, qword ptr [r10]
	0x140872266: add r10, 9
	0x14087226d: movzx r11, word ptr [r10]
	0x140872271: add r11, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140872274: mov r11, qword ptr [r11]
	0x140872277: xor rsi, r11
	0x14087227a: pushfq
	0x1408722a4: pop rsi
	0x1408722a5: mov r15, 0
	0x1408722b6: mov rdx, rbp
	0x1408722bc: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408722d8: mov rdx, qword ptr [rdx]
	0x1408722e2: add rdx, 0
	0x1408722f3: mov r15b, byte ptr [rdx]
	0x1408722f6: cmp r15b, 0
	0x1408722fa: je 0x14087237a
	0x14087230e: mov rdx, rbp
	0x140872317: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140872328: mov rdx, qword ptr [rdx]
	0x140872339: add rdx, 0xd
	0x140872343: mov r15w, word ptr [rdx]
	0x14087235c: add r15, rbp
	0x140872366: pop r13
Store VM_REG [EBP+0x26]
	0x140872368: mov qword ptr [r15], r13
	0x1408723c8: mov r12, rbp
	0x1408723cb: mov rdi, rbp
	0x1408723d5: add rdi, 0xab
	0x1408723dc: add r12, 0x145
Load [EBP+0xab](STATIC)
	0x1408723ea: mov rdi, qword ptr [rdi]
Load [EBP+0x145](STATIC)
	0x1408723f0: mov r12, qword ptr [r12]
	0x1408723fe: add r12, 7
	0x14087240c: movzx r12, word ptr [r12]
	0x140872422: mov r9, rbp
	0x14087242c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087243a: add r12d, dword ptr [r9]
	0x140872450: sub r12d, 0x72d7c606
	0x140872457: mov rbx, rbp
	0x14087245d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872464: and dword ptr [rbx], r12d
	0x14087246e: and r12, 0xffff
	0x14087247f: shl r12, 3
	0x140872494: add rdi, r12
	0x140872497: mov rbx, qword ptr [rdi]
	0x1408724a7: mov r9, rbp
	0x1408724b4: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409b0
	0x1408724bb: add qword ptr [r9], 0xf
	0x1408724c2: jmp rbx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407930b1: mov r15, rbp
	0x1407930c2: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407930d0: mov r15, qword ptr [r15]
	0x1407930da: add r15, 0
	0x1407930f2: movzx r11, word ptr [r15]
	0x1407930fc: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140793109: mov rsp, qword ptr [r11]
	0x14079311d: mov r13, rbp
	0x140793120: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x140793127: mov r15d, dword ptr [r13]
	0x14079312b: mov r14, 0x7c5ea8e7
	0x140793132: mov r9, rbp
	0x140793135: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079313c: xor dword ptr [r9], r14d
	0x14079313f: and r15d, 1
	0x140793146: cmp r15d, 0
	0x14079314d: je 0x140793165
	0x1407931a9: mov r12, rbp
	0x1407931ac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407931c4: mov r12, qword ptr [r12]
	0x1407931cf: add r12, 4
	0x1407931d9: movzx r12, word ptr [r12]
	0x1407931eb: mov rax, rbp
	0x1407931ee: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x140793205: mov rax, qword ptr [rax]
	0x140793216: mov r15, rbp
	0x14079322a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140793231: add r12d, dword ptr [r15]
	0x14079324f: mov rdx, rbp
	0x140793259: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140793263: xor dword ptr [rdx], r12d
	0x140793266: and r12, 0xffff
	0x14079328f: shl r12, 3
	0x140793293: add rax, r12
	0x1407932ab: mov r11, qword ptr [rax]
	0x1407932b8: mov r12, rbp
	0x1407932cc: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409b6
	0x1407932d3: add qword ptr [r12], 6
	0x1407932db: jmp r11
handlers outputs:



	0x14085bc98: mov rdx, rbp
	0x14085bca2: add rdx, 0xab
Load [EBP+0xab](STATIC)
	0x14085bcb6: mov rdx, qword ptr [rdx]
	0x14085bcb9: mov rbx, rbp
	0x14085bcca: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14085bcd1: mov rbx, qword ptr [rbx]
	0x14085bcde: add rbx, 2
	0x14085bce5: movzx rbx, word ptr [rbx]
	0x14085bd1b: mov r9, rbp
	0x14085bd2c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14085bd33: add dword ptr [r9], ebx
	0x14085bd40: and rbx, 0xffff
	0x14085bd4e: shl rbx, 3
	0x14085bd55: add rdx, rbx
	0x14085bd65: mov r14, qword ptr [rdx]
	0x14085bd79: mov rax, rbp
	0x14085bd7c: add rax, 0xfd
Store [EBP+0xfd](STATIC)
	0x14085bd8c: mov qword ptr [rax], r14
	0x14085bdb3: mov r13, rbp
	0x14085bdbc: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14085bdd1: mov r13, qword ptr [r13]
	0x14085bddf: add r13, 0
	0x14085bde6: movzx r8, word ptr [r13]
	0x14085bdeb: mov rax, rbp
	0x14085bdee: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bdf4: xor r8d, dword ptr [rax]
	0x14085bdfe: mov rcx, rbp
	0x14085be0f: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14085be16: add r8d, dword ptr [rcx]
	0x14085be50: mov r9, rbp
	0x14085be5d: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085be6b: and dword ptr [r9], 0x530458cb
	0x14085be79: mov r9, rbp
	0x14085be83: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14085be98: mov dl, byte ptr [r9]
	0x14085be9b: cmp dl, 0x8b
	0x14085be9e: jbe 0x14085bec6
	0x14085beae: xor r8d, 0x7b1fff45
	0x14085becd: mov rbx, rbp
	0x14085bed0: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14085bede: xor word ptr [rbx], r8w
	0x14085bee2: add rbx, 0xffff
	0x14085bee9: mov rcx, 0
	0x14085bef7: mov r8, rbp
	0x14085bf0b: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14085bf1c: mov r8, qword ptr [r8]
	0x14085bf30: add r8, 4
	0x14085bf3e: mov cx, word ptr [r8]
	0x14085bf50: mov r12, rbp
	0x14085bf61: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bf79: xor ecx, dword ptr [r12]
	0x14085bfa9: mov r10, rbp
	0x14085bfb3: add r10, 0xbf
	0x14085bfdd: mov r14, rbp
	0x14085bfe3: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085bfea: or dword ptr [r14], 0x6b521e5a
	0x14085c006: mov r11, rbp
	0x14085c009: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14085c017: sub word ptr [r11], cx
	0x14085c01b: and r10, 8
	0x14085c022: mov r12, rbp
	0x14085c025: mov rdi, rbp
	0x14085c028: add r12, 0xd6
	0x14085c043: add rdi, 0x16e
	0x14085c04a: mov r15, 0x200
Load [EBP+0xd6](STATIC)
	0x14085c058: movzx r12, word ptr [r12]
Load [EBP+0x16e](STATIC)
	0x14085c05d: movzx rdi, word ptr [rdi]
	0x14085c06f: add r12w, 0x2aa3
	0x14085c07c: add r15, r10
	0x14085c07f: add di, 0xc313
	0x14085c084: mov r13, r15
	0x14085c087: add r12, rbp
	0x14085c091: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14085c094: mov r12, qword ptr [r12]
Load [EBP+0x2e](VM_REGISTER)
	0x14085c0a6: mov rdi, qword ptr [rdi]
	0x14085c0af: or r13, 0xffff
	0x14085c0bd: mov qword ptr [rdi], r12
	0x14085c0c7: xor r13, 0xffff
	0x14085c0ce: mov r15, rbp
	0x14085c0d1: add r15, 0x145
	0x14085c0d8: add r13, 0xf0
Load [EBP+0x145](STATIC)
	0x14085c0df: mov r15, qword ptr [r15]
	0x14085c0e9: add r15, 4
	0x14085c0fe: movzx rax, word ptr [r15]
	0x14085c102: mov r12, rbp
	0x14085c113: add r12, 0xbf
	0x14085c121: mov r9, 0x400
	0x14085c128: mov rcx, rbp
	0x14085c12b: mov r15, 1
Load [EBP+0xbf](STATIC)
	0x14085c139: add eax, dword ptr [r12]
	0x14085c13d: add rcx, 0xfd
Load [EBP+0xfd](STATIC)
	0x14085c144: mov r14, qword ptr [rcx]
	0x14085c147: add r15, 0x88
	0x14085c151: push 0x20a063d2
	0x14085c156: push 0x503d5533
	0x14085c15b: push 0x162599c4
	0x14085c160: sub rsp, 8
	0x14085c164: push 0x3ee8804b
	0x14085c169: sub rsp, 8
	0x14085c16d: push 0x7943cff9
	0x14085c172: push 0x5daad038
	0x14085c177: sub rsp, 8
unknown store addr: fb8, lea_ast: ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c17e: mov qword ptr [rsp], r14
unknown read addr: fb8 ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff)
unknown store addr: fc0, lea_ast: ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c182: pop qword ptr [rsp]
unknown read addr: fc0 ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff)
unknown store addr: fc8, lea_ast: ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c185: pop qword ptr [rsp]
unknown read addr: fc8 ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c188: pop qword ptr [rsp]
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c18b: pop qword ptr [rsp]
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c18e: pop qword ptr [rsp]
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14085c191: pop qword ptr [rsp]
	0x14085c194: pop qword ptr [rsp]
	0x14085c197: pop qword ptr [rsp]
	0x14085c1a4: xor r15, 8
	0x14085c1b9: or r9, r9
	0x14085c1c3: mov rsi, 0x200
	0x14085c1ca: mov r11, 1
	0x14085c1d1: xor r11, 1
	0x14085c1d8: or rbx, 0xffff
	0x14085c1df: and rbx, 0x40
	0x14085c1e6: mov rdx, rbx
	0x14085c1e9: xor r11, 0x20
	0x14085c1f0: mov r12, 0
	0x14085c1f7: xor rsi, rdx
	0x14085c1fa: xor rsi, 0x20
	0x14085c201: sub rbx, r11
	0x14085c204: sub rsp, 8
	0x14085c208: push 0xb277873
	0x14085c20d: push rbp
	0x14085c20e: pop qword ptr [rsp]
	0x14085c211: pop qword ptr [rsp]
	0x14085c214: mov r14, qword ptr [rsp]
	0x14085c218: push 0x3e0d514b
	0x14085c21d: mov qword ptr [rsp], rdx
	0x14085c221: mov rdx, rsp
	0x14085c224: add rdx, 8
	0x14085c228: push 0x70bd5f62
	0x14085c22d: mov qword ptr [rsp], r15
	0x14085c231: push r14
	0x14085c233: movabs r14, 0x73fbaeec
	0x14085c23d: mov r15, r14
	0x14085c240: pop r14
	0x14085c242: xor r15, 0x73fbaee4
	0x14085c249: sub rdx, 0x7bdf3817
	0x14085c250: add rdx, r15
	0x14085c253: add rdx, 0x7bdf3817
	0x14085c25a: mov r15, qword ptr [rsp]
	0x14085c25e: sub rsp, 8
	0x14085c262: mov qword ptr [rsp], r11
	0x14085c266: mov r11, rsp
	0x14085c269: add r11, 8
	0x14085c26d: add r11, 8
	0x14085c274: push 0x5e4d91fd
	0x14085c279: mov qword ptr [rsp], r11
	0x14085c27d: push qword ptr [rsp + 8]
	0x14085c281: pop r11
	0x14085c283: pop qword ptr [rsp]
	0x14085c286: pop rsp
	0x14085c287: xor rdx, qword ptr [rsp]
	0x14085c28b: xor qword ptr [rsp], rdx
	0x14085c28f: xor rdx, qword ptr [rsp]
	0x14085c293: mov rsp, qword ptr [rsp]
	0x14085c297: sub r12, rsi
	0x14085c29a: push 0x27af3006
	0x14085c29f: mov qword ptr [rsp], r15
	0x14085c2a3: movabs r15, 0x5eeb6e51
	0x14085c2ad: push rbx
	0x14085c2ae: movabs rbx, 0x7e97a781
	0x14085c2b8: and r15, rbx
unknown read addr: fe8 0xfe8
	0x14085c2bb: push qword ptr [rsp]
	0x14085c2be: pop rbx
	0x14085c2bf: sub rsp, 8
	0x14085c2c3: mov qword ptr [rsp], r8
	0x14085c2c7: push rsp
	0x14085c2c8: pop r8
	0x14085c2ca: add r8, 8
	0x14085c2ce: sub rsp, 8
	0x14085c2d2: mov qword ptr [rsp], r12
	0x14085c2d6: movabs r12, 0x7f7e1a84
	0x14085c2e0: and r12, 0x7e9710d1
	0x14085c2e7: inc r12
	0x14085c2ea: dec r12
	0x14085c2ed: xor r12, 0x7e161088
	0x14085c2f4: add r8, r12
	0x14085c2f7: pop r12
	0x14085c2f9: push r8
	0x14085c2fb: push qword ptr [rsp + 8]
	0x14085c2ff: pop r8
	0x14085c301: pop qword ptr [rsp]
	0x14085c304: mov rsp, qword ptr [rsp]
	0x14085c308: push 0x4e8d6a20
	0x14085c30d: mov qword ptr [rsp], r12
	0x14085c311: movabs r12, 0x6febf981
	0x14085c31b: xor r15, r12
	0x14085c31e: pop r12
	0x14085c320: shl r15, 5
	0x14085c324: push 0xc6b92b9
	0x14085c329: push 0x3a8c1b88
	0x14085c32e: mov qword ptr [rsp], r13
	0x14085c332: pop qword ptr [rsp]
	0x14085c335: movabs r13, 0xfffffff9d2e41145
	0x14085c33f: sub r15, 0x6fbe6200
	0x14085c346: add r15, r13
	0x14085c349: add r15, 0x6fbe6200
	0x14085c350: pop r13
	0x14085c352: sub r14, 0x6f17a6ca
	0x14085c359: sub r14, 0x33ab1736
	0x14085c360: add r14, r15
	0x14085c363: add r14, 0x33ab1736
	0x14085c36a: add r14, 0x6f17a6ca
	0x14085c371: pop r15
	0x14085c373: push rax
	0x14085c374: movabs rax, 0x5f8f4497
	0x14085c37e: dec rax
	0x14085c381: not rax
	0x14085c384: push rcx
	0x14085c385: mov rcx, 0x5f8f449d
	0x14085c38c: add rax, rcx
	0x14085c38f: pop rcx
Load [EBP+0x145](STATIC)
bytecode=0x102e4e3f9
	0x14085c390: sub qword ptr [r14], 0x3daf25bd
	0x14085c397: push rdx
	0x14085c398: push rsi
	0x14085c399: mov rsi, rsp
	0x14085c39c: add rsi, 8
	0x14085c3a0: push r9
	0x14085c3a2: movabs r9, 8
	0x14085c3ac: sub rsi, r9
	0x14085c3af: pop r9
	0x14085c3b1: xor rsi, qword ptr [rsp]
	0x14085c3b5: xor qword ptr [rsp], rsi
	0x14085c3bd: pop rsp
	0x14085c3be: mov qword ptr [rsp], r15
	0x14085c3c2: movabs r15, 0x5fd83cc1
	0x14085c3cc: push r8
	0x14085c3ce: movabs r8, 0x203c3108
	0x14085c3d8: xor r15, r8
	0x14085c3df: add rsp, 8
	0x14085c3e3: shr r15, 6
	0x14085c3e7: push r12
	0x14085c3e9: movabs r12, 0xfffffffffe006fc9
	0x14085c3f3: add r15, r12
	0x14085c3f6: pop r12
	0x14085c3f8: mov rdx, r15
	0x14085c3ff: add rsp, 8
	0x14085c406: add rdx, 0x16727e90
	0x14085c40d: add rdx, r14
	0x14085c410: sub rdx, 0x16727e90
Load [EBP+0x145](STATIC)
bytecode=0x11a9c502a
	0x14085c417: add qword ptr [rdx], 0x17b76c31
Load [EBP+0x145](STATIC)
bytecode=0x11a9c5030
	0x14085c41e: add qword ptr [rdx], rax
Load [EBP+0x145](STATIC)
bytecode=0x102e4e3ff
	0x14085c421: sub qword ptr [rdx], 0x17b76c31
unknown read addr: fe8 0xfe8
	0x14085c428: push qword ptr [rsp]
	0x14085c42f: add rsp, 8
	0x14085c436: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x1409409bc
	0x14085c43a: add qword ptr [r14], 0x3daf25bd
	0x14085c445: add rsp, 8
	0x14085c45e: ret 0
handlers outputs:



basic block ends with ret
	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x1409409c6
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409d4
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x1407eb5ac: mov rbx, rbp
	0x1407eb5af: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5b6: mov edi, dword ptr [rbx]
	0x1407eb5b8: and edi, 1
	0x1407eb5be: cmp edi, 0
	0x1407eb5c4: je 0x1407eb5d4
	0x1407eb5e1: mov r11, rbp
	0x1407eb5e7: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5ee: mov eax, dword ptr [r11]
	0x1407eb5f1: and eax, 1
	0x1407eb5f6: cmp eax, 0
	0x1407eb5fb: je 0x1407eb612
	0x1407eb601: mov r11, rbp
	0x1407eb604: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb60b: and dword ptr [r11], 0x7baa9818
	0x1407eb620: mov r10, rbp
	0x1407eb623: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb630: mov r10, qword ptr [r10]
	0x1407eb63d: add r10, 2
	0x1407eb644: movzx r12, word ptr [r10]
	0x1407eb66e: mov r13, rbp
	0x1407eb686: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407eb694: xor r12d, dword ptr [r13]
	0x1407eb69b: mov r9, rbp
	0x1407eb6a1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb6ab: add dword ptr [r9], r12d
	0x1407eb6ba: mov rbx, rbp
	0x1407eb6d1: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb6d8: xor dword ptr [rbx], 0x516cdefe
	0x1407eb6e4: mov rdx, rbp
	0x1407eb6e7: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407eb6ee: mov bl, byte ptr [rdx]
	0x1407eb6f0: cmp bl, 0x4c
	0x1407eb6f3: jbe 0x1407eb709
	0x1407eb709: mov r13, rbp
	0x1407eb70c: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407eb71d: xor word ptr [r13], r12w
	0x1407eb72c: mov r8, rbp
	0x1407eb73d: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407eb752: movzx r14, word ptr [r8]
	0x1407eb75c: sub r14w, 0x345c
	0x1407eb770: add r14, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1407eb773: mov r14, qword ptr [r14]
	0x1407eb776: pop rcx
	0x1407eb78c: mov qword ptr [r14], rcx
	0x1407eb792: mov r8, r14
	0x1407eb79f: mov rdi, 0
	0x1407eb7a6: mov r10, rbp
	0x1407eb7ba: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb7c7: mov r10, qword ptr [r10]
	0x1407eb7d1: add r10, 4
	0x1407eb7e9: mov di, word ptr [r10]
	0x1407eb7f4: add rdi, rbp
	0x1407eb7f7: cmp r8, rdi
	0x1407eb7fa: je 0x1407eb82d
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407eb826: add qword ptr [rdi], 8
	0x1407eb85d: mov rsi, rbp
	0x1407eb863: add rsi, 0x145
	0x1407eb877: mov rax, rbp
Load [EBP+0x145](STATIC)
	0x1407eb881: mov rsi, qword ptr [rsi]
	0x1407eb895: add rsi, 0
	0x1407eb8a6: add rax, 0xab
	0x1407eb8b6: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407eb8cf: mov rax, qword ptr [rax]
	0x1407eb8df: mov rbx, rbp
	0x1407eb8f3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407eb8fa: xor esi, dword ptr [rbx]
	0x1407eb8fc: add esi, 0x500f8777
	0x1407eb932: and rsi, 0xffff
	0x1407eb943: shl rsi, 3
	0x1407eb947: add rax, rsi
	0x1407eb94a: mov r13, qword ptr [rax]
	0x1407eb957: mov rsi, rbp
	0x1407eb961: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409da
	0x1407eb968: add qword ptr [rsi], 6
	0x1407eb96f: jmp r13
handlers outputs:



	0x1407753a0: mov rax, rbp
	0x1407753a3: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407753a9: mov rax, qword ptr [rax]
	0x1407753bd: add rax, 4
	0x1407753c3: movzx r12, word ptr [rax]
	0x1407753d8: mov r9, rbp
	0x1407753e1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407753f2: sub r12d, dword ptr [r9]
	0x140775406: mov r10, rbp
	0x140775417: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x140775425: add r12d, dword ptr [r10]
	0x140775428: mov r10, rbp
	0x14077542b: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140775440: add dword ptr [r10], r12d
	0x140775478: mov rcx, rbp
	0x14077547b: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140775489: mov r10b, byte ptr [rcx]
	0x14077548c: cmp r10b, 0x48
	0x140775490: jbe 0x1407754a0
	0x1407754b4: mov r13, rbp
	0x1407754b7: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407754cc: add word ptr [r13], r12w
	0x1407754db: mov rcx, rbp
	0x1407754de: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407754e5: mov rcx, qword ptr [rcx]
	0x1407754f9: add rcx, 6
	0x140775511: mov r9d, dword ptr [rcx]
	0x140775544: mov rdi, rbp
	0x140775555: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140775571: add r9d, dword ptr [rdi]
	0x140775582: mov r15, rbp
	0x140775585: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077559a: add dword ptr [r15], r9d
	0x1407755b2: mov rax, rbp
	0x1407755b5: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407755bb: xor dword ptr [rax], 0x10f93f15
	0x1407755cb: mov r12, rbp
	0x1407755d5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407755e6: add dword ptr [r12], r9d
	0x1407755ff: mov rdx, rbp
	0x140775602: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140775609: sub dword ptr [rdx], r9d
	0x14077561d: mov r15, rbp
	0x140775623: mov rdx, rbp
	0x140775626: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077562d: movzx rdx, word ptr [rdx]
	0x140775631: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14077563e: mov r15d, dword ptr [r15]
	0x14077566b: add rdx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14077566e: sub qword ptr [rdx], r15
	0x140775671: pushfq
	0x14077567c: mov r12, 0
	0x14077568a: mov rsi, rbp
	0x14077569e: mov rbx, rbp
	0x1407756ab: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407756b5: mov rbx, qword ptr [rbx]
	0x1407756c6: add rbx, 0xa
	0x1407756e2: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407756f0: mov r15d, dword ptr [rsi]
	0x1407756fa: mov r12b, byte ptr [rbx]
	0x1407756fd: cmp r12b, 0
	0x140775701: je 0x140775770
	0x140775707: mov rbx, rbp
	0x14077570a: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140775722: mov rbx, qword ptr [rbx]
	0x140775725: add rbx, 2
	0x14077573d: mov r12w, word ptr [rbx]
	0x14077574f: add r12, rbp
	0x140775755: pop rcx
Store VM_REG [EBP+0x26]
	0x140775756: mov qword ptr [r12], rcx
	0x14077579d: and r15d, 1
	0x1407757a4: cmp r15d, 0
	0x1407757ab: je 0x1407757d6
	0x1407757b8: mov rsi, rbp
	0x1407757bb: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407757d0: and dword ptr [rsi], 0x22dc62d3
	0x1407757e7: mov r13b, 0xdb
	0x1407757fb: mov r11, rbp
	0x14077580b: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140775819: add byte ptr [r11], r13b
	0x14077582d: mov rsi, rbp
	0x14077583e: mov r15, rbp
	0x14077584f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140775856: mov r15, qword ptr [r15]
	0x140775859: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140775860: mov rsi, qword ptr [rsi]
	0x140775863: add rsi, 0
	0x14077586d: movzx rsi, word ptr [rsi]
	0x140775871: mov r14, rbp
	0x140775877: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140775885: xor esi, dword ptr [r14]
	0x140775888: xor esi, 0x1ebd7866
	0x140775895: mov r10, rbp
	0x1407758a5: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407758bd: sub dword ptr [r10], esi
	0x1407758c0: and rsi, 0xffff
	0x1407758df: shl rsi, 3
	0x1407758e3: add r15, rsi
	0x1407758e9: mov r8, qword ptr [r15]
	0x1407758f3: mov rcx, rbp
	0x140775900: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409e5
	0x140775907: add qword ptr [rcx], 0xb
	0x14077590e: jmp r8
handlers outputs:



	0x1407930b1: mov r15, rbp
	0x1407930c2: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407930d0: mov r15, qword ptr [r15]
	0x1407930da: add r15, 0
	0x1407930f2: movzx r11, word ptr [r15]
	0x1407930fc: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140793109: mov rsp, qword ptr [r11]
	0x14079311d: mov r13, rbp
	0x140793120: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x140793127: mov r15d, dword ptr [r13]
	0x14079312b: mov r14, 0x7c5ea8e7
	0x140793132: mov r9, rbp
	0x140793135: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079313c: xor dword ptr [r9], r14d
	0x14079313f: and r15d, 1
	0x140793146: cmp r15d, 0
	0x14079314d: je 0x140793165
	0x140793153: mov r13, rbp
	0x140793156: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14079315d: or dword ptr [r13], 0x7c5ea8e7
	0x1407931a9: mov r12, rbp
	0x1407931ac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407931c4: mov r12, qword ptr [r12]
	0x1407931cf: add r12, 4
	0x1407931d9: movzx r12, word ptr [r12]
	0x1407931eb: mov rax, rbp
	0x1407931ee: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x140793205: mov rax, qword ptr [rax]
	0x140793216: mov r15, rbp
	0x14079322a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140793231: add r12d, dword ptr [r15]
	0x14079324f: mov rdx, rbp
	0x140793259: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140793263: xor dword ptr [rdx], r12d
	0x140793266: and r12, 0xffff
	0x14079328f: shl r12, 3
	0x140793293: add rax, r12
	0x1407932ab: mov r11, qword ptr [rax]
	0x1407932b8: mov r12, rbp
	0x1407932cc: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409eb
	0x1407932d3: add qword ptr [r12], 6
	0x1407932db: jmp r11
handlers outputs:



	0x1407e1334: mov r14, rbp
	0x1407e1337: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e133e: xor dword ptr [r14], 0x3477f352
	0x1407e1345: mov r11, rbp
	0x1407e1348: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e134f: or dword ptr [r11], 0x7e323802
	0x1407e1356: mov r15, rbp
	0x1407e136e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e137c: mov r15, qword ptr [r15]
	0x1407e137f: add r15, 4
	0x1407e1393: mov esi, dword ptr [r15]
	0x1407e13a3: mov r14, rbp
	0x1407e13a6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e13bb: sub esi, dword ptr [r14]
	0x1407e13c1: mov r13, rbp
	0x1407e13d1: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407e13df: xor esi, dword ptr [r13]
	0x1407e140f: mov r12, rbp
	0x1407e141f: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1426: xor dword ptr [r12], 0x5cfc2cec
	0x1407e1438: mov rcx, rbp
	0x1407e144c: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407e1453: add dword ptr [rcx], esi
	0x1407e1455: mov r13, 0x12
	0x1407e145f: mov rax, rbp
	0x1407e1477: add rax, 0x120
	0x1407e147d: and r13, 0x20
	0x1407e1484: sub r13, 0x40
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407e148b: add dword ptr [rax], esi
	0x1407e1493: mov r9, rbp
	0x1407e14aa: add r9, 0x58
Load [EBP+0x58](STATIC)
	0x1407e14bb: mov r13d, dword ptr [r9]
	0x1407e14c5: xor r13d, 0x2bbdd85c
	0x1407e14dd: push r13
	0x1407e14ed: mov r10, 0
	0x1407e1502: mov rsi, rbp
	0x1407e150f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1524: mov rsi, qword ptr [rsi]
	0x1407e1527: add rsi, 2
	0x1407e152e: mov r10w, word ptr [rsi]
	0x1407e1532: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e153b: sub qword ptr [r10], 8
	0x1407e1591: mov r8, rbp
	0x1407e159b: add r8, 0x145
	0x1407e15b3: mov r10, rbp
	0x1407e15b6: add r10, 0xab
Load [EBP+0x145](STATIC)
	0x1407e15c3: mov r8, qword ptr [r8]
	0x1407e15cd: add r8, 0
Load [EBP+0xab](STATIC)
	0x1407e15d4: mov r10, qword ptr [r10]
	0x1407e15da: movzx r8, word ptr [r8]
	0x1407e15e5: mov rax, rbp
	0x1407e15ef: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1606: xor r8d, dword ptr [rax]
	0x1407e161a: xor r8d, 0x3e3fae90
	0x1407e1632: mov rdx, rbp
	0x1407e1635: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e163f: xor dword ptr [rdx], r8d
	0x1407e1653: and r8, 0xffff
	0x1407e1664: shl r8, 3
	0x1407e166b: add r10, r8
	0x1407e1678: mov rax, qword ptr [r10]
	0x1407e168c: mov rsi, rbp
	0x1407e169c: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409409f3
	0x1407e16a3: add qword ptr [rsi], 8
	0x1407e16aa: jmp rax
handlers outputs:



	0x1407fd9e8: mov rbx, 0
	0x1407fd9fd: mov rcx, rbp
	0x1407fda10: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407fda28: mov rcx, qword ptr [rcx]
	0x1407fda31: add rcx, 0
	0x1407fda3e: mov bx, word ptr [rcx]
	0x1407fda41: mov rsi, rbp
	0x1407fda51: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fda5f: sub ebx, dword ptr [rsi]
	0x1407fdaa8: mov r15, rbp
	0x1407fdab1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdac5: sub dword ptr [r15], ebx
	0x1407fdad6: mov rcx, rbp
	0x1407fdae6: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fdb02: and dword ptr [rcx], 0x647be2f7
	0x1407fdb16: mov rcx, rbp
	0x1407fdb2e: add rcx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407fdb3b: add word ptr [rcx], bx
	0x1407fdb71: mov r8, rbp
	0x1407fdb74: mov r15, rbp
	0x1407fdb85: add r15, 0xab
	0x1407fdb8c: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407fdb9a: mov r8, qword ptr [r8]
	0x1407fdba0: add r8, 2
Load [EBP+0xab](STATIC)
	0x1407fdbaa: mov r15, qword ptr [r15]
	0x1407fdbbe: movzx r8, word ptr [r8]
	0x1407fdbc9: mov r10, rbp
	0x1407fdbcc: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fdbe8: sub r8d, dword ptr [r10]
	0x1407fdbf5: mov rdx, rbp
	0x1407fdbfb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdc0f: and dword ptr [rdx], r8d
	0x1407fdc19: and r8, 0xffff
	0x1407fdc34: shl r8, 3
	0x1407fdc38: add r15, r8
	0x1407fdc3b: mov r8, qword ptr [r15]
	0x1407fdc3e: mov r13, rbp
	0x1407fdc4f: add r13, 0xfd
Store [EBP+0xfd](STATIC)
	0x1407fdc67: mov qword ptr [r13], r8
	0x1407fdc6b: mov rsi, rbp
	0x1407fdc75: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407fdc86: mov rsi, qword ptr [rsi]
	0x1407fdc96: add rsi, 6
	0x1407fdc9d: movzx rdx, word ptr [rsi]
	0x1407fdca7: mov r14, rsi
	0x1407fdcaa: mov rcx, rbp
	0x1407fdcc2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fdcd7: sub edx, dword ptr [rcx]
	0x1407fdce0: mov rcx, 0x400
	0x1407fdce7: mov r15, rbp
	0x1407fdcf0: or rcx, 0x78
	0x1407fdcf7: add r15, 0xf0
	0x1407fdd05: sub rcx, r14
Load [EBP+0xf0](STATIC)
	0x1407fdd08: sub edx, dword ptr [r15]
	0x1407fdd18: mov rbx, rbp
	0x1407fdd22: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fdd33: sub dword ptr [rbx], edx
	0x1407fdd35: mov r13, rbp
	0x1407fdd3b: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407fdd49: add dword ptr [r13], 0x523132f7
	0x1407fdd51: and rcx, rbx
	0x1407fdd5b: mov r15, rbp
	0x1407fdd65: and rcx, 0x80
	0x1407fdd73: add r15, 0x130
	0x1407fdd81: or rcx, rdx
	0x1407fdd84: mov rax, 0x12
Load [EBP+0x130](STATIC)
	0x1407fdd8b: mov bl, byte ptr [r15]
	0x1407fdd8e: cmp bl, 7
	0x1407fdd91: jbe 0x1407fddb4
	0x1407fdda1: sub edx, 0x3928b11e
	0x1407fddaa: or rax, rcx
	0x1407fddb4: mov r10, rbp
	0x1407fddb7: sub rcx, 0x80
	0x1407fddc5: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407fddd3: sub word ptr [r10], dx
	0x1407fddd7: mov r14, rbp
	0x1407fddda: mov r12, rbp
	0x1407fdddd: add r14, 0x145
	0x1407fdde4: mov r15, rbp
	0x1407fdde7: add r12, 0x16e
Load [EBP+0x145](STATIC)
	0x1407fddee: mov r14, qword ptr [r14]
Load [EBP+0x16e](STATIC)
	0x1407fddf1: movzx r12, word ptr [r12]
	0x1407fddf6: add r14, 4
	0x1407fddfd: movzx r11, word ptr [r14]
	0x1407fde01: add r11, rbp
	0x1407fde04: xor r12w, 0x57c9
	0x1407fde0a: add r15, 0xd6
Load [EBP+0x97](VM_REGISTER)
	0x1407fde11: mov r11, qword ptr [r11]
Load [EBP+0xd6](STATIC)
	0x1407fde14: movzx r15, word ptr [r15]
	0x1407fde18: add r12, rbp
	0x1407fde1b: add r15, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407fde1e: mov r15, qword ptr [r15]
Load [EBP+0x2e](VM_REGISTER)
	0x1407fde21: mov r12, qword ptr [r12]
	0x1407fde25: mov qword ptr [r12], r15
	0x1407fde29: or r11, 0xffffffff80000000
	0x1407fde30: and r11, 0x400
	0x1407fde41: add r11, r10
	0x1407fde44: and r13, r10
	0x1407fde55: and rcx, 0xffff
	0x1407fde66: add rcx, r10
	0x1407fde69: mov r9, 0x400
	0x1407fde77: sub rcx, 0x7fffffff
	0x1407fde7e: or rcx, r10
	0x1407fde8f: push 0x7aa69978
	0x1407fde94: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407fde95: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1407fde98: push qword ptr [rsp]
	0x1407fde9b: pop rdi
	0x1407fde9c: push 0x6bfcfcef
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0xffffffff8000016f + ((0x0) << 16 | ((0xff80 + (((0x59) << 1 | (~(((~(((((0x472 + ((0xffffffffffffffff * bytecode) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 7) & 0x1)) & 0x1) | (~(((((0xbf + context) & 0xffffffffffffffff) >> 7) & 0x1)) & 0x1))) & 0x1)) << 7 | 0x65)) & 0xffff))) & 0xffffffffffffffff) + context) & 0xffffffffffffffff) | ((0x16e + context) & 0xffffffffffffffff))
	0x1407fdea1: mov qword ptr [rsp], rcx
	0x1407fdea5: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x1407fdea9: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407fdead: add qword ptr [rsp], 8
	0x1407fdeb2: pop rcx
	0x1407fdeb3: add rcx, 8
	0x1407fdeb7: push r10
	0x1407fdeb9: movabs r10, 0x75bf5845
	0x1407fdec3: add r10, 0x79f660c7
	0x1407fdeca: not r10
	0x1407fdecd: sub r10, 0x77fee9f5
	0x1407fded4: push rax
	0x1407fded5: movabs rax, 0x3f5bc9d4
	0x1407fdedf: add rax, 0x7f990f12
	0x1407fdee5: sub rax, 0x2fe59058
	0x1407fdeeb: xor rax, 0x7e777880
	0x1407fdef1: push rbx
	0x1407fdef2: movabs rbx, 0xffffffff33fdb2f5
	0x1407fdefc: add rax, rbx
	0x1407fdeff: pop rbx
	0x1407fdf00: xor r10, rax
	0x1407fdf03: pop rax
	0x1407fdf04: push rcx
	0x1407fdf05: movabs rcx, 0xfffffffebd3ebff5
	0x1407fdf0f: sub r10, rcx
	0x1407fdf12: pop rcx
	0x1407fdf13: sub rcx, 0x67e23f6f
	0x1407fdf1a: add rcx, r10
	0x1407fdf1d: add rcx, 0x67e23f6f
	0x1407fdf24: pop r10
	0x1407fdf26: sub rsp, 8
	0x1407fdf2a: mov qword ptr [rsp], rcx
	0x1407fdf2e: push qword ptr [rsp + 8]
	0x1407fdf36: push rdi
	0x1407fdf37: mov rdi, rsp
	0x1407fdf3a: add rdi, 8
	0x1407fdf3e: add rdi, 8
	0x1407fdf45: push rdi
	0x1407fdf46: push qword ptr [rsp + 8]
	0x1407fdf4a: push qword ptr [rsp]
	0x1407fdf4d: pop rdi
	0x1407fdf4e: add rsp, 8
	0x1407fdf52: pop qword ptr [rsp]
	0x1407fdf55: pop rsp
	0x1407fdf56: pop qword ptr [rsp]
	0x1407fdf59: mov rsp, qword ptr [rsp]
	0x1407fdf5d: add r9, 0x400
	0x1407fdf67: mov r10, rbp
	0x1407fdf6a: push 0x378a487b
	0x1407fdf6f: push r10
	0x1407fdf71: pop qword ptr [rsp]
	0x1407fdf74: push rdi
	0x1407fdf75: push rax
	0x1407fdf76: movabs rax, 0x7cf2d391
	0x1407fdf80: shr rax, 4
	0x1407fdf84: shr rax, 3
	0x1407fdf88: or rax, 0x1dad2941
	0x1407fdf8e: shr rax, 1
	0x1407fdf92: not rax
	0x1407fdf95: push rdi
	0x1407fdf96: mov rdi, -0x7b38e423
	0x1407fdf9d: sub rax, rdi
	0x1407fdfa0: pop rdi
	0x1407fdfa1: push rbx
	0x1407fdfa2: movabs rbx, 0x1b466a1a
	0x1407fdfac: movabs rdi, 0x87805684
	0x1407fdfb6: sub rdi, rbx
	0x1407fdfb9: push qword ptr [rsp]
	0x1407fdfbc: pop rbx
	0x1407fdfbd: add rsp, 8
	0x1407fdfc1: xor rdi, rax
	0x1407fdfc4: pop rax
	0x1407fdfc5: push 0x7d0473fb
	0x1407fdfca: push r14
	0x1407fdfcc: pop qword ptr [rsp]
	0x1407fdfcf: push 0x13167231
	0x1407fdfd4: mov qword ptr [rsp], rdi
	0x1407fdfd8: pop r14
	0x1407fdfda: mov r10, r14
	0x1407fdfdd: pop r14
	0x1407fdfdf: mov rdi, qword ptr [rsp]
	0x1407fdfe3: add rsp, 8
	0x1407fdfea: sub rdi, 0x6aa21911
	0x1407fdff1: sub rdi, 0x7b7cbc02
	0x1407fdff8: add rdi, r10
	0x1407fdffb: add rdi, 0x7b7cbc02
	0x1407fe002: add rdi, 0x6aa21911
	0x1407fe009: mov r10, qword ptr [rsp]
	0x1407fe00d: push r14
	0x1407fe00f: mov r14, rsp
	0x1407fe012: add r14, 8
	0x1407fe016: add r14, 8
	0x1407fe01d: push r14
	0x1407fe01f: push qword ptr [rsp + 8]
	0x1407fe023: pop r14
	0x1407fe025: pop qword ptr [rsp]
	0x1407fe028: pop rsp
	0x1407fe029: xor r9, r10
	0x1407fe02c: mov r12, r9
	0x1407fe02f: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407fe036: mov r8, qword ptr [r10]
	0x1407fe039: xor r12, r8
	0x1407fe03c: and r11, rbx
	0x1407fe03f: and r12, 0x90
	0x1407fe046: xor r8, 0x2bc7a80c
	0x1407fe054: push 0x6a4359e0
	0x1407fe059: mov qword ptr [rsp], r10
	0x1407fe05d: movabs r10, 0x7fdf8bc3
	0x1407fe067: shr r10, 4
	0x1407fe06b: push r11
	0x1407fe06d: mov r11, rsp
	0x1407fe070: add r11, 8
	0x1407fe074: sub r11, 8
	0x1407fe07b: xor r11, qword ptr [rsp]
	0x1407fe07f: xor qword ptr [rsp], r11
	0x1407fe087: mov rsp, qword ptr [rsp]
	0x1407fe08b: push r12
unknown read addr: fe8 ((0xfffffffffffffff8 + t369) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: t369, simplified_source_node: (((((0x0) << 1 | ((context >> 7) & 0x1)) << 2 | 0x0) << 1 | ((context >> 4) & 0x1)) << 4 | 0x0)
	0x1407fe08d: pop qword ptr [rsp]
	0x1407fe090: push r13
	0x1407fe092: movabs r13, 0x7fdf8b4
	0x1407fe09c: push rdi
	0x1407fe09d: mov rdi, r13
	0x1407fe0a0: push rdi
unknown read addr: fd8 ((0xffffffffffffffe8 + t369) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffe8 + t369) & 0xffffffffffffffff), simplified_source_node: 0x577d3cb4
	0x1407fe0a1: add qword ptr [rsp], 0x4f7f4400
unknown read addr: fd8 ((0xffffffffffffffe8 + t369) & 0xffffffffffffffff)
	0x1407fe0a9: mov r12, qword ptr [rsp]
	0x1407fe0ad: add rsp, 8
	0x1407fe0b1: sub r12, 0x4f7f4400
	0x1407fe0b8: pop rdi
	0x1407fe0bd: add rsp, 8
	0x1407fe0c1: xor r10, r12
	0x1407fe0c4: pop r12
Load [EBP+0x145](STATIC)
bytecode=0x125a1c9e4
	0x1407fe0c6: sub qword ptr [rdi], 0x1af2400f
Load [EBP+0x145](STATIC)
bytecode=0xbdae1192
	0x1407fe0cd: sub qword ptr [rdi], 0x67f3b852
Load [EBP+0x145](STATIC)
bytecode=0x115299bd5
	0x1407fe0d4: add qword ptr [rdi], 0x577b8a43
Load [EBP+0x145](STATIC)
bytecode=0x115299bdd
	0x1407fe0db: add qword ptr [rdi], r10
Load [EBP+0x145](STATIC)
bytecode=0xbdae119a
	0x1407fe0de: sub qword ptr [rdi], 0x577b8a43
Load [EBP+0x145](STATIC)
bytecode=0x125a1c9ec
	0x1407fe0e5: add qword ptr [rdi], 0x67f3b852
Load [EBP+0x145](STATIC)
bytecode=0x1409409fb
	0x1407fe0ec: add qword ptr [rdi], 0x1af2400f
unknown read addr: ff8 ((0x8 + t369) & 0xffffffffffffffff)
	0x1407fe0f3: push qword ptr [rsp]
unknown read addr: ff0 t369
	0x1407fe0f6: push qword ptr [rsp]
	0x1407fe0f9: pop r10
	0x1407fe0fb: add rsp, 8
	0x1407fe102: add rsp, 8
	0x1407fe106: push r8
	0x1407fe126: pop r12
	0x1407fe128: xor r12, 0x2bc7a80c
	0x1407fe12f: jmp r12
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t380
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a47a25
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a47a31
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140940a07
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a0f
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x1407eb5ac: mov rbx, rbp
	0x1407eb5af: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5b6: mov edi, dword ptr [rbx]
	0x1407eb5b8: and edi, 1
	0x1407eb5be: cmp edi, 0
	0x1407eb5c4: je 0x1407eb5d4
	0x1407eb5e1: mov r11, rbp
	0x1407eb5e7: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5ee: mov eax, dword ptr [r11]
	0x1407eb5f1: and eax, 1
	0x1407eb5f6: cmp eax, 0
	0x1407eb5fb: je 0x1407eb612
	0x1407eb620: mov r10, rbp
	0x1407eb623: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb630: mov r10, qword ptr [r10]
	0x1407eb63d: add r10, 2
	0x1407eb644: movzx r12, word ptr [r10]
	0x1407eb66e: mov r13, rbp
	0x1407eb686: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407eb694: xor r12d, dword ptr [r13]
	0x1407eb69b: mov r9, rbp
	0x1407eb6a1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb6ab: add dword ptr [r9], r12d
	0x1407eb6ba: mov rbx, rbp
	0x1407eb6d1: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb6d8: xor dword ptr [rbx], 0x516cdefe
	0x1407eb6e4: mov rdx, rbp
	0x1407eb6e7: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407eb6ee: mov bl, byte ptr [rdx]
	0x1407eb6f0: cmp bl, 0x4c
	0x1407eb6f3: jbe 0x1407eb709
	0x1407eb709: mov r13, rbp
	0x1407eb70c: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407eb71d: xor word ptr [r13], r12w
	0x1407eb72c: mov r8, rbp
	0x1407eb73d: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407eb752: movzx r14, word ptr [r8]
	0x1407eb75c: sub r14w, 0x345c
	0x1407eb770: add r14, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1407eb773: mov r14, qword ptr [r14]
	0x1407eb776: pop rcx
	0x1407eb78c: mov qword ptr [r14], rcx
	0x1407eb792: mov r8, r14
	0x1407eb79f: mov rdi, 0
	0x1407eb7a6: mov r10, rbp
	0x1407eb7ba: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb7c7: mov r10, qword ptr [r10]
	0x1407eb7d1: add r10, 4
	0x1407eb7e9: mov di, word ptr [r10]
	0x1407eb7f4: add rdi, rbp
	0x1407eb7f7: cmp r8, rdi
	0x1407eb7fa: je 0x1407eb82d
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407eb826: add qword ptr [rdi], 8
	0x1407eb85d: mov rsi, rbp
	0x1407eb863: add rsi, 0x145
	0x1407eb877: mov rax, rbp
Load [EBP+0x145](STATIC)
	0x1407eb881: mov rsi, qword ptr [rsi]
	0x1407eb895: add rsi, 0
	0x1407eb8a6: add rax, 0xab
	0x1407eb8b6: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407eb8cf: mov rax, qword ptr [rax]
	0x1407eb8df: mov rbx, rbp
	0x1407eb8f3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407eb8fa: xor esi, dword ptr [rbx]
	0x1407eb8fc: add esi, 0x500f8777
	0x1407eb932: and rsi, 0xffff
	0x1407eb943: shl rsi, 3
	0x1407eb947: add rax, rsi
	0x1407eb94a: mov r13, qword ptr [rax]
	0x1407eb957: mov rsi, rbp
	0x1407eb961: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a15
	0x1407eb968: add qword ptr [rsi], 6
	0x1407eb96f: jmp r13
handlers outputs:



basic block ends with indirect unconditional branch
	0x14080b955: mov rax, rbp
	0x14080b958: mov r12, rbp
	0x14080b95b: add r12, 0x6e
Load [EBP+0x6e](STATIC)
	0x14080b962: mov r12, qword ptr [r12]
	0x14080b966: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14080b96c: mov rax, qword ptr [rax]
	0x14080b96f: add rax, 0
	0x14080b975: movzx rax, word ptr [rax]
	0x14080b979: add rax, rbp
Store VM_REG [EBP+0x131]
	0x14080b97c: mov qword ptr [rax], r12
	0x14080b97f: mov r10b, 0xc0
	0x14080b982: mov r14, rbp
	0x14080b985: add r14, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14080b98c: xor byte ptr [r14], r10b
	0x14080b98f: mov rcx, rbp
	0x14080b992: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14080b999: mov rcx, qword ptr [rcx]
	0x14080b99c: add rcx, 2
	0x14080b9a3: mov rsi, rbp
	0x14080b9a6: movzx rcx, word ptr [rcx]
	0x14080b9aa: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14080b9b1: mov rsi, qword ptr [rsi]
	0x14080b9be: add ecx, 0x54893270
	0x14080b9c4: mov r11, rbp
	0x14080b9c7: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080b9ce: add dword ptr [r11], ecx
	0x14080b9d1: and rcx, 0xffff
	0x14080b9d8: shl rcx, 3
	0x14080b9dc: add rsi, rcx
	0x14080b9df: mov r12, qword ptr [rsi]
	0x14080b9e2: mov rdi, rbp
	0x14080b9e5: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a19
	0x14080b9ec: add qword ptr [rdi], 4
	0x14080b9f3: jmp r12
handlers outputs:



	0x14080b955: mov rax, rbp
	0x14080b958: mov r12, rbp
	0x14080b95b: add r12, 0x6e
Load [EBP+0x6e](STATIC)
	0x14080b962: mov r12, qword ptr [r12]
	0x14080b966: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14080b96c: mov rax, qword ptr [rax]
	0x14080b96f: add rax, 0
	0x14080b975: movzx rax, word ptr [rax]
	0x14080b979: add rax, rbp
Store VM_REG [EBP+0x131]
	0x14080b97c: mov qword ptr [rax], r12
	0x14080b97f: mov r10b, 0xc0
	0x14080b982: mov r14, rbp
	0x14080b985: add r14, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14080b98c: xor byte ptr [r14], r10b
	0x14080b98f: mov rcx, rbp
	0x14080b992: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14080b999: mov rcx, qword ptr [rcx]
	0x14080b99c: add rcx, 2
	0x14080b9a3: mov rsi, rbp
	0x14080b9a6: movzx rcx, word ptr [rcx]
	0x14080b9aa: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14080b9b1: mov rsi, qword ptr [rsi]
	0x14080b9be: add ecx, 0x54893270
	0x14080b9c4: mov r11, rbp
	0x14080b9c7: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080b9ce: add dword ptr [r11], ecx
	0x14080b9d1: and rcx, 0xffff
	0x14080b9d8: shl rcx, 3
	0x14080b9dc: add rsi, rcx
	0x14080b9df: mov r12, qword ptr [rsi]
	0x14080b9e2: mov rdi, rbp
	0x14080b9e5: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a1d
	0x14080b9ec: add qword ptr [rdi], 4
	0x14080b9f3: jmp r12
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x131](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140940a27
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a2f
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x140804fd2: mov rax, rbp
	0x140804fd5: sub rcx, rcx
	0x140804fd8: add rax, 0x145
	0x140804fde: xor r9, 0xffff
	0x140804fe8: add r9, rsi
Load [EBP+0x145](STATIC)
	0x140804feb: mov rax, qword ptr [rax]
	0x140804fee: and r9, 0x90
	0x140804ff5: and rcx, rdx
	0x140804ff8: add rax, 0
	0x140804ffe: mov rdx, rsi
	0x140805001: xor rcx, 8
	0x140805008: movzx rax, word ptr [rax]
	0x14080501a: mov r13, rbp
	0x14080501d: sub r9, -0x80000000
	0x140805024: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140805032: mov r13, qword ptr [r13]
	0x140805036: xor rcx, rcx
	0x140805039: mov rbx, rbp
	0x14080503c: or r9, rcx
	0x14080504d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140805054: xor eax, dword ptr [rbx]
	0x14080506b: sub eax, 0x64960eaf
	0x14080507a: mov r8, rbp
	0x140805083: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080508a: or dword ptr [r8], eax
	0x14080508d: and rax, 0xffff
	0x1408050a7: shl rax, 3
	0x1408050ab: add r13, rax
	0x1408050b5: mov r12, qword ptr [r13]
	0x1408050c0: mov r8, rbp
	0x1408050c3: mov rax, 0
	0x1408050ca: add r8, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408050d4: mov qword ptr [r8], r12
	0x1408050e1: mov r15, rbp
	0x1408050e4: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408050eb: and dword ptr [r15], 0x57333fc5
	0x1408050f2: mov r10, 0
	0x1408050fc: mov r8, rbp
	0x14080510d: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080511b: mov r8, qword ptr [r8]
	0x140805121: add r8, 2
	0x14080512f: sub r12, rdx
	0x140805132: mov r10w, word ptr [r8]
	0x140805136: or r9, r8
	0x140805139: mov r11, rbp
	0x140805151: add r11, 0xbf
	0x140805166: or r12, 0x80
Load [EBP+0xbf](STATIC)
	0x14080516d: add r10d, dword ptr [r11]
	0x140805177: mov rdi, rbp
	0x140805188: add rdi, 0x120
Load [EBP+0x120](STATIC)
	0x140805199: xor r10d, dword ptr [rdi]
	0x1408051ad: mov r14, rbp
	0x1408051b0: xor r9, 8
	0x1408051b7: mov rcx, r12
	0x1408051ba: add r14, 0xbf
	0x1408051c8: add rcx, r9
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408051cb: and dword ptr [r14], r10d
	0x1408051ce: mov r14, rbp
	0x1408051d8: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408051e6: add dword ptr [r14], 0x4d8e9739
	0x1408051f4: mov r14, rbp
	0x1408051f7: sub rcx, 0x10
	0x1408051fe: add r14, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14080520c: xor word ptr [r14], r10w
	0x140805228: mov r8, rbp
	0x14080522b: add r8, 0xbf
	0x140805232: and r14, 0x90
	0x140805239: xor rcx, 0x40
	0x140805240: mov r9, rbp
	0x140805243: sub rax, -0x80000000
	0x140805249: add r9, 0x145
	0x140805257: xor rax, 0xffff
Load [EBP+0x145](STATIC)
	0x14080525d: mov r9, qword ptr [r9]
	0x140805260: add r9, 4
	0x140805267: movzx r11, word ptr [r9]
	0x14080526b: add rax, rcx
	0x140805275: mov r10, rax
	0x1408052a4: mov rdi, rbp
	0x1408052ae: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408052ca: xor r11d, dword ptr [rdi]
	0x1408052d0: mov rbx, rbp
	0x1408052d9: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408052ed: add dword ptr [rbx], r11d
	0x1408052fa: mov r9, rbp
	0x140805303: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080530a: xor dword ptr [r9], 0x3856de74
	0x140805311: mov rdi, rbp
	0x140805314: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140805328: mov r12b, byte ptr [rdi]
	0x14080532b: cmp r12b, 0xb4
	0x14080532f: jbe 0x140805343
	0x140805346: mov rax, rbp
	0x140805349: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080534f: xor word ptr [rax], r11w
	0x140805353: mov r12, rbp
	0x140805356: add r12, 0x145
	0x14080535d: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x140805360: mov r12, qword ptr [r12]
	0x140805364: add rsi, 0xd6
	0x14080536b: add r12, 2
Load [EBP+0xd6](STATIC)
	0x140805372: movzx rsi, word ptr [rsi]
	0x140805376: mov r15, rbp
	0x140805379: movzx r13, word ptr [r12]
	0x14080537e: mov rax, rbp
	0x140805381: add si, 0x60b4
	0x140805386: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080538c: add r13d, dword ptr [rax]
	0x14080538f: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140805392: mov rsi, qword ptr [rsi]
	0x140805395: add r15, 0x16e
Deref(t399,ds)
	0x14080539c: mov esi, dword ptr [rsi]
Load [EBP+0x16e](STATIC)
	0x14080539e: movzx r15, word ptr [r15]
	0x1408053a2: add r15, rbp
Store VM_REG [EBP+0x64]
	0x1408053a5: mov dword ptr [r15], esi
	0x1408053a8: add r15, 4
Store VM_REG [EBP+0x68]
	0x1408053af: mov dword ptr [r15], 0
	0x1408053b6: mov rdi, 0x200
	0x1408053bd: and r13, 1
	0x1408053cb: add r14, 0x800
	0x1408053e3: mov al, 0x17
	0x1408053e5: mov rcx, rbp
	0x1408053e8: or r14, 0x7fffffff
	0x1408053ef: and rdi, r14
	0x1408053f2: add rcx, 0x130
	0x1408053f9: or r14, r11
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408053fc: sub byte ptr [rcx], al
	0x1408053fe: xor r14, r14
	0x140805408: xor r14, 0x88
	0x140805412: and r13, 0x20
	0x140805419: mov r9, 0x12
	0x140805420: push 0x3c67fa0b
	0x140805425: push 0x5e751057
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542a: mov qword ptr [rsp], rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542e: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140805431: mov r15, qword ptr [rsp]
	0x140805435: push r10
	0x140805437: mov r10, rsp
	0x14080543a: add r10, 8
	0x14080543e: push 0x645c3421
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x200
	0x140805443: mov qword ptr [rsp], rdi
	0x140805447: push rbx
	0x140805448: movabs rbx, 0x58effc32
	0x140805452: push rbx
	0x140805453: pop rdi
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x140805454: mov rbx, qword ptr [rsp]
	0x140805458: add rsp, 8
	0x14080545c: sub rsp, 8
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x140805463: mov qword ptr [rsp], rcx
	0x140805467: movabs rcx, 0x1fb779e1
	0x140805471: xor rcx, 0x4008e6d9
	0x140805478: xor rdi, rcx
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14080547b: mov rcx, qword ptr [rsp]
	0x14080547f: add rsp, 8
	0x140805483: push rax
	0x140805484: movabs rax, 0x776f2583
	0x14080548e: xor rdi, rax
	0x140805491: pop rax
	0x140805492: xor rdi, 0x703f4681
	0x140805499: add r10, rdi
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14080549c: mov rdi, qword ptr [rsp]
	0x1408054a0: add rsp, 8
	0x1408054a7: sub rsp, 8
	0x1408054ae: mov qword ptr [rsp], r10
	0x1408054b2: push qword ptr [rsp + 8]
	0x1408054b6: pop r10
	0x1408054b8: pop qword ptr [rsp]
	0x1408054bb: mov rsp, qword ptr [rsp]
	0x1408054bf: sub r14, r15
	0x1408054c2: add r13, 0xffff
	0x1408054c9: or r14, 0x10
	0x1408054d0: xor rdi, 1
	0x1408054d7: add r9, -0x80000000
	0x1408054de: xor r9, 0xffffffff80000000
	0x1408054e5: xor r13, 8
	0x1408054ec: push r9
	0x1408054ee: mov r9, rsp
	0x1408054f1: add r9, 8
	0x1408054f5: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1408054fc: xchg qword ptr [rsp], r9
	0x140805500: pop rsp
	0x140805501: push r8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xbf + context) & 0xffffffffffffffff)
	0x140805503: pop qword ptr [rsp]
	0x140805506: push rbx
	0x140805507: push rax
	0x140805508: push rbp
	0x140805509: movabs rbp, 0x7ff6604a
	0x140805513: movabs rax, 0xf58d95c0
	0x14080551d: sub rax, rbp
	0x140805520: pop rbp
	0x140805521: push rax
	0x140805522: add qword ptr [rsp], 0x75df38fd
	0x14080552a: pop rbx
	0x14080552b: sub rbx, 0x75df38fd
	0x140805532: mov rax, qword ptr [rsp]
	0x140805536: add rsp, 8
	0x14080553d: mov r8, rbx
	0x140805540: pop rbx
	0x140805541: push r13
	0x140805543: movabs r13, 0x6fff9f8e
	0x14080554d: and r8, r13
	0x140805550: pop r13
	0x140805552: push 0x2a097355
	0x140805557: mov qword ptr [rsp], rcx
	0x14080555b: movabs rcx, 0x2f3b7035
	0x140805565: xor r8, rcx
	0x14080556c: add rsp, 8
	0x140805570: or r8, 0x7e1f37fa
	0x140805577: shl r8, 2
	0x14080557b: shr r8, 4
	0x14080557f: push r12
	0x140805581: movabs r12, 0x5ca80437
	0x14080558b: shl r12, 1
	0x14080558f: push 0x136abbe8
	0x140805594: mov qword ptr [rsp], rbx
	0x140805598: mov rbx, -0x54266261
	0x14080559f: add r12, rbx
	0x1408055a6: push r14
	0x1408055a8: mov r14, rsp
	0x1408055ab: add r14, 8
	0x1408055af: add r14, 8
	0x1408055b6: xchg qword ptr [rsp], r14
	0x1408055ba: pop rsp
	0x1408055bb: xor r8, r12
	0x1408055be: pop r12
	0x1408055c0: push rbp
	0x1408055c1: push r9
	0x1408055c3: movabs r9, 0x7a867ab6
	0x1408055cd: mov rbp, r9
	0x1408055d0: pop r9
	0x1408055d2: xor r8, rbp
	0x1408055d5: pop rbp
	0x1408055d6: add r15, r8
	0x1408055d9: pop r8
	0x1408055db: add rdi, 0x7fffffff
	0x1408055e2: mov rcx, 0xd5
	0x1408055e9: or r13, 0x40
	0x1408055f0: push 0x35f3c600
	0x1408055f5: push 0x497a6267
	0x1408055fa: push r13
	0x1408055fc: mov r13, rcx
	0x1408055ff: mov qword ptr [rsp + 8], r13
	0x140805604: pop r13
	0x140805606: pop qword ptr [rsp]
	0x140805609: push 0x3a2bf514
	0x14080560e: mov qword ptr [rsp], r10
	0x140805612: push r13
	0x140805614: movabs r13, 0x5a6d8c24
	0x14080561e: movabs r10, 0xd9eb41dc
	0x140805628: add r10, 0xe7f789a
	0x14080562f: sub r10, r13
	0x140805632: sub r10, 0xe7f789a
	0x14080563d: add rsp, 8
	0x140805641: inc r10
	0x140805644: neg r10
	0x140805647: push rdi
	0x140805648: movabs rdi, 0x7a7f8b20
	0x140805652: xor r10, rdi
	0x140805655: pop rdi
	0x140805656: push 0x81e4e90
	0x14080565b: mov qword ptr [rsp], r14
	0x14080565f: movabs r14, 0xffffffff7b320e67
	0x140805669: sub r10, r14
	0x14080566c: pop r14
	0x14080566e: mov rcx, r10
	0x140805671: pop r10
	0x140805673: shr rcx, 8
	0x140805677: add rcx, 0x7f7e4291
	0x14080567e: xor rcx, 0x7ffe0e42
	0x140805685: push r14
	0x140805687: push r8
	0x140805689: movabs r8, 0x2f5fc02a
	0x140805693: add r8, -0x2f5fc02a
	0x14080569a: mov r14, r8
	0x14080569d: pop r8
	0x14080569f: add r14, 0x5d9f82c4
	0x1408056a6: add r14, r15
	0x1408056a9: sub r14, 0x5d9f82c4
	0x1408056b0: push rax
	0x1408056b1: mov rax, 0
	0x1408056b8: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x140940a35
	0x1408056bb: add qword ptr [rax], rcx
	0x1408056be: pop rax
	0x1408056c3: add rsp, 8
	0x1408056c7: push qword ptr [rsp]
	0x1408056ca: pop rcx
	0x1408056cb: add rsp, 8
	0x1408056d6: mov r9, rbp
	0x1408056e3: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x1408056fb: mov rcx, qword ptr [r9]
	0x140805705: add rcx, 0x30f18592
	0x14080570c: push rcx
	0x14080575c: pop rcx
	0x14080575d: sub rcx, 0x30f18592
	0x140805764: jmp rcx
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a3d
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a45
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



basic block ends with ret
	0x1408008cf: mov r9, rbp
	0x1408008dc: mov r10, rbp
	0x1408008f3: add r10, 0x145
	0x14080090b: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x140800912: mov r9, qword ptr [r9]
Load [EBP+0x145](STATIC)
	0x14080091b: mov r10, qword ptr [r10]
	0x140800928: add r10, 6
	0x140800935: movzx r10, word ptr [r10]
	0x140800953: add r10d, 0x28af1060
	0x14080095d: mov rbx, rbp
	0x140800967: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800978: sub dword ptr [rbx], r10d
	0x14080098c: and r10, 0xffff
	0x1408009a1: shl r10, 3
	0x1408009ac: add r9, r10
	0x1408009bd: mov rax, qword ptr [r9]
	0x1408009d1: mov r10, rbp
	0x1408009d4: add r10, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408009e8: mov qword ptr [r10], rax
	0x1408009eb: mov r11, rbp
	0x1408009f5: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140800a06: mov r11, qword ptr [r11]
	0x140800a13: add r11, 4
	0x140800a27: movzx r14, word ptr [r11]
	0x140800a32: mov rcx, rbp
	0x140800a4a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800a51: xor r14d, dword ptr [rcx]
	0x140800a57: mov r13, rbp
	0x140800a64: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140800a72: sub r14d, dword ptr [r13]
	0x140800a7d: mov r15, rbp
	0x140800a87: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800a95: and dword ptr [r15], r14d
	0x140800a98: mov rbx, rbp
	0x140800aa5: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800aac: xor dword ptr [rbx], 0x684cba10
	0x140800ac7: mov r15, rbp
	0x140800ad7: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x140800aeb: mov sil, byte ptr [r15]
	0x140800aee: cmp sil, 0x52
	0x140800af2: jbe 0x140800b1b
	0x140800b06: xor r14d, 0x21e62de9
	0x140800b22: mov r15, rbp
	0x140800b33: add r15, 0x16e
	0x140800b3a: mov rcx, 0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140800b41: add word ptr [r15], r14w
	0x140800b4f: mov r12, rbp
	0x140800b59: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140800b60: mov r12, qword ptr [r12]
	0x140800b64: add r12, 0
	0x140800b6e: mov r15d, dword ptr [r12]
	0x140800b79: mov r11, rbp
	0x140800b83: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800b98: xor r15d, dword ptr [r11]
	0x140800bb2: mov r9, rbp
	0x140800bbf: add r9, 0xbf
	0x140800bcd: mov r11, rbp
	0x140800bde: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800be8: xor dword ptr [r11], 0x2746ad5e
	0x140800bf9: mov r8, rbp
	0x140800bfc: add r8, 0x58
	0x140800c03: mov rbx, 0x12
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140800c18: sub dword ptr [r8], r15d
	0x140800c2c: mov rdx, rbp
	0x140800c3f: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140800c46: or dword ptr [rdx], r15d
	0x140800c49: mov rsi, rbp
	0x140800c4c: add rsi, 0xbf
	0x140800c56: mov r15, rbp
	0x140800c59: add r15, 0x120
	0x140800c60: mov r11, rbp
	0x140800c63: add r11, 0x58
Load [EBP+0x120](STATIC)
	0x140800c6a: and r9d, dword ptr [r15]
	0x140800c70: mov r10, rbp
	0x140800c73: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140800c7a: movzx r10, word ptr [r10]
	0x140800c7e: sub r10w, 0x9025
Load [EBP+0x58](STATIC)
	0x140800c84: mov r11d, dword ptr [r11]
	0x140800c87: add r10, rbp
Store VM_REG [EBP+0x5c]
	0x140800c8a: mov dword ptr [r10], r11d
	0x140800c8d: add r10, 4
Store VM_REG [EBP+0x60]
	0x140800c94: mov dword ptr [r10], 0
	0x140800c9b: mov rdi, 0x7fc0bc02
	0x140800ca2: mov r13, rbp
	0x140800ca5: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800cac: sub dword ptr [r13], edi
	0x140800cb0: mov r15, rbp
	0x140800cb3: add r15, 0xfd
Load [EBP+0xfd](STATIC)
	0x140800cba: mov rax, qword ptr [r15]
	0x140800cbd: sub rsp, 8
	0x140800cc1: sub rsp, 8
	0x140800cc5: push r13
	0x140800cc7: mov r13, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((0x0) << 20 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0xfffff)) << 1 | 0x0) << 11 | ((0xbf + (context & 0x7ff)) & 0x7ff))
	0x140800cca: mov qword ptr [rsp + 8], r13
	0x140800ccf: pop r13
	0x140800cd1: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800cd8: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800cdc: add qword ptr [rsp], 8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800ce1: mov r9, qword ptr [rsp]
	0x140800ce5: add rsp, 8
	0x140800cec: add r9, 8
	0x140800cf0: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x140800cf4: mov qword ptr [rsp], rcx
	0x140800cf8: movabs rcx, 8
	0x140800d02: sub r9, 0xb7da6e8
	0x140800d09: add r9, 0xfbc4b83
	0x140800d10: add r9, 0xfd1e092
	0x140800d17: sub r9, rcx
	0x140800d1a: sub r9, 0xfd1e092
	0x140800d21: sub r9, 0xfbc4b83
	0x140800d28: add r9, 0xb7da6e8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800d2f: mov rcx, qword ptr [rsp]
	0x140800d33: add rsp, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d37: xor r9, qword ptr [rsp]
	0x140800d3b: push rdx
	0x140800d3c: push r9
	0x140800d3e: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
	0x140800d3f: xor qword ptr [rsp + 8], rdx
	0x140800d44: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d49: mov rsp, qword ptr [rsp]
	0x140800d4d: push rax
unknown read addr: fe8 ((0xfffffffffffffff8 + (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: 0x140819fc9
	0x140800d4e: pop qword ptr [rsp]
unknown read addr: ff0 (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
unknown store addr: ff8, lea_ast: ((0x8 + (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff), simplified_source_node: 0x140819fc9
	0x140800d51: pop qword ptr [rsp]
	0x140800d54: xor rdi, 0x800
	0x140800d5b: add rsi, r11
	0x140800d5e: mov rdx, 0x200
	0x140800d65: xor rdi, 0x10
	0x140800d6c: or rdi, 0x400
	0x140800d81: and rdx, 0x40
	0x140800d88: sub rbx, -0x80000000
	0x140800d8f: mov rax, rsi
	0x140800d92: or rax, 0x90
	0x140800d98: sub rax, rsi
	0x140800d9b: push 0xe96057d
	0x140800da0: push rdx
	0x140800da1: push r10
	0x140800da3: pop rdx
unknown store addr: ff0, lea_ast: (((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 7 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7f)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: ((0x60 + context) & 0xffffffffffffffff)
	0x140800da4: mov qword ptr [rsp + 8], rdx
	0x140800da9: pop rdx
	0x140800daa: mov r10, rbp
	0x140800dad: push rdx
	0x140800dae: push 0x60442fae
	0x140800db3: push r10
	0x140800db5: pop qword ptr [rsp]
	0x140800db8: sub qword ptr [rsp], 0xfda5ba9
	0x140800dc0: push qword ptr [rsp]
	0x140800dc3: pop rdx
	0x140800dc4: push 0x19066ad
	0x140800dc9: mov qword ptr [rsp], rsi
	0x140800dcd: push rsp
	0x140800dce: pop rsi
	0x140800dcf: add rsi, 8
	0x140800dd3: add rsi, 8
	0x140800dda: xchg qword ptr [rsp], rsi
	0x140800dde: mov rsp, qword ptr [rsp]
	0x140800de2: add rdx, 0xfda5ba9
	0x140800de9: sub rsp, 8
	0x140800df0: mov qword ptr [rsp], rdx
	0x140800df4: push qword ptr [rsp]
	0x140800df7: pop r14
	0x140800df9: push r10
	0x140800dfb: mov r10, rsp
	0x140800dfe: add r10, 8
	0x140800e02: add r10, 8
	0x140800e09: xchg qword ptr [rsp], r10
	0x140800e0d: pop rsp
	0x140800e0e: pop rdx
	0x140800e0f: mov r10, qword ptr [rsp]
	0x140800e13: add rsp, 8
	0x140800e17: xor r15, 0x400
	0x140800e1e: sub rsi, rsi
	0x140800e21: push rdi
	0x140800e22: push r15
	0x140800e24: movabs r15, 0x76efb200
	0x140800e2e: sub rsp, 8
	0x140800e35: mov qword ptr [rsp], r11
	0x140800e39: push rsi
	0x140800e3a: push rbx
	0x140800e3b: movabs rbx, 0x79fe49bf
	0x140800e45: movabs rsi, 0xf0edfd04
	0x140800e4f: sub rsi, 0xebff891
	0x140800e56: sub rsi, 0x36bcbea
	0x140800e5d: add rsi, 0x43eae26
	0x140800e64: sub rsi, rbx
	0x140800e67: sub rsi, 0x43eae26
	0x140800e6e: add rsi, 0x36bcbea
	0x140800e75: add rsi, 0xebff891
	0x140800e7c: pop rbx
	0x140800e7d: push rsi
	0x140800e7e: xor qword ptr [rsp], 0x7fddb4a5
	0x140800e86: pop r11
	0x140800e88: xor r11, 0x7fddb4a5
	0x140800e93: push rdi
	0x140800e94: mov rdi, rsp
	0x140800e97: add rdi, 8
	0x140800e9b: add rdi, 8
	0x140800ea2: xchg qword ptr [rsp], rdi
	0x140800ea6: mov rsp, qword ptr [rsp]
	0x140800eaa: push rdx
	0x140800eab: mov rdx, r11
	0x140800eae: mov rdi, rdx
	0x140800eb1: pop rdx
	0x140800eb2: pop r11
	0x140800eb4: sub rdi, r15
	0x140800eb7: push qword ptr [rsp]
	0x140800eba: pop r15
	0x140800ebc: push rcx
	0x140800ebd: push rsp
	0x140800ebe: pop rcx
	0x140800ebf: add rcx, 8
	0x140800ec3: push rax
	0x140800ec4: movabs rax, 0x3dafab26
	0x140800ece: push rdi
	0x140800ecf: movabs rdi, 0x3dafab2e
	0x140800ed9: xor rax, rdi
	0x140800edc: pop rdi
	0x140800edd: add rcx, rax
	0x140800ee0: pop rax
	0x140800ee1: xchg qword ptr [rsp], rcx
	0x140800ee5: pop rsp
	0x140800ee6: add r14, rdi
	0x140800ee9: pop rdi
	0x140800eea: push 0x28dbaebe
	0x140800eef: push 0x78a8644c
	0x140800ef4: push rbx
	0x140800ef5: pop qword ptr [rsp]
	0x140800ef8: pop qword ptr [rsp]
	0x140800efb: push rbp
	0x140800efc: push r10
	0x140800efe: movabs r10, 0x7fbc6e0f
	0x140800f08: movabs rbp, 0x7fbc6e17
	0x140800f12: sub rbp, r10
	0x140800f15: pop r10
	0x140800f17: mov rbx, rbp
	0x140800f1a: push qword ptr [rsp]
	0x140800f1d: pop rbp
	0x140800f1e: add rsp, 8
	0x140800f22: sub rsp, 8
	0x140800f29: push rax
	0x140800f2a: pop qword ptr [rsp]
	0x140800f2d: mov rax, 0
	0x140800f34: sub rax, 0x66df1d55
	0x140800f3a: add rax, r14
	0x140800f3d: add rax, 0x66df1d55
Load [EBP+0x145](STATIC)
bytecode=0x140940a4d
	0x140800f43: add qword ptr [rax], rbx
	0x140800f46: push qword ptr [rsp]
	0x140800f49: mov rax, qword ptr [rsp]
	0x140800f4d: add rsp, 8
	0x140800f54: push rax
	0x140800f55: mov rax, rsp
	0x140800f58: add rax, 8
	0x140800f5c: add rax, 8
	0x140800f62: xchg qword ptr [rsp], rax
	0x140800f66: pop rsp
	0x140800f67: push qword ptr [rsp]
	0x140800f6e: add rsp, 8
	0x140800f72: add rsp, 8
	0x140800f8a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x140819fc9: mov r8, rbp
	0x140819fcc: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140819fd3: or dword ptr [r8], 0x49276787
	0x140819fda: mov r9, rbp
	0x140819fdd: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140819fe4: sub dword ptr [r9], 0x1daae198
	0x140819feb: mov rax, rbp
	0x140819fee: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140819ff4: xor dword ptr [rax], 0x7c40a3fb
	0x14081a00b: mov rax, rbp
	0x14081a00e: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14081a014: mov rax, qword ptr [rax]
	0x14081a017: add rax, 5
	0x14081a01d: movzx rdi, word ptr [rax]
	0x14081a028: mov rcx, rbp
	0x14081a032: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081a043: xor edi, dword ptr [rcx]
	0x14081a045: mov r14, rbp
	0x14081a052: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081a059: sub edi, dword ptr [r14]
	0x14081a05c: mov r10, rbp
	0x14081a05f: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081a069: or dword ptr [r10], edi
	0x14081a076: mov r10, rbp
	0x14081a080: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081a087: and dword ptr [r10], 0x7a62e425
	0x14081a091: mov r13, rbp
	0x14081a09e: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x14081a0a8: mov sil, byte ptr [r13]
	0x14081a0ac: cmp sil, 0xeb
	0x14081a0b0: jbe 0x14081a0d4
	0x14081a0d4: mov r9, rbp
	0x14081a0e4: add r9, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081a0f5: sub word ptr [r9], di
	0x14081a0f9: mov r9, rbp
	0x14081a0ff: add r9, 0x16e
Load [EBP+0x16e](STATIC)
	0x14081a110: movzx r9, word ptr [r9]
	0x14081a11b: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14081a11e: neg dword ptr [r9]
	0x14081a121: pushfq
	0x14081a122: add r9, 4
Store VM_REG [EBP+0x60]
	0x14081a130: mov dword ptr [r9], 0
	0x14081a13a: mov r11, 0
	0x14081a148: mov r9, rbp
	0x14081a15c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081a16d: mov r9, qword ptr [r9]
	0x14081a17e: add r9, 0
	0x14081a192: mov r11b, byte ptr [r9]
	0x14081a195: cmp r11b, 0
	0x14081a199: je 0x14081a201
	0x14081a19f: mov r9, rbp
	0x14081a1a9: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081a1b3: mov r9, qword ptr [r9]
	0x14081a1bd: add r9, 3
	0x14081a1d2: mov r11w, word ptr [r9]
	0x14081a1e4: add r11, rbp
	0x14081a1f1: pop rdi
Store VM_REG [EBP+0x26]
	0x14081a1f2: mov qword ptr [r11], rdi
	0x14081a253: mov rcx, rbp
	0x14081a25d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081a26b: mov rcx, qword ptr [rcx]
	0x14081a275: add rcx, 1
	0x14081a28a: movzx rcx, word ptr [rcx]
	0x14081a29c: mov r9, rbp
	0x14081a2ad: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14081a2bb: mov r9, qword ptr [r9]
	0x14081a2be: mov rbx, rbp
	0x14081a2c8: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081a2cf: add ecx, dword ptr [rbx]
	0x14081a2d8: mov r8, rbp
	0x14081a2de: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081a2f3: or dword ptr [r8], ecx
	0x14081a2fd: and rcx, 0xffff
	0x14081a30e: shl rcx, 3
	0x14081a319: add r9, rcx
	0x14081a323: mov r11, qword ptr [r9]
	0x14081a32d: mov r15, rbp
	0x14081a33e: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a54
	0x14081a345: add qword ptr [r15], 7
	0x14081a34c: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x14083528c: mov rcx, 0
	0x140835293: mov r9, rbp
	0x140835296: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14083529d: mov r9, qword ptr [r9]
	0x1408352a0: add r9, 8
	0x1408352a7: mov cx, word ptr [r9]
	0x1408352ab: add rcx, rbp
	0x1408352ae: mov r14, 0
	0x1408352b5: mov rax, rbp
	0x1408352b8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1408352be: mov rax, qword ptr [rax]
	0x1408352c1: add rax, 0xa
	0x1408352c7: mov r14w, word ptr [rax]
	0x1408352cb: add r14, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1408352ce: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x1408352d0: push qword ptr [r14]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408352d3: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408352d5: pop qword ptr [r14]
	0x1408352db: mov r14, rbp
	0x1408352de: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408352e5: mov r14, qword ptr [r14]
	0x1408352e8: add r14, 6
	0x1408352f6: movzx r8, word ptr [r14]
	0x14083531b: mov r9, rbp
	0x14083532e: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x140835346: add r8d, dword ptr [r9]
	0x140835349: mov rdx, rbp
	0x14083535d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140835364: sub dword ptr [rdx], r8d
	0x140835367: mov rdi, rbp
	0x140835371: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140835378: or dword ptr [rdi], 0x336c5f64
	0x140835385: mov rdx, rbp
	0x140835388: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14083539c: mov r13b, byte ptr [rdx]
	0x14083539f: cmp r13b, 0xd4
	0x1408353a3: jbe 0x1408353cb
	0x1408353cb: mov r15, rbp
	0x1408353ce: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408353ea: xor word ptr [r15], r8w
	0x1408353ee: mov rcx, 0x42bcea84
	0x1408353f5: mov rax, rbp
	0x1408353f8: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408353fe: add dword ptr [rax], ecx
	0x140835432: mov r9, rbp
	0x14083543b: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140835449: mov r9, qword ptr [r9]
	0x140835453: add r9, 0
	0x140835461: mov r11d, dword ptr [r9]
	0x14083549f: mov r10, rbp
	0x1408354a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408354a9: xor dword ptr [r10], r11d
	0x1408354ca: mov r9, rbp
	0x1408354e2: add r9, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408354f6: xor dword ptr [r9], r11d
	0x14083550a: mov rdi, rbp
	0x14083551b: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140835529: xor dword ptr [rdi], r11d
	0x14083552c: mov rcx, rbp
	0x140835540: add rcx, 0x58
	0x140835547: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x140835558: mov ecx, dword ptr [rcx]
	0x140835561: add r11, 0x16e
Load [EBP+0x16e](STATIC)
	0x140835568: movzx r11, word ptr [r11]
	0x14083556c: xor r11w, 0x49ad
	0x140835579: xor ecx, 0x670e1bd7
	0x14083557f: add r11, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140835590: xor dword ptr [r11], ecx
	0x140835593: add r11, 4
Store VM_REG [EBP+0x60]
	0x14083559a: mov dword ptr [r11], 0
	0x1408355d0: mov r12, rbp
	0x1408355dd: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408355ee: mov r12, qword ptr [r12]
	0x1408355fc: add r12, 4
	0x140835603: movzx r12, word ptr [r12]
	0x14083561d: mov r11, rbp
	0x140835620: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x140835627: mov r11, qword ptr [r11]
	0x14083562d: mov r10, rbp
	0x140835637: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083563e: sub r12d, dword ptr [r10]
	0x140835641: xor r12d, 0x348a9394
	0x14083565d: mov r10, rbp
	0x14083566a: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140835674: xor dword ptr [r10], r12d
	0x140835688: and r12, 0xffff
	0x14083569d: shl r12, 3
	0x1408356a1: add r11, r12
	0x1408356ab: mov rcx, qword ptr [r11]
	0x1408356ae: mov r10, rbp
	0x1408356b8: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a60
	0x1408356bf: add qword ptr [r10], 0xc
	0x1408356c6: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x140852bd6: mov r9, 0
	0x140852bdd: mov rsi, rbp
	0x140852be0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140852be7: mov rsi, qword ptr [rsi]
	0x140852bea: add rsi, 0xc
	0x140852bf1: mov r9w, word ptr [rsi]
	0x140852bf5: add r9, rbp
	0x140852bf8: mov r15, 0
	0x140852bff: mov rdi, rbp
	0x140852c02: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140852c09: mov rdi, qword ptr [rdi]
	0x140852c0c: add rdi, 0xa
	0x140852c13: mov r15w, word ptr [rdi]
	0x140852c17: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140852c1a: push qword ptr [r9]
Load [EBP+0x10d](VM_REGISTER)
	0x140852c1d: push qword ptr [r15]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140852c20: pop qword ptr [r9]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140852c23: pop qword ptr [r15]
	0x140852c26: mov r13, rbp
	0x140852c29: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140852c30: mov r13, qword ptr [r13]
	0x140852c34: add r13, 0
	0x140852c3b: mov r10, rbp
	0x140852c3e: add r10, 0x145
	0x140852c45: movzx r9, word ptr [r13]
Load [EBP+0x145](STATIC)
	0x140852c4a: mov r10, qword ptr [r10]
	0x140852c4d: add r10, 5
	0x140852c54: mov rbx, rbp
	0x140852c57: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140852c5e: xor r9d, dword ptr [rbx]
	0x140852c61: mov r11, rbp
	0x140852c64: add r11, 0xf0
Load [EBP+0xf0](STATIC)
	0x140852c6b: add r9d, dword ptr [r11]
	0x140852c6e: movzx r12, word ptr [r10]
	0x140852c72: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140852c75: mov r12, qword ptr [r12]
	0x140852c79: and rax, r12
	0x140852c7c: pushfq
	0x140852c7d: mov r12, rbp
	0x140852c80: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140852c91: and dword ptr [r12], r9d
	0x140852ca6: mov rsi, rbp
	0x140852ca9: add rsi, 0x130
Load [EBP+0x130](STATIC)
	0x140852cba: mov r10b, byte ptr [rsi]
	0x140852cc0: cmp r10b, 0x3f
	0x140852cc4: jbe 0x140852cd1
	0x140852cca: xor r9d, 0x4e82c617
	0x140852cd4: pop rax
	0x140852cd5: mov rdx, rbp
	0x140852cd8: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140852cdf: sub word ptr [rdx], r9w
	0x140852ced: mov rbx, rbp
	0x140852cf7: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140852cfe: mov rbx, qword ptr [rbx]
	0x140852d01: add rbx, 7
	0x140852d08: movzx r8, byte ptr [rbx]
	0x140852d0f: mov r14, rbp
	0x140852d1c: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140852d29: sub r8d, dword ptr [r14]
	0x140852d3a: mov r15, rbp
	0x140852d3d: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x140852d4b: add r8d, dword ptr [r15]
	0x140852d55: mov r13, rbp
	0x140852d5f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140852d66: xor dword ptr [r13], r8d
	0x140852d78: mov r14, rbp
	0x140852d85: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140852d93: xor dword ptr [r14], 0x2a4d2f87
	0x140852d9d: mov r13, rbp
	0x140852da3: add r13, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140852daa: xor dword ptr [r13], r8d
	0x140852dae: mov r15, rbp
	0x140852db8: add r15, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140852dbf: xor dword ptr [r15], r8d
	0x140852dc9: mov r14, rbp
	0x140852dcf: add r14, 0x58
Load [EBP+0x58](STATIC)
	0x140852de0: mov r14d, dword ptr [r14]
	0x140852de3: mov r11, rbp
	0x140852ded: add r11, 0x16e
Load [EBP+0x16e](STATIC)
	0x140852df4: movzx r11, word ptr [r11]
	0x140852df8: xor r11w, 0xe790
	0x140852e05: add r11, rbp
	0x140852e12: mov rax, r11
	0x140852e1c: mov rcx, r14
	0x140852e26: mov r11b, cl
	0x140852e37: and r11b, 0x3f
	0x140852e3b: cmp r11b, 0
	0x140852e3f: je 0x140852e53
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140852e45: shl dword ptr [rax], cl
	0x140852e97: mov rbx, rax
	0x140852e9d: add rbx, 4
Store VM_REG [EBP+0x60]
	0x140852eab: mov dword ptr [rbx], 0
	0x140852ed0: mov rdi, rbp
	0x140852ed3: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140852ee1: mov rdi, qword ptr [rdi]
	0x140852eeb: mov rdx, rbp
	0x140852efc: add rdx, 0xab
Load [EBP+0xab](STATIC)
	0x140852f0a: mov rdx, qword ptr [rdx]
	0x140852f0d: add rdi, 2
	0x140852f14: movzx rdi, word ptr [rdi]
	0x140852f26: mov r13, rbp
	0x140852f30: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140852f3e: add edi, dword ptr [r13]
	0x140852f42: add edi, 0x7e8e72e5
	0x140852f4b: mov r9, rbp
	0x140852f58: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140852f5f: add dword ptr [r9], edi
	0x140852f62: and rdi, 0xffff
	0x140852f6c: shl rdi, 3
	0x140852f70: add rdx, rdi
	0x140852f73: mov r15, qword ptr [rdx]
	0x140852f7d: mov r10, rbp
	0x140852f80: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a70
	0x140852f87: add qword ptr [r10], 0x10
	0x140852f8e: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407f13bd: mov rdx, rbp
	0x1407f13c6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f13d4: mov rdx, qword ptr [rdx]
	0x1407f13da: add rdx, 3
	0x1407f13ef: movzx r15, word ptr [rdx]
	0x1407f13fd: mov r9, rbp
	0x1407f1400: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f140d: add r15d, dword ptr [r9]
	0x1407f1410: mov rdx, rbp
	0x1407f1413: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f141a: add r15d, dword ptr [rdx]
	0x1407f141d: mov r9, rbp
	0x1407f142e: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f1443: and dword ptr [r9], r15d
	0x1407f1449: mov rbx, rbp
	0x1407f145a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f1464: xor dword ptr [rbx], 0x7f381154
	0x1407f146a: mov r11, rbp
	0x1407f147b: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x1407f1489: mov r12b, byte ptr [r11]
	0x1407f148c: cmp r12b, 0xea
	0x1407f1490: jbe 0x1407f14b5
	0x1407f14bc: mov rdx, rbp
	0x1407f14c6: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f14db: add word ptr [rdx], r15w
	0x1407f14e6: mov r11, rbp
	0x1407f14f0: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407f1505: mov r11, qword ptr [r11]
	0x1407f1508: add r11, 0
	0x1407f1515: movzx rcx, byte ptr [r11]
	0x1407f1527: mov r12, rbp
	0x1407f1531: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f1538: add ecx, dword ptr [r12]
	0x1407f1559: mov r10, rbp
	0x1407f155c: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f156c: sub dword ptr [r10], ecx
	0x1407f1576: mov r11, rbp
	0x1407f1579: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f158e: or dword ptr [r11], 0x374476df
	0x1407f1595: mov rdi, rbp
	0x1407f1598: add rdi, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407f15a6: add dword ptr [rdi], ecx
	0x1407f15b6: mov r15, rbp
	0x1407f15b9: add r15, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407f15c7: or dword ptr [r15], ecx
	0x1407f15d8: mov r14, rbp
	0x1407f15e9: mov rsi, rbp
	0x1407f15ef: add r14, 0x58
Load [EBP+0x58](STATIC)
	0x1407f15fd: mov r14d, dword ptr [r14]
	0x1407f160a: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f1622: movzx rsi, word ptr [rsi]
	0x1407f162d: sub si, 0xd59b
	0x1407f1639: add rsi, rbp
	0x1407f1643: mov rax, rsi
	0x1407f164c: mov rcx, r14
	0x1407f164f: mov sil, cl
	0x1407f1652: and sil, 0x3f
	0x1407f1656: cmp sil, 0
	0x1407f165a: je 0x1407f166f
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x1407f1660: shr dword ptr [rax], cl
	0x1407f1662: pushfq
	0x1407f16c6: mov r12, rax
	0x1407f16c9: add r12, 4
Store VM_REG [EBP+0x60]
	0x1407f16d7: mov dword ptr [r12], 0
	0x1407f16df: mov r14, rbp
	0x1407f16e2: add r14, 0xa7
	0x1407f16e9: mov r11, 0
	0x1407f16f0: mov rsi, rbp
	0x1407f16f3: add rsi, 0x145
Load [EBP+0xa7](STATIC)
	0x1407f16fa: mov edi, dword ptr [r14]
	0x1407f16fd: and edi, 1
Load [EBP+0x145](STATIC)
	0x1407f1703: mov rsi, qword ptr [rsi]
	0x1407f1706: cmp edi, 0
	0x1407f170c: je 0x1407f1723
	0x1407f1712: mov r14, rbp
	0x1407f1715: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f171c: add dword ptr [r14], 0x382e8a7e
	0x1407f1723: add rsi, 7
	0x1407f172a: mov r11b, byte ptr [rsi]
	0x1407f172d: cmp r11b, 0
	0x1407f1731: je 0x1407f175b
	0x1407f1737: mov rsi, rbp
	0x1407f173a: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407f1741: mov rsi, qword ptr [rsi]
	0x1407f1744: add rsi, 1
	0x1407f174b: mov r11w, word ptr [rsi]
	0x1407f174f: add r11, rbp
	0x1407f1752: pop rbx
Store VM_REG [EBP+0x26]
	0x1407f1753: mov qword ptr [r11], rbx
	0x1407f179c: mov r8, rbp
	0x1407f17ad: mov rax, rbp
	0x1407f17b7: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x1407f17c4: mov rax, qword ptr [rax]
	0x1407f17ca: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407f17d1: mov r8, qword ptr [r8]
	0x1407f17d4: add r8, 5
	0x1407f17db: movzx r8, word ptr [r8]
	0x1407f17e6: mov rdx, rbp
	0x1407f17f7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f17fe: sub r8d, dword ptr [rdx]
	0x1407f1801: xor r8d, 0x7c44fefb
	0x1407f180f: mov r15, rbp
	0x1407f1815: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f1823: and dword ptr [r15], r8d
	0x1407f1834: and r8, 0xffff
	0x1407f1848: shl r8, 3
	0x1407f185a: add rax, r8
	0x1407f1867: mov r12, qword ptr [rax]
	0x1407f186d: mov r10, rbp
	0x1407f1870: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a78
	0x1407f1877: add qword ptr [r10], 8
	0x1407f187e: jmp r12
handlers outputs:



basic block ends with indirect unconditional branch
	0x140783fa3: mov rdx, 0
	0x140783faa: mov r15, 0x342446ce
	0x140783fb1: mov r10, rbp
	0x140783fb4: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140783fbb: xor dword ptr [r10], r15d
	0x140783fbe: mov r11, rbp
	0x140783fc1: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140783fc8: mov r11, qword ptr [r11]
	0x140783fcb: add r11, 4
	0x140783fd2: mov dx, word ptr [r11]
	0x140783fd6: add rdx, rbp
	0x140783fd9: mov r9, 0
	0x140783fe0: mov r13, rbp
	0x140783fe3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140783fea: mov r13, qword ptr [r13]
	0x140783fee: add r13, 0
	0x140783ff5: mov r9w, word ptr [r13]
	0x140783ffa: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140783ffd: push qword ptr [rdx]
Load [EBP+0x10](VM_REGISTER)
	0x140783fff: push qword ptr [r9]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784002: pop qword ptr [rdx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784004: pop qword ptr [r9]
	0x14078400e: mov r14, rbp
	0x14078401f: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140784029: mov r14, qword ptr [r14]
	0x140784032: add r14, 2
	0x14078403c: movzx rdx, word ptr [r14]
	0x140784040: mov r13, rbp
	0x14078404a: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784051: sub edx, dword ptr [r13]
	0x14078405c: mov r14, rbp
	0x14078406c: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784076: sub edx, dword ptr [r14]
	0x140784080: mov rsi, rbp
	0x14078408d: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140784094: add dword ptr [rsi], edx
	0x14078409c: mov r8, rbp
	0x1407840a8: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407840bd: or dword ptr [r8], 0x78fe191b
	0x1407840cb: mov r9, rbp
	0x1407840ce: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x1407840d5: mov r15b, byte ptr [r9]
	0x1407840d8: cmp r15b, 0x74
	0x1407840dc: jbe 0x1407840e8
	0x1407840e2: add edx, 0x10f57785
	0x1407840ef: mov rcx, rbp
	0x140784100: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784111: xor word ptr [rcx], dx
	0x140784114: mov r8, rbp
	0x140784117: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x14078412c: movzx r8, word ptr [r8]
	0x14078413e: xor r8w, 0x2a51
	0x140784144: add r8, rbp
	0x14078414e: mov rsi, 0
	0x140784155: mov rdx, rbp
	0x140784158: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140784162: mov rdx, qword ptr [rdx]
	0x140784168: add rdx, 6
	0x14078416f: mov si, word ptr [rdx]
	0x140784172: add rsi, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14078417f: push qword ptr [rsi]
	0x140784181: popfq
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784182: inc dword ptr [r8]
	0x140784185: pushfq
	0x14078418d: add r8, 4
Store VM_REG [EBP+0x60]
	0x14078419e: mov dword ptr [r8], 0
	0x1407841a8: mov rcx, 0
	0x1407841af: mov rax, rbp
	0x1407841bc: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407841c2: mov rax, qword ptr [rax]
	0x1407841cc: add rax, 8
	0x1407841d8: mov cl, byte ptr [rax]
	0x1407841da: cmp cl, 0
	0x1407841dd: je 0x14078422a
	0x1407841e6: mov rax, rbp
	0x1407841e9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407841f6: mov rax, qword ptr [rax]
	0x1407841f9: add rax, 6
	0x140784209: mov cx, word ptr [rax]
	0x14078421a: add rcx, rbp
	0x14078421d: pop r12
Store VM_REG [EBP+0x26]
	0x14078421f: mov qword ptr [rcx], r12
	0x140784277: mov r13, rbp
	0x14078427a: mov rdx, rbp
	0x14078427d: add rdx, 0xab
Load [EBP+0xab](STATIC)
	0x14078428b: mov rdx, qword ptr [rdx]
	0x14078428e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407842a3: mov r13, qword ptr [r13]
	0x1407842aa: add r13, 9
	0x1407842b1: movzx r13, word ptr [r13]
	0x1407842b9: mov r14, rbp
	0x1407842c3: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407842ca: xor r13d, dword ptr [r14]
	0x1407842d4: add r13d, 0x129d888d
	0x1407842e2: mov r11, rbp
	0x1407842e8: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407842f6: and dword ptr [r11], r13d
	0x1407842f9: and r13, 0xffff
	0x140784307: shl r13, 3
	0x140784312: add rdx, r13
	0x140784315: mov r11, qword ptr [rdx]
	0x140784321: mov r12, rbp
	0x140784324: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a83
	0x14078432b: add qword ptr [r12], 0xb
	0x140784333: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408338ce: mov r14, rbp
	0x1408338d1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408338e2: mov r14, qword ptr [r14]
	0x1408338f0: add r14, 2
	0x1408338fc: movzx r8, word ptr [r14]
	0x140833903: mov r9, rbp
	0x140833909: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140833913: add r8d, dword ptr [r9]
	0x140833920: mov rsi, rbp
	0x140833923: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083392a: add dword ptr [rsi], r8d
	0x14083392d: mov rbx, rbp
	0x140833930: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140833937: or dword ptr [rbx], 0x610de607
	0x14083393d: mov rcx, rbp
	0x140833940: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140833947: mov dil, byte ptr [rcx]
	0x14083394a: cmp dil, 0x32
	0x14083394e: jbe 0x14083395b
	0x140833954: xor r8d, 0x84c83e8
	0x14083395b: mov r11, rbp
	0x14083395e: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140833965: sub word ptr [r11], r8w
	0x140833969: mov r8, rbp
	0x14083397a: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140833988: mov r8, qword ptr [r8]
	0x140833995: add r8, 8
	0x1408339b1: mov r12d, dword ptr [r8]
	0x1408339e3: mov rbx, rbp
	0x1408339f4: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408339fb: sub r12d, dword ptr [rbx]
	0x140833a13: mov r13, rbp
	0x140833a23: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140833a31: and dword ptr [r13], r12d
	0x140833a3f: mov r14, rbp
	0x140833a42: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140833a53: add dword ptr [r14], 0x4cda90aa
	0x140833a61: mov r14, rbp
	0x140833a6b: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140833a87: xor dword ptr [r14], r12d
	0x140833a8a: mov rdx, rbp
	0x140833a97: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140833aa5: sub dword ptr [rdx], r12d
	0x140833ab5: mov r13, rbp
	0x140833ac6: add r13, 0x58
	0x140833ad7: mov r14, rbp
	0x140833ada: add r14, 0x16e
Load [EBP+0x58](STATIC)
	0x140833af6: mov r13d, dword ptr [r13]
	0x140833b01: xor r13d, 0x51a605d8
Load [EBP+0x16e](STATIC)
	0x140833b19: movzx r14, word ptr [r14]
	0x140833b24: xor r14w, 0x1e28
	0x140833b31: add r14, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140833b34: sub dword ptr [r14], r13d
	0x140833b37: pushfq
	0x140833b38: add r14, 4
Store VM_REG [EBP+0x60]
	0x140833b54: mov dword ptr [r14], 0
	0x140833b61: mov rax, 0
	0x140833b68: mov rcx, rbp
	0x140833b80: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140833b9c: mov rcx, qword ptr [rcx]
	0x140833ba9: add rcx, 0x10
	0x140833bb0: mov al, byte ptr [rcx]
	0x140833bb2: cmp al, 0
	0x140833bb4: je 0x140833c3a
	0x140833bcf: mov rcx, rbp
	0x140833bdb: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140833bf7: mov rcx, qword ptr [rcx]
	0x140833c08: add rcx, 0xc
	0x140833c16: mov ax, word ptr [rcx]
	0x140833c19: add rax, rbp
	0x140833c29: pop r12
Store VM_REG [EBP+0x26]
	0x140833c2b: mov qword ptr [rax], r12
	0x140833c5f: mov r13, rbp
	0x140833c65: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140833c73: mov r13, qword ptr [r13]
	0x140833c7a: add r13, 0xe
	0x140833c81: movzx r9, word ptr [r13]
	0x140833c86: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140833c89: mov r9, qword ptr [r9]
	0x140833c8f: or rcx, r9
	0x140833c92: pushfq
	0x140833cca: pop rcx
	0x140833ccb: mov r12b, 0xa6
	0x140833cde: mov r8, rbp
	0x140833ce4: add r8, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140833cf9: sub byte ptr [r8], r12b
	0x140833d10: mov r11, rbp
	0x140833d1a: mov r9, rbp
	0x140833d1d: add r9, 0x145
	0x140833d2e: add r11, 0xab
Load [EBP+0x145](STATIC)
	0x140833d3c: mov r9, qword ptr [r9]
	0x140833d4c: add r9, 4
Load [EBP+0xab](STATIC)
	0x140833d53: mov r11, qword ptr [r11]
	0x140833d6b: movzx r9, word ptr [r9]
	0x140833d6f: mov rsi, rbp
	0x140833d72: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x140833d8a: add r9d, dword ptr [rsi]
	0x140833d9b: mov r14, rbp
	0x140833daf: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140833dc3: add dword ptr [r14], r9d
	0x140833dd7: and r9, 0xffff
	0x140833dec: shl r9, 3
	0x140833dfd: add r11, r9
	0x140833e0d: mov rsi, qword ptr [r11]
	0x140833e24: mov r8, rbp
	0x140833e2e: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a94
	0x140833e35: add qword ptr [r8], 0x11
	0x140833e3c: jmp rsi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2f9e: mov r12, rbp
	0x1407e2fa1: and rcx, 0x40
	0x1407e2faf: add r12, 0xa7
	0x1407e2fb6: or rax, 0x88
	0x1407e2fbc: mov r10, 0xd5
	0x1407e2fc3: and rax, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2fc9: add dword ptr [r12], 0x7e6102a5
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940a9a
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x14084b974: mov r13, rbp
	0x14084b97e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14084b98f: mov r13, qword ptr [r13]
	0x14084b9a8: add r13, 6
	0x14084b9c4: mov eax, dword ptr [r13]
	0x14084ba0a: mov rdi, rbp
	0x14084ba1e: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14084ba25: add eax, dword ptr [rdi]
	0x14084ba2e: mov r10, rbp
	0x14084ba38: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084ba3f: add dword ptr [r10], eax
	0x14084ba42: mov rcx, rbp
	0x14084ba5a: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084ba6b: and dword ptr [rcx], 0x53667bde
	0x14084ba71: mov r8, rbp
	0x14084ba77: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14084ba7e: add dword ptr [r8], eax
	0x14084ba88: mov r12, rbp
	0x14084ba92: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14084ba99: and dword ptr [r12], eax
	0x14084baab: mov r9, rbp
	0x14084babc: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14084bad4: mov r9, qword ptr [r9]
	0x14084bae1: add r9, 4
	0x14084baf6: movzx rax, word ptr [r9]
	0x14084bb08: mov r8, rbp
	0x14084bb0b: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084bb19: xor eax, dword ptr [r8]
	0x14084bb23: mov rcx, rbp
	0x14084bb26: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14084bb2d: xor eax, dword ptr [rcx]
	0x14084bb3d: mov r8, rbp
	0x14084bb40: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084bb4e: or dword ptr [r8], eax
	0x14084bb51: mov rdx, rbp
	0x14084bb57: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084bb5e: and dword ptr [rdx], 0x122a5e93
	0x14084bb72: mov r9, rbp
	0x14084bb8a: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14084bb91: mov r13b, byte ptr [r9]
	0x14084bb94: cmp r13b, 0xd2
	0x14084bb98: jbe 0x14084bbaf
	0x14084bbaf: mov r14, rbp
	0x14084bbb5: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14084bbcd: add word ptr [r14], ax
	0x14084bbd8: mov rbx, rbp
	0x14084bbe2: mov rsi, rbp
	0x14084bbec: add rbx, 0x16e
	0x14084bbfd: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084bc19: and dword ptr [rsi], 0x247d15cf
	0x14084bc45: mov rdx, rbp
	0x14084bc59: add rdx, 0x58
Load [EBP+0x58](STATIC)
	0x14084bc60: mov edx, dword ptr [rdx]
	0x14084bc6f: add edx, 0x41f1d495
Load [EBP+0x16e](STATIC)
	0x14084bc75: movzx rbx, word ptr [rbx]
	0x14084bc8e: add rbx, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14084bca6: mov rbx, qword ptr [rbx]
Deref(t450,ds)
	0x14084bca9: add dword ptr [rbx], edx
	0x14084bcab: pushfq
	0x14084bcec: mov rax, 0
	0x14084bd00: mov r14, rbp
	0x14084bd09: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084bd17: mov r14, qword ptr [r14]
	0x14084bd2a: add r14, 0xa
	0x14084bd46: mov al, byte ptr [r14]
	0x14084bd49: cmp al, 0
	0x14084bd4b: je 0x14084bdbe
	0x14084bd58: mov r14, rbp
	0x14084bd5b: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084bd62: mov r14, qword ptr [r14]
	0x14084bd72: add r14, 2
	0x14084bd8a: mov ax, word ptr [r14]
	0x14084bd8e: add rax, rbp
	0x14084bda6: pop r11
Store VM_REG [EBP+0x26]
	0x14084bda8: mov qword ptr [rax], r11
	0x14084be05: mov rdi, rbp
	0x14084be19: mov r14, rbp
	0x14084be2d: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084be42: mov r14, qword ptr [r14]
	0x14084be53: add r14, 0
	0x14084be64: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14084be7c: mov rdi, qword ptr [rdi]
	0x14084be7f: movzx r14, word ptr [r14]
	0x14084be9d: mov rsi, rbp
	0x14084bea0: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084beae: and dword ptr [rsi], r14d
	0x14084beb4: and r14, 0xffff
	0x14084bed3: shl r14, 3
	0x14084bee5: add rdi, r14
	0x14084bef2: mov r11, qword ptr [rdi]
	0x14084bf03: mov rcx, rbp
	0x14084bf06: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940aa5
	0x14084bf0d: add qword ptr [rcx], 0xb
	0x14084bf14: jmp r11
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ab3
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408338ce: mov r14, rbp
	0x1408338d1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408338e2: mov r14, qword ptr [r14]
	0x1408338f0: add r14, 2
	0x1408338fc: movzx r8, word ptr [r14]
	0x140833903: mov r9, rbp
	0x140833909: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140833913: add r8d, dword ptr [r9]
	0x140833920: mov rsi, rbp
	0x140833923: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083392a: add dword ptr [rsi], r8d
	0x14083392d: mov rbx, rbp
	0x140833930: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140833937: or dword ptr [rbx], 0x610de607
	0x14083393d: mov rcx, rbp
	0x140833940: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140833947: mov dil, byte ptr [rcx]
	0x14083394a: cmp dil, 0x32
	0x14083394e: jbe 0x14083395b
	0x14083395b: mov r11, rbp
	0x14083395e: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140833965: sub word ptr [r11], r8w
	0x140833969: mov r8, rbp
	0x14083397a: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140833988: mov r8, qword ptr [r8]
	0x140833995: add r8, 8
	0x1408339b1: mov r12d, dword ptr [r8]
	0x1408339e3: mov rbx, rbp
	0x1408339f4: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408339fb: sub r12d, dword ptr [rbx]
	0x140833a13: mov r13, rbp
	0x140833a23: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140833a31: and dword ptr [r13], r12d
	0x140833a3f: mov r14, rbp
	0x140833a42: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140833a53: add dword ptr [r14], 0x4cda90aa
	0x140833a61: mov r14, rbp
	0x140833a6b: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140833a87: xor dword ptr [r14], r12d
	0x140833a8a: mov rdx, rbp
	0x140833a97: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140833aa5: sub dword ptr [rdx], r12d
	0x140833ab5: mov r13, rbp
	0x140833ac6: add r13, 0x58
	0x140833ad7: mov r14, rbp
	0x140833ada: add r14, 0x16e
Load [EBP+0x58](STATIC)
	0x140833af6: mov r13d, dword ptr [r13]
	0x140833b01: xor r13d, 0x51a605d8
Load [EBP+0x16e](STATIC)
	0x140833b19: movzx r14, word ptr [r14]
	0x140833b24: xor r14w, 0x1e28
	0x140833b31: add r14, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140833b34: sub dword ptr [r14], r13d
	0x140833b37: pushfq
	0x140833b38: add r14, 4
Store VM_REG [EBP+0x159]
	0x140833b54: mov dword ptr [r14], 0
	0x140833b61: mov rax, 0
	0x140833b68: mov rcx, rbp
	0x140833b80: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140833b9c: mov rcx, qword ptr [rcx]
	0x140833ba9: add rcx, 0x10
	0x140833bb0: mov al, byte ptr [rcx]
	0x140833bb2: cmp al, 0
	0x140833bb4: je 0x140833c3a
	0x140833bcf: mov rcx, rbp
	0x140833bdb: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140833bf7: mov rcx, qword ptr [rcx]
	0x140833c08: add rcx, 0xc
	0x140833c16: mov ax, word ptr [rcx]
	0x140833c19: add rax, rbp
	0x140833c29: pop r12
Store VM_REG [EBP+0x26]
	0x140833c2b: mov qword ptr [rax], r12
	0x140833c5f: mov r13, rbp
	0x140833c65: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140833c73: mov r13, qword ptr [r13]
	0x140833c7a: add r13, 0xe
	0x140833c81: movzx r9, word ptr [r13]
	0x140833c86: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140833c89: mov r9, qword ptr [r9]
	0x140833c8f: or rcx, r9
	0x140833c92: pushfq
	0x140833cca: pop rcx
	0x140833ccb: mov r12b, 0xa6
	0x140833cde: mov r8, rbp
	0x140833ce4: add r8, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140833cf9: sub byte ptr [r8], r12b
	0x140833d10: mov r11, rbp
	0x140833d1a: mov r9, rbp
	0x140833d1d: add r9, 0x145
	0x140833d2e: add r11, 0xab
Load [EBP+0x145](STATIC)
	0x140833d3c: mov r9, qword ptr [r9]
	0x140833d4c: add r9, 4
Load [EBP+0xab](STATIC)
	0x140833d53: mov r11, qword ptr [r11]
	0x140833d6b: movzx r9, word ptr [r9]
	0x140833d6f: mov rsi, rbp
	0x140833d72: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x140833d8a: add r9d, dword ptr [rsi]
	0x140833d9b: mov r14, rbp
	0x140833daf: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140833dc3: add dword ptr [r14], r9d
	0x140833dd7: and r9, 0xffff
	0x140833dec: shl r9, 3
	0x140833dfd: add r11, r9
	0x140833e0d: mov rsi, qword ptr [r11]
	0x140833e24: mov r8, rbp
	0x140833e2e: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ac4
	0x140833e35: add qword ptr [r8], 0x11
	0x140833e3c: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x5c]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940acc
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407ff4d9: mov rbx, 0
	0x1407ff4ee: mov r11, rbp
	0x1407ff506: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff514: mov r11, qword ptr [r11]
	0x1407ff525: add r11, 6
	0x1407ff53a: mov bx, word ptr [r11]
	0x1407ff553: mov rax, rbp
	0x1407ff55d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff563: sub ebx, dword ptr [rax]
	0x1407ff573: mov r13, rbp
	0x1407ff57d: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x1407ff592: sub ebx, dword ptr [r13]
	0x1407ff59d: mov r13, rbp
	0x1407ff5ae: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff5b5: and dword ptr [r13], ebx
	0x1407ff5c0: mov r13, rbp
	0x1407ff5ca: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff5d8: or dword ptr [r13], 0x33e8a2f6
	0x1407ff5e0: mov rax, rbp
	0x1407ff5ed: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407ff600: sub word ptr [rax], bx
	0x1407ff603: mov r12, rbp
	0x1407ff606: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff60d: sub dword ptr [r12], 0x2dc38491
	0x1407ff615: mov rcx, rbp
	0x1407ff618: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff61f: and dword ptr [rcx], 0x1f40d224
	0x1407ff62f: mov r14, rbp
	0x1407ff632: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff646: mov r14, qword ptr [r14]
	0x1407ff649: add r14, 2
	0x1407ff650: movzx rdx, word ptr [r14]
	0x1407ff65b: mov rdi, rbp
	0x1407ff661: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff676: add edx, dword ptr [rdi]
	0x1407ff6ae: mov r8, rbp
	0x1407ff6c2: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff6d6: sub dword ptr [r8], edx
	0x1407ff6dc: mov r9, rbp
	0x1407ff6e6: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ff6ed: or dword ptr [r9], 0x4dac0675
	0x1407ff6f4: mov r15, rbp
	0x1407ff708: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407ff716: mov dil, byte ptr [r15]
	0x1407ff719: cmp dil, 0xf6
	0x1407ff71d: jbe 0x1407ff737
	0x1407ff73e: mov r13, rbp
	0x1407ff74f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407ff767: add word ptr [r13], dx
	0x1407ff76c: mov r9, rbp
	0x1407ff77b: mov rsi, rbp
	0x1407ff785: add rsi, 0x16e
	0x1407ff78c: add r9, 0xd6
Load [EBP+0x16e](STATIC)
	0x1407ff7a0: movzx rsi, word ptr [rsi]
	0x1407ff7b2: sub si, 0xbe38
	0x1407ff7be: add rsi, rbp
Load [EBP+0xd6](STATIC)
	0x1407ff7c1: movzx r9, word ptr [r9]
	0x1407ff7d2: xor r9w, 0x9dec
	0x1407ff7e2: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407ff7e8: mov r9, qword ptr [r9]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407ff7eb: and dword ptr [rsi], r9d
	0x1407ff7ee: pushfq
	0x1407ff7ef: add rsi, 4
Store VM_REG [EBP+0x68]
	0x1407ff7f9: mov dword ptr [rsi], 0
	0x1407ff7ff: mov rdi, 0
	0x1407ff81b: mov r9, rbp
	0x1407ff828: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff82f: mov r9, qword ptr [r9]
	0x1407ff832: add r9, 8
	0x1407ff840: mov dil, byte ptr [r9]
	0x1407ff843: cmp dil, 0
	0x1407ff847: je 0x1407ff8ba
	0x1407ff857: mov r9, rbp
	0x1407ff868: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff876: mov r9, qword ptr [r9]
	0x1407ff88a: add r9, 0
	0x1407ff89b: mov di, word ptr [r9]
	0x1407ff8a6: add rdi, rbp
	0x1407ff8b0: pop r12
Store VM_REG [EBP+0x26]
	0x1407ff8b2: mov qword ptr [rdi], r12
	0x1407ff934: mov rsi, rbp
	0x1407ff937: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ff941: mov rsi, qword ptr [rsi]
	0x1407ff955: add rsi, 4
	0x1407ff95f: mov rdi, rbp
	0x1407ff970: add rdi, 0xab
	0x1407ff977: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407ff97b: mov rdi, qword ptr [rdi]
	0x1407ff981: mov r11, rbp
	0x1407ff999: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ff9a9: sub esi, dword ptr [r11]
	0x1407ff9ba: xor esi, 0x70a2a845
	0x1407ff9c7: mov r11, rbp
	0x1407ff9df: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ff9ed: add dword ptr [r11], esi
	0x1407ff9f7: and rsi, 0xffff
	0x1407ffa01: shl rsi, 3
	0x1407ffa05: add rdi, rsi
	0x1407ffa0f: mov r9, qword ptr [rdi]
	0x1407ffa23: mov rdx, rbp
	0x1407ffa34: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ad5
	0x1407ffa3b: add qword ptr [rdx], 9
	0x1407ffa42: jmp r9
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940add
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x140893517: mov r12, 0x4d2bc795
	0x14089351e: mov rsi, rbp
	0x140893521: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140893528: or dword ptr [rsi], r12d
	0x14089352b: mov rdi, rbp
	0x140893531: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140893546: mov rdi, qword ptr [rdi]
	0x140893549: add rdi, 8
	0x140893550: mov eax, dword ptr [rdi]
	0x140893559: mov rcx, rbp
	0x14089355f: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140893566: add eax, dword ptr [rcx]
	0x140893568: mov rdi, rbp
	0x14089356b: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14089357c: add eax, dword ptr [rdi]
	0x14089357e: mov r13, rbp
	0x14089358f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140893596: and dword ptr [r13], eax
	0x14089359d: mov rcx, rbp
	0x1408935a0: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408935b5: xor dword ptr [rcx], 0x48fb6312
	0x1408935c2: mov r15, rbp
	0x1408935c5: add r15, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408935cf: sub dword ptr [r15], eax
	0x1408935d9: mov r15, rbp
	0x1408935dc: add r15, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1408935e3: add dword ptr [r15], eax
	0x1408935e6: mov rsi, rbp
	0x1408935e9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408935f7: mov rsi, qword ptr [rsi]
	0x1408935fa: add rsi, 0xf
	0x140893601: movzx r11, word ptr [rsi]
	0x140893620: mov r12, rbp
	0x14089362d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x140893634: sub r11d, dword ptr [r12]
	0x14089363f: mov r8, rbp
	0x140893642: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140893650: xor dword ptr [r8], r11d
	0x140893661: mov rdi, rbp
	0x140893664: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14089366b: or dword ptr [rdi], 0x6a7f3c6e
	0x140893674: mov r9, rbp
	0x14089367e: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14089368c: mov dl, byte ptr [r9]
	0x14089368f: cmp dl, 0x35
	0x140893692: jbe 0x1408936af
	0x14089369e: xor r11d, 0xe928b5
	0x1408936b9: mov rdi, rbp
	0x1408936c3: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408936cd: sub word ptr [rdi], r11w
	0x1408936d1: mov rdi, rbp
	0x1408936d4: mov r15, rbp
	0x1408936fd: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14089370d: mov r15d, dword ptr [r15]
	0x14089371a: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x14089376a: movzx rdi, word ptr [rdi]
	0x140893775: add r15d, 0x4a1907dc
	0x140893783: add di, 0xc5d2
	0x140893788: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14089378b: cmp dword ptr [rdi], r15d
	0x14089378e: pushfq
	0x14089378f: mov r9, 0
	0x140893796: mov r13, rbp
	0x140893799: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408937a0: mov r13, qword ptr [r13]
	0x1408937a4: mov r12, rbp
	0x1408937a7: add r12, 0x145
	0x1408937ae: add r13, 4
Load [EBP+0x145](STATIC)
	0x1408937b5: mov r12, qword ptr [r12]
	0x1408937b9: add r12, 0xe
	0x1408937c0: mov ecx, dword ptr [r13]
	0x1408937c4: mov r13, rbp
	0x1408937c7: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408937ce: or dword ptr [r13], ecx
	0x1408937d2: mov r9b, byte ptr [r12]
	0x1408937d6: cmp r9b, 0
	0x1408937da: je 0x140893807
	0x1408937e0: mov r12, rbp
	0x1408937e3: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408937ea: mov r12, qword ptr [r12]
	0x1408937ee: add r12, 0xc
	0x1408937f5: mov r9w, word ptr [r12]
	0x1408937fa: add r9, rbp
	0x1408937fd: pop r11
Store VM_REG [EBP+0x26]
	0x1408937ff: mov qword ptr [r9], r11
	0x14089382b: mov r15, rbp
	0x140893835: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14089384a: mov r15, qword ptr [r15]
	0x14089384d: mov rcx, rbp
	0x140893850: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14089385e: mov rcx, qword ptr [rcx]
	0x14089386b: add rcx, 0
	0x140893875: movzx rcx, word ptr [rcx]
	0x140893880: mov r10, rbp
	0x140893883: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14089388a: xor ecx, dword ptr [r10]
	0x14089388d: add ecx, 0x78278576
	0x140893893: mov r13, rbp
	0x1408938a0: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408938a7: add dword ptr [r13], ecx
	0x1408938ab: and rcx, 0xffff
	0x1408938c0: shl rcx, 3
	0x1408938c4: add r15, rcx
	0x1408938ca: mov r9, qword ptr [r15]
	0x1408938db: mov r11, rbp
	0x1408938de: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940aee
	0x1408938e5: add qword ptr [r11], 0x11
	0x1408938ec: jmp r9
handlers outputs:



basic block ends with indirect unconditional branch
	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b10
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b2a
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



basic block ends with indirect unconditional branch
basic block ends with indirect unconditional branch
	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca36a: and r10d, 1
	0x1407ca371: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407caa32: mov rdi, rbp
	0x1407caa3c: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940c3e
	0x1407caa43: add qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca36a: and r10d, 1
	0x1407ca371: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b37
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b3f
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1408008cf: mov r9, rbp
	0x1408008dc: mov r10, rbp
	0x1408008f3: add r10, 0x145
	0x14080090b: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x140800912: mov r9, qword ptr [r9]
Load [EBP+0x145](STATIC)
	0x14080091b: mov r10, qword ptr [r10]
	0x140800928: add r10, 6
	0x140800935: movzx r10, word ptr [r10]
	0x140800953: add r10d, 0x28af1060
	0x14080095d: mov rbx, rbp
	0x140800967: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800978: sub dword ptr [rbx], r10d
	0x14080098c: and r10, 0xffff
	0x1408009a1: shl r10, 3
	0x1408009ac: add r9, r10
	0x1408009bd: mov rax, qword ptr [r9]
	0x1408009d1: mov r10, rbp
	0x1408009d4: add r10, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408009e8: mov qword ptr [r10], rax
	0x1408009eb: mov r11, rbp
	0x1408009f5: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140800a06: mov r11, qword ptr [r11]
	0x140800a13: add r11, 4
	0x140800a27: movzx r14, word ptr [r11]
	0x140800a32: mov rcx, rbp
	0x140800a4a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800a51: xor r14d, dword ptr [rcx]
	0x140800a57: mov r13, rbp
	0x140800a64: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140800a72: sub r14d, dword ptr [r13]
	0x140800a7d: mov r15, rbp
	0x140800a87: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800a95: and dword ptr [r15], r14d
	0x140800a98: mov rbx, rbp
	0x140800aa5: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800aac: xor dword ptr [rbx], 0x684cba10
	0x140800ac7: mov r15, rbp
	0x140800ad7: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x140800aeb: mov sil, byte ptr [r15]
	0x140800aee: cmp sil, 0x52
	0x140800af2: jbe 0x140800b1b
	0x140800b22: mov r15, rbp
	0x140800b33: add r15, 0x16e
	0x140800b3a: mov rcx, 0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140800b41: add word ptr [r15], r14w
	0x140800b4f: mov r12, rbp
	0x140800b59: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140800b60: mov r12, qword ptr [r12]
	0x140800b64: add r12, 0
	0x140800b6e: mov r15d, dword ptr [r12]
	0x140800b79: mov r11, rbp
	0x140800b83: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800b98: xor r15d, dword ptr [r11]
	0x140800bb2: mov r9, rbp
	0x140800bbf: add r9, 0xbf
	0x140800bcd: mov r11, rbp
	0x140800bde: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800be8: xor dword ptr [r11], 0x2746ad5e
	0x140800bf9: mov r8, rbp
	0x140800bfc: add r8, 0x58
	0x140800c03: mov rbx, 0x12
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140800c18: sub dword ptr [r8], r15d
	0x140800c2c: mov rdx, rbp
	0x140800c3f: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140800c46: or dword ptr [rdx], r15d
	0x140800c49: mov rsi, rbp
	0x140800c4c: add rsi, 0xbf
	0x140800c56: mov r15, rbp
	0x140800c59: add r15, 0x120
	0x140800c60: mov r11, rbp
	0x140800c63: add r11, 0x58
Load [EBP+0x120](STATIC)
	0x140800c6a: and r9d, dword ptr [r15]
	0x140800c70: mov r10, rbp
	0x140800c73: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140800c7a: movzx r10, word ptr [r10]
	0x140800c7e: sub r10w, 0x9025
Load [EBP+0x58](STATIC)
	0x140800c84: mov r11d, dword ptr [r11]
	0x140800c87: add r10, rbp
Store VM_REG [EBP+0x10d]
	0x140800c8a: mov dword ptr [r10], r11d
	0x140800c8d: add r10, 4
Store VM_REG [EBP+0x111]
	0x140800c94: mov dword ptr [r10], 0
	0x140800c9b: mov rdi, 0x7fc0bc02
	0x140800ca2: mov r13, rbp
	0x140800ca5: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800cac: sub dword ptr [r13], edi
	0x140800cb0: mov r15, rbp
	0x140800cb3: add r15, 0xfd
Load [EBP+0xfd](STATIC)
	0x140800cba: mov rax, qword ptr [r15]
	0x140800cbd: sub rsp, 8
	0x140800cc1: sub rsp, 8
	0x140800cc5: push r13
	0x140800cc7: mov r13, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x7)) << 2 | 0x0) << 5 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1f)) << 1 | 0x0) << 5 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1f)) << 2 | 0x0) << 5 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1f)) << 1 | 0x0)
	0x140800cca: mov qword ptr [rsp + 8], r13
	0x140800ccf: pop r13
	0x140800cd1: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800cd8: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800cdc: add qword ptr [rsp], 8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800ce1: mov r9, qword ptr [rsp]
	0x140800ce5: add rsp, 8
	0x140800cec: add r9, 8
	0x140800cf0: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x140800cf4: mov qword ptr [rsp], rcx
	0x140800cf8: movabs rcx, 8
	0x140800d02: sub r9, 0xb7da6e8
	0x140800d09: add r9, 0xfbc4b83
	0x140800d10: add r9, 0xfd1e092
	0x140800d17: sub r9, rcx
	0x140800d1a: sub r9, 0xfd1e092
	0x140800d21: sub r9, 0xfbc4b83
	0x140800d28: add r9, 0xb7da6e8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800d2f: mov rcx, qword ptr [rsp]
	0x140800d33: add rsp, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d37: xor r9, qword ptr [rsp]
	0x140800d3b: push rdx
	0x140800d3c: push r9
	0x140800d3e: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0)
	0x140800d3f: xor qword ptr [rsp + 8], rdx
	0x140800d44: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d49: mov rsp, qword ptr [rsp]
	0x140800d4d: push rax
unknown read addr: fe8 ((0xfffffffffffffff8 + ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0)) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0), simplified_source_node: 0x1407e2e04
	0x140800d4e: pop qword ptr [rsp]
unknown read addr: ff0 ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0)
unknown store addr: ff8, lea_ast: ((0x8 + ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0)) & 0xffffffffffffffff), simplified_source_node: 0x1407e2e04
	0x140800d51: pop qword ptr [rsp]
	0x140800d54: xor rdi, 0x800
	0x140800d5b: add rsi, r11
	0x140800d5e: mov rdx, 0x200
	0x140800d65: xor rdi, 0x10
	0x140800d6c: or rdi, 0x400
	0x140800d81: and rdx, 0x40
	0x140800d88: sub rbx, -0x80000000
	0x140800d8f: mov rax, rsi
	0x140800d92: or rax, 0x90
	0x140800d98: sub rax, rsi
	0x140800d9b: push 0xe96057d
	0x140800da0: push rdx
	0x140800da1: push r10
	0x140800da3: pop rdx
unknown store addr: ff0, lea_ast: ((((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 25) & 0xf)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 21) & 0x3)) & 0x3)) << 2 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 11) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 2 | 0x3) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 5) & 0x1)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 2) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 1) & 0x1)) << 1 | 0x0), simplified_source_node: ((0x111 + context) & 0xffffffffffffffff)
	0x140800da4: mov qword ptr [rsp + 8], rdx
	0x140800da9: pop rdx
	0x140800daa: mov r10, rbp
	0x140800dad: push rdx
	0x140800dae: push 0x60442fae
	0x140800db3: push r10
	0x140800db5: pop qword ptr [rsp]
	0x140800db8: sub qword ptr [rsp], 0xfda5ba9
	0x140800dc0: push qword ptr [rsp]
	0x140800dc3: pop rdx
	0x140800dc4: push 0x19066ad
	0x140800dc9: mov qword ptr [rsp], rsi
	0x140800dcd: push rsp
	0x140800dce: pop rsi
	0x140800dcf: add rsi, 8
	0x140800dd3: add rsi, 8
	0x140800dda: xchg qword ptr [rsp], rsi
	0x140800dde: mov rsp, qword ptr [rsp]
	0x140800de2: add rdx, 0xfda5ba9
	0x140800de9: sub rsp, 8
	0x140800df0: mov qword ptr [rsp], rdx
	0x140800df4: push qword ptr [rsp]
	0x140800df7: pop r14
	0x140800df9: push r10
	0x140800dfb: mov r10, rsp
	0x140800dfe: add r10, 8
	0x140800e02: add r10, 8
	0x140800e09: xchg qword ptr [rsp], r10
	0x140800e0d: pop rsp
	0x140800e0e: pop rdx
	0x140800e0f: mov r10, qword ptr [rsp]
	0x140800e13: add rsp, 8
	0x140800e17: xor r15, 0x400
	0x140800e1e: sub rsi, rsi
	0x140800e21: push rdi
	0x140800e22: push r15
	0x140800e24: movabs r15, 0x76efb200
	0x140800e2e: sub rsp, 8
	0x140800e35: mov qword ptr [rsp], r11
	0x140800e39: push rsi
	0x140800e3a: push rbx
	0x140800e3b: movabs rbx, 0x79fe49bf
	0x140800e45: movabs rsi, 0xf0edfd04
	0x140800e4f: sub rsi, 0xebff891
	0x140800e56: sub rsi, 0x36bcbea
	0x140800e5d: add rsi, 0x43eae26
	0x140800e64: sub rsi, rbx
	0x140800e67: sub rsi, 0x43eae26
	0x140800e6e: add rsi, 0x36bcbea
	0x140800e75: add rsi, 0xebff891
	0x140800e7c: pop rbx
	0x140800e7d: push rsi
	0x140800e7e: xor qword ptr [rsp], 0x7fddb4a5
	0x140800e86: pop r11
	0x140800e88: xor r11, 0x7fddb4a5
	0x140800e93: push rdi
	0x140800e94: mov rdi, rsp
	0x140800e97: add rdi, 8
	0x140800e9b: add rdi, 8
	0x140800ea2: xchg qword ptr [rsp], rdi
	0x140800ea6: mov rsp, qword ptr [rsp]
	0x140800eaa: push rdx
	0x140800eab: mov rdx, r11
	0x140800eae: mov rdi, rdx
	0x140800eb1: pop rdx
	0x140800eb2: pop r11
	0x140800eb4: sub rdi, r15
	0x140800eb7: push qword ptr [rsp]
	0x140800eba: pop r15
	0x140800ebc: push rcx
	0x140800ebd: push rsp
	0x140800ebe: pop rcx
	0x140800ebf: add rcx, 8
	0x140800ec3: push rax
	0x140800ec4: movabs rax, 0x3dafab26
	0x140800ece: push rdi
	0x140800ecf: movabs rdi, 0x3dafab2e
	0x140800ed9: xor rax, rdi
	0x140800edc: pop rdi
	0x140800edd: add rcx, rax
	0x140800ee0: pop rax
	0x140800ee1: xchg qword ptr [rsp], rcx
	0x140800ee5: pop rsp
	0x140800ee6: add r14, rdi
	0x140800ee9: pop rdi
	0x140800eea: push 0x28dbaebe
	0x140800eef: push 0x78a8644c
	0x140800ef4: push rbx
	0x140800ef5: pop qword ptr [rsp]
	0x140800ef8: pop qword ptr [rsp]
	0x140800efb: push rbp
	0x140800efc: push r10
	0x140800efe: movabs r10, 0x7fbc6e0f
	0x140800f08: movabs rbp, 0x7fbc6e17
	0x140800f12: sub rbp, r10
	0x140800f15: pop r10
	0x140800f17: mov rbx, rbp
	0x140800f1a: push qword ptr [rsp]
	0x140800f1d: pop rbp
	0x140800f1e: add rsp, 8
	0x140800f22: sub rsp, 8
	0x140800f29: push rax
	0x140800f2a: pop qword ptr [rsp]
	0x140800f2d: mov rax, 0
	0x140800f34: sub rax, 0x66df1d55
	0x140800f3a: add rax, r14
	0x140800f3d: add rax, 0x66df1d55
Load [EBP+0x145](STATIC)
bytecode=0x140940b47
	0x140800f43: add qword ptr [rax], rbx
	0x140800f46: push qword ptr [rsp]
	0x140800f49: mov rax, qword ptr [rsp]
	0x140800f4d: add rsp, 8
	0x140800f54: push rax
	0x140800f55: mov rax, rsp
	0x140800f58: add rax, 8
	0x140800f5c: add rax, 8
	0x140800f62: xchg qword ptr [rsp], rax
	0x140800f66: pop rsp
	0x140800f67: push qword ptr [rsp]
	0x140800f6e: add rsp, 8
	0x140800f72: add rsp, 8
	0x140800f8a: ret 0
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2f9e: mov r12, rbp
	0x1407e2fa1: and rcx, 0x40
	0x1407e2faf: add r12, 0xa7
	0x1407e2fb6: or rax, 0x88
	0x1407e2fbc: mov r10, 0xd5
	0x1407e2fc3: and rax, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2fc9: add dword ptr [r12], 0x7e6102a5
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b4d
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x14087ff3e: mov rbx, rbp
	0x14087ff41: add rdi, rdx
	0x14087ff44: add rdi, 4
	0x14087ff4b: add rbx, 0xab
	0x14087ff5c: mov r12, rbp
	0x14087ff62: mov r9, rdi
Load [EBP+0xab](STATIC)
	0x14087ff65: mov rbx, qword ptr [rbx]
	0x14087ff68: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14087ff6f: mov r12, qword ptr [r12]
	0x14087ff7a: add r12, 0
	0x14087ff88: movzx r12, word ptr [r12]
	0x14087ffcb: add r12d, 0x7eb1668
	0x14087ffe0: mov rsi, rbp
	0x14087fff1: add rsi, 0xbf
	0x14087fff8: mov rax, 0
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880006: or dword ptr [rsi], r12d
	0x140880017: and r12, 0xffff
	0x14088002f: shl r12, 3
	0x140880033: add rbx, r12
	0x140880036: sub r9, 0x78
	0x140880044: mov r8, qword ptr [rbx]
	0x140880047: mov rdx, 0x12
	0x14088004e: mov rsi, rbp
	0x140880051: and rdx, rax
	0x140880054: sub rdx, r9
	0x140880057: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140880068: mov qword ptr [rsi], r8
	0x140880080: mov r11, rbp
	0x140880083: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14088008a: mov r11, qword ptr [r11]
	0x140880094: add r11, 6
	0x1408800a5: mov r12d, dword ptr [r11]
	0x1408800a8: mov rdi, rbp
	0x1408800ae: sub rdx, 0xffff
	0x1408800b8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408800c6: add r12d, dword ptr [rdi]
	0x1408800de: mov r8, rbp
	0x1408800eb: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x140880100: add r12d, dword ptr [r8]
	0x140880103: mov rdi, 0x400
	0x140880111: mov rax, rbp
	0x14088011b: xor rdi, 8
	0x140880125: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880140: or dword ptr [rax], r12d
	0x140880143: xor rdi, rax
	0x14088014d: sub rdx, rdx
	0x140880150: mov r8, rbp
	0x140880153: sub rdx, r12
	0x14088015d: add r8, 0xa7
	0x140880164: or rdx, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088016b: or dword ptr [r8], 0x6cddcd8d
	0x140880179: add rdi, 0x7fffffff
	0x140880180: mov r8, rbp
	0x140880183: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140880191: add dword ptr [r8], r12d
	0x140880194: mov rbx, 0x12
	0x1408801a5: and rdi, 0x400
	0x1408801b3: add rdx, 0x7fffffff
	0x1408801cf: mov r13, 0
	0x1408801d6: or rdi, 0x40
	0x1408801dd: mov r9, rbp
	0x1408801e0: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408801e7: mov r9, qword ptr [r9]
	0x1408801ea: add rdx, r13
	0x1408801ed: add r9, 2
	0x1408801f4: add rdi, 0x7fffffff
	0x1408801fb: sub rdx, 0x800
	0x140880209: movzx r13, word ptr [r9]
	0x140880210: or rbx, rbx
	0x14088021a: sub rdx, 8
	0x14088022d: sub rdx, rbx
	0x14088023e: sub rdi, -0x80000000
	0x140880245: mov rax, 0
	0x14088024c: or rax, 0xf0
	0x140880252: mov r11, rbp
	0x14088025c: xor rdx, r11
	0x14088025f: or rax, 0x20
	0x140880265: add r11, 0xbf
	0x14088026c: or rdx, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088027a: add dword ptr [r11], r13d
	0x14088027d: sub rax, 4
	0x140880283: sub rdx, r12
	0x140880289: and rax, 4
	0x14088028f: mov r8, 0
	0x1408802a0: xor rax, r8
	0x1408802aa: add rax, 0x20
	0x1408802b0: mov r9, rbp
	0x1408802b3: mov r15, 0xd5
	0x1408802ba: add r9, 0x130
	0x1408802c1: or rax, 0xffffffff80000000
	0x1408802ce: add rdx, 0x7fffffff
Load [EBP+0x130](STATIC)
	0x1408802d5: mov r12b, byte ptr [r9]
	0x1408802d8: cmp r12b, 0x6b
	0x1408802dc: jbe 0x1408802ef
	0x1408802f6: mov r9, rbp
	0x1408802f9: and rdi, 0x40
	0x140880303: add r9, 0x16e
	0x14088030a: sub rdx, 0xf0
	0x140880311: and rax, 0x20
	0x140880317: and r15, 0xf0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088031e: sub word ptr [r9], r13w
	0x140880322: mov r12, rbp
	0x14088032c: mov rsi, rbp
	0x14088032f: add rsi, 0x58
Load [EBP+0x58](STATIC)
	0x14088033d: mov esi, dword ptr [rsi]
	0x14088033f: xor esi, 0x21172332
	0x140880345: add r12, 0x16e
	0x14088034c: sub rax, 0x80
Load [EBP+0x16e](STATIC)
	0x140880352: movzx r12, word ptr [r12]
	0x14088035e: add r12w, 0xba5
	0x14088036b: add rdi, 0xf0
	0x140880372: add r12, rbp
	0x140880375: sub rdi, -0x80000000
Store VM_REG [EBP+0x5c]
	0x14088037f: mov dword ptr [r12], esi
	0x140880383: add r12, 4
	0x140880391: and rdi, 0x80
Store VM_REG [EBP+0x60]
	0x140880398: mov dword ptr [r12], 0
	0x1408803a0: mov r8, rbp
	0x1408803a3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1408803aa: mov r8, qword ptr [r8]
	0x1408803ad: add r8, 0xa
	0x1408803b4: movzx rsi, word ptr [r8]
	0x1408803b8: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1408803bb: mov rsi, qword ptr [rsi]
	0x1408803be: or rdx, rsi
	0x1408803c1: pushfq
	0x1408803eb: pop rdx
	0x1408803ec: mov rsi, rbp
	0x1408803ef: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408803f6: mov rsi, qword ptr [rsi]
	0x1408803f9: add rsi, 0xe
	0x140880400: movzx r14, word ptr [rsi]
	0x140880404: add r14, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140880407: mov r14, qword ptr [r14]
	0x14088040a: xor rdx, r14
	0x14088040d: pushfq
	0x14088041c: mov r9, rbp
	0x14088041f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140880426: mov r9, qword ptr [r9]
	0x140880429: add r9, 0xc
	0x140880437: pop rdx
	0x14088044d: add r15, 0x40
	0x14088046f: or r12, r15
	0x140880472: and r12, 0x88
	0x140880480: add r12, 0x80
	0x140880487: sub r12, 0x10
	0x14088048e: push r9
	0x140880490: mov r9, rsp
	0x140880493: add r9, 8
	0x140880497: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14088049e: xchg qword ptr [rsp], r9
	0x1408804a2: pop rsp
	0x1408804a3: push r12
	0x1408804a5: push r8
	0x1408804a7: pop r12
	0x1408804a9: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804ad: mov qword ptr [rsp], r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804b1: pop qword ptr [rsp + 8]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1408804b5: mov r12, qword ptr [rsp]
	0x1408804b9: add rsp, 8
	0x1408804bd: push 0x73335fd3
	0x1408804c2: mov qword ptr [rsp], r9
	0x1408804c6: push 0x3372c5dd
	0x1408804cb: mov qword ptr [rsp], rdx
	0x1408804cf: push 0x17a1c693
	0x1408804d4: mov qword ptr [rsp], rbp
	0x1408804d8: xor qword ptr [rsp], 0x7f452399
	0x1408804e0: mov rdx, qword ptr [rsp]
	0x1408804e4: add rsp, 8
	0x1408804e8: xor rdx, 0x7f452399
	0x1408804ef: mov r9, rdx
	0x1408804f2: pop rdx
	0x1408804f3: push r9
	0x1408804f5: sub qword ptr [rsp], 0x6f77dcf4
	0x1408804fd: mov r8, qword ptr [rsp]
	0x140880501: add rsp, 8
	0x140880505: push r15
	0x140880507: movabs r15, 0x6f77dcf4
	0x140880511: add r8, r15
	0x140880514: mov r15, qword ptr [rsp]
	0x140880518: add rsp, 8
	0x140880523: add rsp, 8
	0x14088052a: mov r14, r8
	0x14088052d: pop r8
	0x14088052f: add r15, 0x400
	0x14088053d: push 0x27568fe9
	0x140880542: push 0x7b3f4c47
	0x140880547: push rax
	0x140880548: pop qword ptr [rsp]
	0x14088054b: pop qword ptr [rsp]
	0x14088054e: movabs rax, 0x7c366d33
	0x140880558: xor rax, rsi
	0x14088055b: xor rsi, rax
	0x14088055e: xor rax, rsi
	0x140880561: xor rsi, rax
	0x140880564: xor rax, rsi
	0x140880567: xor rsi, rax
	0x14088056a: dec rax
	0x14088056d: xor rsi, rax
	0x140880570: xor rax, rsi
	0x140880573: xor rsi, rax
	0x140880576: xor rax, rsi
	0x140880579: xor rsi, rax
	0x14088057c: xor rax, rsi
	0x14088057f: push rdx
	0x140880580: movabs rdx, 0x476f1c8b
	0x14088058a: add rax, rdx
	0x14088058d: pop rdx
	0x14088058e: add rax, 0x6d3a5a68
	0x140880594: push r15
	0x140880596: movabs r15, 0x7f5f222a
	0x1408805a0: add rax, r15
	0x1408805a3: pop r15
	0x1408805a5: push rdi
	0x1408805a6: movabs rdi, 0x1b03f050a
	0x1408805b0: add rax, 0xf5acb00
	0x1408805b6: add rax, 0xeff42bf
	0x1408805bc: sub rax, 0xb779cd7
	0x1408805c2: sub rax, 0x65efea0
	0x1408805c8: sub rax, rdi
	0x1408805cb: add rax, 0x65efea0
	0x1408805d1: add rax, 0xb779cd7
	0x1408805d7: sub rax, 0xeff42bf
	0x1408805dd: sub rax, 0xf5acb00
	0x1408805e7: add rsp, 8
	0x1408805ee: sub r14, 0x797e8b43
	0x1408805f5: add r14, rax
	0x1408805f8: add r14, 0x797e8b43
	0x140880603: add rsp, 8
	0x14088060a: mov r10, rbp
	0x14088060d: add r10, 0xfd
	0x140880614: add r15, 0x78
	0x140880622: push 0xedcb0bf
	0x140880627: mov qword ptr [rsp], rbp
	0x14088062b: movabs rbp, 0x7ffef3cd
	0x140880635: and rbp, 0x7c9ca564
	0x14088063c: sub rbp, 0x7cedf3c4
	0x140880643: push rbp
	0x140880644: inc qword ptr [rsp]
	0x140880648: pop rbp
	0x140880649: add rbp, 0x7b7f38c1
	0x140880650: xchg rbp, r15
	0x140880653: not r15
	0x140880656: push rbp
	0x140880657: push r15
	0x140880659: pop rbp
	0x14088065a: pop r15
	0x14088065c: push r12
	0x14088065e: movabs r12, 0xb89d0ca6
	0x140880668: add rbp, r12
	0x14088066b: pop r12
	0x14088066d: neg rbp
	0x140880670: neg rbp
	0x140880673: push r8
	0x140880675: movabs r8, 0x73573402
	0x14088067f: add r8, 0x5fff713e
	0x140880686: and r8, 0x7ffd9621
	0x14088068d: push 0x41f5fa33
	0x140880692: mov qword ptr [rsp], r12
	0x140880696: movabs r12, 0x2cbf66f2
	0x1408806a0: xor r8, r12
	0x1408806a3: pop r12
	0x1408806a5: and rbp, r8
	0x1408806a8: push qword ptr [rsp]
	0x1408806ab: pop r8
	0x1408806ad: add rsp, 8
	0x1408806b1: not rbp
	0x1408806b4: inc rbp
	0x1408806b7: sub rsp, 8
	0x1408806bb: push r14
	0x1408806bd: mov r14, r12
	0x1408806c0: mov qword ptr [rsp + 8], r14
	0x1408806c5: mov r14, qword ptr [rsp]
	0x1408806c9: add rsp, 8
	0x1408806cd: mov r12, 0x3d6b2272
	0x1408806d4: add rbp, 0x6ff762aa
	0x1408806db: add rbp, 0x2dfda244
	0x1408806e2: add rbp, r12
	0x1408806e5: sub rbp, 0x2dfda244
	0x1408806ec: sub rbp, 0x6ff762aa
	0x1408806f3: push qword ptr [rsp]
	0x1408806f6: pop r12
	0x1408806f8: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140940b5d
	0x1408806fc: add qword ptr [r14], rbp
	0x1408806ff: mov rbp, qword ptr [rsp]
	0x140880703: add rsp, 8
Load [EBP+0xfd](STATIC)
	0x14088071f: mov rcx, qword ptr [r10]
	0x14088072c: add rcx, 0x18c7c6b
	0x140880748: push rcx
	0x140880749: mov r11, 0xf93ff14
	0x140880750: mov r13, rbp
	0x140880753: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088075a: and dword ptr [r13], r11d
	0x14088078e: pop rdi
	0x14088078f: sub rdi, 0x18c7c6b
	0x140880796: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407e1a86: mov r10, rbp
	0x1407e1a89: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1a99: mov r10, qword ptr [r10]
	0x1407e1a9c: add r10, 7
	0x1407e1ab1: movzx rbx, word ptr [r10]
	0x1407e1aea: mov r10, rbp
	0x1407e1b01: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e1b08: xor ebx, dword ptr [r10]
	0x1407e1b15: mov rsi, rbp
	0x1407e1b29: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1b30: sub dword ptr [rsi], ebx
	0x1407e1b72: mov rdx, rbp
	0x1407e1b86: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e1b9a: mov r9b, byte ptr [rdx]
	0x1407e1b9d: cmp r9b, 0xc
	0x1407e1ba1: jbe 0x1407e1bb7
	0x1407e1bae: xor ebx, 0x340ece75
	0x1407e1bb7: mov r11, rbp
	0x1407e1bc1: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e1bc8: xor word ptr [r11], bx
	0x1407e1bcc: mov r9, 0
	0x1407e1bd3: mov rcx, rbp
	0x1407e1bd6: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1bea: mov rcx, qword ptr [rcx]
	0x1407e1bf4: add rcx, 3
	0x1407e1c02: mov r9w, word ptr [rcx]
	0x1407e1c1c: mov rcx, rbp
	0x1407e1c28: add rcx, 0x120
Load [EBP+0x120](STATIC)
	0x1407e1c39: xor r9d, dword ptr [rcx]
	0x1407e1c3c: mov r14, rbp
	0x1407e1c54: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1c5b: or dword ptr [r14], r9d
	0x1407e1c6b: mov r8, rbp
	0x1407e1c75: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1c8a: sub dword ptr [r8], 0x3d9cd560
	0x1407e1ca4: mov r11, rbp
	0x1407e1cb4: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407e1cc5: xor word ptr [r11], r9w
	0x1407e1cd0: mov r9, rbp
	0x1407e1cdc: mov rdi, rbp
	0x1407e1cf0: add rdi, 0x16e
	0x1407e1cfa: add r9, 0xd6
Load [EBP+0x16e](STATIC)
	0x1407e1d01: movzx rdi, word ptr [rdi]
Load [EBP+0xd6](STATIC)
	0x1407e1d0c: movzx r9, word ptr [r9]
	0x1407e1d16: sub di, 0x8309
	0x1407e1d25: add rdi, rbp
	0x1407e1d39: add r9w, 0xb5dd
	0x1407e1d42: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e1d53: mov r9, qword ptr [r9]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x1407e1d56: add dword ptr [rdi], r9d
	0x1407e1d59: pushfq
	0x1407e1d64: add rdi, 4
Store VM_REG [EBP+0x111]
	0x1407e1d75: mov dword ptr [rdi], 0
	0x1407e1d7e: mov r11, 0
	0x1407e1d9a: mov rcx, rbp
	0x1407e1dcb: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1df7: mov rcx, qword ptr [rcx]
	0x1407e1e12: add rcx, 0
	0x1407e1e2b: mov r11b, byte ptr [rcx]
	0x1407e1e2e: cmp r11b, 0
	0x1407e1e32: je 0x1407e1e9b
	0x1407e1e3f: mov rcx, rbp
	0x1407e1e42: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1e4f: mov rcx, qword ptr [rcx]
	0x1407e1e62: add rcx, 5
	0x1407e1e7a: mov r11w, word ptr [rcx]
	0x1407e1e7e: add r11, rbp
	0x1407e1e8b: pop rdi
Store VM_REG [EBP+0x26]
	0x1407e1e8c: mov qword ptr [r11], rdi
	0x1407e1f09: mov r11, rbp
	0x1407e1f1a: mov r8, rbp
	0x1407e1f1d: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1f32: mov r11, qword ptr [r11]
	0x1407e1f3c: add r11, 1
	0x1407e1f43: movzx r11, word ptr [r11]
	0x1407e1f47: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e1f63: mov r8, qword ptr [r8]
	0x1407e1f73: mov r12, rbp
	0x1407e1f87: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1f9b: xor r11d, dword ptr [r12]
	0x1407e1f9f: sub r11d, 0x63e55c63
	0x1407e1fad: mov r10, rbp
	0x1407e1fb0: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1fbe: add dword ptr [r10], r11d
	0x1407e1fd1: and r11, 0xffff
	0x1407e1fde: shl r11, 3
	0x1407e1ff0: add r8, r11
	0x1407e1ff3: mov rsi, qword ptr [r8]
	0x1407e1ffc: mov r10, rbp
	0x1407e2009: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b66
	0x1407e2010: add qword ptr [r10], 9
	0x1407e2017: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x5c]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b6e
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1408040aa: mov rsi, 0x16713659
	0x1408040c2: mov r15, rbp
	0x1408040c8: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408040cf: xor dword ptr [r15], esi
	0x1408040d9: mov rax, rbp
	0x1408040e6: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1408040f3: mov rax, qword ptr [rax]
	0x140804104: add rax, 0
	0x140804114: movzx rdi, word ptr [rax]
	0x140804118: mov r13, rbp
	0x140804122: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804137: add edi, dword ptr [r13]
	0x140804145: mov rcx, rbp
	0x140804148: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140804159: xor edi, dword ptr [rcx]
	0x14080415b: mov r11, rbp
	0x14080415e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140804173: sub dword ptr [r11], edi
	0x140804184: mov rbx, rbp
	0x140804187: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140804195: and dword ptr [rbx], 0x4384686a
	0x1408041a1: mov rbx, rbp
	0x1408041b2: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1408041c3: mov r8b, byte ptr [rbx]
	0x1408041c6: cmp r8b, 0xa4
	0x1408041ca: jbe 0x1408041e4
	0x1408041e4: mov r15, rbp
	0x1408041f5: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408041fc: add word ptr [r15], di
	0x14080420a: mov rsi, rbp
	0x140804217: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140804225: mov rsi, qword ptr [rsi]
	0x14080422f: add rsi, 7
	0x140804236: movzx rcx, byte ptr [rsi]
	0x140804241: mov r9, rbp
	0x14080424e: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804255: sub ecx, dword ptr [r9]
	0x140804266: mov rdi, rbp
	0x140804270: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140804281: sub ecx, dword ptr [rdi]
	0x140804291: mov r10, rbp
	0x14080429e: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408042a5: or dword ptr [r10], ecx
	0x1408042c2: mov rdi, rbp
	0x1408042d3: add rdi, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408042e4: xor dword ptr [rdi], ecx
	0x1408042e6: mov rdi, rbp
	0x1408042e9: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1408042fe: add dword ptr [rdi], ecx
	0x140804303: mov r8, rbp
	0x140804306: mov r10, rbp
	0x140804310: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x14080431e: movzx r8, word ptr [r8]
	0x140804330: add r10, 0x58
Load [EBP+0x58](STATIC)
	0x14080434f: mov r10d, dword ptr [r10]
	0x140804360: add r8, rbp
	0x140804366: mov rax, r8
	0x140804377: mov rcx, r10
	0x14080437a: mov r8b, cl
	0x14080438b: and r8b, 0x3f
	0x14080438f: cmp r8b, 0
	0x140804393: je 0x1408043a7
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140804399: shr dword ptr [rax], cl
	0x1408043ea: mov rsi, rax
	0x1408043f7: add rsi, 4
Store VM_REG [EBP+0x111]
	0x14080440c: mov dword ptr [rsi], 0
	0x140804434: mov rbx, rbp
	0x14080443d: mov r12, rbp
	0x140804447: add rbx, 0xab
	0x140804451: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140804458: mov r12, qword ptr [r12]
	0x140804463: add r12, 2
Load [EBP+0xab](STATIC)
	0x140804470: mov rbx, qword ptr [rbx]
	0x140804473: movzx r12, word ptr [r12]
	0x140804478: mov r8, rbp
	0x14080447b: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x140804488: xor r12d, dword ptr [r8]
	0x140804495: sub r12d, 0x637e5523
	0x1408044a2: mov rsi, rbp
	0x1408044a8: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408044b8: sub dword ptr [rsi], r12d
	0x1408044c5: and r12, 0xffff
	0x1408044d6: shl r12, 3
	0x1408044e1: add rbx, r12
	0x1408044e7: mov r8, qword ptr [rbx]
	0x1408044ea: mov rax, rbp
	0x1408044f4: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b78
	0x1408044fa: add qword ptr [rax], 0xa
	0x140804501: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407a7042: mov rax, rbp
	0x1407a704c: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407a7052: mov rax, qword ptr [rax]
	0x1407a7055: add rax, 2
	0x1407a705e: movzx r13, byte ptr [rax]
	0x1407a7062: mov rcx, rbp
	0x1407a706c: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a707a: sub r13d, dword ptr [rcx]
	0x1407a7084: mov rsi, rbp
	0x1407a708e: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407a709c: xor r13d, dword ptr [rsi]
	0x1407a70a6: mov r14, rbp
	0x1407a70ac: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a70b3: and dword ptr [r14], r13d
	0x1407a70c4: mov r9, rbp
	0x1407a70ca: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a70df: sub dword ptr [r9], 0x7ba83e54
	0x1407a70ed: mov r12, rbp
	0x1407a70f7: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407a710c: add dword ptr [r12], r13d
	0x1407a711a: mov r10, rbp
	0x1407a711d: add r10, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407a7124: and dword ptr [r10], r13d
	0x1407a712a: mov r11, rbp
	0x1407a713b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407a7142: mov r11, qword ptr [r11]
	0x1407a7153: add r11, 0
	0x1407a7168: movzx r12, word ptr [r11]
	0x1407a716c: mov rcx, rbp
	0x1407a717d: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a7184: xor r12d, dword ptr [rcx]
	0x1407a7187: mov rdx, rbp
	0x1407a718a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407a7197: xor r12d, dword ptr [rdx]
	0x1407a71a8: mov r10, rbp
	0x1407a71ab: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a71b5: sub dword ptr [r10], r12d
	0x1407a71de: mov r10, rbp
	0x1407a71e1: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x1407a71eb: mov dil, byte ptr [r10]
	0x1407a71ee: cmp dil, 0x44
	0x1407a71f2: jbe 0x1407a7209
	0x1407a7209: mov rbx, rbp
	0x1407a721a: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407a7224: xor word ptr [rbx], r12w
	0x1407a722f: mov rsi, rbp
	0x1407a7240: add rsi, 0x58
	0x1407a7251: mov r9, rbp
	0x1407a725b: add r9, 0x16e
Load [EBP+0x58](STATIC)
	0x1407a7269: mov esi, dword ptr [rsi]
	0x1407a7271: xor esi, 0x7f54f28b
Load [EBP+0x16e](STATIC)
	0x1407a7281: movzx r9, word ptr [r9]
	0x1407a728c: xor r9w, 0xb3c7
	0x1407a72a0: add r9, rbp
	0x1407a72a3: mov rax, r9
	0x1407a72ad: mov rcx, rsi
	0x1407a72be: mov r9b, cl
	0x1407a72cb: and r9b, 0x3f
	0x1407a72cf: cmp r9b, 0
	0x1407a72d3: je 0x1407a72e7
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x1407a72d9: shl dword ptr [rax], cl
	0x1407a72db: pushfq
	0x1407a733c: mov r14, rax
	0x1407a733f: add r14, 4
Store VM_REG [EBP+0x111]
	0x1407a734d: mov dword ptr [r14], 0
	0x1407a7354: mov r8, 0
	0x1407a735b: mov r10, rbp
	0x1407a736c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407a7373: mov r10, qword ptr [r10]
	0x1407a737d: add r10, 5
	0x1407a7384: mov r8b, byte ptr [r10]
	0x1407a7387: cmp r8b, 0
	0x1407a738b: je 0x1407a73f5
	0x1407a7398: mov r10, rbp
	0x1407a73a2: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407a73b0: mov r10, qword ptr [r10]
	0x1407a73c1: add r10, 6
	0x1407a73d2: mov r8w, word ptr [r10]
	0x1407a73e0: add r8, rbp
	0x1407a73e9: pop rax
Store VM_REG [EBP+0x26]
	0x1407a73ea: mov qword ptr [r8], rax
	0x1407a7445: mov rax, rbp
	0x1407a7448: add rax, 0x145
	0x1407a7458: mov rdi, rbp
Load [EBP+0x145](STATIC)
	0x1407a745b: mov rax, qword ptr [rax]
	0x1407a7465: add rax, 3
	0x1407a746b: add rdi, 0xab
	0x1407a747c: movzx rax, word ptr [rax]
Load [EBP+0xab](STATIC)
	0x1407a7486: mov rdi, qword ptr [rdi]
	0x1407a7489: mov r8, rbp
	0x1407a748c: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a74a1: add eax, dword ptr [r8]
	0x1407a74ab: sub eax, 0x1db1f251
	0x1407a74b7: mov r13, rbp
	0x1407a74ba: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a74c1: add dword ptr [r13], eax
	0x1407a74d3: and rax, 0xffff
	0x1407a74e3: shl rax, 3
	0x1407a74e7: add rdi, rax
	0x1407a74f1: mov rsi, qword ptr [rdi]
	0x1407a74fb: mov r10, rbp
	0x1407a74fe: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b80
	0x1407a7505: add qword ptr [r10], 8
	0x1407a750c: jmp rsi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407c29e5: mov rdx, rbp
	0x1407c29e8: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407c29ef: mov rdx, qword ptr [rdx]
	0x1407c29f2: add rdx, 9
	0x1407c29f9: mov r13d, dword ptr [rdx]
	0x1407c29fc: mov r14, rbp
	0x1407c29ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c2a06: xor dword ptr [r14], r13d
	0x1407c2a1a: mov rdx, rbp
	0x1407c2a2e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407c2a3c: mov rdx, qword ptr [rdx]
	0x1407c2a42: add rdx, 6
	0x1407c2a57: movzx r9, word ptr [rdx]
	0x1407c2a8a: mov r15, rbp
	0x1407c2a9b: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407c2aa5: xor r9d, dword ptr [r15]
	0x1407c2af3: mov r10, rbp
	0x1407c2afd: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x1407c2b0b: mov r15b, byte ptr [r10]
	0x1407c2b0e: cmp r15b, 0x19
	0x1407c2b12: jbe 0x1407c2b26
	0x1407c2b18: add r9d, 0x9582f5d
	0x1407c2b36: mov rcx, rbp
	0x1407c2b4a: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407c2b51: add word ptr [rcx], r9w
	0x1407c2b5f: mov r10, rbp
	0x1407c2b6c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407c2b7a: mov r10, qword ptr [r10]
	0x1407c2b7d: add r10, 2
	0x1407c2b84: mov r14d, dword ptr [r10]
	0x1407c2b91: mov rsi, rbp
	0x1407c2ba2: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c2ba9: sub r14d, dword ptr [rsi]
	0x1407c2bd8: mov rdi, rbp
	0x1407c2bec: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c2bfa: add dword ptr [rdi], r14d
	0x1407c2c03: mov rdi, rbp
	0x1407c2c17: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c2c25: add dword ptr [rdi], 0x79193ebf
	0x1407c2c2b: mov r10, rbp
	0x1407c2c34: add r10, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407c2c42: xor dword ptr [r10], r14d
	0x1407c2c45: mov r12, rbp
	0x1407c2c4f: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407c2c56: and dword ptr [r12], r14d
	0x1407c2c61: mov rcx, rbp
	0x1407c2c72: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c2c8a: movzx rcx, word ptr [rcx]
	0x1407c2c9c: xor cx, 0xd019
	0x1407c2ca4: add rcx, rbp
	0x1407c2cbc: mov rbx, rbp
	0x1407c2ccd: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x1407c2cde: mov ebx, dword ptr [rbx]
	0x1407c2ce7: add ebx, 0x7bab3782
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x1407c2ced: xor dword ptr [rcx], ebx
	0x1407c2cef: pushfq
	0x1407c2d05: add rcx, 4
Store VM_REG [EBP+0x111]
	0x1407c2d21: mov dword ptr [rcx], 0
	0x1407c2d2d: mov r11, 0
	0x1407c2d45: mov r13, rbp
	0x1407c2d5d: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407c2d6b: mov r13, qword ptr [r13]
	0x1407c2d6f: add r13, 8
	0x1407c2d79: mov r11b, byte ptr [r13]
	0x1407c2d7d: cmp r11b, 0
	0x1407c2d81: je 0x1407c2df9
	0x1407c2d95: mov r13, rbp
	0x1407c2d98: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407c2da9: mov r13, qword ptr [r13]
	0x1407c2db7: add r13, 0xd
	0x1407c2dd3: mov r11w, word ptr [r13]
	0x1407c2de2: add r11, rbp
	0x1407c2de5: pop r9
Store VM_REG [EBP+0x26]
	0x1407c2de7: mov qword ptr [r11], r9
	0x1407c2e5e: mov r12, rbp
	0x1407c2e76: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407c2e84: mov r12, qword ptr [r12]
	0x1407c2e9d: mov rsi, rbp
	0x1407c2ea0: add r12, 0
	0x1407c2ea7: movzx r12, word ptr [r12]
	0x1407c2eba: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407c2ec1: mov rsi, qword ptr [rsi]
	0x1407c2ece: mov rax, rbp
	0x1407c2ed8: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c2ede: xor r12d, dword ptr [rax]
	0x1407c2ee8: sub r12d, 0x7896f6d5
	0x1407c2ef5: mov r14, rbp
	0x1407c2f09: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c2f17: or dword ptr [r14], r12d
	0x1407c2f21: and r12, 0xffff
	0x1407c2f35: shl r12, 3
	0x1407c2f3c: add rsi, r12
	0x1407c2f46: mov rax, qword ptr [rsi]
	0x1407c2f50: mov rsi, rbp
	0x1407c2f61: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b8f
	0x1407c2f68: add qword ptr [rsi], 0xf
	0x1407c2f6f: jmp rax
handlers outputs:



basic block ends with indirect unconditional branch
	0x140826626: mov r13, rbp
	0x140826637: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140826641: mov r13, qword ptr [r13]
	0x140826645: add r13, 2
	0x14082664c: movzx r8, word ptr [r13]
	0x140826651: mov r14, rbp
	0x14082665a: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140826661: add r8d, dword ptr [r14]
	0x140826664: mov rbx, rbp
	0x140826667: add rbx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14082666e: add r8d, dword ptr [rbx]
	0x140826671: mov rbx, rbp
	0x140826674: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140826681: add dword ptr [rbx], r8d
	0x140826684: mov rax, rbp
	0x140826695: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408266a5: sub dword ptr [rax], 0x77dc1d5e
	0x1408266b9: mov r9, rbp
	0x1408266bc: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x1408266cd: mov r15b, byte ptr [r9]
	0x1408266d0: cmp r15b, 0xcb
	0x1408266d4: jbe 0x1408266ef
	0x1408266f2: mov r14, rbp
	0x1408266f5: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408266fc: xor word ptr [r14], r8w
	0x140826700: mov rdx, rbp
	0x140826710: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x140826717: movzx rdx, word ptr [rdx]
	0x14082671b: xor dx, 0x50a1
	0x140826720: add rdx, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140826731: not dword ptr [rdx]
	0x140826733: add rdx, 4
Store VM_REG [EBP+0x111]
	0x14082673a: mov dword ptr [rdx], 0
	0x140826774: mov r13, rbp
	0x14082677e: mov rax, rbp
	0x14082678f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1408267a3: mov rax, qword ptr [rax]
	0x1408267ad: add r13, 0xab
	0x1408267bb: add rax, 0
Load [EBP+0xab](STATIC)
	0x1408267c8: mov r13, qword ptr [r13]
	0x1408267cc: movzx rax, word ptr [rax]
	0x1408267e8: xor eax, 0x50d7c0d0
	0x1408267fb: mov rsi, rbp
	0x1408267fe: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140826805: xor dword ptr [rsi], eax
	0x140826815: and rax, 0xffff
	0x140826828: shl rax, 3
	0x14082682c: add r13, rax
	0x140826832: mov r9, qword ptr [r13]
	0x140826844: mov r14, rbp
	0x140826855: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940b93
	0x14082685c: add qword ptr [r14], 4
	0x140826863: jmp r9
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088e1db: mov rcx, 0
	0x14088e1e2: mov rbx, rbp
	0x14088e1e5: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088e1ec: mov rbx, qword ptr [rbx]
	0x14088e1ef: add rbx, 0xa
	0x14088e1f6: mov cx, word ptr [rbx]
	0x14088e1f9: add rcx, rbp
	0x14088e1fc: mov r10, 0
	0x14088e203: mov rdx, rbp
	0x14088e206: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088e20d: mov rdx, qword ptr [rdx]
	0x14088e210: add rdx, 0x10
	0x14088e217: mov r10w, word ptr [rdx]
	0x14088e21b: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14088e21e: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x14088e220: push qword ptr [r10]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14088e223: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x14088e225: pop qword ptr [r10]
	0x14088e228: mov r10, rbp
	0x14088e22e: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088e23c: mov r10, qword ptr [r10]
	0x14088e249: add r10, 0xc
	0x14088e257: mov r12d, dword ptr [r10]
	0x14088e28d: mov r15, rbp
	0x14088e290: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088e297: sub r12d, dword ptr [r15]
	0x14088e2a4: mov r9, rbp
	0x14088e2b5: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088e2bf: add dword ptr [r9], r12d
	0x14088e2c2: mov r9, rbp
	0x14088e2d3: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088e2eb: xor dword ptr [r9], 0x4bc7066a
	0x14088e303: mov rcx, rbp
	0x14088e306: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088e31e: add dword ptr [rcx], r12d
	0x14088e332: mov rax, rbp
	0x14088e343: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088e356: sub dword ptr [rax], r12d
	0x14088e380: mov rdx, rbp
	0x14088e383: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088e391: mov rdx, qword ptr [rdx]
	0x14088e3a2: add rdx, 8
	0x14088e3b7: movzx r8, word ptr [rdx]
	0x14088e3ce: mov rdi, rbp
	0x14088e3de: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14088e3eb: add r8d, dword ptr [rdi]
	0x14088e403: mov rdi, rbp
	0x14088e406: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088e40d: and dword ptr [rdi], r8d
	0x14088e410: mov rcx, rbp
	0x14088e413: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088e42b: add dword ptr [rcx], 0x328a9893
	0x14088e431: mov rbx, rbp
	0x14088e442: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x14088e457: mov sil, byte ptr [rbx]
	0x14088e45a: cmp sil, 0x41
	0x14088e45e: jbe 0x14088e475
	0x14088e47c: mov r9, rbp
	0x14088e47f: add r9, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088e49b: sub word ptr [r9], r8w
	0x14088e4a8: mov rbx, rbp
	0x14088e4ae: mov r14, rbp
	0x14088e4dd: add r14, 0x16e
	0x14088e4e4: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088e517: mov ebx, dword ptr [rbx]
	0x14088e544: add ebx, 0x3fb5a540
Load [EBP+0x16e](STATIC)
	0x14088e554: movzx r14, word ptr [r14]
	0x14088e56c: xor r14w, 0x20d0
	0x14088e572: add r14, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14088e57b: add dword ptr [r14], ebx
	0x14088e587: add r14, 4
Store VM_REG [EBP+0x111]
	0x14088e595: mov dword ptr [r14], 0
	0x14088e5b4: mov dl, 0xe0
	0x14088e5c7: mov r13, rbp
	0x14088e5ca: add r13, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088e5e2: xor byte ptr [r13], dl
	0x14088e5e9: mov r9, rbp
	0x14088e601: add r9, 0xab
	0x14088e616: mov r15, rbp
	0x14088e619: add r15, 0x145
Load [EBP+0xab](STATIC)
	0x14088e620: mov r9, qword ptr [r9]
Load [EBP+0x145](STATIC)
	0x14088e634: mov r15, qword ptr [r15]
	0x14088e64c: add r15, 0x12
	0x14088e65a: movzx r15, word ptr [r15]
	0x14088e66f: mov r10, rbp
	0x14088e67c: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088e68a: add r15d, dword ptr [r10]
	0x14088e6ac: mov r11, rbp
	0x14088e6b9: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088e6c3: xor dword ptr [r11], r15d
	0x14088e6cd: and r15, 0xffff
	0x14088e6de: shl r15, 3
	0x14088e6e5: add r9, r15
	0x14088e6e8: mov rdi, qword ptr [r9]
	0x14088e6f5: mov r14, rbp
	0x14088e6f8: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ba7
	0x14088e6ff: add qword ptr [r14], 0x14
	0x14088e706: jmp rdi
handlers outputs:



	0x1407e1a86: mov r10, rbp
	0x1407e1a89: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1a99: mov r10, qword ptr [r10]
	0x1407e1a9c: add r10, 7
	0x1407e1ab1: movzx rbx, word ptr [r10]
	0x1407e1aea: mov r10, rbp
	0x1407e1b01: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e1b08: xor ebx, dword ptr [r10]
	0x1407e1b15: mov rsi, rbp
	0x1407e1b29: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1b30: sub dword ptr [rsi], ebx
	0x1407e1b72: mov rdx, rbp
	0x1407e1b86: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e1b9a: mov r9b, byte ptr [rdx]
	0x1407e1b9d: cmp r9b, 0xc
	0x1407e1ba1: jbe 0x1407e1bb7
	0x1407e1bae: xor ebx, 0x340ece75
	0x1407e1bb7: mov r11, rbp
	0x1407e1bc1: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e1bc8: xor word ptr [r11], bx
	0x1407e1bcc: mov r9, 0
	0x1407e1bd3: mov rcx, rbp
	0x1407e1bd6: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1bea: mov rcx, qword ptr [rcx]
	0x1407e1bf4: add rcx, 3
	0x1407e1c02: mov r9w, word ptr [rcx]
	0x1407e1c1c: mov rcx, rbp
	0x1407e1c28: add rcx, 0x120
Load [EBP+0x120](STATIC)
	0x1407e1c39: xor r9d, dword ptr [rcx]
	0x1407e1c3c: mov r14, rbp
	0x1407e1c54: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1c5b: or dword ptr [r14], r9d
	0x1407e1c6b: mov r8, rbp
	0x1407e1c75: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1c8a: sub dword ptr [r8], 0x3d9cd560
	0x1407e1ca4: mov r11, rbp
	0x1407e1cb4: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407e1cc5: xor word ptr [r11], r9w
	0x1407e1cd0: mov r9, rbp
	0x1407e1cdc: mov rdi, rbp
	0x1407e1cf0: add rdi, 0x16e
	0x1407e1cfa: add r9, 0xd6
Load [EBP+0x16e](STATIC)
	0x1407e1d01: movzx rdi, word ptr [rdi]
Load [EBP+0xd6](STATIC)
	0x1407e1d0c: movzx r9, word ptr [r9]
	0x1407e1d16: sub di, 0x8309
	0x1407e1d25: add rdi, rbp
	0x1407e1d39: add r9w, 0xb5dd
	0x1407e1d42: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x1407e1d53: mov r9, qword ptr [r9]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e1d56: add dword ptr [rdi], r9d
	0x1407e1d59: pushfq
	0x1407e1d64: add rdi, 4
Store VM_REG [EBP+0x159]
	0x1407e1d75: mov dword ptr [rdi], 0
	0x1407e1d7e: mov r11, 0
	0x1407e1d9a: mov rcx, rbp
	0x1407e1dcb: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1df7: mov rcx, qword ptr [rcx]
	0x1407e1e12: add rcx, 0
	0x1407e1e2b: mov r11b, byte ptr [rcx]
	0x1407e1e2e: cmp r11b, 0
	0x1407e1e32: je 0x1407e1e9b
	0x1407e1e3f: mov rcx, rbp
	0x1407e1e42: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1e4f: mov rcx, qword ptr [rcx]
	0x1407e1e62: add rcx, 5
	0x1407e1e7a: mov r11w, word ptr [rcx]
	0x1407e1e7e: add r11, rbp
	0x1407e1e8b: pop rdi
Store VM_REG [EBP+0x26]
	0x1407e1e8c: mov qword ptr [r11], rdi
	0x1407e1f09: mov r11, rbp
	0x1407e1f1a: mov r8, rbp
	0x1407e1f1d: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1f32: mov r11, qword ptr [r11]
	0x1407e1f3c: add r11, 1
	0x1407e1f43: movzx r11, word ptr [r11]
	0x1407e1f47: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e1f63: mov r8, qword ptr [r8]
	0x1407e1f73: mov r12, rbp
	0x1407e1f87: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1f9b: xor r11d, dword ptr [r12]
	0x1407e1f9f: sub r11d, 0x63e55c63
	0x1407e1fad: mov r10, rbp
	0x1407e1fb0: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e1fbe: add dword ptr [r10], r11d
	0x1407e1fd1: and r11, 0xffff
	0x1407e1fde: shl r11, 3
	0x1407e1ff0: add r8, r11
	0x1407e1ff3: mov rsi, qword ptr [r8]
	0x1407e1ffc: mov r10, rbp
	0x1407e2009: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940bb0
	0x1407e2010: add qword ptr [r10], 9
	0x1407e2017: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940bbe
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940be0
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940bfa
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x14085606a: mov r15, 0
	0x140856071: mov rsi, rbp
	0x140856074: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140856082: mov rsi, qword ptr [rsi]
	0x140856088: add rsi, 0
	0x14085609c: mov r15w, word ptr [rsi]
	0x1408560b1: shl r15, 3
	0x1408560ca: mov rbx, rbp
	0x1408560d0: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408560e1: mov r13, qword ptr [rbx]
	0x1408560f1: add r13, r15
	0x140856102: mov r15, qword ptr [r13]
	0x140856106: mov r10, 0
	0x14085610d: mov rax, rbp
	0x140856125: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140856135: mov rax, qword ptr [rax]
	0x14085614d: add rax, 4
	0x14085615a: mov r10d, dword ptr [rax]
	0x14085615d: mov r11, r10
	0x140856167: and r10d, 0x80000000
	0x14085616e: cmp r10d, 0
	0x140856175: je 0x1408561aa
	0x1408561bb: mov rax, rbp
	0x1408561c5: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940eac
	0x1408561d2: add qword ptr [rax], r11
	0x1408561d5: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940eb2
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t606
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a47edc
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a47ee8
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140940ebe
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ecc
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with ret
	0x140801c4d: mov r8, rbp
	0x140801c5e: mov rsi, rbp
	0x140801c61: add r8, 0xab
	0x140801c7d: add rsi, 0x145
Load [EBP+0xab](STATIC)
	0x140801c95: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x140801c98: mov rsi, qword ptr [rsi]
	0x140801cb0: add rsi, 4
	0x140801cb7: movzx rsi, word ptr [rsi]
	0x140801cbb: mov r11, rbp
	0x140801cc8: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x140801cd6: xor esi, dword ptr [r11]
	0x140801ce3: add esi, 0x6d2250df
	0x140801cf0: mov r12, rbp
	0x140801cfd: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140801d15: or dword ptr [r12], esi
	0x140801d20: and rsi, 0xffff
	0x140801d35: shl rsi, 3
	0x140801d39: add r8, rsi
	0x140801d46: mov r11, qword ptr [r8]
	0x140801d53: mov rcx, rbp
	0x140801d5d: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x140801d64: mov qword ptr [rcx], r11
	0x140801d78: mov r13, rbp
	0x140801d7e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140801d8c: mov r13, qword ptr [r13]
	0x140801d9a: add r13, 0
	0x140801daf: movzx r14, word ptr [r13]
	0x140801e02: mov rdi, rbp
	0x140801e0f: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140801e16: or dword ptr [rdi], r14d
	0x140801e37: mov rax, rbp
	0x140801e3d: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x140801e4a: mov r15b, byte ptr [rax]
	0x140801e4d: cmp r15b, 0x96
	0x140801e51: jbe 0x140801e6f
	0x140801e5a: sub r14d, 0x2c8561f1
	0x140801e79: mov r15, rbp
	0x140801e7c: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140801e8d: add word ptr [r15], r14w
	0x140801e91: mov r9, 0x400
	0x140801e9f: mov rbx, 0
	0x140801eb7: mov rsi, rbp
	0x140801ecb: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140801ed9: mov rsi, qword ptr [rsi]
	0x140801ee3: add rsi, 2
	0x140801ef1: mov bx, word ptr [rsi]
	0x140801ef4: mov rdi, rbp
	0x140801f0c: add rdi, 0xbf
	0x140801f16: mov r14, rbp
	0x140801f20: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x140801f27: add ebx, dword ptr [r14]
	0x140801f2a: add r9, r14
	0x140801f2d: and r9, 0x90
	0x140801f3a: xor r9, 0xffffffff80000000
	0x140801f60: mov r14, 0x200
	0x140801f6e: mov r8, 1
	0x140801f75: add r8, rbx
	0x140801f78: mov rax, rbp
	0x140801f82: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140801f88: add word ptr [rax], bx
	0x140801f8b: mov rsi, rbp
	0x140801f8e: mov r13, rbp
	0x140801f91: add rbx, r8
	0x140801f94: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
	0x140801f9b: movzx rsi, word ptr [rsi]
	0x140801fa6: mov r12, 0xd5
	0x140801fc2: add r13, 0x16e
	0x140801fcc: and rax, 0x7fffffff
	0x140801fd2: add rsi, rbp
	0x140801fd8: mov rdx, 0
Load [EBP+0x16e](STATIC)
	0x140801fdf: movzx r13, word ptr [r13]
	0x140801fe4: xor r13w, 0x527f
	0x140801fea: xor r12, rdx
	0x140801fed: add r13, rbp
	0x140801ff7: sub rax, r13
Load [EBP+0x155](VM_REGISTER)
	0x140801ffa: mov rsi, qword ptr [rsi]
	0x140801ffd: mov r10, 0x12
Load [EBP+0x14d](VM_REGISTER)
	0x14080200b: mov r13, qword ptr [r13]
	0x14080201c: mov dword ptr [r13], esi
	0x140802027: and rsi, 8
	0x14080202e: add r12, 0x3f
	0x140802038: mov rcx, rbp
	0x14080203b: and rsi, 1
	0x140802042: add rsi, rbx
	0x140802045: add rcx, 0xfd
Load [EBP+0xfd](STATIC)
	0x14080204c: mov rbx, qword ptr [rcx]
	0x14080204f: add rsi, 1
	0x140802056: and rsi, 0xffff
	0x140802060: and r12, r10
	0x140802063: push 0xecf7921
	0x140802068: sub rsp, 8
	0x14080206c: push 0x3b1c5921
	0x140802071: push 0x489b447c
	0x140802076: push 0x4ba66aae
	0x14080207b: push r12
	0x14080207d: push rbx
unknown read addr: fc8 ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff)
unknown store addr: fc8, lea_ast: ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x12f799f92
	0x14080207e: xor qword ptr [rsp], 0x6fff310b
	0x140802086: pop r12
	0x140802088: xor r12, 0x6fff310b
	0x14080208f: push 0x7f5a8a41
	0x140802094: push r12
unknown read addr: fc0 ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff)
unknown store addr: fc8, lea_ast: ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x140802096: pop qword ptr [rsp]
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x140802099: pop qword ptr [rsp + 8]
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
	0x14080209d: mov r12, qword ptr [rsp]
	0x1408020a1: push rcx
	0x1408020a2: mov rcx, rsp
	0x1408020a5: add rcx, 8
	0x1408020a9: push rax
	0x1408020aa: movabs rax, 0x73e7a500
	0x1408020b4: or rax, 0x7dbb1d1
	0x1408020ba: not rax
	0x1408020bd: add rax, 0x5fe7cb92
	0x1408020c3: sub rax, 0x2bfaaff8
	0x1408020c9: push r12
	0x1408020cb: mov r12, -0x44129a40
	0x1408020d2: sub rax, r12
	0x1408020d5: pop r12
	0x1408020d7: add rcx, rax
	0x1408020da: pop rax
	0x1408020db: push rcx
	0x1408020dc: push qword ptr [rsp + 8]
	0x1408020e0: pop rcx
	0x1408020e1: pop qword ptr [rsp]
	0x1408020e4: pop rsp
	0x1408020e5: pop qword ptr [rsp]
	0x1408020e8: pop qword ptr [rsp]
	0x1408020eb: pop qword ptr [rsp]
	0x1408020ee: pop qword ptr [rsp]
	0x140802106: mov rdx, 0x200
	0x14080210d: sub rdx, rbx
	0x140802113: or rsi, 8
	0x14080211a: sub rdx, rcx
	0x14080211d: mov rax, 1
	0x140802124: sub rax, 0x7fffffff
	0x14080212a: mov r10, 0
	0x140802131: xor r10, r10
	0x140802134: sub rdx, 0x20
	0x14080213e: and r10, 0xffff
	0x140802145: push 0x46128a0e
	0x14080214a: sub rsp, 8
	0x14080214e: mov qword ptr [rsp], r9
	0x140802152: pop qword ptr [rsp]
	0x140802155: push 0x69c5391b
	0x14080215a: push rbp
	0x14080215b: pop qword ptr [rsp]
	0x14080215e: push qword ptr [rsp]
	0x140802161: mov r9, qword ptr [rsp]
	0x140802165: add rsp, 8
	0x14080216c: push rcx
	0x14080216d: mov rcx, rsp
	0x140802170: add rcx, 8
	0x140802174: add rcx, 8
	0x14080217b: push rcx
	0x14080217c: push qword ptr [rsp + 8]
	0x140802180: pop rcx
	0x140802181: pop qword ptr [rsp]
	0x140802184: mov rsp, qword ptr [rsp]
	0x140802188: push 0x2c56725e
	0x14080218d: sub rsp, 8
	0x140802191: push rax
	0x140802192: pop qword ptr [rsp]
	0x140802195: pop qword ptr [rsp]
	0x140802198: mov rax, r9
	0x14080219b: push rax
	0x14080219c: pop rcx
	0x14080219d: pop rax
	0x14080219e: mov r9, qword ptr [rsp]
	0x1408021a2: add rsp, 8
	0x1408021b0: mov r15, rbx
	0x1408021b3: sub r10, 4
	0x1408021ba: xor rdx, 4
	0x1408021c1: add r15, 0x10
	0x1408021cf: push rsi
	0x1408021d0: mov rsi, rsp
	0x1408021d3: add rsi, 8
	0x1408021d7: sub rsi, 8
	0x1408021de: xor rsi, qword ptr [rsp]
	0x1408021e2: xor qword ptr [rsp], rsi
	0x1408021ea: pop rsp
	0x1408021eb: mov qword ptr [rsp], rbx
	0x1408021ef: push r9
	0x1408021f1: movabs r9, 0x7fecc866
	0x1408021fb: push r9
	0x1408021fd: pop rbx
	0x1408021fe: pop r9
	0x140802200: push rbp
	0x140802201: movabs rbp, 0x5bff17ef
	0x14080220b: sub rbx, rbp
	0x14080220e: pop rbp
	0x14080220f: push 0x3ee7bb4a
	0x140802214: push r10
unknown read addr: fe0 ((0xfffffffffffffff0 + t627) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xfffffffffffffff8 + t627) & 0xffffffffffffffff), simplified_source_node: 0xfffffffffffffffc
	0x140802216: pop qword ptr [rsp]
	0x140802219: sub rsp, 8
unknown store addr: fe0, lea_ast: ((0xfffffffffffffff0 + t627) & 0xffffffffffffffff), simplified_source_node: context
	0x140802220: mov qword ptr [rsp], rcx
	0x140802224: movabs rcx, 0x5f7d8845
	0x14080222e: movabs r10, 0x25238765
	0x140802238: xor r10, rcx
	0x14080223b: pop rcx
	0x14080223c: or rbx, r10
	0x14080223f: pop r10
	0x140802241: push r10
	0x140802243: movabs r10, 0x3ffd044b
	0x14080224d: not r10
	0x140802250: inc r10
	0x140802253: and r10, 0x3c8ce981
	0x14080225a: not r10
	0x14080225d: inc r10
	0x140802260: push rdi
	0x140802261: mov rdi, 0xe982
	0x140802268: add r10, rdi
	0x14080226b: pop rdi
	0x14080226c: add rbx, r10
	0x14080226f: pop r10
	0x140802271: add rbx, 0x39dd4900
	0x140802278: sub rsp, 8
	0x14080227c: push 0x117ec1b3
	0x140802281: mov qword ptr [rsp], rcx
	0x140802285: pop qword ptr [rsp]
	0x140802288: movabs rcx, 0xffffffff4a22f8cd
	0x140802292: add rbx, 0x6eff26c6
	0x140802299: add rbx, rcx
	0x14080229c: sub rbx, 0x6eff26c6
	0x1408022a3: mov rcx, qword ptr [rsp]
	0x1408022a7: add rsp, 8
	0x1408022ab: sub rcx, 0x7b4efde2
	0x1408022b2: add rcx, rbx
	0x1408022b5: add rcx, 0x7b4efde2
	0x1408022bc: pop rbx
	0x1408022bd: and rdx, 0xf0
	0x1408022c4: push rax
	0x1408022c5: movabs rax, 0x6fff2cf7
	0x1408022cf: push rbp
	0x1408022d0: movabs rbp, 0x377ee736
	0x1408022da: neg rbp
	0x1408022dd: dec rbp
	0x1408022e0: shr rbp, 5
	0x1408022e4: push r14
	0x1408022e6: movabs r14, 0xf800000001bbf73b
	0x1408022f0: add rbp, 0x3dff2302
	0x1408022f7: add rbp, 0x7eef39ae
	0x1408022fe: add rbp, r14
	0x140802301: sub rbp, 0x7eef39ae
	0x140802308: sub rbp, 0x3dff2302
	0x14080230f: pop r14
	0x140802311: add rax, rbp
	0x140802314: pop rbp
	0x140802315: push rdx
	0x140802316: movabs rdx, 0x79b7f5f2
	0x140802320: or rax, rdx
	0x140802323: pop rdx
	0x140802324: shr rax, 2
	0x140802328: push 0x62f7cee2
	0x14080232d: mov qword ptr [rsp], rax
	0x140802331: push 0x46a73a2c
	0x140802336: push r9
	0x140802338: pop qword ptr [rsp]
	0x14080233b: push qword ptr [rsp + 8]
	0x14080233f: push qword ptr [rsp]
	0x140802342: pop r9
	0x140802344: add rsp, 8
	0x14080234b: pop qword ptr [rsp]
	0x14080234e: not r9
	0x140802351: xchg qword ptr [rsp], r9
	0x140802355: mov rax, qword ptr [rsp]
	0x140802359: push r15
	0x14080235b: mov r15, rsp
	0x14080235e: add r15, 8
	0x140802362: add r15, 8
	0x140802369: xchg qword ptr [rsp], r15
	0x14080236d: pop rsp
	0x14080236e: sub rsp, 8
	0x140802372: mov qword ptr [rsp], rcx
	0x140802376: mov rcx, 0x1fffff85
	0x14080237d: sub rax, 0x6feed28a
	0x140802383: add rax, rcx
	0x140802386: add rax, 0x6feed28a
	0x14080238c: mov rcx, qword ptr [rsp]
	0x140802390: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x1ac53a530
	0x140802394: add qword ptr [rcx], 0x6bbf9664
Load [EBP+0x145](STATIC)
bytecode=0x1ac53a536
	0x14080239b: add qword ptr [rcx], rax
Load [EBP+0x145](STATIC)
bytecode=0x140940ed2
	0x14080239e: sub qword ptr [rcx], 0x6bbf9664
	0x1408023a5: pop rax
	0x1408023d5: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x131](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140940edc
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ee4
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x140767a58: mov r11, 0
	0x140767a66: mov r9, rbp
	0x140767a69: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140767a85: mov r9, qword ptr [r9]
	0x140767a88: add r9, 4
	0x140767a9c: mov r11w, word ptr [r9]
	0x140767ad3: mov r14, rbp
	0x140767ae4: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x140767af2: xor r11d, dword ptr [r14]
	0x140767afc: mov rdi, rbp
	0x140767b09: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767b17: or dword ptr [rdi], r11d
	0x140767b21: mov rdx, rbp
	0x140767b35: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767b3f: or dword ptr [rdx], 0xe0e0af6
	0x140767b45: mov rsi, rbp
	0x140767b5d: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140767b72: sub word ptr [rsi], r11w
	0x140767b8b: mov r10, rbp
	0x140767b95: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x140767ba3: mov r10, qword ptr [r10]
	0x140767bb7: mov r8, rbp
	0x140767bcb: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767bd9: mov r8, qword ptr [r8]
	0x140767be9: add r8, 8
	0x140767bf0: movzx r8, word ptr [r8]
	0x140767c02: mov r15, rbp
	0x140767c13: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140767c1a: xor r8d, dword ptr [r15]
	0x140767c24: add r8d, 0x724b433
	0x140767c57: and r8, 0xffff
	0x140767c73: shl r8, 3
	0x140767c7a: add r10, r8
	0x140767c7d: mov rdi, qword ptr [r10]
	0x140767c8a: mov rsi, rbp
	0x140767c9b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140767cb3: mov qword ptr [rsi], rdi
	0x140767cc4: mov r8, rbp
	0x140767cd8: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767ce6: mov r8, qword ptr [r8]
	0x140767ce9: add r8, 6
	0x140767cf0: movzx r9, word ptr [r8]
	0x140767d02: mov r8, rbp
	0x140767d05: add r8, 0xbf
	0x140767d13: mov r15, 0xd5
Load [EBP+0xbf](STATIC)
	0x140767d20: xor r9d, dword ptr [r8]
	0x140767d23: and r15, 0x20
	0x140767d2a: mov rbx, rbp
	0x140767d2d: add rbx, 0xf0
	0x140767d34: mov rdx, 0
Load [EBP+0xf0](STATIC)
	0x140767d42: add r9d, dword ptr [rbx]
	0x140767d45: and r15, 0x10
	0x140767d53: mov r12, rbp
	0x140767d56: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767d64: add dword ptr [r12], r9d
	0x140767d76: mov rax, rbp
	0x140767d80: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767d89: or dword ptr [rax], 0x67d1c4a3
	0x140767d96: mov r14, rbp
	0x140767d99: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x140767da0: mov r12b, byte ptr [r14]
	0x140767da3: cmp r12b, 0xb2
	0x140767da7: jbe 0x140767dd3
	0x140767dbb: sub r9d, 0xb8913e8
	0x140767dd0: mov r15, r15
	0x140767dd3: mov r14, rbp
	0x140767de4: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140767deb: sub word ptr [r14], r9w
	0x140767def: mov rcx, rbp
	0x140767df2: mov r10, rbp
	0x140767df5: add r10, 0x145
	0x140767dfc: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140767e03: mov rcx, qword ptr [rcx]
Load [EBP+0x145](STATIC)
	0x140767e06: mov r10, qword ptr [r10]
	0x140767e09: add rcx, 0xc
	0x140767e10: add r10, 4
	0x140767e17: movzx rbx, word ptr [rcx]
	0x140767e1f: add rbx, rbp
	0x140767e22: mov rdi, rbp
	0x140767e25: add rdi, 0xbf
Load [EBP+0x155](VM_REGISTER)
	0x140767e2c: mov rbx, qword ptr [rbx]
	0x140767e2f: sub rdi, rbx
	0x140767e32: pushfq
	0x140767e57: pop rdi
	0x140767e5f: mov rbx, rbp
	0x140767e73: mov r8, rbp
	0x140767e76: add rbx, 0x145
	0x140767e84: add r8, 0x16e
	0x140767e99: mov r9, rbp
	0x140767ea3: add r9, 0xd6
Load [EBP+0x145](STATIC)
	0x140767eb4: mov rbx, qword ptr [rbx]
	0x140767ec4: add rbx, 0
Load [EBP+0xd6](STATIC)
	0x140767edc: movzx r9, word ptr [r9]
	0x140767eee: mov r15d, dword ptr [rbx]
	0x140767ef8: add r9, rbp
	0x140767f0c: mov rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140767f20: mov r9, qword ptr [r9]
Deref(t641,ds)
	0x140767f30: mov r9, qword ptr [r9]
Load [EBP+0x16e](STATIC)
	0x140767f33: movzx r8, word ptr [r8]
	0x140767f3e: sub r8w, 0xc1e2
	0x140767f4a: add r8, rbp
	0x140767f50: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767f5a: and dword ptr [rsi], r15d
Store VM_REG [EBP+0xe8]
	0x140767f64: mov qword ptr [r8], r9
	0x140767f8e: mov r11, 0
	0x140767f9c: mov r13, 0x400
	0x140767fa3: or r11, 0x78
	0x140767faa: mov rdi, 0xd5
	0x140767fb8: and r11, 0x80
	0x140767fbf: mov rax, 0
	0x140767fc6: add r11, rdi
	0x140767fc9: and rax, r8
	0x140767fcc: sub rax, 4
	0x140767fd2: xor r11, rdx
	0x140767fd8: push 0x2a02c743
	0x140767fdd: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x6733f327
	0x140767fe1: mov qword ptr [rsp], r15
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x6733f327
	0x140767fe5: pop qword ptr [rsp]
	0x140767fe8: push 0x7d00de51
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140767fed: mov qword ptr [rsp], rbp
	0x140767ff1: pop r15
	0x140767ff3: push 0x5c32610a
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x400
	0x140767ff8: mov qword ptr [rsp], r13
	0x140767ffc: push 0x76159375
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xe8 + context) & 0xffffffffffffffff)
	0x140768001: mov qword ptr [rsp], r8
	0x140768005: push 0x3181c26a
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14076800a: mov qword ptr [rsp], r15
	0x14076800e: pop r8
	0x140768010: push r8
	0x140768012: pop r13
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140768014: push qword ptr [rsp]
	0x14076801b: add rsp, 8
	0x140768022: add rsp, 8
	0x140768026: push rax
	0x140768027: push r10
	0x140768029: mov r10, r13
	0x14076802c: mov rax, r10
	0x14076802f: mov r10, qword ptr [rsp]
	0x140768033: add rsp, 8
	0x14076803a: mov r12, rax
	0x14076803d: mov rax, qword ptr [rsp]
	0x140768041: add rsp, 8
	0x140768045: pop r13
	0x140768047: pop r15
	0x140768049: add r13, 8
	0x140768057: mov r8, rbp
	0x14076805a: xor rax, 0x80
	0x140768060: add r8, 0xfd
Load [EBP+0xfd](STATIC)
	0x140768067: mov rsi, qword ptr [r8]
	0x140768078: xor rsi, 0x1c50de46
	0x14076807f: push rsi
	0x140768087: or rax, 8
	0x14076808d: sub r13, 0x80
	0x140768094: push 0x2ff3da44
	0x140768099: sub rsp, 8
	0x14076809d: sub rsp, 8
	0x1407680a1: mov qword ptr [rsp], rbp
	0x1407680a5: pop qword ptr [rsp]
	0x1407680a8: pop qword ptr [rsp]
	0x1407680ab: push r11
	0x1407680ad: movabs r11, 0x39fe759
	0x1407680b7: mov rbp, r11
	0x1407680ba: pop r11
	0x1407680bc: push 0x5f6e2247
	0x1407680c1: push 0x579e8292
	0x1407680c6: mov qword ptr [rsp], rax
	0x1407680ca: pop qword ptr [rsp]
	0x1407680cd: movabs rax, 0x39fe61c
	0x1407680d7: xor rbp, rax
	0x1407680de: add rsp, 8
	0x1407680e2: sub r12, 0x6ff65921
	0x1407680e9: add r12, 0x7beebae4
	0x1407680f0: sub r12, 0x3f777f7f
	0x1407680f7: sub r12, 0x6930edb6
	0x1407680fe: sub r12, 0x77ebfdd9
	0x140768105: add r12, rbp
	0x140768108: add r12, 0x77ebfdd9
	0x14076810f: add r12, 0x6930edb6
	0x140768116: add r12, 0x3f777f7f
	0x14076811d: sub r12, 0x7beebae4
	0x140768124: add r12, 0x6ff65921
	0x14076812b: push qword ptr [rsp]
	0x14076812e: pop rbp
	0x14076812f: add rsp, 8
	0x14076813a: mov rdx, 0x200
	0x140768141: mov rcx, 0
	0x140768156: push 0x1e01f800
	0x14076815b: mov qword ptr [rsp], r11
	0x14076815f: movabs r11, 0xe
	0x140768169: sub rsp, 8
	0x14076816d: push r10
	0x14076816f: pop qword ptr [rsp]
	0x140768172: mov r10, 0
	0x140768179: sub r10, 0x5a778f12
	0x140768180: add r10, r12
	0x140768183: add r10, 0x5a778f12
	0x14076818a: push 0x32901bb1
	0x14076818f: push r8
	0x140768191: push rcx
	0x140768192: push rdx
	0x140768193: add qword ptr [rsp], 0x476fea9c
	0x14076819b: pop rcx
	0x14076819c: sub rcx, 0x476fea9c
	0x1407681a3: push r15
	0x1407681a5: mov r15, rcx
	0x1407681a8: mov r8, r15
	0x1407681ab: pop r15
	0x1407681b1: push r13
	0x1407681b3: mov r13, rsp
	0x1407681b6: add r13, 8
	0x1407681ba: add r13, 8
	0x1407681c1: xchg qword ptr [rsp], r13
	0x1407681c5: pop rsp
	0x1407681c6: mov qword ptr [rsp + 8], r8
	0x1407681cf: add rsp, 8
	0x1407681d6: mov rdx, 0
	0x1407681dd: sub rdx, 0x3ffbad30
	0x1407681e4: add rdx, r10
	0x1407681e7: add rdx, 0x3ffbad30
	0x1407681ee: add qword ptr [rdx], r11
	0x1407681f5: add rsp, 8
	0x1407681fc: pop r10
	0x1407681fe: push qword ptr [rsp]
	0x140768205: add rsp, 8
	0x14076820c: add rsp, 8
	0x140768248: pop rbx
	0x140768249: xor rbx, 0x1c50de46
	0x140768250: jmp rbx
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t652
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a47f1c
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a47f28
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140940efe
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f0c
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with ret
	0x14078135a: mov r9, rbp
	0x14078135d: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140781364: or dword ptr [r9], 0x3a3a2c3c
	0x140781378: mov rsi, 0xd5
	0x14078137f: mov rax, 0x400
	0x140781386: mov r13, 0
	0x140781397: mov r10, rbp
	0x1407813a1: and rax, rsi
	0x1407813a4: add r10, 0x145
	0x1407813b2: mov rcx, 0x12
Load [EBP+0x145](STATIC)
	0x1407813b9: mov r10, qword ptr [r10]
	0x1407813c3: add r10, 0
	0x1407813ca: mov r13w, word ptr [r10]
	0x1407813d4: or rcx, 0x10
	0x1407813ec: add rcx, 0x80
	0x140781401: sub rcx, 0xffff
	0x140781408: mov r12, rbp
	0x14078140b: add r12, 0x120
	0x140781412: add rcx, rax
Load [EBP+0x120](STATIC)
	0x140781415: add r13d, dword ptr [r12]
	0x140781419: mov r9, rbp
	0x140781423: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140781430: xor dword ptr [r9], r13d
	0x140781433: mov r12, rbp
	0x14078144b: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140781452: or dword ptr [r12], 0xd2c7f9e
	0x140781464: mov r12, rbp
	0x14078147c: add r12, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140781498: sub word ptr [r12], r13w
	0x1407814a7: mov r13, rbp
	0x1407814b7: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407814c5: mov r13, qword ptr [r13]
	0x1407814c9: add r13, 4
	0x1407814d0: movzx r8, word ptr [r13]
	0x1407814dc: mov rdi, rbp
	0x1407814df: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407814f3: add r8d, dword ptr [rdi]
	0x140781531: mov r11, rbp
	0x140781548: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078155c: or dword ptr [r11], r8d
	0x140781566: mov rdi, rbp
	0x140781573: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140781583: xor dword ptr [rdi], 0x34a6f974
	0x140781589: mov r15, rbp
	0x140781596: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407815a3: mov r13b, byte ptr [r15]
	0x1407815a6: cmp r13b, 0xed
	0x1407815aa: jbe 0x1407815b7
	0x1407815b0: sub r8d, 0x537a072f
	0x1407815cb: mov r10, rbp
	0x1407815d5: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407815e3: add word ptr [r10], r8w
	0x1407815f8: mov rbx, rbp
	0x1407815fb: and rcx, 0x40
	0x140781610: mov r9, rbp
	0x140781613: mov r10, 0
	0x14078161a: mov r8, 0x12
	0x140781621: and r15, 0x10
	0x140781628: add r9, 0xab
	0x140781636: and r8, 0x10
	0x14078163d: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140781644: mov rbx, qword ptr [rbx]
	0x140781647: xor rcx, r8
	0x14078164a: add rbx, 2
	0x140781654: or rcx, 0x7fffffff
	0x14078165b: movzx rbx, word ptr [rbx]
Load [EBP+0xab](STATIC)
	0x140781669: mov r9, qword ptr [r9]
	0x14078166c: mov rdi, rbp
	0x14078167d: add rdi, 0xbf
	0x140781684: mov r14, 0xd5
	0x14078168b: mov rsi, 0x400
	0x140781692: mov r12, 0x12
Load [EBP+0xbf](STATIC)
	0x140781699: xor ebx, dword ptr [rdi]
	0x14078169b: add rsi, 0x7fffffff
	0x1407816a2: xor ebx, 0x7bbfb830
	0x1407816ab: or rsi, r12
	0x1407816ae: sub rsi, 0xf0
	0x1407816bc: or r14, rsi
	0x1407816bf: and rbx, 0xffff
	0x1407816d0: shl rbx, 3
	0x1407816d7: add r9, rbx
	0x1407816da: mov rdi, qword ptr [r9]
	0x1407816eb: mov rax, 0x200
	0x1407816f2: mov r8, rbp
	0x1407816ff: xor r14, r14
	0x140781702: add r8, 0xfd
	0x140781709: and r12, r10
Store [EBP+0xfd](STATIC)
	0x140781713: mov qword ptr [r8], rdi
	0x140781716: mov r10, rbp
	0x140781719: mov rbx, rbp
	0x14078171c: add r10, 0x16e
	0x140781723: mov r8, 0x6d95e9f7
	0x14078172a: add rbx, 0xd6
Load [EBP+0x16e](STATIC)
	0x140781731: movzx r10, word ptr [r10]
	0x140781735: mov r13, rbp
	0x140781738: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078173f: sub dword ptr [r13], r8d
	0x140781743: add r10w, 0xa028
	0x140781749: add r10, rbp
Load [EBP+0xd6](STATIC)
	0x14078174c: movzx rbx, word ptr [rbx]
	0x140781750: sub bx, 0xc9b3
	0x140781755: add rbx, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140781758: mov rbx, qword ptr [rbx]
Deref(t657,ds)
	0x14078175b: mov ebx, dword ptr [rbx]
Store VM_REG [EBP+0xb7]
	0x14078175d: mov dword ptr [r10], ebx
	0x140781760: add r10, 4
Store VM_REG [EBP+0xbb]
	0x140781767: mov dword ptr [r10], 0
	0x14078176e: mov rbx, rbp
	0x140781771: add rbx, 0xbf
	0x140781778: mov r10, rbx
	0x14078177b: mov rdi, rbp
	0x14078177e: mov r11, rbp
	0x140781781: add rdi, 0x120
	0x140781788: add r11, 0xfd
Load [EBP+0x120](STATIC)
	0x14078178f: and eax, dword ptr [rdi]
Load [EBP+0xfd](STATIC)
	0x140781794: mov rdx, qword ptr [r11]
	0x140781797: push 0x302a62a7
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14078179c: mov qword ptr [rsp], rbp
	0x1407817a0: push rsp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817a1: mov rbp, qword ptr [rsp]
	0x1407817a5: add rsp, 8
	0x1407817ac: add rbp, 8
	0x1407817b0: push rdi
	0x1407817b1: mov rdi, rsp
	0x1407817b4: add rdi, 8
	0x1407817b8: push r10
	0x1407817ba: movabs r10, 0x4f7ece28
	0x1407817c4: xor r10, 0x4f7ece20
	0x1407817cb: sub rdi, r10
	0x1407817ce: pop r10
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817d0: xchg qword ptr [rsp], rdi
	0x1407817d4: pop rsp
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x1407817d5: mov qword ptr [rsp], r14
	0x1407817d9: mov r14, rsp
	0x1407817dc: add r14, 8
	0x1407817e0: sub r14, 8
	0x1407817e7: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817ee: mov qword ptr [rsp], r14
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817f2: push qword ptr [rsp + 8]
	0x1407817f6: pop r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817f8: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407817fb: mov rsp, qword ptr [rsp]
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xbf + context) & 0xffffffffffffffff)
	0x1407817ff: mov qword ptr [rsp], r10
	0x140781803: movabs r10, 8
	0x14078180d: add rbp, 0xf155167
	0x140781814: sub rbp, r10
	0x140781817: sub rbp, 0xf155167
	0x140781822: add rsp, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140781829: xor rbp, qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14078182d: xor qword ptr [rsp], rbp
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140781831: xor rbp, qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140781835: mov rsp, qword ptr [rsp]
	0x140781839: push rax
	0x14078183a: mov rax, rdx
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140871f92
	0x14078183d: mov qword ptr [rsp + 8], rax
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140781842: mov rax, qword ptr [rsp]
	0x140781846: add rsp, 8
	0x14078184a: sub r15, 0x78
	0x140781851: sub r9, 0x10
	0x140781858: xor r15, 0x80
	0x14078185f: mov r8, 0
	0x140781866: sub rbx, rdx
	0x140781869: add r8, 0xffff
	0x140781870: or r9, 0x400
	0x140781877: or r8, r13
	0x14078187a: mov r10, r15
	0x14078187d: and r9, r10
	0x140781880: sub r8, 0x78
	0x140781887: push 0x4cc6e2ea
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffebf78e12d + context) & 0xffffffffffffffff)
	0x14078188c: mov qword ptr [rsp], rbx
	0x140781890: push 0x601fc952
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140781895: mov qword ptr [rsp], rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (0x5eed3828 ^ context)
	0x140781899: xor qword ptr [rsp], 0x5eed3828
	0x1407818a1: pop rbx
	0x1407818a2: xor rbx, 0x5eed3828
	0x1407818a9: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407818b0: mov qword ptr [rsp], rbx
	0x1407818b4: push rcx
	0x1407818b5: movabs rcx, 0x6f7f353d
	0x1407818bf: push rdx
	0x1407818c0: push r12
	0x1407818c2: mov r12, rcx
	0x1407818c5: mov rdx, r12
	0x1407818c8: pop r12
	0x1407818ca: push r9
	0x1407818cc: mov r9, rdx
	0x1407818cf: push r10
	0x1407818d1: mov r10, r9
	0x1407818d4: xor qword ptr [rsp + 0x20], r10
	0x1407818d9: pop r10
	0x1407818db: pop r9
	0x1407818dd: pop rdx
	0x1407818de: push qword ptr [rsp]
	0x1407818e1: push qword ptr [rsp]
	0x1407818e4: pop rcx
	0x1407818e5: add rsp, 8
	0x1407818ec: add rsp, 8
	0x1407818f0: push qword ptr [rsp]
	0x1407818f3: pop rdx
	0x1407818f4: add rsp, 8
	0x1407818f8: push rax
	0x1407818f9: movabs rax, 0x5eb209a5
	0x140781903: xor rax, 0x31cd3c98
	0x140781909: xor rdx, rax
	0x14078190c: pop rax
	0x14078190d: push qword ptr [rsp]
	0x140781910: pop rbx
	0x140781911: add rsp, 8
	0x140781915: xor r13, 0x80
	0x14078191c: or rbx, 1
	0x140781923: sub r8, r13
	0x140781926: push rbp
	0x140781927: push rax
	0x140781928: sub rsp, 8
	0x14078192f: mov qword ptr [rsp], rcx
	0x140781933: push r9
	0x140781935: movabs r9, 0x7d8e6af5
	0x14078193f: xor r9, 0x325da3d4
	0x140781946: push r9
	0x140781948: pop rcx
	0x140781949: push qword ptr [rsp]
	0x14078194c: pop r9
	0x14078194e: add rsp, 8
	0x140781952: push rcx
	0x140781953: sub qword ptr [rsp], 0x6f7b68f6
	0x14078195b: mov rax, qword ptr [rsp]
	0x14078195f: add rsp, 8
	0x140781966: push rcx
	0x140781967: push r9
	0x140781969: movabs r9, 0x6dff0746
	0x140781973: movabs rcx, 0xe7ecfd66
	0x14078197d: sub rcx, r9
	0x140781980: pop r9
	0x140781982: and rcx, 0x477659c5
	0x140781989: xor rcx, 0x2e1f38f6
	0x140781990: add rax, rcx
	0x140781993: pop rcx
	0x140781994: pop rcx
	0x140781995: movabs rbp, 0xcdcf679c
	0x14078199f: sub rbp, rax
	0x1407819a2: pop rax
	0x1407819a3: or rbp, 0x7069a34a
	0x1407819aa: add rbp, 1
	0x1407819ae: or rbp, 0x7f16c4b3
	0x1407819b5: or rbp, 0x7dc9525f
	0x1407819bc: push rdx
	0x1407819bd: push r9
	0x1407819bf: movabs r9, 0x6f77e693
	0x1407819c9: xor r9, 0x52881edb
	0x1407819d0: push r14
	0x1407819d2: movabs r14, 0x3bedf911
	0x1407819dc: push r8
	0x1407819de: movabs r8, 0x7abf3d59
	0x1407819e8: not r8
	0x1407819eb: add r8, 0x3cb716e7
	0x1407819f2: push r11
	0x1407819f4: movabs r11, 0x9d6ecdad
	0x1407819fe: add r8, r11
	0x140781a01: pop r11
	0x140781a03: add r14, r8
	0x140781a06: mov r8, qword ptr [rsp]
	0x140781a0a: add rsp, 8
	0x140781a11: and r14, 0x7cff9c49
	0x140781a18: and r14, 0x6b73dabe
	0x140781a1f: xor r14, 0x4a50867a
	0x140781a26: mov rdx, r14
	0x140781a29: pop r14
	0x140781a2b: add rdx, r9
	0x140781a2e: pop r9
	0x140781a30: xor rbp, rdx
	0x140781a33: pop rdx
	0x140781a34: add rdx, rbp
	0x140781a37: pop rbp
	0x140781a46: push 0x68286d7b
	0x140781a4b: push rax
	0x140781a4c: pop qword ptr [rsp]
	0x140781a4f: movabs rax, 0x7fcf453a
	0x140781a59: shr rax, 4
	0x140781a5d: add rax, 0x35596f61
	0x140781a63: push r8
	0x140781a65: movabs r8, 0x5ebdf551
	0x140781a6f: add r8, -1
	0x140781a73: push r8
	0x140781a75: xchg qword ptr [rsp], r10
	0x140781a79: not r10
	0x140781a7c: xchg qword ptr [rsp], r10
	0x140781a80: mov r8, qword ptr [rsp]
	0x140781a84: add rsp, 8
	0x140781a8b: shl r8, 1
	0x140781a8f: add r8, 0x1e8f5880
	0x140781a96: push rax
	0x140781a97: movabs rax, 0x7fff5837
	0x140781aa1: and r8, rax
	0x140781aa4: pop rax
	0x140781aa5: xor r8, 0x6b3c5991
	0x140781aac: xor rax, r8
	0x140781aaf: pop r8
	0x140781ab1: inc rax
	0x140781ab4: or rax, 0x5f797201
	0x140781aba: push rcx
	0x140781abb: movabs rcx, 0x7de55158
	0x140781ac5: or rcx, 0x50bb2511
	0x140781acc: dec rcx
	0x140781acf: shr rcx, 2
	0x140781ad3: neg rcx
	0x140781ad6: push rdi
	0x140781ad7: mov rdi, 0x1f7fdd57
	0x140781ade: add rcx, rdi
	0x140781ae1: pop rdi
	0x140781ae2: sub rax, rcx
	0x140781ae5: pop rcx
	0x140781ae6: sub rax, 1
	0x140781aea: not rax
	0x140781aed: push 0x33f28a01
	0x140781af2: mov qword ptr [rsp], rdi
	0x140781af6: mov rdi, -0x7f79723a
	0x140781afd: sub rax, rdi
	0x140781b04: add rsp, 8
	0x140781b08: push rbx
	0x140781b09: mov rbx, 0
	0x140781b10: add rbx, rdx
Load [EBP+0x145](STATIC)
bytecode=0x140940f12
	0x140781b13: add qword ptr [rbx], rax
	0x140781b1a: add rsp, 8
	0x140781b22: push 0x6629de9a
	0x140781b27: mov qword ptr [rsp], rdx
	0x140781b2b: mov rdx, rsp
	0x140781b2e: add rdx, 8
	0x140781b32: add rdx, 8
	0x140781b39: xchg qword ptr [rsp], rdx
	0x140781b3d: pop rsp
	0x140781b4c: ret 0
handlers outputs:



	0x140871faf: mov r11, rbp
	0x140871fb2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140871fce: mov r11, qword ptr [r11]
	0x140871fd1: add r11, 0xb
	0x140871fdf: movzx r10, word ptr [r11]
	0x140871fe6: mov rsi, rbp
	0x140871ff9: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087200a: add r10d, dword ptr [rsi]
	0x14087200d: mov rdi, rbp
	0x140872017: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14087201e: xor r10d, dword ptr [rdi]
	0x14087202d: mov r11, rbp
	0x14087203e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872059: or dword ptr [r11], r10d
	0x14087205c: mov rcx, rbp
	0x14087206f: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872087: add dword ptr [rcx], 0x1e759f86
	0x14087208d: mov rcx, rbp
	0x140872090: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1408720a5: mov dl, byte ptr [rcx]
	0x1408720a7: cmp dl, 0xc1
	0x1408720aa: jbe 0x1408720c4
	0x1408720b0: sub r10d, 0x5681688c
	0x1408720c4: mov rax, rbp
	0x1408720d4: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408720ef: add word ptr [rax], r10w
	0x1408720f3: mov rsi, rbp
	0x1408720f6: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087210e: mov rsi, qword ptr [rsi]
	0x140872114: add rsi, 1
	0x14087211b: mov edx, dword ptr [rsi]
	0x140872127: mov r15, rbp
	0x14087213a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087214f: xor edx, dword ptr [r15]
	0x140872159: mov rcx, rbp
	0x14087215c: or rsi, 0x800
	0x14087216d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x140872189: xor edx, dword ptr [rcx]
	0x140872195: mov r13, rbp
	0x1408721a2: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408721ac: add dword ptr [r13], edx
	0x1408721c1: mov rcx, rbp
	0x1408721ca: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408721d1: add dword ptr [rcx], 0x569676f7
	0x1408721de: mov r12, rbp
	0x1408721e1: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408721f2: sub dword ptr [r12], edx
	0x140872217: mov rcx, rbp
	0x14087221a: mov r9, 0x2ef0f74e
	0x140872221: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x140872228: movzx rcx, word ptr [rcx]
	0x14087222c: mov r8, rbp
	0x14087222f: mov r15, rbp
	0x140872232: add r8, 0x58
	0x140872239: add cx, 0x40cc
Load [EBP+0x58](STATIC)
	0x14087223e: mov r8d, dword ptr [r8]
	0x140872241: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140872248: and dword ptr [r15], r9d
	0x14087224b: add rcx, rbp
	0x14087224e: sub r8d, 0x3712a838
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140872255: sub qword ptr [rcx], r8
	0x140872258: pushfq
	0x140872259: mov r10, rbp
	0x14087225c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140872263: mov r10, qword ptr [r10]
	0x140872266: add r10, 9
	0x14087226d: movzx r11, word ptr [r10]
	0x140872271: add r11, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140872274: mov r11, qword ptr [r11]
	0x140872277: xor rsi, r11
	0x14087227a: pushfq
	0x1408722a4: pop rsi
	0x1408722a5: mov r15, 0
	0x1408722b6: mov rdx, rbp
	0x1408722bc: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408722d8: mov rdx, qword ptr [rdx]
	0x1408722e2: add rdx, 0
	0x1408722f3: mov r15b, byte ptr [rdx]
	0x1408722f6: cmp r15b, 0
	0x1408722fa: je 0x14087237a
	0x14087230e: mov rdx, rbp
	0x140872317: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140872328: mov rdx, qword ptr [rdx]
	0x140872339: add rdx, 0xd
	0x140872343: mov r15w, word ptr [rdx]
	0x14087235c: add r15, rbp
	0x140872366: pop r13
Store VM_REG [EBP+0x26]
	0x140872368: mov qword ptr [r15], r13
	0x1408723c8: mov r12, rbp
	0x1408723cb: mov rdi, rbp
	0x1408723d5: add rdi, 0xab
	0x1408723dc: add r12, 0x145
Load [EBP+0xab](STATIC)
	0x1408723ea: mov rdi, qword ptr [rdi]
Load [EBP+0x145](STATIC)
	0x1408723f0: mov r12, qword ptr [r12]
	0x1408723fe: add r12, 7
	0x14087240c: movzx r12, word ptr [r12]
	0x140872422: mov r9, rbp
	0x14087242c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087243a: add r12d, dword ptr [r9]
	0x140872450: sub r12d, 0x72d7c606
	0x140872457: mov rbx, rbp
	0x14087245d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140872464: and dword ptr [rbx], r12d
	0x14087246e: and r12, 0xffff
	0x14087247f: shl r12, 3
	0x140872494: add rdi, r12
	0x140872497: mov rbx, qword ptr [rdi]
	0x1408724a7: mov r9, rbp
	0x1408724b4: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f21
	0x1408724bb: add qword ptr [r9], 0xf
	0x1408724c2: jmp rbx
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f2f
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140780204: mov r13, rbp
	0x140780207: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078020e: mov edx, dword ptr [r13]
	0x140780212: and edx, 1
	0x140780218: cmp edx, 0
	0x14078021e: je 0x140780236
	0x140780236: mov r15, 0x46c76392
	0x14078023d: mov r12, rbp
	0x140780240: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140780247: sub dword ptr [r12], r15d
	0x140780260: mov rax, rbp
	0x14078026a: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140780270: mov rax, qword ptr [rax]
	0x140780273: add rax, 0
	0x140780280: mov r8d, dword ptr [rax]
	0x140780294: mov r15, rbp
	0x1407802a1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407802a8: add r8d, dword ptr [r15]
	0x1407802d0: mov rsi, rbp
	0x1407802d3: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407802e8: add dword ptr [rsi], r8d
	0x1407802eb: mov r15, rbp
	0x1407802f8: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407802ff: add dword ptr [r15], 0x37ac7f16
	0x140780313: mov r15, rbp
	0x14078031d: add r15, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140780324: xor dword ptr [r15], r8d
	0x14078032e: mov rsi, rbp
	0x140780342: add rsi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078035a: sub dword ptr [rsi], r8d
	0x14078036e: mov rax, rbp
	0x140780378: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14078038c: mov rax, qword ptr [rax]
	0x140780399: add rax, 4
	0x1407803b4: movzx r9, word ptr [rax]
	0x1407803b8: mov rax, rbp
	0x1407803c9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407803d6: sub r9d, dword ptr [rax]
	0x1407803d9: mov r10, rbp
	0x1407803ea: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407803f4: xor r9d, dword ptr [r10]
	0x140780401: mov r14, rbp
	0x14078040e: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140780415: xor dword ptr [r14], r9d
	0x14078044d: mov rax, rbp
	0x140780461: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x14078046e: mov r13b, byte ptr [rax]
	0x140780471: cmp r13b, 0x6f
	0x140780475: jbe 0x140780485
	0x14078047e: add r9d, 0x11f89e86
	0x14078048b: mov r14, rbp
	0x140780498: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407804ad: xor word ptr [r14], r9w
	0x1407804b1: mov rbx, 0x5d7d8089
	0x1407804b8: mov rcx, rbp
	0x1407804bb: add rcx, 0xbf
	0x1407804c2: mov rsi, rbp
	0x1407804c5: mov rdx, rbp
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407804c8: sub dword ptr [rcx], ebx
	0x1407804ca: add rsi, 0x16e
	0x1407804d1: add rdx, 0x58
Load [EBP+0x58](STATIC)
	0x1407804d8: mov edx, dword ptr [rdx]
Load [EBP+0x16e](STATIC)
	0x1407804da: movzx rsi, word ptr [rsi]
	0x1407804de: add si, 0xd986
	0x1407804e3: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407804e6: sub qword ptr [rsi], rdx
	0x1407804f7: mov bl, 0xc1
	0x1407804fc: mov rdx, rbp
	0x14078050c: add rdx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140780528: sub byte ptr [rdx], bl
	0x140780542: mov rax, rbp
	0x14078054f: mov r14, rbp
	0x140780552: add rax, 0xab
	0x140780558: add r14, 0x145
Load [EBP+0xab](STATIC)
	0x140780566: mov rax, qword ptr [rax]
Load [EBP+0x145](STATIC)
	0x140780569: mov r14, qword ptr [r14]
	0x14078057d: add r14, 6
	0x140780584: movzx r14, word ptr [r14]
	0x140780592: mov r8, rbp
	0x1407805a3: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407805b7: xor r14d, dword ptr [r8]
	0x1407805cf: xor r14d, 0x1c09fe1
	0x1407805d6: mov r9, rbp
	0x1407805d9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407805e7: add dword ptr [r9], r14d
	0x1407805f8: and r14, 0xffff
	0x140780606: shl r14, 3
	0x14078060a: add rax, r14
	0x14078061e: mov rcx, qword ptr [rax]
	0x140780628: mov rax, rbp
	0x140780635: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f37
	0x14078063b: add qword ptr [rax], 8
	0x140780642: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407a14e6: mov r13, rbp
	0x1407a14e9: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a14f0: xor dword ptr [r13], 0x3046bd40
	0x1407a14f8: mov r8, rbp
	0x1407a14fb: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a1502: add dword ptr [r8], 0x2ffdd111
	0x1407a1509: mov rbx, rbp
	0x1407a150c: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a1513: and dword ptr [rbx], 0x684d6ff1
	0x1407a1519: mov r12, rbp
	0x1407a151c: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a1523: add dword ptr [r12], 0x307272b7
	0x1407a1535: mov r15, 0
	0x1407a153c: mov r14, rbp
	0x1407a154d: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407a1554: mov r14, qword ptr [r14]
	0x1407a155e: add r14, 0
	0x1407a1565: mov r15w, word ptr [r14]
	0x1407a15c5: mov r8, rbp
	0x1407a15dc: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a15e3: or dword ptr [r8], r15d
	0x1407a15e6: mov r11, rbp
	0x1407a15f0: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a1604: xor dword ptr [r11], 0xd48b20b
	0x1407a160b: mov r8, rbp
	0x1407a161c: add r8, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407a1623: sub word ptr [r8], r15w
	0x1407a1627: mov rax, rbp
	0x1407a1638: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407a164f: mov rax, qword ptr [rax]
	0x1407a165c: add rax, 4
	0x1407a166b: movzx r14, word ptr [rax]
	0x1407a166f: mov rdi, rbp
	0x1407a1680: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a168d: xor r14d, dword ptr [rdi]
	0x1407a169a: mov r10, rbp
	0x1407a169d: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407a16b5: add r14d, dword ptr [r10]
	0x1407a16b8: mov rdx, rbp
	0x1407a16d0: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a16d7: sub dword ptr [rdx], r14d
	0x1407a16da: mov r13, rbp
	0x1407a16dd: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a16ee: or dword ptr [r13], 0x3ab52065
	0x1407a1707: mov r8, rbp
	0x1407a170a: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x1407a1718: mov bl, byte ptr [r8]
	0x1407a171b: cmp bl, 0xf2
	0x1407a171e: jbe 0x1407a1743
	0x1407a1758: mov r13, rbp
	0x1407a175b: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407a1762: xor word ptr [r13], r14w
	0x1407a1775: mov r13, rbp
	0x1407a1786: add r13, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407a1794: movzx r13, word ptr [r13]
	0x1407a17a3: add r13w, 0xff60
	0x1407a17a9: mov r10, rbp
	0x1407a17c1: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407a17dd: movzx r10, word ptr [r10]
	0x1407a17ee: add r13, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407a17f1: mov r13, qword ptr [r13]
	0x1407a17ff: sub r10w, 0xd265
	0x1407a1805: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407a1816: sub qword ptr [r10], r13
	0x1407a1860: mov r14, rbp
	0x1407a1874: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407a187b: mov r14, qword ptr [r14]
	0x1407a188a: add r14, 2
	0x1407a18a2: mov r10, rbp
	0x1407a18b9: movzx r14, word ptr [r14]
	0x1407a18c7: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x1407a18d8: mov r10, qword ptr [r10]
	0x1407a18e2: mov r11, rbp
	0x1407a18fa: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a190f: add r14d, dword ptr [r11]
	0x1407a1915: xor r14d, 0x74b3d03e
	0x1407a191c: mov rcx, rbp
	0x1407a1922: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a1937: and dword ptr [rcx], r14d
	0x1407a194b: and r14, 0xffff
	0x1407a1952: shl r14, 3
	0x1407a196b: add r10, r14
	0x1407a1983: mov r8, qword ptr [r10]
	0x1407a198d: mov rdx, rbp
	0x1407a1993: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f3d
	0x1407a199a: add qword ptr [rdx], 6
	0x1407a19a1: jmp r8
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f45
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x1407753a0: mov rax, rbp
	0x1407753a3: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407753a9: mov rax, qword ptr [rax]
	0x1407753bd: add rax, 4
	0x1407753c3: movzx r12, word ptr [rax]
	0x1407753d8: mov r9, rbp
	0x1407753e1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407753f2: sub r12d, dword ptr [r9]
	0x140775406: mov r10, rbp
	0x140775417: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x140775425: add r12d, dword ptr [r10]
	0x140775428: mov r10, rbp
	0x14077542b: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140775440: add dword ptr [r10], r12d
	0x140775478: mov rcx, rbp
	0x14077547b: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140775489: mov r10b, byte ptr [rcx]
	0x14077548c: cmp r10b, 0x48
	0x140775490: jbe 0x1407754a0
	0x1407754b4: mov r13, rbp
	0x1407754b7: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407754cc: add word ptr [r13], r12w
	0x1407754db: mov rcx, rbp
	0x1407754de: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407754e5: mov rcx, qword ptr [rcx]
	0x1407754f9: add rcx, 6
	0x140775511: mov r9d, dword ptr [rcx]
	0x140775544: mov rdi, rbp
	0x140775555: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140775571: add r9d, dword ptr [rdi]
	0x140775582: mov r15, rbp
	0x140775585: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077559a: add dword ptr [r15], r9d
	0x1407755b2: mov rax, rbp
	0x1407755b5: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407755bb: xor dword ptr [rax], 0x10f93f15
	0x1407755cb: mov r12, rbp
	0x1407755d5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407755e6: add dword ptr [r12], r9d
	0x1407755ff: mov rdx, rbp
	0x140775602: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140775609: sub dword ptr [rdx], r9d
	0x14077561d: mov r15, rbp
	0x140775623: mov rdx, rbp
	0x140775626: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077562d: movzx rdx, word ptr [rdx]
	0x140775631: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14077563e: mov r15d, dword ptr [r15]
	0x14077566b: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14077566e: sub qword ptr [rdx], r15
	0x140775671: pushfq
	0x14077567c: mov r12, 0
	0x14077568a: mov rsi, rbp
	0x14077569e: mov rbx, rbp
	0x1407756ab: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407756b5: mov rbx, qword ptr [rbx]
	0x1407756c6: add rbx, 0xa
	0x1407756e2: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407756f0: mov r15d, dword ptr [rsi]
	0x1407756fa: mov r12b, byte ptr [rbx]
	0x1407756fd: cmp r12b, 0
	0x140775701: je 0x140775770
	0x140775707: mov rbx, rbp
	0x14077570a: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140775722: mov rbx, qword ptr [rbx]
	0x140775725: add rbx, 2
	0x14077573d: mov r12w, word ptr [rbx]
	0x14077574f: add r12, rbp
	0x140775755: pop rcx
Store VM_REG [EBP+0x26]
	0x140775756: mov qword ptr [r12], rcx
	0x14077579d: and r15d, 1
	0x1407757a4: cmp r15d, 0
	0x1407757ab: je 0x1407757d6
	0x1407757b8: mov rsi, rbp
	0x1407757bb: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407757d0: and dword ptr [rsi], 0x22dc62d3
	0x1407757e7: mov r13b, 0xdb
	0x1407757fb: mov r11, rbp
	0x14077580b: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140775819: add byte ptr [r11], r13b
	0x14077582d: mov rsi, rbp
	0x14077583e: mov r15, rbp
	0x14077584f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140775856: mov r15, qword ptr [r15]
	0x140775859: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140775860: mov rsi, qword ptr [rsi]
	0x140775863: add rsi, 0
	0x14077586d: movzx rsi, word ptr [rsi]
	0x140775871: mov r14, rbp
	0x140775877: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140775885: xor esi, dword ptr [r14]
	0x140775888: xor esi, 0x1ebd7866
	0x140775895: mov r10, rbp
	0x1407758a5: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407758bd: sub dword ptr [r10], esi
	0x1407758c0: and rsi, 0xffff
	0x1407758df: shl rsi, 3
	0x1407758e3: add r15, rsi
	0x1407758e9: mov r8, qword ptr [r15]
	0x1407758f3: mov rcx, rbp
	0x140775900: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f50
	0x140775907: add qword ptr [rcx], 0xb
	0x14077590e: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f5b
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t693
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a47f85
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a47f91
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140940f67
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f6f
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x140831887: mov rax, rbp
	0x14083188a: mov rcx, rbp
	0x14083188d: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x1408318a2: mov rcx, qword ptr [rcx]
	0x1408318a5: add rax, 0x145
	0x1408318b9: mov rsi, 0x200
Load [EBP+0x145](STATIC)
	0x1408318c0: mov rax, qword ptr [rax]
	0x1408318d4: add rax, 0
	0x1408318eb: movzx rax, word ptr [rax]
	0x1408318ef: mov r10, 0x400
	0x140831911: or rsi, 4
	0x140831918: add r10, r10
	0x14083191b: mov rbx, rbp
	0x140831925: xor rsi, 0x400
	0x14083192c: and rsi, 0xffffffff80000000
	0x140831933: add rbx, 0xbf
	0x140831948: or rsi, 0x3f
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083194f: xor dword ptr [rbx], eax
	0x140831951: and rax, 0xffff
	0x140831957: sub rsi, r10
	0x14083195a: and rsi, rax
	0x140831964: shl rax, 3
	0x140831968: add rcx, rax
	0x140831975: mov rax, qword ptr [rcx]
	0x140831978: mov rbx, 0xd5
	0x14083197f: mov r12, rbp
	0x140831982: or rsi, 0x400
	0x140831989: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140831990: mov qword ptr [r12], rax
	0x14083199b: and rcx, r12
	0x14083199e: mov r10, rbp
	0x1408319a7: add r10, 0x145
	0x1408319ae: and r13, 1
	0x1408319b5: mov r14, r12
Load [EBP+0x145](STATIC)
	0x1408319b8: mov r10, qword ptr [r10]
	0x1408319c5: add r10, 4
	0x1408319d3: movzx r12, word ptr [r10]
	0x1408319d7: mov rdx, rbp
	0x1408319e1: and rcx, 0x20
	0x1408319ef: add rdx, 0xbf
	0x1408319f6: and rcx, 0x88
	0x1408319fd: mov rdi, 1
Load [EBP+0xbf](STATIC)
	0x140831a04: sub r12d, dword ptr [rdx]
	0x140831a07: sub r14, r14
	0x140831a0d: and r14, 4
	0x140831a1a: mov r10, rbp
	0x140831a1d: or r14, rsi
	0x140831a27: add r10, 0xbf
	0x140831a2e: and rdi, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831a31: add dword ptr [r10], r12d
	0x140831a34: sub rdi, 0x10
	0x140831a42: xor r14, 0x10
	0x140831a49: mov r11, rbp
	0x140831a5a: add r11, 0xa7
	0x140831a61: xor rbx, 4
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831a68: sub dword ptr [r11], 0x4636dc37
	0x140831a6f: and r14, 0x3f
	0x140831a76: sub rbx, 0xf0
	0x140831a7d: mov rdx, rbp
	0x140831a80: sub rdi, rdi
	0x140831a83: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140831a8a: mov sil, byte ptr [rdx]
	0x140831a8d: cmp sil, 0x5a
	0x140831a91: jbe 0x140831a9e
	0x140831a97: add r12d, 0x3f95bd85
	0x140831aa1: mov rsi, rbp
	0x140831aab: add rsi, 0x16e
	0x140831ab9: sub rbx, rdi
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140831ac3: add word ptr [rsi], r12w
	0x140831ac7: mov r15, 0x255578db
	0x140831ace: mov r10, rbp
	0x140831ad1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831ad8: sub dword ptr [r10], r15d
	0x140831adb: add rbx, r14
	0x140831ade: add rbx, 0x20
	0x140831ae5: mov rcx, 0
	0x140831af3: sub r13, 0x80
	0x140831afa: mov r10, rbp
	0x140831b07: mov r8, 0xd5
	0x140831b0e: add r10, 0x145
	0x140831b15: mov r9, 0x400
Load [EBP+0x145](STATIC)
	0x140831b1c: mov r10, qword ptr [r10]
	0x140831b1f: mov rsi, 0x200
	0x140831b26: or rbx, 1
	0x140831b2d: add rsi, 0x40
	0x140831b34: add r10, 2
	0x140831b3b: sub r14, 0x400
	0x140831b42: and rbx, 0x90
	0x140831b49: and rsi, 0x3f
	0x140831b50: mov cx, word ptr [r10]
	0x140831b54: and rbx, 0x80
	0x140831b5b: add r14, rsi
	0x140831b5e: xor r13, 0x3f
	0x140831b65: mov r10, rbp
	0x140831b68: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140831b6f: xor ecx, dword ptr [r10]
	0x140831b72: mov rax, rbp
	0x140831b7c: and r9, 0x80
	0x140831b83: add rbx, rbx
	0x140831b86: add rax, 0x120
	0x140831b8c: sub r13, r9
Load [EBP+0x120](STATIC)
	0x140831b99: add ecx, dword ptr [rax]
	0x140831ba2: mov rdx, rbp
	0x140831ba5: xor r14, rbx
	0x140831ba8: and r14, 0x80
	0x140831baf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831bcb: add dword ptr [rdx], ecx
	0x140831bcd: mov r12, rbp
	0x140831bd0: sub r13, 1
	0x140831bda: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831be1: add dword ptr [r12], 0x707911f3
	0x140831be9: mov r9, rbp
	0x140831bec: add r9, 0xd6
	0x140831bf3: add r14, 0x88
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140831bfa: sub word ptr [r9], cx
	0x140831c01: or rdx, 0x20
	0x140831c08: xor r9, 8
	0x140831c0f: mov rax, rbp
	0x140831c12: and r11, 0xf0
	0x140831c19: or r11, 4
	0x140831c20: sub rdx, r11
	0x140831c23: mov rdi, rbp
	0x140831c26: or r13, 4
	0x140831c2d: add rcx, rax
	0x140831c30: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140831c37: movzx rdi, word ptr [rdi]
	0x140831c42: sub rcx, 8
	0x140831c49: add rax, 0xd6
	0x140831c4f: mov r15, 0x12
	0x140831c56: xor di, 0x7573
Load [EBP+0xd6](STATIC)
	0x140831c5b: movzx rax, word ptr [rax]
	0x140831c5f: sub ax, 0x7451
	0x140831c63: add rax, rbp
	0x140831c66: xor r15, r9
	0x140831c70: mov r9, 0
Load [EBP+0x14d](VM_REGISTER)
	0x140831c77: mov rax, qword ptr [rax]
	0x140831c7a: add rdx, 0x88
	0x140831c81: sub r9, rcx
	0x140831c84: and r9, 0xf0
	0x140831c8b: add rdi, rbp
Deref(t698,ds)
	0x140831c91: mov rax, qword ptr [rax]
Store VM_REG [EBP+0x155]
	0x140831c94: mov qword ptr [rdi], rax
	0x140831c97: xor rdx, 0x20
	0x140831c9e: add r15, 0xf0
	0x140831cac: mov rsi, 0xd5
	0x140831cb3: sub rdx, 4
	0x140831cba: and r15, 0x20
	0x140831cc1: xor rsi, r8
	0x140831cc7: mov r12, 0
	0x140831cce: mov rdi, 0x12
	0x140831cd5: or rsi, 4
	0x140831cdc: add r12, 0x20
	0x140831ce3: or rdi, 8
	0x140831cea: mov r11, 1
	0x140831cf1: and rsi, r12
	0x140831cf4: and rdx, 0xf0
	0x140831cfb: and rdx, 0x40
	0x140831d02: mov rbx, rbp
	0x140831d05: add rbx, 0xfd
	0x140831d0c: and rdx, r8
Load [EBP+0xfd](STATIC)
	0x140831d0f: mov r10, qword ptr [rbx]
	0x140831d12: add rdx, 0x80
	0x140831d19: mov r8, r13
	0x140831d1c: mov rcx, 0x400
	0x140831d23: add rcx, rcx
	0x140831d26: sub rsp, 8
	0x140831d2a: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140831d2b: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x7bfe7bec + context) & 0xffffffffffffffff)
	0x140831d2e: add qword ptr [rsp], 0x7bfe7bec
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831d36: mov r13, qword ptr [rsp]
	0x140831d3a: add rsp, 8
	0x140831d3e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1a
	0x140831d42: mov qword ptr [rsp], rdi
	0x140831d46: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x800
	0x140831d4a: mov qword ptr [rsp], rcx
	0x140831d4e: movabs rcx, 0x799ea5ff
	0x140831d58: shr rcx, 1
	0x140831d5c: push r15
	0x140831d5e: movabs r15, 0xb8b935b
	0x140831d68: and r15, 0x7eb7516c
	0x140831d6f: xor r15, 0x4db2385b
	0x140831d76: xor rcx, r15
	0x140831d7d: add rsp, 8
	0x140831d81: mov rdi, rcx
	0x140831d84: pop rcx
	0x140831d85: sub r13, 0xe2ffdbe
	0x140831d8c: sub r13, 0x7dfff37
	0x140831d93: sub r13, rdi
	0x140831d96: add r13, 0x7dfff37
	0x140831d9d: add r13, 0xe2ffdbe
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831da4: mov rdi, qword ptr [rsp]
	0x140831da8: sub rsp, 8
	0x140831dac: push r8
	0x140831dae: mov r8, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 4 | ((((0xffffffff0007c8a2 + ((0xffffffffffffffff * context) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 4) & 0xf)) << 4 | 0x0)
	0x140831db1: mov qword ptr [rsp + 8], r8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140831db6: push qword ptr [rsp]
	0x140831db9: pop r8
	0x140831dbb: add rsp, 8
	0x140831dbf: mov r9, rsp
	0x140831dc2: add r9, 8
	0x140831dc6: add r9, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dcd: xor r9, qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1000
	0x140831dd1: xor qword ptr [rsp], r9
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dd9: mov rsp, qword ptr [rsp]
	0x140831de4: mov r15, 0x400
	0x140831deb: sub rsp, 8
	0x140831df2: mov qword ptr [rsp], rdx
	0x140831df6: mov rdx, rsp
	0x140831df9: add rdx, 8
	0x140831dfd: push 0x2d221d5a
	0x140831e02: mov qword ptr [rsp], rdi
	0x140831e06: movabs rdi, 8
	0x140831e10: sub rdx, rdi
unknown read addr: ff0 0xff0
	0x140831e13: mov rdi, qword ptr [rsp]
	0x140831e17: add rsp, 8
unknown read addr: ff8 0xff8
	0x140831e1b: xchg qword ptr [rsp], rdx
unknown read addr: ff8 0xff8
	0x140831e1f: mov rsp, qword ptr [rsp]
	0x140831e23: push r14
unknown read addr: ff0 0xff0
	0x140831e25: pop qword ptr [rsp]
	0x140831e28: movabs r14, 0x7efde3b5
	0x140831e32: dec r14
	0x140831e35: xor r14, 0x14da5629
	0x140831e3c: sub r14, 1
	0x140831e40: xor r14, 0x6a27b4d9
	0x140831e47: sub r13, 0x5ece19cb
	0x140831e4e: add r13, r14
	0x140831e51: add r13, 0x5ece19cb
unknown read addr: ff8 0xff8
	0x140831e58: push qword ptr [rsp]
	0x140831e5f: add rsp, 8
	0x140831e63: push rsi
	0x140831e64: mov rsi, rsp
	0x140831e67: add rsi, 8
	0x140831e6b: push rdi
	0x140831e6c: movabs rdi, 0x65ffae00
	0x140831e76: not rdi
	0x140831e79: sub rdi, 0x5bf7bcdc
	0x140831e80: push r10
	0x140831e82: movabs r10, 0xc1f76ae5
	0x140831e8c: add rdi, r10
	0x140831e8f: pop r10
	0x140831e91: add rsi, rdi
	0x140831e94: pop rdi
	0x140831e95: sub rsp, 8
	0x140831e99: mov qword ptr [rsp], rsi
	0x140831e9d: push qword ptr [rsp + 8]
	0x140831ea1: mov rsi, qword ptr [rsp]
	0x140831ea5: add rsp, 8
	0x140831eac: pop qword ptr [rsp]
	0x140831eaf: pop rsp
	0x140831eb7: push 0x4708252a
	0x140831ebc: push rbx
	0x140831ebd: pop qword ptr [rsp]
	0x140831ec0: push r11
	0x140831ec2: sub rsp, 8
	0x140831ec6: mov qword ptr [rsp], rax
	0x140831eca: movabs rax, 0x7767c9b6
	0x140831ed4: movabs r11, 0xc8fbef9
	0x140831ede: xor r11, rax
	0x140831ee5: push rdi
	0x140831ee6: mov rdi, rsp
	0x140831ee9: add rdi, 8
	0x140831eed: add rdi, 8
	0x140831ef4: xchg qword ptr [rsp], rdi
	0x140831ef8: pop rsp
	0x140831ef9: mov rbx, r11
	0x140831f00: add rsp, 8
	0x140831f07: xchg rbx, r12
	0x140831f0a: push r12
	0x140831f0c: not qword ptr [rsp]
	0x140831f10: pop r12
	0x140831f12: xchg rbx, r12
	0x140831f15: shr rbx, 2
	0x140831f19: push r12
	0x140831f1b: movabs r12, 0x27df7d1e
	0x140831f25: and r12, 0x5e9f7e8c
	0x140831f2c: shl r12, 3
	0x140831f30: add r12, -1
	0x140831f34: and r12, 0x3effb6c6
	0x140831f3b: xor r12, 0xb8ee917
	0x140831f42: add rbx, r12
	0x140831f49: add rsp, 8
	0x140831f4d: sub rsp, 8
	0x140831f54: push r15
	0x140831f56: mov r15, rsi
	0x140831f59: push r15
	0x140831f5b: pop qword ptr [rsp + 8]
	0x140831f63: add rsp, 8
	0x140831f67: movabs rsi, 0xbfffffffdf84d489
	0x140831f71: add rbx, 0x77bf8510
	0x140831f78: add rbx, rsi
	0x140831f7b: sub rbx, 0x77bf8510
	0x140831f82: pop rsi
Load [EBP+0x145](STATIC)
bytecode=0x140940f75
	0x140831f83: add qword ptr [r13], rbx
	0x140831f8b: add rsp, 8
	0x140831f8f: xor r10, 0x594d5d99
	0x140831f96: push r10
	0x140831ff5: pop r9
	0x140831ff7: xor r9, 0x594d5d99
	0x140831ffe: jmp r9
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x131](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140940f7f
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940f8d
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140804fd2: mov rax, rbp
	0x140804fd5: sub rcx, rcx
	0x140804fd8: add rax, 0x145
	0x140804fde: xor r9, 0xffff
	0x140804fe8: add r9, rsi
Load [EBP+0x145](STATIC)
	0x140804feb: mov rax, qword ptr [rax]
	0x140804fee: and r9, 0x90
	0x140804ff5: and rcx, rdx
	0x140804ff8: add rax, 0
	0x140804ffe: mov rdx, rsi
	0x140805001: xor rcx, 8
	0x140805008: movzx rax, word ptr [rax]
	0x14080501a: mov r13, rbp
	0x14080501d: sub r9, -0x80000000
	0x140805024: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140805032: mov r13, qword ptr [r13]
	0x140805036: xor rcx, rcx
	0x140805039: mov rbx, rbp
	0x14080503c: or r9, rcx
	0x14080504d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140805054: xor eax, dword ptr [rbx]
	0x14080506b: sub eax, 0x64960eaf
	0x14080507a: mov r8, rbp
	0x140805083: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080508a: or dword ptr [r8], eax
	0x14080508d: and rax, 0xffff
	0x1408050a7: shl rax, 3
	0x1408050ab: add r13, rax
	0x1408050b5: mov r12, qword ptr [r13]
	0x1408050c0: mov r8, rbp
	0x1408050c3: mov rax, 0
	0x1408050ca: add r8, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408050d4: mov qword ptr [r8], r12
	0x1408050e1: mov r15, rbp
	0x1408050e4: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408050eb: and dword ptr [r15], 0x57333fc5
	0x1408050f2: mov r10, 0
	0x1408050fc: mov r8, rbp
	0x14080510d: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080511b: mov r8, qword ptr [r8]
	0x140805121: add r8, 2
	0x14080512f: sub r12, rdx
	0x140805132: mov r10w, word ptr [r8]
	0x140805136: or r9, r8
	0x140805139: mov r11, rbp
	0x140805151: add r11, 0xbf
	0x140805166: or r12, 0x80
Load [EBP+0xbf](STATIC)
	0x14080516d: add r10d, dword ptr [r11]
	0x140805177: mov rdi, rbp
	0x140805188: add rdi, 0x120
Load [EBP+0x120](STATIC)
	0x140805199: xor r10d, dword ptr [rdi]
	0x1408051ad: mov r14, rbp
	0x1408051b0: xor r9, 8
	0x1408051b7: mov rcx, r12
	0x1408051ba: add r14, 0xbf
	0x1408051c8: add rcx, r9
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408051cb: and dword ptr [r14], r10d
	0x1408051ce: mov r14, rbp
	0x1408051d8: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408051e6: add dword ptr [r14], 0x4d8e9739
	0x1408051f4: mov r14, rbp
	0x1408051f7: sub rcx, 0x10
	0x1408051fe: add r14, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14080520c: xor word ptr [r14], r10w
	0x140805228: mov r8, rbp
	0x14080522b: add r8, 0xbf
	0x140805232: and r14, 0x90
	0x140805239: xor rcx, 0x40
	0x140805240: mov r9, rbp
	0x140805243: sub rax, -0x80000000
	0x140805249: add r9, 0x145
	0x140805257: xor rax, 0xffff
Load [EBP+0x145](STATIC)
	0x14080525d: mov r9, qword ptr [r9]
	0x140805260: add r9, 4
	0x140805267: movzx r11, word ptr [r9]
	0x14080526b: add rax, rcx
	0x140805275: mov r10, rax
	0x1408052a4: mov rdi, rbp
	0x1408052ae: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408052ca: xor r11d, dword ptr [rdi]
	0x1408052d0: mov rbx, rbp
	0x1408052d9: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408052ed: add dword ptr [rbx], r11d
	0x1408052fa: mov r9, rbp
	0x140805303: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080530a: xor dword ptr [r9], 0x3856de74
	0x140805311: mov rdi, rbp
	0x140805314: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140805328: mov r12b, byte ptr [rdi]
	0x14080532b: cmp r12b, 0xb4
	0x14080532f: jbe 0x140805343
	0x14080533c: xor r11d, 0x3e66e620
	0x140805346: mov rax, rbp
	0x140805349: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080534f: xor word ptr [rax], r11w
	0x140805353: mov r12, rbp
	0x140805356: add r12, 0x145
	0x14080535d: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x140805360: mov r12, qword ptr [r12]
	0x140805364: add rsi, 0xd6
	0x14080536b: add r12, 2
Load [EBP+0xd6](STATIC)
	0x140805372: movzx rsi, word ptr [rsi]
	0x140805376: mov r15, rbp
	0x140805379: movzx r13, word ptr [r12]
	0x14080537e: mov rax, rbp
	0x140805381: add si, 0x60b4
	0x140805386: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080538c: add r13d, dword ptr [rax]
	0x14080538f: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140805392: mov rsi, qword ptr [rsi]
	0x140805395: add r15, 0x16e
Deref(t709,ds)
	0x14080539c: mov esi, dword ptr [rsi]
Load [EBP+0x16e](STATIC)
	0x14080539e: movzx r15, word ptr [r15]
	0x1408053a2: add r15, rbp
Store VM_REG [EBP+0xb7]
	0x1408053a5: mov dword ptr [r15], esi
	0x1408053a8: add r15, 4
Store VM_REG [EBP+0xbb]
	0x1408053af: mov dword ptr [r15], 0
	0x1408053b6: mov rdi, 0x200
	0x1408053bd: and r13, 1
	0x1408053cb: add r14, 0x800
	0x1408053e3: mov al, 0x17
	0x1408053e5: mov rcx, rbp
	0x1408053e8: or r14, 0x7fffffff
	0x1408053ef: and rdi, r14
	0x1408053f2: add rcx, 0x130
	0x1408053f9: or r14, r11
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408053fc: sub byte ptr [rcx], al
	0x1408053fe: xor r14, r14
	0x140805408: xor r14, 0x88
	0x140805412: and r13, 0x20
	0x140805419: mov r9, 0x12
	0x140805420: push 0x3c67fa0b
	0x140805425: push 0x5e751057
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542a: mov qword ptr [rsp], rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542e: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140805431: mov r15, qword ptr [rsp]
	0x140805435: push r10
	0x140805437: mov r10, rsp
	0x14080543a: add r10, 8
	0x14080543e: push 0x645c3421
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x200
	0x140805443: mov qword ptr [rsp], rdi
	0x140805447: push rbx
	0x140805448: movabs rbx, 0x58effc32
	0x140805452: push rbx
	0x140805453: pop rdi
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x140805454: mov rbx, qword ptr [rsp]
	0x140805458: add rsp, 8
	0x14080545c: sub rsp, 8
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x140805463: mov qword ptr [rsp], rcx
	0x140805467: movabs rcx, 0x1fb779e1
	0x140805471: xor rcx, 0x4008e6d9
	0x140805478: xor rdi, rcx
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14080547b: mov rcx, qword ptr [rsp]
	0x14080547f: add rsp, 8
	0x140805483: push rax
	0x140805484: movabs rax, 0x776f2583
	0x14080548e: xor rdi, rax
	0x140805491: pop rax
	0x140805492: xor rdi, 0x703f4681
	0x140805499: add r10, rdi
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14080549c: mov rdi, qword ptr [rsp]
	0x1408054a0: add rsp, 8
	0x1408054a7: sub rsp, 8
	0x1408054ae: mov qword ptr [rsp], r10
	0x1408054b2: push qword ptr [rsp + 8]
	0x1408054b6: pop r10
	0x1408054b8: pop qword ptr [rsp]
	0x1408054bb: mov rsp, qword ptr [rsp]
	0x1408054bf: sub r14, r15
	0x1408054c2: add r13, 0xffff
	0x1408054c9: or r14, 0x10
	0x1408054d0: xor rdi, 1
	0x1408054d7: add r9, -0x80000000
	0x1408054de: xor r9, 0xffffffff80000000
	0x1408054e5: xor r13, 8
	0x1408054ec: push r9
	0x1408054ee: mov r9, rsp
	0x1408054f1: add r9, 8
	0x1408054f5: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1408054fc: xchg qword ptr [rsp], r9
	0x140805500: pop rsp
	0x140805501: push r8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xbf + context) & 0xffffffffffffffff)
	0x140805503: pop qword ptr [rsp]
	0x140805506: push rbx
	0x140805507: push rax
	0x140805508: push rbp
	0x140805509: movabs rbp, 0x7ff6604a
	0x140805513: movabs rax, 0xf58d95c0
	0x14080551d: sub rax, rbp
	0x140805520: pop rbp
	0x140805521: push rax
	0x140805522: add qword ptr [rsp], 0x75df38fd
	0x14080552a: pop rbx
	0x14080552b: sub rbx, 0x75df38fd
	0x140805532: mov rax, qword ptr [rsp]
	0x140805536: add rsp, 8
	0x14080553d: mov r8, rbx
	0x140805540: pop rbx
	0x140805541: push r13
	0x140805543: movabs r13, 0x6fff9f8e
	0x14080554d: and r8, r13
	0x140805550: pop r13
	0x140805552: push 0x2a097355
	0x140805557: mov qword ptr [rsp], rcx
	0x14080555b: movabs rcx, 0x2f3b7035
	0x140805565: xor r8, rcx
	0x14080556c: add rsp, 8
	0x140805570: or r8, 0x7e1f37fa
	0x140805577: shl r8, 2
	0x14080557b: shr r8, 4
	0x14080557f: push r12
	0x140805581: movabs r12, 0x5ca80437
	0x14080558b: shl r12, 1
	0x14080558f: push 0x136abbe8
	0x140805594: mov qword ptr [rsp], rbx
	0x140805598: mov rbx, -0x54266261
	0x14080559f: add r12, rbx
	0x1408055a6: push r14
	0x1408055a8: mov r14, rsp
	0x1408055ab: add r14, 8
	0x1408055af: add r14, 8
	0x1408055b6: xchg qword ptr [rsp], r14
	0x1408055ba: pop rsp
	0x1408055bb: xor r8, r12
	0x1408055be: pop r12
	0x1408055c0: push rbp
	0x1408055c1: push r9
	0x1408055c3: movabs r9, 0x7a867ab6
	0x1408055cd: mov rbp, r9
	0x1408055d0: pop r9
	0x1408055d2: xor r8, rbp
	0x1408055d5: pop rbp
	0x1408055d6: add r15, r8
	0x1408055d9: pop r8
	0x1408055db: add rdi, 0x7fffffff
	0x1408055e2: mov rcx, 0xd5
	0x1408055e9: or r13, 0x40
	0x1408055f0: push 0x35f3c600
	0x1408055f5: push 0x497a6267
	0x1408055fa: push r13
	0x1408055fc: mov r13, rcx
	0x1408055ff: mov qword ptr [rsp + 8], r13
	0x140805604: pop r13
	0x140805606: pop qword ptr [rsp]
	0x140805609: push 0x3a2bf514
	0x14080560e: mov qword ptr [rsp], r10
	0x140805612: push r13
	0x140805614: movabs r13, 0x5a6d8c24
	0x14080561e: movabs r10, 0xd9eb41dc
	0x140805628: add r10, 0xe7f789a
	0x14080562f: sub r10, r13
	0x140805632: sub r10, 0xe7f789a
	0x14080563d: add rsp, 8
	0x140805641: inc r10
	0x140805644: neg r10
	0x140805647: push rdi
	0x140805648: movabs rdi, 0x7a7f8b20
	0x140805652: xor r10, rdi
	0x140805655: pop rdi
	0x140805656: push 0x81e4e90
	0x14080565b: mov qword ptr [rsp], r14
	0x14080565f: movabs r14, 0xffffffff7b320e67
	0x140805669: sub r10, r14
	0x14080566c: pop r14
	0x14080566e: mov rcx, r10
	0x140805671: pop r10
	0x140805673: shr rcx, 8
	0x140805677: add rcx, 0x7f7e4291
	0x14080567e: xor rcx, 0x7ffe0e42
	0x140805685: push r14
	0x140805687: push r8
	0x140805689: movabs r8, 0x2f5fc02a
	0x140805693: add r8, -0x2f5fc02a
	0x14080569a: mov r14, r8
	0x14080569d: pop r8
	0x14080569f: add r14, 0x5d9f82c4
	0x1408056a6: add r14, r15
	0x1408056a9: sub r14, 0x5d9f82c4
	0x1408056b0: push rax
	0x1408056b1: mov rax, 0
	0x1408056b8: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x140940f93
	0x1408056bb: add qword ptr [rax], rcx
	0x1408056be: pop rax
	0x1408056c3: add rsp, 8
	0x1408056c7: push qword ptr [rsp]
	0x1408056ca: pop rcx
	0x1408056cb: add rsp, 8
	0x1408056d6: mov r9, rbp
	0x1408056e3: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x1408056fb: mov rcx, qword ptr [r9]
	0x140805705: add rcx, 0x30f18592
	0x14080570c: push rcx
	0x14080575c: pop rcx
	0x14080575d: sub rcx, 0x30f18592
	0x140805764: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x140812601: mov rbx, rbp
	0x140812604: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140812620: mov rbx, qword ptr [rbx]
	0x14081262a: add rbx, 0
	0x140812638: movzx rsi, word ptr [rbx]
	0x14081263c: mov r12, rbp
	0x14081263f: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081264f: add esi, dword ptr [r12]
	0x14081265a: mov rbx, rbp
	0x14081265d: add rbx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140812664: add esi, dword ptr [rbx]
	0x140812699: mov rdi, rbp
	0x14081269c: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408126a6: and dword ptr [rdi], 0x388841f1
	0x1408126b3: mov r15, rbp
	0x1408126c0: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1408126dc: mov bl, byte ptr [r15]
	0x1408126df: cmp bl, 0x1e
	0x1408126e2: jbe 0x14081270a
	0x1408126ef: add esi, 0x29d4298
	0x14081271f: mov r12, rbp
	0x14081272c: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081273a: sub word ptr [r12], si
	0x14081274c: mov rdx, 0
	0x140812756: mov r12, rbp
	0x140812767: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14081276e: mov r12, qword ptr [r12]
	0x14081277c: add r12, 9
	0x140812783: mov dx, word ptr [r12]
	0x1408127c8: mov r9, rbp
	0x1408127dc: add r9, 0x120
Load [EBP+0x120](STATIC)
	0x1408127ea: sub edx, dword ptr [r9]
	0x1408127f7: mov rsi, rbp
	0x14081280f: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812819: add dword ptr [rsi], edx
	0x140812829: mov r12, rbp
	0x14081283a: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140812852: sub dword ptr [r12], 0x4d64e8d5
	0x14081285a: mov rsi, rbp
	0x14081286b: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140812883: sub word ptr [rsi], dx
	0x140812886: mov rbx, 0xe1e0d53
	0x14081288d: mov rdi, rbp
	0x140812890: mov rdx, rbp
	0x140812893: mov r14, rbp
	0x140812896: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081289d: sub dword ptr [r14], ebx
	0x1408128a0: add rdi, 0xd6
	0x1408128a7: add rdx, 0x16e
Load [EBP+0xd6](STATIC)
	0x1408128ae: movzx rdi, word ptr [rdi]
Load [EBP+0x16e](STATIC)
	0x1408128b2: movzx rdx, word ptr [rdx]
	0x1408128b6: xor di, 0x868e
	0x1408128bb: add rdx, rbp
	0x1408128be: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1408128c1: mov rdi, qword ptr [rdi]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408128c4: xor qword ptr [rdx], rdi
	0x1408128c7: pushfq
	0x1408128cf: mov r14, 0
	0x1408128e4: mov rcx, rbp
	0x1408128ee: mov rdx, rbp
	0x1408128f8: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081290d: mov rcx, qword ptr [rcx]
	0x140812917: add rcx, 8
	0x140812921: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812928: add dword ptr [rdx], 0x167b7033
	0x140812938: mov rsi, rbp
	0x14081293e: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140812945: sub dword ptr [rsi], 0x183b7a32
	0x140812952: mov r14b, byte ptr [rcx]
	0x140812955: cmp r14b, 0
	0x140812959: je 0x1408129d7
	0x14081295f: mov rcx, rbp
	0x140812969: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140812981: mov rcx, qword ptr [rcx]
	0x140812992: add rcx, 0xb
	0x1408129a0: mov r14w, word ptr [rcx]
	0x1408129a4: add r14, rbp
	0x1408129b8: pop r8
Store VM_REG [EBP+0x26]
	0x1408129ba: mov qword ptr [r14], r8
	0x1408129ea: mov r15, rbp
	0x1408129ed: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408129f4: mov r15, qword ptr [r15]
	0x1408129f7: add r15, 2
	0x1408129fe: mov ebx, dword ptr [r15]
	0x140812a01: mov r11, rbp
	0x140812a04: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812a0b: add dword ptr [r11], ebx
	0x140812a26: mov r14b, 0xa9
	0x140812a2f: mov r15, rbp
	0x140812a47: add r15, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140812a51: or byte ptr [r15], r14b
	0x140812a72: mov r15, rbp
	0x140812a7f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140812a96: mov r15, qword ptr [r15]
	0x140812a9c: mov r14, rbp
	0x140812ab4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140812abb: mov r14, qword ptr [r14]
	0x140812abe: add r14, 6
	0x140812ad3: movzx r14, word ptr [r14]
	0x140812ade: mov r12, rbp
	0x140812aef: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140812afd: xor r14d, dword ptr [r12]
	0x140812b04: sub r14d, 0x6e9573f7
	0x140812b0b: mov r13, rbp
	0x140812b1c: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812b23: and dword ptr [r13], r14d
	0x140812b27: and r14, 0xffff
	0x140812b43: shl r14, 3
	0x140812b55: add r15, r14
	0x140812b5f: mov r13, qword ptr [r15]
	0x140812b62: mov r14, rbp
	0x140812b6c: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fa0
	0x140812b73: add qword ptr [r14], 0xd
	0x140812b7a: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fa6
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



basic block ends with ret
	0x14081f5f8: mov rax, rbp
	0x14081f5fb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f601: and dword ptr [rax], 0x21ecf901
	0x14081f607: mov rsi, rbp
	0x14081f60a: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f611: xor dword ptr [rsi], 0x499bb630
	0x14081f621: mov r10, rbp
	0x14081f624: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14081f639: mov r10, qword ptr [r10]
	0x14081f646: add r10, 0xa
	0x14081f662: movzx rsi, word ptr [r10]
	0x14081f674: mov r13, rbp
	0x14081f685: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f68c: sub esi, dword ptr [r13]
	0x14081f6c4: mov r9, rbp
	0x14081f6c7: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f6ce: xor dword ptr [r9], esi
	0x14081f6e6: mov r8, rbp
	0x14081f6fa: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f716: and dword ptr [r8], 0x727a8c4c
	0x14081f727: mov r15, rbp
	0x14081f730: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14081f737: mov cl, byte ptr [r15]
	0x14081f73a: cmp cl, 0x29
	0x14081f73d: jbe 0x14081f757
	0x14081f765: mov r15, rbp
	0x14081f772: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081f787: sub word ptr [r15], si
	0x14081f7a8: mov rbx, rbp
	0x14081f7b9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14081f7c7: mov rbx, qword ptr [rbx]
	0x14081f7cd: add rbx, 0
	0x14081f7e9: mov r11, qword ptr [rbx]
	0x14081f7ef: mov r14, rbp
	0x14081f7ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f809: add r11d, dword ptr [r14]
	0x14081f813: mov r14, rbp
	0x14081f81d: add r14, 0xa7
	0x14081f831: mov r12, 0
Load [EBP+0xa7](STATIC)
	0x14081f838: xor r11d, dword ptr [r14]
	0x14081f849: mov r15, rbp
	0x14081f84c: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f85d: or dword ptr [r15], r11d
	0x14081f875: mov rdi, rbp
	0x14081f886: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f88d: xor dword ptr [rdi], 0x381077e9
	0x14081f893: xor r12, 0x20
	0x14081f8a8: mov r9, rbp
	0x14081f8ab: sub r12, 0x88
	0x14081f8b5: add r9, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081f8bc: xor dword ptr [r9], r11d
	0x14081f8c9: mov r15, 0x200
	0x14081f8d0: mov r10, rbp
	0x14081f8d3: add r10, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081f8e1: or dword ptr [r10], r11d
	0x14081f8e4: mov rsi, rbp
	0x14081f8f4: add rsi, 0x145
	0x14081f8fb: mov r8, 0
	0x14081f902: mov r8, r8
	0x14081f905: and r8, r11
Load [EBP+0x145](STATIC)
	0x14081f908: mov rsi, qword ptr [rsi]
	0x14081f90b: add rsi, 0
	0x14081f915: mov r9, qword ptr [rsi]
	0x14081f91e: shr r9, 0x20
	0x14081f925: mov r11, rbp
	0x14081f928: xor r12, r15
	0x14081f92b: sub r12, 0xffff
	0x14081f932: xor r12, 0x80
	0x14081f939: add r11, 0x93
Store [EBP+0x93](STATIC)
	0x14081f940: mov dword ptr [r11], r9d
	0x14081f943: mov r13, rbp
	0x14081f946: mov r10, rbp
	0x14081f953: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x14081f960: mov r10, qword ptr [r10]
	0x14081f96d: add r13, 0x145
	0x14081f974: sub r8, 0xffff
Load [EBP+0x145](STATIC)
	0x14081f97b: mov r13, qword ptr [r13]
	0x14081f98d: add r13, 8
	0x14081f994: sub r12, 0x7fffffff
	0x14081f99b: movzx r13, word ptr [r13]
	0x14081f9a0: mov rsi, rbp
	0x14081f9a3: mov r14, r13
	0x14081f9a6: add rsi, 0xbf
	0x14081f9ad: sub r8, 0x20
	0x14081f9b4: sub r12, r14
Load [EBP+0xbf](STATIC)
	0x14081f9b7: sub r13d, dword ptr [rsi]
	0x14081f9cf: mov rcx, rbp
	0x14081f9d2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f9dc: and dword ptr [rcx], r13d
	0x14081f9e6: and r13, 0xffff
	0x14081f9ed: sub r12, rcx
	0x14081f9fe: shl r13, 3
	0x14081fa09: and r8, r12
	0x14081fa0c: add r10, r13
	0x14081fa0f: xor r8, r8
	0x14081fa20: mov rdi, qword ptr [r10]
	0x14081fa31: mov rbx, rbp
	0x14081fa34: add rbx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14081fa49: mov qword ptr [rbx], rdi
	0x14081fa4c: mov rax, rbp
	0x14081fa4f: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081fa58: mov ebx, dword ptr [rax]
	0x14081fa5a: and ebx, 1
	0x14081fa67: mov r15, rbp
	0x14081fa6a: add rsi, 0x10
	0x14081fa71: add r15, 0x16e
	0x14081fa78: cmp ebx, 0
	0x14081fa7e: je 0x14081fac0
	0x14081fa84: xor rdi, rsi
	0x14081fa87: mov rax, rbp
	0x14081fa9f: add rax, 0xa7
	0x14081faac: add rdi, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081faba: or dword ptr [rax], 0x43d87997
Load [EBP+0x16e](STATIC)
	0x14081fac0: movzx r15, word ptr [r15]
	0x14081fad2: add rsi, 0x800
	0x14081fad9: mov r10, rbp
	0x14081fae3: add r10, 0x58
	0x14081faed: add r15w, 0x89f2
	0x14081faf3: and rsi, 0x10
	0x14081fafa: add rsi, 0xffff
	0x14081fb01: add r15, rbp
Load [EBP+0x58](STATIC)
	0x14081fb04: mov r10d, dword ptr [r10]
	0x14081fb07: mov r12, 0xd5
	0x14081fb1c: xor r10d, 0x47103f9e
	0x14081fb23: sub r12, 0x800
	0x14081fb31: sub rsi, 8
Store VM_REG [EBP+0x82]
	0x14081fb38: mov qword ptr [r15], r10
	0x14081fb42: add rsi, 0x80
	0x14081fb49: add r15, 4
	0x14081fb5a: mov rbx, rbp
	0x14081fb5d: add rbx, 0x93
Load [EBP+0x93](STATIC)
	0x14081fb72: mov ebx, dword ptr [rbx]
	0x14081fb7e: sub ebx, 0x513124ee
	0x14081fb84: mov r10, 0x12
Store VM_REG [EBP+0x86]
	0x14081fb92: mov dword ptr [r15], ebx
	0x14081fb95: sub rbx, 0xffff
	0x14081fb9c: and r8, 0x20
	0x14081fba3: and r8, 0x3f
	0x14081fbaa: add r12, 0x20
	0x14081fbb1: and r8, r8
	0x14081fbb4: or r8, r10
	0x14081fbb7: mov r15, r8
	0x14081fbba: and rbx, rdi
	0x14081fbbd: xor r12, 0x40
	0x14081fbc4: or r15, 0x20
	0x14081fbcb: and rbx, 0x80
	0x14081fbd2: mov r9, rbp
	0x14081fbd5: and r12, 0x400
	0x14081fbe3: mov rdx, rbx
	0x14081fbe6: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x14081fbf4: mov rax, qword ptr [r9]
	0x14081fbfe: mov rcx, r10
	0x14081fc01: push 0x590c2982
	0x14081fc06: push 0x5e5ef98f
	0x14081fc0b: push rdx
	0x14081fc0c: push rsp
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14081fc0d: push qword ptr [rsp]
	0x14081fc10: pop rdx
	0x14081fc11: add rsp, 8
	0x14081fc15: add rdx, 8
	0x14081fc19: push r12
	0x14081fc1b: push r15
	0x14081fc1d: push rax
	0x14081fc1e: movabs rax, 8
	0x14081fc28: mov r15, rax
	0x14081fc2b: pop rax
	0x14081fc2c: mov r12, r15
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14081fc2f: mov r15, qword ptr [rsp]
	0x14081fc33: add rsp, 8
	0x14081fc37: sub rdx, r12
	0x14081fc3a: pop r12
	0x14081fc3c: push rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081fc3d: push qword ptr [rsp + 8]
	0x14081fc41: mov rdx, qword ptr [rsp]
	0x14081fc45: push rdx
	0x14081fc46: mov rdx, rsp
	0x14081fc49: add rdx, 8
	0x14081fc4d: add rdx, 8
	0x14081fc54: push rdx
	0x14081fc55: push qword ptr [rsp + 8]
	0x14081fc59: mov rdx, qword ptr [rsp]
	0x14081fc5d: push rsi
	0x14081fc5e: mov rsi, rsp
	0x14081fc61: add rsi, 8
	0x14081fc65: add rsi, 8
	0x14081fc6c: xchg qword ptr [rsp], rsi
	0x14081fc70: pop rsp
	0x14081fc71: pop qword ptr [rsp]
	0x14081fc74: mov rsp, qword ptr [rsp]
	0x14081fc78: pop qword ptr [rsp]
	0x14081fc7b: pop rsp
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc7c: mov qword ptr [rsp], rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc80: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc83: pop qword ptr [rsp]
	0x14081fc86: mov r10, 0x200
	0x14081fc94: mov rdi, r9
	0x14081fc9e: push 0x3ff0e338
	0x14081fca3: push rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081fca4: pop qword ptr [rsp]
	0x14081fca7: push r12
	0x14081fca9: movabs r12, 0x6fffb133
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 13 | (~(((context >> 15) & 0x1fff)) & 0x1fff)) << 1 | ((context >> 14) & 0x1)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 3 | ((context >> 9) & 0x7)) << 1 | (~(((context >> 8) & 0x1)) & 0x1)) << 2 | ((context >> 6) & 0x3)) << 2 | (~(((context >> 4) & 0x3)) & 0x3)) << 2 | ((context >> 2) & 0x3)) << 2 | (~((context & 0x3)) & 0x3))
	0x14081fcb3: xor qword ptr [rsp + 8], r12
	0x14081fcb8: pop r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14081fcba: mov r14, qword ptr [rsp]
	0x14081fcbe: add rsp, 8
	0x14081fcc5: push rcx
	0x14081fcc6: movabs rcx, 0x7fbc6298
	0x14081fcd0: neg rcx
	0x14081fcd3: inc rcx
	0x14081fcd6: sub rcx, 0x7ef3333c
	0x14081fcdd: xor rcx, 0x7b46e84e
	0x14081fce4: push r10
	0x14081fce6: movabs r10, 0x1bfc5975
	0x14081fcf0: add rcx, r10
	0x14081fcf3: push qword ptr [rsp]
	0x14081fcf6: pop r10
	0x14081fcf8: add rsp, 8
	0x14081fcfc: push 0x3c1104c5
	0x14081fd01: push rsi
	0x14081fd02: pop qword ptr [rsp]
	0x14081fd05: movabs rsi, 0xffffffff1f34d662
	0x14081fd0f: sub rcx, rsi
	0x14081fd12: pop rsi
	0x14081fd13: sub rsp, 8
	0x14081fd17: mov qword ptr [rsp], r11
	0x14081fd1b: movabs r11, 0x6fbd895c
	0x14081fd25: shr r11, 8
	0x14081fd29: push rax
	0x14081fd2a: movabs rax, 0x1dffdf5c
	0x14081fd34: add rax, 0x4bffc5d0
	0x14081fd3a: push rsi
	0x14081fd3b: movabs rsi, 0x5ffffbfd
	0x14081fd45: or rsi, 0x5eaf73f3
	0x14081fd4c: and rsi, 0x57f59b00
	0x14081fd53: dec rsi
	0x14081fd56: xor rsi, 0x348d6027
	0x14081fd5d: and rax, rsi
	0x14081fd60: pop rsi
	0x14081fd61: xor rax, 0xa8bf6be
	0x14081fd67: or r11, rax
	0x14081fd6a: pop rax
	0x14081fd6b: and r11, 0x6fcf0c3f
	0x14081fd72: sub r11, 1
	0x14081fd76: xor r11, 0x72eeb87b
	0x14081fd7d: xor rcx, r11
	0x14081fd84: add rsp, 8
	0x14081fd88: xor r14, rcx
	0x14081fd8b: mov rcx, qword ptr [rsp]
	0x14081fd8f: add rsp, 8
	0x14081fd9d: and rdi, 0x10
	0x14081fda4: mov r9, 0x400
	0x14081fdab: push rbp
	0x14081fdac: push 0x63c61f43
	0x14081fdb1: mov qword ptr [rsp], rcx
	0x14081fdb5: movabs rcx, 0x7f7a1293
	0x14081fdbf: movabs rbp, 0x1ad12dd7
	0x14081fdc9: xor rbp, rcx
	0x14081fdcc: push qword ptr [rsp]
	0x14081fdcf: mov rcx, qword ptr [rsp]
	0x14081fdd3: add rsp, 8
	0x14081fdda: add rsp, 8
	0x14081fde1: shr rbp, 8
	0x14081fde5: shr rbp, 3
	0x14081fde9: sub rsp, 8
	0x14081fdf0: mov qword ptr [rsp], r12
	0x14081fdf4: mov r12, 0
	0x14081fdfb: sub r12, rbp
	0x14081fdfe: xchg rbp, r12
	0x14081fe01: pop r12
	0x14081fe03: add rbp, 0x6fa4e6ce
	0x14081fe0a: sub rsp, 8
	0x14081fe0e: mov qword ptr [rsp], rcx
	0x14081fe12: movabs rcx, 0x5bff3c5c
	0x14081fe1c: dec rcx
	0x14081fe1f: push r15
	0x14081fe21: push r12
	0x14081fe23: movabs r12, 0x5eed2ac0
	0x14081fe2d: push r10
	0x14081fe2f: movabs r10, 0x7112223e
	0x14081fe39: mov r15, r10
	0x14081fe3c: pop r10
	0x14081fe3e: xor r15, r12
	0x14081fe41: pop r12
	0x14081fe43: push r12
	0x14081fe45: movabs r12, 0x23bb6708
	0x14081fe4f: sub r12, 0x1ccf46db
	0x14081fe56: inc r12
	0x14081fe59: xor r12, 0x5bdbaf88
	0x14081fe60: neg r12
	0x14081fe63: push rdx
	0x14081fe64: movabs rdx, 0xb934bcf3
	0x14081fe6e: add r12, rdx
	0x14081fe71: pop rdx
	0x14081fe72: or r15, r12
	0x14081fe75: pop r12
	0x14081fe77: xor r15, 0x7b1aa994
	0x14081fe7e: sub r15, 0x5fa512ee
	0x14081fe85: push rcx
	0x14081fe86: movabs rcx, 0xffffffff70d96504
	0x14081fe90: add r15, 0xf8ff0b8
	0x14081fe97: sub r15, rcx
	0x14081fe9a: sub r15, 0xf8ff0b8
	0x14081fea1: pop rcx
	0x14081fea2: xor rcx, r15
	0x14081fea5: pop r15
	0x14081fea7: xor rbp, rcx
	0x14081feae: add rsp, 8
	0x14081feb2: add r14, 0x3961e480
	0x14081feb9: add r14, rbp
	0x14081febc: sub r14, 0x3961e480
	0x14081fec3: push qword ptr [rsp]
	0x14081fec6: mov rbp, qword ptr [rsp]
	0x14081feca: add rsp, 8
	0x14081fece: add rsp, 8
	0x14081fed2: or rdi, 0x3f
	0x14081fed9: push rdi
	0x14081feda: push 0x474d8f78
	0x14081fedf: mov qword ptr [rsp], rdi
	0x14081fee3: sub rsp, 8
	0x14081feea: mov qword ptr [rsp], rsp
	0x14081feee: add qword ptr [rsp], 8
	0x14081fef3: mov rdi, qword ptr [rsp]
	0x14081fef7: add rsp, 8
	0x14081fefb: add rdi, 8
	0x14081feff: sub rdi, 8
	0x14081ff06: push rdi
	0x14081ff07: push qword ptr [rsp + 8]
	0x14081ff0f: add rsp, 8
	0x14081ff13: pop qword ptr [rsp]
	0x14081ff16: pop rsp
	0x14081ff17: mov qword ptr [rsp], r9
	0x14081ff1b: movabs r9, 0xc
	0x14081ff25: push r10
	0x14081ff27: mov r10, r9
	0x14081ff2a: mov rdi, r10
	0x14081ff2d: pop r10
	0x14081ff33: add rsp, 8
	0x14081ff37: push 0x659bbeb7
	0x14081ff3c: mov qword ptr [rsp], rax
	0x14081ff40: push r14
	0x14081ff42: mov r14, rsp
	0x14081ff45: add r14, 8
	0x14081ff49: sub r14, 8
	0x14081ff50: xchg qword ptr [rsp], r14
	0x14081ff54: pop rsp
	0x14081ff55: mov qword ptr [rsp], r12
	0x14081ff59: movabs r12, 0x77f7d6a2
	0x14081ff63: movabs rax, 0x77f7d6a2
	0x14081ff6d: xor rax, r12
	0x14081ff70: pop r12
	0x14081ff72: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x140940fb2
	0x14081ff75: add qword ptr [rax], rdi
	0x14081ff78: pop rax
	0x14081ff79: push qword ptr [rsp]
	0x14081ff80: add rsp, 8
	0x14081ff87: add rsp, 8
	0x14081ffe8: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x82](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0xe8]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140769cd0
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140769cd0
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140769cd0
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140940fbc
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x140769cd0: mov r9, rbp
	0x140769cd6: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140769cdd: mov r9, qword ptr [r9]
	0x140769ce7: add r9, 4
	0x140769cf1: movzx rdx, word ptr [r9]
	0x140769cf5: mov rax, rbp
	0x140769d06: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140769d0c: sub edx, dword ptr [rax]
	0x140769d0e: mov r8, rbp
	0x140769d17: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140769d1e: add edx, dword ptr [r8]
	0x140769d21: mov r8, rbp
	0x140769d24: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140769d2b: and dword ptr [r8], edx
	0x140769d2e: mov rbx, rbp
	0x140769d31: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140769d38: xor dword ptr [rbx], 0x4010b940
	0x140769d3e: mov rax, rbp
	0x140769d41: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x140769d47: mov r12b, byte ptr [rax]
	0x140769d4a: cmp r12b, 0xb8
	0x140769d4e: jbe 0x140769d54
	0x140769d54: mov r11, rbp
	0x140769d57: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140769d5e: xor word ptr [r11], dx
	0x140769d62: mov r12, rbp
	0x140769d65: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x140769d6c: movzx r12, word ptr [r12]
	0x140769d71: xor r12w, 0xd540
	0x140769d81: add r12, rbp
	0x140769d84: mov rsi, 0
	0x140769d9d: mov r8, rbp
	0x140769da0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140769da7: mov r8, qword ptr [r8]
	0x140769daa: add r8, 6
	0x140769db1: mov si, word ptr [r8]
	0x140769db5: add rsi, rbp
Load [EBP+0x26](VM_REGISTER)
	0x140769db8: push qword ptr [rsi]
	0x140769dba: popfq
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140769dbb: inc qword ptr [r12]
	0x140769dbf: pushfq
	0x140769dc0: mov rsi, 0
	0x140769dce: mov r15, rbp
	0x140769dd8: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140769ddf: mov r15, qword ptr [r15]
	0x140769df0: add r15, 8
	0x140769df7: mov sil, byte ptr [r15]
	0x140769dfa: cmp sil, 0
	0x140769dfe: je 0x140769e79
	0x140769e0b: mov r15, rbp
	0x140769e1c: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140769e31: mov r15, qword ptr [r15]
	0x140769e3b: add r15, 6
	0x140769e49: mov si, word ptr [r15]
	0x140769e54: add rsi, rbp
	0x140769e65: pop r11
Store VM_REG [EBP+0x26]
	0x140769e67: mov qword ptr [rsi], r11
	0x140769e92: mov r14b, 0x6c
	0x140769e9c: mov r13, rbp
	0x140769ea6: add r13, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140769eb4: or byte ptr [r13], r14b
	0x140769ec6: mov r13, rbp
	0x140769ec9: mov rdx, rbp
	0x140769eda: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140769eef: mov r13, qword ptr [r13]
	0x140769efa: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140769f01: mov rdx, qword ptr [rdx]
	0x140769f07: add rdx, 2
	0x140769f14: movzx rdx, word ptr [rdx]
	0x140769f1f: mov r14, rbp
	0x140769f2c: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140769f36: add edx, dword ptr [r14]
	0x140769f39: add edx, 0x46eaffa0
	0x140769f4d: mov r15, rbp
	0x140769f5e: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140769f68: add dword ptr [r15], edx
	0x140769f72: and rdx, 0xffff
	0x140769f80: shl rdx, 3
	0x140769f84: add r13, rdx
	0x140769f95: mov r12, qword ptr [r13]
	0x140769f99: mov rax, rbp
	0x140769f9c: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fc5
	0x140769fa2: add qword ptr [rax], 9
	0x140769fa9: jmp r12
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407dd7d9: mov rbx, rbp
	0x1407dd7ea: mov r14, rbp
	0x1407dd7f4: add r14, 0x145
	0x1407dd7fb: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407dd80c: mov r14, qword ptr [r14]
	0x1407dd812: add r14, 2
	0x1407dd81c: movzx r8, word ptr [r14]
Load [EBP+0x145](STATIC)
	0x1407dd827: mov rbx, qword ptr [rbx]
	0x1407dd830: add rbx, 4
	0x1407dd841: mov r13, rbp
	0x1407dd84e: movzx rsi, word ptr [rbx]
	0x1407dd852: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407dd863: mov rsi, qword ptr [rsi]
	0x1407dd866: and rdx, rsi
	0x1407dd869: pushfq
	0x1407dd877: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407dd87e: add r8d, dword ptr [r13]
	0x1407dd88c: mov r12, rbp
	0x1407dd899: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407dd8c7: add r8d, dword ptr [r12]
	0x1407dd8cf: mov r15, rbp
	0x1407dd8e5: add r15, 0xbf
	0x1407dd8fd: pop rdx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dd905: or dword ptr [r15], r8d
	0x1407dd916: mov r12, rbp
	0x1407dd919: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dd92a: xor dword ptr [r12], 0x7225efd5
	0x1407dd932: mov r13, rbp
	0x1407dd943: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407dd94d: mov dil, byte ptr [r13]
	0x1407dd951: cmp dil, 0x8e
	0x1407dd955: jbe 0x1407dd970
	0x1407dd977: mov rbx, rbp
	0x1407dd97d: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407dd984: sub word ptr [rbx], r8w
	0x1407dd996: mov rdx, 0
	0x1407dd9a4: mov r12, rbp
	0x1407dd9aa: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407dd9b8: mov r12, qword ptr [r12]
	0x1407dd9bc: add r12, 0
	0x1407dd9ca: mov dx, word ptr [r12]
	0x1407dd9f8: mov r13, rbp
	0x1407dd9fe: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x1407dda0c: sub edx, dword ptr [r13]
	0x1407dda13: mov r12, rbp
	0x1407dda16: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dda1d: add dword ptr [r12], edx
	0x1407dda28: mov r11, rbp
	0x1407dda2b: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dda38: and dword ptr [r11], 0x7696ac55
	0x1407dda42: mov rax, rbp
	0x1407dda45: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407dda52: add word ptr [rax], dx
	0x1407dda5c: mov rdi, rbp
	0x1407dda5f: mov r13, 0x5f6fbd45
	0x1407dda66: add rdi, 0xd6
	0x1407dda7b: mov rdx, rbp
Load [EBP+0xd6](STATIC)
	0x1407dda7e: movzx rdi, word ptr [rdi]
	0x1407dda89: mov r12, rbp
	0x1407dda93: add r12, 0xa7
	0x1407dda9a: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407ddaa1: movzx rdx, word ptr [rdx]
	0x1407ddaac: xor di, 0xec82
	0x1407ddabf: sub dx, 0xfda0
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ddac7: xor dword ptr [r12], r13d
	0x1407ddace: add rdi, rbp
	0x1407ddad8: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407ddae5: mov r9, qword ptr [rdx]
Load [EBP+0x15d](VM_REGISTER)
	0x1407ddaf6: mov r11, qword ptr [rdi]
Store VM_REG [EBP+0xe8]
	0x1407ddb07: mov qword ptr [rdx], r11
Store VM_REG [EBP+0x15d]
	0x1407ddb0d: mov qword ptr [rdi], r9
	0x1407ddb28: mov rbx, rbp
	0x1407ddb2b: add rbx, 0xab
	0x1407ddb35: mov r10, rbp
Load [EBP+0xab](STATIC)
	0x1407ddb38: mov rbx, qword ptr [rbx]
	0x1407ddb45: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407ddb4c: mov r10, qword ptr [r10]
	0x1407ddb59: add r10, 6
	0x1407ddb6a: movzx r10, word ptr [r10]
	0x1407ddb75: mov r13, rbp
	0x1407ddb78: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ddb7f: sub r10d, dword ptr [r13]
	0x1407ddb8d: add r10d, 0x5ac42571
	0x1407ddb9e: mov r9, rbp
	0x1407ddbaf: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ddbc0: xor dword ptr [r9], r10d
	0x1407ddbd1: and r10, 0xffff
	0x1407ddbe9: shl r10, 3
	0x1407ddbf4: add rbx, r10
	0x1407ddbf7: mov r15, qword ptr [rbx]
	0x1407ddc01: mov rbx, rbp
	0x1407ddc12: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fcf
	0x1407ddc19: add qword ptr [rbx], 0xa
	0x1407ddc20: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407dc4a1: mov rdi, rbp
	0x1407dc4a4: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407dc4b2: mov rdi, qword ptr [rdi]
	0x1407dc4c3: add rdi, 6
	0x1407dc4ca: movzx r9, word ptr [rdi]
	0x1407dc4d7: mov rcx, rbp
	0x1407dc4da: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407dc4e1: add r9d, dword ptr [rcx]
	0x1407dc4f8: mov r10, rbp
	0x1407dc505: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dc513: sub dword ptr [r10], r9d
	0x1407dc516: mov r13, rbp
	0x1407dc520: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dc52a: and dword ptr [r13], 0x4014ed22
	0x1407dc539: mov r15, rbp
	0x1407dc548: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407dc552: mov sil, byte ptr [r15]
	0x1407dc555: cmp sil, 0xe1
	0x1407dc559: jbe 0x1407dc56d
	0x1407dc577: mov r8, rbp
	0x1407dc581: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407dc588: xor word ptr [r8], r9w
	0x1407dc595: mov r9, rbp
	0x1407dc59e: mov r11, rbp
	0x1407dc5ab: add r11, 0x145
	0x1407dc5c0: mov rsi, rbp
	0x1407dc5c3: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407dc5d4: mov r11, qword ptr [r11]
	0x1407dc5d7: add r11, 8
	0x1407dc5eb: movzx rcx, word ptr [r11]
	0x1407dc5fc: add r9, 0x16e
Load [EBP+0x145](STATIC)
	0x1407dc60a: mov rsi, qword ptr [rsi]
	0x1407dc614: add rcx, rbp
	0x1407dc61e: add rsi, 2
Load [EBP+0x10d](VM_REGISTER)
	0x1407dc633: mov rcx, qword ptr [rcx]
	0x1407dc636: mov edi, dword ptr [rsi]
	0x1407dc638: or r11, rcx
	0x1407dc63b: pushfq
	0x1407dc646: mov r14, rbp
Load [EBP+0x16e](STATIC)
	0x1407dc653: movzx r9, word ptr [r9]
	0x1407dc65e: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dc67c: or dword ptr [r14], edi
	0x1407dc696: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407dc6bd: not qword ptr [r9]
	0x1407dc6f2: pop r11
	0x1407dc73a: mov rcx, rbp
	0x1407dc73d: add rcx, 0xab
	0x1407dc74e: mov rsi, rbp
	0x1407dc758: add rsi, 0x145
Load [EBP+0xab](STATIC)
	0x1407dc76d: mov rcx, qword ptr [rcx]
Load [EBP+0x145](STATIC)
	0x1407dc770: mov rsi, qword ptr [rsi]
	0x1407dc773: add rsi, 0
	0x1407dc781: movzx rsi, word ptr [rsi]
	0x1407dc793: mov r11, rbp
	0x1407dc796: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407dc7a4: xor esi, dword ptr [r11]
	0x1407dc7b5: sub esi, 0x5dd48807
	0x1407dc7c2: mov r9, rbp
	0x1407dc7c8: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dc7d2: sub dword ptr [r9], esi
	0x1407dc7dc: and rsi, 0xffff
	0x1407dc7f8: shl rsi, 3
	0x1407dc7fc: add rcx, rsi
	0x1407dc802: mov r10, qword ptr [rcx]
	0x1407dc80f: mov rcx, rbp
	0x1407dc820: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fdb
	0x1407dc827: add qword ptr [rcx], 0xc
	0x1407dc82e: jmp r10
handlers outputs:



	0x1407dd7d9: mov rbx, rbp
	0x1407dd7ea: mov r14, rbp
	0x1407dd7f4: add r14, 0x145
	0x1407dd7fb: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407dd80c: mov r14, qword ptr [r14]
	0x1407dd812: add r14, 2
	0x1407dd81c: movzx r8, word ptr [r14]
Load [EBP+0x145](STATIC)
	0x1407dd827: mov rbx, qword ptr [rbx]
	0x1407dd830: add rbx, 4
	0x1407dd841: mov r13, rbp
	0x1407dd84e: movzx rsi, word ptr [rbx]
	0x1407dd852: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407dd863: mov rsi, qword ptr [rsi]
	0x1407dd866: and rdx, rsi
	0x1407dd869: pushfq
	0x1407dd877: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407dd87e: add r8d, dword ptr [r13]
	0x1407dd88c: mov r12, rbp
	0x1407dd899: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407dd8c7: add r8d, dword ptr [r12]
	0x1407dd8cf: mov r15, rbp
	0x1407dd8e5: add r15, 0xbf
	0x1407dd8fd: pop rdx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dd905: or dword ptr [r15], r8d
	0x1407dd916: mov r12, rbp
	0x1407dd919: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dd92a: xor dword ptr [r12], 0x7225efd5
	0x1407dd932: mov r13, rbp
	0x1407dd943: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407dd94d: mov dil, byte ptr [r13]
	0x1407dd951: cmp dil, 0x8e
	0x1407dd955: jbe 0x1407dd970
	0x1407dd977: mov rbx, rbp
	0x1407dd97d: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407dd984: sub word ptr [rbx], r8w
	0x1407dd996: mov rdx, 0
	0x1407dd9a4: mov r12, rbp
	0x1407dd9aa: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407dd9b8: mov r12, qword ptr [r12]
	0x1407dd9bc: add r12, 0
	0x1407dd9ca: mov dx, word ptr [r12]
	0x1407dd9f8: mov r13, rbp
	0x1407dd9fe: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x1407dda0c: sub edx, dword ptr [r13]
	0x1407dda13: mov r12, rbp
	0x1407dda16: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dda1d: add dword ptr [r12], edx
	0x1407dda28: mov r11, rbp
	0x1407dda2b: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dda38: and dword ptr [r11], 0x7696ac55
	0x1407dda42: mov rax, rbp
	0x1407dda45: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407dda52: add word ptr [rax], dx
	0x1407dda5c: mov rdi, rbp
	0x1407dda5f: mov r13, 0x5f6fbd45
	0x1407dda66: add rdi, 0xd6
	0x1407dda7b: mov rdx, rbp
Load [EBP+0xd6](STATIC)
	0x1407dda7e: movzx rdi, word ptr [rdi]
	0x1407dda89: mov r12, rbp
	0x1407dda93: add r12, 0xa7
	0x1407dda9a: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407ddaa1: movzx rdx, word ptr [rdx]
	0x1407ddaac: xor di, 0xec82
	0x1407ddabf: sub dx, 0xfda0
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ddac7: xor dword ptr [r12], r13d
	0x1407ddace: add rdi, rbp
	0x1407ddad8: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407ddae5: mov r9, qword ptr [rdx]
Load [EBP+0x15d](VM_REGISTER)
	0x1407ddaf6: mov r11, qword ptr [rdi]
Store VM_REG [EBP+0xe8]
	0x1407ddb07: mov qword ptr [rdx], r11
Store VM_REG [EBP+0x15d]
	0x1407ddb0d: mov qword ptr [rdi], r9
	0x1407ddb28: mov rbx, rbp
	0x1407ddb2b: add rbx, 0xab
	0x1407ddb35: mov r10, rbp
Load [EBP+0xab](STATIC)
	0x1407ddb38: mov rbx, qword ptr [rbx]
	0x1407ddb45: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407ddb4c: mov r10, qword ptr [r10]
	0x1407ddb59: add r10, 6
	0x1407ddb6a: movzx r10, word ptr [r10]
	0x1407ddb75: mov r13, rbp
	0x1407ddb78: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ddb7f: sub r10d, dword ptr [r13]
	0x1407ddb8d: add r10d, 0x5ac42571
	0x1407ddb9e: mov r9, rbp
	0x1407ddbaf: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ddbc0: xor dword ptr [r9], r10d
	0x1407ddbd1: and r10, 0xffff
	0x1407ddbe9: shl r10, 3
	0x1407ddbf4: add rbx, r10
	0x1407ddbf7: mov r15, qword ptr [rbx]
	0x1407ddc01: mov rbx, rbp
	0x1407ddc12: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940fe5
	0x1407ddc19: add qword ptr [rbx], 0xa
	0x1407ddc20: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x14086f902: mov r11, rbp
	0x14086f905: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086f916: mov r11, qword ptr [r11]
	0x14086f919: add r11, 8
	0x14086f920: mov eax, dword ptr [r11]
	0x14086f923: mov rbx, rbp
	0x14086f92d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086f93b: sub eax, dword ptr [rbx]
	0x14086f940: mov rsi, rbp
	0x14086f943: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14086f94a: add eax, dword ptr [rsi]
	0x14086f94f: mov r11, rbp
	0x14086f952: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086f959: add dword ptr [r11], eax
	0x14086f95c: mov rcx, rbp
	0x14086f95f: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086f966: or dword ptr [rcx], 0x9c3b801
	0x14086f96c: mov r10, rbp
	0x14086f96f: add r10, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14086f976: add dword ptr [r10], eax
	0x14086f979: mov r14, rbp
	0x14086f97c: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14086f983: add dword ptr [r14], eax
	0x14086f9a8: mov r14, rbp
	0x14086f9b2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14086f9ce: mov r14, qword ptr [r14]
	0x14086f9d1: add r14, 0
	0x14086f9ed: movzx r9, word ptr [r14]
	0x14086f9f1: mov rax, rbp
	0x14086f9f4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086fa04: xor r9d, dword ptr [rax]
	0x14086fa2d: mov rbx, rbp
	0x14086fa45: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086fa61: or dword ptr [rbx], r9d
	0x14086fa9b: mov rbx, rbp
	0x14086faa1: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x14086fab2: mov r8b, byte ptr [rbx]
	0x14086fab5: cmp r8b, 0xbc
	0x14086fab9: jbe 0x14086fade
	0x14086fae8: mov r13, rbp
	0x14086faf9: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086fb03: add word ptr [r13], r9w
	0x14086fb19: mov rax, rbp
	0x14086fb26: add rax, 0x58
Load [EBP+0x58](STATIC)
	0x14086fb2f: mov eax, dword ptr [rax]
	0x14086fb3f: mov rdx, rbp
	0x14086fb4f: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14086fb64: movzx rdx, word ptr [rdx]
	0x14086fb8b: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14086fb8e: xor qword ptr [rdx], rax
	0x14086fb91: pushfq
	0x14086fb9c: mov r10, 0
	0x14086fba3: mov rbx, rbp
	0x14086fba6: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14086fbad: mov rbx, qword ptr [rbx]
	0x14086fbc5: add rbx, 0xc
	0x14086fbcf: mov r10b, byte ptr [rbx]
	0x14086fbd2: cmp r10b, 0
	0x14086fbd6: je 0x14086fc4c
	0x14086fbea: mov rbx, rbp
	0x14086fbf0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14086fc0c: mov rbx, qword ptr [rbx]
	0x14086fc1c: add rbx, 4
	0x14086fc23: mov r10w, word ptr [rbx]
	0x14086fc35: add r10, rbp
	0x14086fc3b: pop r11
Store VM_REG [EBP+0x26]
	0x14086fc3d: mov qword ptr [r10], r11
	0x14086fc87: mov r8b, 0x56
	0x14086fc8a: mov r14, rbp
	0x14086fc9b: add r14, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14086fca9: and byte ptr [r14], r8b
	0x14086fcb6: mov rdx, rbp
	0x14086fcbc: add rdx, 0xab
	0x14086fcd1: mov r8, rbp
Load [EBP+0xab](STATIC)
	0x14086fce5: mov rdx, qword ptr [rdx]
	0x14086fce8: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14086fcef: mov r8, qword ptr [r8]
	0x14086fcfc: add r8, 2
	0x14086fd17: movzx r8, word ptr [r8]
	0x14086fd22: mov r15, rbp
	0x14086fd36: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086fd4a: sub r8d, dword ptr [r15]
	0x14086fd68: mov r11, rbp
	0x14086fd72: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086fd79: and dword ptr [r11], r8d
	0x14086fd83: and r8, 0xffff
	0x14086fd97: shl r8, 3
	0x14086fda2: add rdx, r8
	0x14086fdaf: mov rsi, qword ptr [rdx]
	0x14086fdb2: mov r13, rbp
	0x14086fdb5: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ff2
	0x14086fdbc: add qword ptr [r13], 0xd
	0x14086fdc4: jmp rsi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407c8950: mov rsi, 0
	0x1407c8957: mov rdi, rbp
	0x1407c895a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8961: mov rdi, qword ptr [rdi]
	0x1407c8964: add rdi, 3
	0x1407c896b: mov si, word ptr [rdi]
	0x1407c896e: add rsi, rbp
	0x1407c8971: mov r15, 0
	0x1407c8978: mov r11, rbp
	0x1407c897b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8982: mov r11, qword ptr [r11]
	0x1407c8985: add r11, 5
	0x1407c898c: mov r15w, word ptr [r11]
	0x1407c8990: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407c8993: push qword ptr [rsi]
Load [EBP+0x64](VM_REGISTER)
	0x1407c8995: push qword ptr [r15]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407c8998: pop qword ptr [rsi]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407c899a: pop qword ptr [r15]
	0x1407c89aa: mov r15, rbp
	0x1407c89b0: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407c89c1: mov r15, qword ptr [r15]
	0x1407c89c4: add r15, 0xb
	0x1407c89dc: mov r11d, dword ptr [r15]
	0x1407c89df: mov rbx, rbp
	0x1407c89e5: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c89ec: xor r11d, dword ptr [rbx]
	0x1407c89ef: mov r12, rbp
	0x1407c89f2: add r12, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407c89ff: sub r11d, dword ptr [r12]
	0x1407c8a03: mov rdi, rbp
	0x1407c8a0d: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c8a22: sub dword ptr [rdi], r11d
	0x1407c8a2b: mov rdi, rbp
	0x1407c8a2e: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c8a3c: sub dword ptr [rdi], 0x3a0deaa2
	0x1407c8a50: mov rax, rbp
	0x1407c8a64: add rax, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407c8a6a: sub dword ptr [rax], r11d
	0x1407c8a74: mov rcx, rbp
	0x1407c8a8c: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407c8a9a: sub dword ptr [rcx], r11d
	0x1407c8a9d: mov rbx, rbp
	0x1407c8aa0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8ab8: mov rbx, qword ptr [rbx]
	0x1407c8ac5: add rbx, 9
	0x1407c8add: movzx rax, word ptr [rbx]
	0x1407c8b1b: mov rsi, rbp
	0x1407c8b24: add rsi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407c8b3c: add eax, dword ptr [rsi]
	0x1407c8b75: mov rsi, rbp
	0x1407c8b86: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c8ba2: xor dword ptr [rsi], 0x5029e8d
	0x1407c8bb2: mov r13, rbp
	0x1407c8bc6: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407c8bcd: mov r10b, byte ptr [r13]
	0x1407c8bd1: cmp r10b, 0x8e
	0x1407c8bd5: jbe 0x1407c8bf5
	0x1407c8bf5: mov rdi, rbp
	0x1407c8bfe: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407c8c13: xor word ptr [rdi], ax
	0x1407c8c24: mov rdx, rbp
	0x1407c8c38: mov rax, rbp
	0x1407c8c69: add rax, 0x16e
	0x1407c8c73: add rdx, 0x58
Load [EBP+0x58](STATIC)
	0x1407c8c7d: mov edx, dword ptr [rdx]
Load [EBP+0x16e](STATIC)
	0x1407c8c88: movzx rax, word ptr [rax]
	0x1407c8c9a: sub ax, 0xe694
	0x1407c8c9e: add rax, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407c8ca1: or qword ptr [rax], rdx
	0x1407c8ca4: pushfq
	0x1407c8cac: mov r9, 0
	0x1407c8cbc: mov r8, rbp
	0x1407c8ccd: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8cdb: mov r8, qword ptr [r8]
	0x1407c8cef: add r8, 0
	0x1407c8d04: mov r9b, byte ptr [r8]
	0x1407c8d07: cmp r9b, 0
	0x1407c8d0b: je 0x1407c8db3
	0x1407c8d1f: mov r8, rbp
	0x1407c8d2c: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8d48: mov r8, qword ptr [r8]
	0x1407c8d59: add r8, 7
	0x1407c8d71: mov r9w, word ptr [r8]
	0x1407c8d83: add r9, rbp
	0x1407c8d94: pop r14
Store VM_REG [EBP+0x26]
	0x1407c8d96: mov qword ptr [r9], r14
	0x1407c8dd0: mov bl, 0x71
	0x1407c8de0: mov rdx, rbp
	0x1407c8dea: add rdx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407c8df8: or byte ptr [rdx], bl
	0x1407c8e0b: mov r9, rbp
	0x1407c8e15: mov rdi, rbp
	0x1407c8e2d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407c8e42: mov rdi, qword ptr [rdi]
	0x1407c8e59: add rdi, 1
	0x1407c8e6e: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x1407c8e75: mov r9, qword ptr [r9]
	0x1407c8e78: movzx rdi, word ptr [rdi]
	0x1407c8e82: mov rcx, rbp
	0x1407c8e9a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c8eab: add edi, dword ptr [rcx]
	0x1407c8eb4: sub edi, 0x2870fd10
	0x1407c8ec1: mov r10, rbp
	0x1407c8ed2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c8ee0: and dword ptr [r10], edi
	0x1407c8ee3: and rdi, 0xffff
	0x1407c8ef4: shl rdi, 3
	0x1407c8f0d: add r9, rdi
	0x1407c8f13: mov r10, qword ptr [r9]
	0x1407c8f1d: mov rdx, rbp
	0x1407c8f23: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941001
	0x1407c8f2a: add qword ptr [rdx], 0xf
	0x1407c8f31: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x140840534: mov rsi, rbp
	0x140840541: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14084054f: mov rsi, qword ptr [rsi]
	0x140840560: add rsi, 5
	0x140840567: movzx r10, word ptr [rsi]
	0x14084056b: mov rdx, rbp
	0x14084056e: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140840578: xor r10d, dword ptr [rdx]
	0x14084059c: mov r15, rbp
	0x1408405ad: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408405c2: and dword ptr [r15], r10d
	0x1408405d3: mov r14, rbp
	0x1408405e0: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408405e7: add dword ptr [r14], 0x41f2d001
	0x1408405f5: mov r9, rbp
	0x1408405f8: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x140840606: mov r13b, byte ptr [r9]
	0x140840609: cmp r13b, 0x8f
	0x14084060d: jbe 0x140840627
	0x140840634: mov r15, rbp
	0x14084063e: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14084064b: xor word ptr [r15], r10w
	0x14084064f: mov rsi, rbp
	0x140840659: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140840667: movzx rsi, word ptr [rsi]
	0x14084066b: xor si, 0x6a46
	0x14084067e: add rsi, rbp
	0x140840688: mov r8, 0
	0x14084069d: mov rdx, rbp
	0x1408406a7: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408406ae: mov rdx, qword ptr [rdx]
	0x1408406bb: add rdx, 9
	0x1408406c2: mov r8w, word ptr [rdx]
	0x1408406c6: add r8, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1408406d0: push qword ptr [r8]
	0x1408406dd: popfq
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1408406de: dec qword ptr [rsi]
	0x1408406e1: pushfq
	0x1408406f0: mov rdi, 0
	0x1408406f7: mov r11, rbp
	0x140840701: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140840712: mov r11, qword ptr [r11]
	0x140840715: add r11, 2
	0x14084072a: mov dil, byte ptr [r11]
	0x14084072d: cmp dil, 0
	0x140840731: je 0x140840790
	0x14084073e: mov r11, rbp
	0x140840741: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14084074f: mov r11, qword ptr [r11]
	0x140840759: add r11, 9
	0x14084076e: mov di, word ptr [r11]
	0x140840772: add rdi, rbp
	0x140840783: pop r14
Store VM_REG [EBP+0x26]
	0x140840785: mov qword ptr [rdi], r14
	0x1408407a0: mov rdx, rbp
	0x1408407a3: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408407aa: mov rdx, qword ptr [rdx]
	0x1408407ad: add rdx, 0
	0x1408407b4: movzx r9, word ptr [rdx]
	0x1408407b8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1408407bb: mov r9, qword ptr [r9]
	0x1408407be: xor r15, r9
	0x1408407c1: pushfq
	0x1408407eb: pop r15
	0x1408407fb: mov dil, 0x77
	0x140840805: mov r8, rbp
	0x140840816: add r8, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14084081d: xor byte ptr [r8], dil
	0x140840827: mov r12, rbp
	0x140840834: add r12, 0xab
	0x14084083b: mov r10, rbp
Load [EBP+0xab](STATIC)
	0x14084083e: mov r12, qword ptr [r12]
	0x14084084c: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140840856: mov r10, qword ptr [r10]
	0x140840860: add r10, 7
	0x140840867: movzx r10, word ptr [r10]
	0x140840871: mov r11, rbp
	0x140840874: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084087b: add r10d, dword ptr [r11]
	0x140840895: mov r11, rbp
	0x1408408a2: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408408a9: sub dword ptr [r11], r10d
	0x1408408b3: and r10, 0xffff
	0x1408408c1: shl r10, 3
	0x1408408cc: add r12, r10
	0x1408408cf: mov rdx, qword ptr [r12]
	0x1408408d3: mov r12, rbp
	0x1408408d9: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094100c
	0x1408408e0: add qword ptr [r12], 0xb
	0x1408408e8: jmp rdx
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941014
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14081f5f8: mov rax, rbp
	0x14081f5fb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f601: and dword ptr [rax], 0x21ecf901
	0x14081f607: mov rsi, rbp
	0x14081f60a: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f611: xor dword ptr [rsi], 0x499bb630
	0x14081f621: mov r10, rbp
	0x14081f624: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14081f639: mov r10, qword ptr [r10]
	0x14081f646: add r10, 0xa
	0x14081f662: movzx rsi, word ptr [r10]
	0x14081f674: mov r13, rbp
	0x14081f685: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f68c: sub esi, dword ptr [r13]
	0x14081f6c4: mov r9, rbp
	0x14081f6c7: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f6ce: xor dword ptr [r9], esi
	0x14081f6e6: mov r8, rbp
	0x14081f6fa: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f716: and dword ptr [r8], 0x727a8c4c
	0x14081f727: mov r15, rbp
	0x14081f730: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14081f737: mov cl, byte ptr [r15]
	0x14081f73a: cmp cl, 0x29
	0x14081f73d: jbe 0x14081f757
	0x14081f765: mov r15, rbp
	0x14081f772: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081f787: sub word ptr [r15], si
	0x14081f7a8: mov rbx, rbp
	0x14081f7b9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14081f7c7: mov rbx, qword ptr [rbx]
	0x14081f7cd: add rbx, 0
	0x14081f7e9: mov r11, qword ptr [rbx]
	0x14081f7ef: mov r14, rbp
	0x14081f7ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f809: add r11d, dword ptr [r14]
	0x14081f813: mov r14, rbp
	0x14081f81d: add r14, 0xa7
	0x14081f831: mov r12, 0
Load [EBP+0xa7](STATIC)
	0x14081f838: xor r11d, dword ptr [r14]
	0x14081f849: mov r15, rbp
	0x14081f84c: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f85d: or dword ptr [r15], r11d
	0x14081f875: mov rdi, rbp
	0x14081f886: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f88d: xor dword ptr [rdi], 0x381077e9
	0x14081f893: xor r12, 0x20
	0x14081f8a8: mov r9, rbp
	0x14081f8ab: sub r12, 0x88
	0x14081f8b5: add r9, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081f8bc: xor dword ptr [r9], r11d
	0x14081f8c9: mov r15, 0x200
	0x14081f8d0: mov r10, rbp
	0x14081f8d3: add r10, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081f8e1: or dword ptr [r10], r11d
	0x14081f8e4: mov rsi, rbp
	0x14081f8f4: add rsi, 0x145
	0x14081f8fb: mov r8, 0
	0x14081f902: mov r8, r8
	0x14081f905: and r8, r11
Load [EBP+0x145](STATIC)
	0x14081f908: mov rsi, qword ptr [rsi]
	0x14081f90b: add rsi, 0
	0x14081f915: mov r9, qword ptr [rsi]
	0x14081f91e: shr r9, 0x20
	0x14081f925: mov r11, rbp
	0x14081f928: xor r12, r15
	0x14081f92b: sub r12, 0xffff
	0x14081f932: xor r12, 0x80
	0x14081f939: add r11, 0x93
Store [EBP+0x93](STATIC)
	0x14081f940: mov dword ptr [r11], r9d
	0x14081f943: mov r13, rbp
	0x14081f946: mov r10, rbp
	0x14081f953: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x14081f960: mov r10, qword ptr [r10]
	0x14081f96d: add r13, 0x145
	0x14081f974: sub r8, 0xffff
Load [EBP+0x145](STATIC)
	0x14081f97b: mov r13, qword ptr [r13]
	0x14081f98d: add r13, 8
	0x14081f994: sub r12, 0x7fffffff
	0x14081f99b: movzx r13, word ptr [r13]
	0x14081f9a0: mov rsi, rbp
	0x14081f9a3: mov r14, r13
	0x14081f9a6: add rsi, 0xbf
	0x14081f9ad: sub r8, 0x20
	0x14081f9b4: sub r12, r14
Load [EBP+0xbf](STATIC)
	0x14081f9b7: sub r13d, dword ptr [rsi]
	0x14081f9cf: mov rcx, rbp
	0x14081f9d2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f9dc: and dword ptr [rcx], r13d
	0x14081f9e6: and r13, 0xffff
	0x14081f9ed: sub r12, rcx
	0x14081f9fe: shl r13, 3
	0x14081fa09: and r8, r12
	0x14081fa0c: add r10, r13
	0x14081fa0f: xor r8, r8
	0x14081fa20: mov rdi, qword ptr [r10]
	0x14081fa31: mov rbx, rbp
	0x14081fa34: add rbx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14081fa49: mov qword ptr [rbx], rdi
	0x14081fa4c: mov rax, rbp
	0x14081fa4f: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081fa58: mov ebx, dword ptr [rax]
	0x14081fa5a: and ebx, 1
	0x14081fa67: mov r15, rbp
	0x14081fa6a: add rsi, 0x10
	0x14081fa71: add r15, 0x16e
	0x14081fa78: cmp ebx, 0
	0x14081fa7e: je 0x14081fac0
	0x14081fa84: xor rdi, rsi
	0x14081fa87: mov rax, rbp
	0x14081fa9f: add rax, 0xa7
	0x14081faac: add rdi, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081faba: or dword ptr [rax], 0x43d87997
Load [EBP+0x16e](STATIC)
	0x14081fac0: movzx r15, word ptr [r15]
	0x14081fad2: add rsi, 0x800
	0x14081fad9: mov r10, rbp
	0x14081fae3: add r10, 0x58
	0x14081faed: add r15w, 0x89f2
	0x14081faf3: and rsi, 0x10
	0x14081fafa: add rsi, 0xffff
	0x14081fb01: add r15, rbp
Load [EBP+0x58](STATIC)
	0x14081fb04: mov r10d, dword ptr [r10]
	0x14081fb07: mov r12, 0xd5
	0x14081fb1c: xor r10d, 0x47103f9e
	0x14081fb23: sub r12, 0x800
	0x14081fb31: sub rsi, 8
Store VM_REG [EBP+0x82]
	0x14081fb38: mov qword ptr [r15], r10
	0x14081fb42: add rsi, 0x80
	0x14081fb49: add r15, 4
	0x14081fb5a: mov rbx, rbp
	0x14081fb5d: add rbx, 0x93
Load [EBP+0x93](STATIC)
	0x14081fb72: mov ebx, dword ptr [rbx]
	0x14081fb7e: sub ebx, 0x513124ee
	0x14081fb84: mov r10, 0x12
Store VM_REG [EBP+0x86]
	0x14081fb92: mov dword ptr [r15], ebx
	0x14081fb95: sub rbx, 0xffff
	0x14081fb9c: and r8, 0x20
	0x14081fba3: and r8, 0x3f
	0x14081fbaa: add r12, 0x20
	0x14081fbb1: and r8, r8
	0x14081fbb4: or r8, r10
	0x14081fbb7: mov r15, r8
	0x14081fbba: and rbx, rdi
	0x14081fbbd: xor r12, 0x40
	0x14081fbc4: or r15, 0x20
	0x14081fbcb: and rbx, 0x80
	0x14081fbd2: mov r9, rbp
	0x14081fbd5: and r12, 0x400
	0x14081fbe3: mov rdx, rbx
	0x14081fbe6: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x14081fbf4: mov rax, qword ptr [r9]
	0x14081fbfe: mov rcx, r10
	0x14081fc01: push 0x590c2982
	0x14081fc06: push 0x5e5ef98f
	0x14081fc0b: push rdx
	0x14081fc0c: push rsp
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14081fc0d: push qword ptr [rsp]
	0x14081fc10: pop rdx
	0x14081fc11: add rsp, 8
	0x14081fc15: add rdx, 8
	0x14081fc19: push r12
	0x14081fc1b: push r15
	0x14081fc1d: push rax
	0x14081fc1e: movabs rax, 8
	0x14081fc28: mov r15, rax
	0x14081fc2b: pop rax
	0x14081fc2c: mov r12, r15
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14081fc2f: mov r15, qword ptr [rsp]
	0x14081fc33: add rsp, 8
	0x14081fc37: sub rdx, r12
	0x14081fc3a: pop r12
	0x14081fc3c: push rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081fc3d: push qword ptr [rsp + 8]
	0x14081fc41: mov rdx, qword ptr [rsp]
	0x14081fc45: push rdx
	0x14081fc46: mov rdx, rsp
	0x14081fc49: add rdx, 8
	0x14081fc4d: add rdx, 8
	0x14081fc54: push rdx
	0x14081fc55: push qword ptr [rsp + 8]
	0x14081fc59: mov rdx, qword ptr [rsp]
	0x14081fc5d: push rsi
	0x14081fc5e: mov rsi, rsp
	0x14081fc61: add rsi, 8
	0x14081fc65: add rsi, 8
	0x14081fc6c: xchg qword ptr [rsp], rsi
	0x14081fc70: pop rsp
	0x14081fc71: pop qword ptr [rsp]
	0x14081fc74: mov rsp, qword ptr [rsp]
	0x14081fc78: pop qword ptr [rsp]
	0x14081fc7b: pop rsp
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14081fc7c: mov qword ptr [rsp], rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14081fc80: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14077cae3
	0x14081fc83: pop qword ptr [rsp]
	0x14081fc86: mov r10, 0x200
	0x14081fc94: mov rdi, r9
	0x14081fc9e: push 0x3ff0e338
	0x14081fca3: push rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081fca4: pop qword ptr [rsp]
	0x14081fca7: push r12
	0x14081fca9: movabs r12, 0x6fffb133
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 13 | (~(((context >> 15) & 0x1fff)) & 0x1fff)) << 1 | ((context >> 14) & 0x1)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 3 | ((context >> 9) & 0x7)) << 1 | (~(((context >> 8) & 0x1)) & 0x1)) << 2 | ((context >> 6) & 0x3)) << 2 | (~(((context >> 4) & 0x3)) & 0x3)) << 2 | ((context >> 2) & 0x3)) << 2 | (~((context & 0x3)) & 0x3))
	0x14081fcb3: xor qword ptr [rsp + 8], r12
	0x14081fcb8: pop r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14081fcba: mov r14, qword ptr [rsp]
	0x14081fcbe: add rsp, 8
	0x14081fcc5: push rcx
	0x14081fcc6: movabs rcx, 0x7fbc6298
	0x14081fcd0: neg rcx
	0x14081fcd3: inc rcx
	0x14081fcd6: sub rcx, 0x7ef3333c
	0x14081fcdd: xor rcx, 0x7b46e84e
	0x14081fce4: push r10
	0x14081fce6: movabs r10, 0x1bfc5975
	0x14081fcf0: add rcx, r10
	0x14081fcf3: push qword ptr [rsp]
	0x14081fcf6: pop r10
	0x14081fcf8: add rsp, 8
	0x14081fcfc: push 0x3c1104c5
	0x14081fd01: push rsi
	0x14081fd02: pop qword ptr [rsp]
	0x14081fd05: movabs rsi, 0xffffffff1f34d662
	0x14081fd0f: sub rcx, rsi
	0x14081fd12: pop rsi
	0x14081fd13: sub rsp, 8
	0x14081fd17: mov qword ptr [rsp], r11
	0x14081fd1b: movabs r11, 0x6fbd895c
	0x14081fd25: shr r11, 8
	0x14081fd29: push rax
	0x14081fd2a: movabs rax, 0x1dffdf5c
	0x14081fd34: add rax, 0x4bffc5d0
	0x14081fd3a: push rsi
	0x14081fd3b: movabs rsi, 0x5ffffbfd
	0x14081fd45: or rsi, 0x5eaf73f3
	0x14081fd4c: and rsi, 0x57f59b00
	0x14081fd53: dec rsi
	0x14081fd56: xor rsi, 0x348d6027
	0x14081fd5d: and rax, rsi
	0x14081fd60: pop rsi
	0x14081fd61: xor rax, 0xa8bf6be
	0x14081fd67: or r11, rax
	0x14081fd6a: pop rax
	0x14081fd6b: and r11, 0x6fcf0c3f
	0x14081fd72: sub r11, 1
	0x14081fd76: xor r11, 0x72eeb87b
	0x14081fd7d: xor rcx, r11
	0x14081fd84: add rsp, 8
	0x14081fd88: xor r14, rcx
	0x14081fd8b: mov rcx, qword ptr [rsp]
	0x14081fd8f: add rsp, 8
	0x14081fd9d: and rdi, 0x10
	0x14081fda4: mov r9, 0x400
	0x14081fdab: push rbp
	0x14081fdac: push 0x63c61f43
	0x14081fdb1: mov qword ptr [rsp], rcx
	0x14081fdb5: movabs rcx, 0x7f7a1293
	0x14081fdbf: movabs rbp, 0x1ad12dd7
	0x14081fdc9: xor rbp, rcx
	0x14081fdcc: push qword ptr [rsp]
	0x14081fdcf: mov rcx, qword ptr [rsp]
	0x14081fdd3: add rsp, 8
	0x14081fdda: add rsp, 8
	0x14081fde1: shr rbp, 8
	0x14081fde5: shr rbp, 3
	0x14081fde9: sub rsp, 8
	0x14081fdf0: mov qword ptr [rsp], r12
	0x14081fdf4: mov r12, 0
	0x14081fdfb: sub r12, rbp
	0x14081fdfe: xchg rbp, r12
	0x14081fe01: pop r12
	0x14081fe03: add rbp, 0x6fa4e6ce
	0x14081fe0a: sub rsp, 8
	0x14081fe0e: mov qword ptr [rsp], rcx
	0x14081fe12: movabs rcx, 0x5bff3c5c
	0x14081fe1c: dec rcx
	0x14081fe1f: push r15
	0x14081fe21: push r12
	0x14081fe23: movabs r12, 0x5eed2ac0
	0x14081fe2d: push r10
	0x14081fe2f: movabs r10, 0x7112223e
	0x14081fe39: mov r15, r10
	0x14081fe3c: pop r10
	0x14081fe3e: xor r15, r12
	0x14081fe41: pop r12
	0x14081fe43: push r12
	0x14081fe45: movabs r12, 0x23bb6708
	0x14081fe4f: sub r12, 0x1ccf46db
	0x14081fe56: inc r12
	0x14081fe59: xor r12, 0x5bdbaf88
	0x14081fe60: neg r12
	0x14081fe63: push rdx
	0x14081fe64: movabs rdx, 0xb934bcf3
	0x14081fe6e: add r12, rdx
	0x14081fe71: pop rdx
	0x14081fe72: or r15, r12
	0x14081fe75: pop r12
	0x14081fe77: xor r15, 0x7b1aa994
	0x14081fe7e: sub r15, 0x5fa512ee
	0x14081fe85: push rcx
	0x14081fe86: movabs rcx, 0xffffffff70d96504
	0x14081fe90: add r15, 0xf8ff0b8
	0x14081fe97: sub r15, rcx
	0x14081fe9a: sub r15, 0xf8ff0b8
	0x14081fea1: pop rcx
	0x14081fea2: xor rcx, r15
	0x14081fea5: pop r15
	0x14081fea7: xor rbp, rcx
	0x14081feae: add rsp, 8
	0x14081feb2: add r14, 0x3961e480
	0x14081feb9: add r14, rbp
	0x14081febc: sub r14, 0x3961e480
	0x14081fec3: push qword ptr [rsp]
	0x14081fec6: mov rbp, qword ptr [rsp]
	0x14081feca: add rsp, 8
	0x14081fece: add rsp, 8
	0x14081fed2: or rdi, 0x3f
	0x14081fed9: push rdi
	0x14081feda: push 0x474d8f78
	0x14081fedf: mov qword ptr [rsp], rdi
	0x14081fee3: sub rsp, 8
	0x14081feea: mov qword ptr [rsp], rsp
	0x14081feee: add qword ptr [rsp], 8
	0x14081fef3: mov rdi, qword ptr [rsp]
	0x14081fef7: add rsp, 8
	0x14081fefb: add rdi, 8
	0x14081feff: sub rdi, 8
	0x14081ff06: push rdi
	0x14081ff07: push qword ptr [rsp + 8]
	0x14081ff0f: add rsp, 8
	0x14081ff13: pop qword ptr [rsp]
	0x14081ff16: pop rsp
	0x14081ff17: mov qword ptr [rsp], r9
	0x14081ff1b: movabs r9, 0xc
	0x14081ff25: push r10
	0x14081ff27: mov r10, r9
	0x14081ff2a: mov rdi, r10
	0x14081ff2d: pop r10
	0x14081ff33: add rsp, 8
	0x14081ff37: push 0x659bbeb7
	0x14081ff3c: mov qword ptr [rsp], rax
	0x14081ff40: push r14
	0x14081ff42: mov r14, rsp
	0x14081ff45: add r14, 8
	0x14081ff49: sub r14, 8
	0x14081ff50: xchg qword ptr [rsp], r14
	0x14081ff54: pop rsp
	0x14081ff55: mov qword ptr [rsp], r12
	0x14081ff59: movabs r12, 0x77f7d6a2
	0x14081ff63: movabs rax, 0x77f7d6a2
	0x14081ff6d: xor rax, r12
	0x14081ff70: pop r12
	0x14081ff72: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x140941020
	0x14081ff75: add qword ptr [rax], rdi
	0x14081ff78: pop rax
	0x14081ff79: push qword ptr [rsp]
	0x14081ff80: add rsp, 8
	0x14081ff87: add rsp, 8
	0x14081ffe8: ret 0
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x82](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0xce]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 2 | 0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 2 | 0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x14094102c
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407a3c4d: mov r10, rbp
	0x1407a3c5a: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407a3c68: mov r10, qword ptr [r10]
	0x1407a3c6e: add r10, 2
	0x1407a3c7c: movzx r12, word ptr [r10]
	0x1407a3c8e: mov rsi, rbp
	0x1407a3c9f: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a3cb0: xor r12d, dword ptr [rsi]
	0x1407a3cbd: mov r15, rbp
	0x1407a3cca: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407a3cdf: sub r12d, dword ptr [r15]
	0x1407a3d12: mov r8, rbp
	0x1407a3d18: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a3d2d: sub dword ptr [r8], 0xbf7d4f1
	0x1407a3d3b: mov r10, rbp
	0x1407a3d3e: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x1407a3d5a: mov r8b, byte ptr [r10]
	0x1407a3d5d: cmp r8b, 0xcb
	0x1407a3d61: jbe 0x1407a3d75
	0x1407a3d78: mov r15, rbp
	0x1407a3d82: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407a3d89: xor word ptr [r15], r12w
	0x1407a3d8d: mov r10, 0
	0x1407a3d97: mov rdx, rbp
	0x1407a3da8: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407a3dbf: mov rdx, qword ptr [rdx]
	0x1407a3dc2: add rdx, 5
	0x1407a3dd0: mov r10w, word ptr [rdx]
	0x1407a3dde: mov rdi, rbp
	0x1407a3de1: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a3df2: xor r10d, dword ptr [rdi]
	0x1407a3e0a: mov rcx, rbp
	0x1407a3e17: add rcx, 0x120
Load [EBP+0x120](STATIC)
	0x1407a3e28: add r10d, dword ptr [rcx]
	0x1407a3e45: mov rbx, rbp
	0x1407a3e48: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a3e4f: and dword ptr [rbx], 0x12355572
	0x1407a3e55: mov r8, rbp
	0x1407a3e58: add r8, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407a3e5f: add word ptr [r8], r10w
	0x1407a3e70: mov rdi, rbp
	0x1407a3e79: mov r11, rbp
	0x1407a3e86: add rdi, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407a3e8d: movzx rdi, word ptr [rdi]
	0x1407a3ea4: sub di, 0xa830
	0x1407a3eb0: add rdi, rbp
	0x1407a3eb9: add r11, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407a3ec0: movzx r11, word ptr [r11]
Load [EBP+0xce](VM_REGISTER)
	0x1407a3ec4: mov rdi, qword ptr [rdi]
	0x1407a3ee6: add r11, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407a3ee9: sub qword ptr [r11], rdi
	0x1407a3eec: pushfq
	0x1407a3eed: mov rdi, 0
	0x1407a3f08: mov r9, rbp
	0x1407a3f0b: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407a3f26: mov r9, qword ptr [r9]
	0x1407a3f33: add r9, 4
	0x1407a3f44: mov dil, byte ptr [r9]
	0x1407a3f69: cmp dil, 0
	0x1407a3f6d: je 0x1407a3fd9
	0x1407a3f76: mov r9, rbp
	0x1407a3f80: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407a3f95: mov r9, qword ptr [r9]
	0x1407a3fad: add r9, 0
	0x1407a3fbb: mov di, word ptr [r9]
	0x1407a3fc6: add rdi, rbp
	0x1407a3fc9: pop rcx
Store VM_REG [EBP+0x26]
	0x1407a3fca: mov qword ptr [rdi], rcx
	0x1407a4001: mov r11b, 0x5b
	0x1407a400b: mov rax, rbp
	0x1407a4015: add rax, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407a4022: add byte ptr [rax], r11b
	0x1407a402f: mov rcx, rbp
	0x1407a4038: mov rsi, rbp
	0x1407a403b: add rsi, 0xab
	0x1407a4053: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407a406f: mov rcx, qword ptr [rcx]
	0x1407a4072: add rcx, 7
Load [EBP+0xab](STATIC)
	0x1407a4083: mov rsi, qword ptr [rsi]
	0x1407a4097: movzx rcx, word ptr [rcx]
	0x1407a409b: mov rdi, rbp
	0x1407a40a4: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a40ae: add ecx, dword ptr [rdi]
	0x1407a40bd: xor ecx, 0x382fbf94
	0x1407a40ca: mov rdx, rbp
	0x1407a40e2: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a40f0: and dword ptr [rdx], ecx
	0x1407a40f2: and rcx, 0xffff
	0x1407a4100: shl rcx, 3
	0x1407a4104: add rsi, rcx
	0x1407a410e: mov r8, qword ptr [rsi]
	0x1407a4114: mov r12, rbp
	0x1407a4121: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941035
	0x1407a4128: add qword ptr [r12], 9
	0x1407a4130: jmp r8
handlers outputs:



	0x140831887: mov rax, rbp
	0x14083188a: mov rcx, rbp
	0x14083188d: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x1408318a2: mov rcx, qword ptr [rcx]
	0x1408318a5: add rax, 0x145
	0x1408318b9: mov rsi, 0x200
Load [EBP+0x145](STATIC)
	0x1408318c0: mov rax, qword ptr [rax]
	0x1408318d4: add rax, 0
	0x1408318eb: movzx rax, word ptr [rax]
	0x1408318ef: mov r10, 0x400
	0x140831911: or rsi, 4
	0x140831918: add r10, r10
	0x14083191b: mov rbx, rbp
	0x140831925: xor rsi, 0x400
	0x14083192c: and rsi, 0xffffffff80000000
	0x140831933: add rbx, 0xbf
	0x140831948: or rsi, 0x3f
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083194f: xor dword ptr [rbx], eax
	0x140831951: and rax, 0xffff
	0x140831957: sub rsi, r10
	0x14083195a: and rsi, rax
	0x140831964: shl rax, 3
	0x140831968: add rcx, rax
	0x140831975: mov rax, qword ptr [rcx]
	0x140831978: mov rbx, 0xd5
	0x14083197f: mov r12, rbp
	0x140831982: or rsi, 0x400
	0x140831989: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140831990: mov qword ptr [r12], rax
	0x14083199b: and rcx, r12
	0x14083199e: mov r10, rbp
	0x1408319a7: add r10, 0x145
	0x1408319ae: and r13, 1
	0x1408319b5: mov r14, r12
Load [EBP+0x145](STATIC)
	0x1408319b8: mov r10, qword ptr [r10]
	0x1408319c5: add r10, 4
	0x1408319d3: movzx r12, word ptr [r10]
	0x1408319d7: mov rdx, rbp
	0x1408319e1: and rcx, 0x20
	0x1408319ef: add rdx, 0xbf
	0x1408319f6: and rcx, 0x88
	0x1408319fd: mov rdi, 1
Load [EBP+0xbf](STATIC)
	0x140831a04: sub r12d, dword ptr [rdx]
	0x140831a07: sub r14, r14
	0x140831a0d: and r14, 4
	0x140831a1a: mov r10, rbp
	0x140831a1d: or r14, rsi
	0x140831a27: add r10, 0xbf
	0x140831a2e: and rdi, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831a31: add dword ptr [r10], r12d
	0x140831a34: sub rdi, 0x10
	0x140831a42: xor r14, 0x10
	0x140831a49: mov r11, rbp
	0x140831a5a: add r11, 0xa7
	0x140831a61: xor rbx, 4
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831a68: sub dword ptr [r11], 0x4636dc37
	0x140831a6f: and r14, 0x3f
	0x140831a76: sub rbx, 0xf0
	0x140831a7d: mov rdx, rbp
	0x140831a80: sub rdi, rdi
	0x140831a83: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140831a8a: mov sil, byte ptr [rdx]
	0x140831a8d: cmp sil, 0x5a
	0x140831a91: jbe 0x140831a9e
	0x140831a97: add r12d, 0x3f95bd85
	0x140831aa1: mov rsi, rbp
	0x140831aab: add rsi, 0x16e
	0x140831ab9: sub rbx, rdi
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140831ac3: add word ptr [rsi], r12w
	0x140831ac7: mov r15, 0x255578db
	0x140831ace: mov r10, rbp
	0x140831ad1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831ad8: sub dword ptr [r10], r15d
	0x140831adb: add rbx, r14
	0x140831ade: add rbx, 0x20
	0x140831ae5: mov rcx, 0
	0x140831af3: sub r13, 0x80
	0x140831afa: mov r10, rbp
	0x140831b07: mov r8, 0xd5
	0x140831b0e: add r10, 0x145
	0x140831b15: mov r9, 0x400
Load [EBP+0x145](STATIC)
	0x140831b1c: mov r10, qword ptr [r10]
	0x140831b1f: mov rsi, 0x200
	0x140831b26: or rbx, 1
	0x140831b2d: add rsi, 0x40
	0x140831b34: add r10, 2
	0x140831b3b: sub r14, 0x400
	0x140831b42: and rbx, 0x90
	0x140831b49: and rsi, 0x3f
	0x140831b50: mov cx, word ptr [r10]
	0x140831b54: and rbx, 0x80
	0x140831b5b: add r14, rsi
	0x140831b5e: xor r13, 0x3f
	0x140831b65: mov r10, rbp
	0x140831b68: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140831b6f: xor ecx, dword ptr [r10]
	0x140831b72: mov rax, rbp
	0x140831b7c: and r9, 0x80
	0x140831b83: add rbx, rbx
	0x140831b86: add rax, 0x120
	0x140831b8c: sub r13, r9
Load [EBP+0x120](STATIC)
	0x140831b99: add ecx, dword ptr [rax]
	0x140831ba2: mov rdx, rbp
	0x140831ba5: xor r14, rbx
	0x140831ba8: and r14, 0x80
	0x140831baf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831bcb: add dword ptr [rdx], ecx
	0x140831bcd: mov r12, rbp
	0x140831bd0: sub r13, 1
	0x140831bda: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831be1: add dword ptr [r12], 0x707911f3
	0x140831be9: mov r9, rbp
	0x140831bec: add r9, 0xd6
	0x140831bf3: add r14, 0x88
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140831bfa: sub word ptr [r9], cx
	0x140831c01: or rdx, 0x20
	0x140831c08: xor r9, 8
	0x140831c0f: mov rax, rbp
	0x140831c12: and r11, 0xf0
	0x140831c19: or r11, 4
	0x140831c20: sub rdx, r11
	0x140831c23: mov rdi, rbp
	0x140831c26: or r13, 4
	0x140831c2d: add rcx, rax
	0x140831c30: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140831c37: movzx rdi, word ptr [rdi]
	0x140831c42: sub rcx, 8
	0x140831c49: add rax, 0xd6
	0x140831c4f: mov r15, 0x12
	0x140831c56: xor di, 0x7573
Load [EBP+0xd6](STATIC)
	0x140831c5b: movzx rax, word ptr [rax]
	0x140831c5f: sub ax, 0x7451
	0x140831c63: add rax, rbp
	0x140831c66: xor r15, r9
	0x140831c70: mov r9, 0
Load [EBP+0x2e](VM_REGISTER)
	0x140831c77: mov rax, qword ptr [rax]
	0x140831c7a: add rdx, 0x88
	0x140831c81: sub r9, rcx
	0x140831c84: and r9, 0xf0
	0x140831c8b: add rdi, rbp
Deref(t773,ds)
	0x140831c91: mov rax, qword ptr [rax]
Store VM_REG [EBP+0xce]
	0x140831c94: mov qword ptr [rdi], rax
	0x140831c97: xor rdx, 0x20
	0x140831c9e: add r15, 0xf0
	0x140831cac: mov rsi, 0xd5
	0x140831cb3: sub rdx, 4
	0x140831cba: and r15, 0x20
	0x140831cc1: xor rsi, r8
	0x140831cc7: mov r12, 0
	0x140831cce: mov rdi, 0x12
	0x140831cd5: or rsi, 4
	0x140831cdc: add r12, 0x20
	0x140831ce3: or rdi, 8
	0x140831cea: mov r11, 1
	0x140831cf1: and rsi, r12
	0x140831cf4: and rdx, 0xf0
	0x140831cfb: and rdx, 0x40
	0x140831d02: mov rbx, rbp
	0x140831d05: add rbx, 0xfd
	0x140831d0c: and rdx, r8
Load [EBP+0xfd](STATIC)
	0x140831d0f: mov r10, qword ptr [rbx]
	0x140831d12: add rdx, 0x80
	0x140831d19: mov r8, r13
	0x140831d1c: mov rcx, 0x400
	0x140831d23: add rcx, rcx
	0x140831d26: sub rsp, 8
	0x140831d2a: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140831d2b: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x7bfe7bec + context) & 0xffffffffffffffff)
	0x140831d2e: add qword ptr [rsp], 0x7bfe7bec
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831d36: mov r13, qword ptr [rsp]
	0x140831d3a: add rsp, 8
	0x140831d3e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1a
	0x140831d42: mov qword ptr [rsp], rdi
	0x140831d46: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x800
	0x140831d4a: mov qword ptr [rsp], rcx
	0x140831d4e: movabs rcx, 0x799ea5ff
	0x140831d58: shr rcx, 1
	0x140831d5c: push r15
	0x140831d5e: movabs r15, 0xb8b935b
	0x140831d68: and r15, 0x7eb7516c
	0x140831d6f: xor r15, 0x4db2385b
	0x140831d76: xor rcx, r15
	0x140831d7d: add rsp, 8
	0x140831d81: mov rdi, rcx
	0x140831d84: pop rcx
	0x140831d85: sub r13, 0xe2ffdbe
	0x140831d8c: sub r13, 0x7dfff37
	0x140831d93: sub r13, rdi
	0x140831d96: add r13, 0x7dfff37
	0x140831d9d: add r13, 0xe2ffdbe
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831da4: mov rdi, qword ptr [rsp]
	0x140831da8: sub rsp, 8
	0x140831dac: push r8
	0x140831dae: mov r8, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 4 | ((((0xffffffff0604cb89 + ((0xffffffffffffffff * context) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 4) & 0xf)) << 4 | 0x0)
	0x140831db1: mov qword ptr [rsp + 8], r8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140831db6: push qword ptr [rsp]
	0x140831db9: pop r8
	0x140831dbb: add rsp, 8
	0x140831dbf: mov r9, rsp
	0x140831dc2: add r9, 8
	0x140831dc6: add r9, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dcd: xor r9, qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1000
	0x140831dd1: xor qword ptr [rsp], r9
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dd9: mov rsp, qword ptr [rsp]
	0x140831de4: mov r15, 0x400
	0x140831deb: sub rsp, 8
	0x140831df2: mov qword ptr [rsp], rdx
	0x140831df6: mov rdx, rsp
	0x140831df9: add rdx, 8
	0x140831dfd: push 0x2d221d5a
	0x140831e02: mov qword ptr [rsp], rdi
	0x140831e06: movabs rdi, 8
	0x140831e10: sub rdx, rdi
unknown read addr: ff0 0xff0
	0x140831e13: mov rdi, qword ptr [rsp]
	0x140831e17: add rsp, 8
unknown read addr: ff8 0xff8
	0x140831e1b: xchg qword ptr [rsp], rdx
unknown read addr: ff8 0xff8
	0x140831e1f: mov rsp, qword ptr [rsp]
	0x140831e23: push r14
unknown read addr: ff0 0xff0
	0x140831e25: pop qword ptr [rsp]
	0x140831e28: movabs r14, 0x7efde3b5
	0x140831e32: dec r14
	0x140831e35: xor r14, 0x14da5629
	0x140831e3c: sub r14, 1
	0x140831e40: xor r14, 0x6a27b4d9
	0x140831e47: sub r13, 0x5ece19cb
	0x140831e4e: add r13, r14
	0x140831e51: add r13, 0x5ece19cb
unknown read addr: ff8 0xff8
	0x140831e58: push qword ptr [rsp]
	0x140831e5f: add rsp, 8
	0x140831e63: push rsi
	0x140831e64: mov rsi, rsp
	0x140831e67: add rsi, 8
	0x140831e6b: push rdi
	0x140831e6c: movabs rdi, 0x65ffae00
	0x140831e76: not rdi
	0x140831e79: sub rdi, 0x5bf7bcdc
	0x140831e80: push r10
	0x140831e82: movabs r10, 0xc1f76ae5
	0x140831e8c: add rdi, r10
	0x140831e8f: pop r10
	0x140831e91: add rsi, rdi
	0x140831e94: pop rdi
	0x140831e95: sub rsp, 8
	0x140831e99: mov qword ptr [rsp], rsi
	0x140831e9d: push qword ptr [rsp + 8]
	0x140831ea1: mov rsi, qword ptr [rsp]
	0x140831ea5: add rsp, 8
	0x140831eac: pop qword ptr [rsp]
	0x140831eaf: pop rsp
	0x140831eb7: push 0x4708252a
	0x140831ebc: push rbx
	0x140831ebd: pop qword ptr [rsp]
	0x140831ec0: push r11
	0x140831ec2: sub rsp, 8
	0x140831ec6: mov qword ptr [rsp], rax
	0x140831eca: movabs rax, 0x7767c9b6
	0x140831ed4: movabs r11, 0xc8fbef9
	0x140831ede: xor r11, rax
	0x140831ee5: push rdi
	0x140831ee6: mov rdi, rsp
	0x140831ee9: add rdi, 8
	0x140831eed: add rdi, 8
	0x140831ef4: xchg qword ptr [rsp], rdi
	0x140831ef8: pop rsp
	0x140831ef9: mov rbx, r11
	0x140831f00: add rsp, 8
	0x140831f07: xchg rbx, r12
	0x140831f0a: push r12
	0x140831f0c: not qword ptr [rsp]
	0x140831f10: pop r12
	0x140831f12: xchg rbx, r12
	0x140831f15: shr rbx, 2
	0x140831f19: push r12
	0x140831f1b: movabs r12, 0x27df7d1e
	0x140831f25: and r12, 0x5e9f7e8c
	0x140831f2c: shl r12, 3
	0x140831f30: add r12, -1
	0x140831f34: and r12, 0x3effb6c6
	0x140831f3b: xor r12, 0xb8ee917
	0x140831f42: add rbx, r12
	0x140831f49: add rsp, 8
	0x140831f4d: sub rsp, 8
	0x140831f54: push r15
	0x140831f56: mov r15, rsi
	0x140831f59: push r15
	0x140831f5b: pop qword ptr [rsp + 8]
	0x140831f63: add rsp, 8
	0x140831f67: movabs rsi, 0xbfffffffdf84d489
	0x140831f71: add rbx, 0x77bf8510
	0x140831f78: add rbx, rsi
	0x140831f7b: sub rbx, 0x77bf8510
	0x140831f82: pop rsi
Load [EBP+0x145](STATIC)
bytecode=0x14094103b
	0x140831f83: add qword ptr [r13], rbx
	0x140831f8b: add rsp, 8
	0x140831f8f: xor r10, 0x594d5d99
	0x140831f96: push r10
	0x140831ff5: pop r9
	0x140831ff7: xor r9, 0x594d5d99
	0x140831ffe: jmp r9
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941043
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x1407930b1: mov r15, rbp
	0x1407930c2: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407930d0: mov r15, qword ptr [r15]
	0x1407930da: add r15, 0
	0x1407930f2: movzx r11, word ptr [r15]
	0x1407930fc: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140793109: mov rsp, qword ptr [r11]
	0x14079311d: mov r13, rbp
	0x140793120: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x140793127: mov r15d, dword ptr [r13]
	0x14079312b: mov r14, 0x7c5ea8e7
	0x140793132: mov r9, rbp
	0x140793135: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079313c: xor dword ptr [r9], r14d
	0x14079313f: and r15d, 1
	0x140793146: cmp r15d, 0
	0x14079314d: je 0x140793165
	0x1407931a9: mov r12, rbp
	0x1407931ac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407931c4: mov r12, qword ptr [r12]
	0x1407931cf: add r12, 4
	0x1407931d9: movzx r12, word ptr [r12]
	0x1407931eb: mov rax, rbp
	0x1407931ee: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x140793205: mov rax, qword ptr [rax]
	0x140793216: mov r15, rbp
	0x14079322a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140793231: add r12d, dword ptr [r15]
	0x14079324f: mov rdx, rbp
	0x140793259: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140793263: xor dword ptr [rdx], r12d
	0x140793266: and r12, 0xffff
	0x14079328f: shl r12, 3
	0x140793293: add rax, r12
	0x1407932ab: mov r11, qword ptr [rax]
	0x1407932b8: mov r12, rbp
	0x1407932cc: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941049
	0x1407932d3: add qword ptr [r12], 6
	0x1407932db: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x14085847e: mov rdx, 0x1a8ab2d5
	0x140858485: mov r12, rbp
	0x140858488: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085848f: add dword ptr [r12], edx
	0x14085849a: mov rsi, rbp
	0x14085849d: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408584a4: mov rsi, qword ptr [rsi]
	0x1408584b8: add rsi, 2
	0x1408584c6: movzx r15, word ptr [rsi]
	0x1408584d0: mov rcx, rbp
	0x1408584d9: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408584e0: sub r15d, dword ptr [rcx]
	0x1408584f7: mov r14, rbp
	0x1408584fa: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x140858508: xor r15d, dword ptr [r14]
	0x140858526: mov rsi, rbp
	0x140858529: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140858537: sub dword ptr [rsi], 0x60c46d11
	0x14085853d: mov rbx, rbp
	0x140858540: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140858558: mov dl, byte ptr [rbx]
	0x14085855a: cmp dl, 0xb3
	0x14085855d: jbe 0x14085856d
	0x14085856d: mov rsi, rbp
	0x14085857e: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14085858f: add word ptr [rsi], r15w
	0x1408585a4: mov r13, rbp
	0x1408585ae: add r9, 0x400
	0x1408585b5: add r13, 0x145
	0x1408585bc: add r9, 0x800
	0x1408585c6: mov r10, 0
Load [EBP+0x145](STATIC)
	0x1408585d4: mov r13, qword ptr [r13]
	0x1408585d8: add r13, 0xa
	0x1408585e6: mov rbx, rbp
	0x1408585fa: movzx rax, word ptr [r13]
	0x14085860d: add rax, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140858625: mov rax, qword ptr [rax]
	0x140858628: add r9, rax
	0x14085862b: pushfq
	0x140858633: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14085863d: mov rbx, qword ptr [rbx]
	0x14085864e: add rbx, 4
	0x140858655: mov r10w, word ptr [rbx]
	0x14085871b: mov rcx, rbp
	0x140858725: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140858733: add dword ptr [rcx], r10d
	0x14085873c: mov rdi, rbp
	0x14085875d: pop r9
	0x14085875f: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085877b: and dword ptr [rdi], 0x30f68fba
	0x140858793: mov rcx, rbp
	0x140858796: add rcx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408587ae: sub word ptr [rcx], r10w
	0x1408587b9: mov r15, rbp
	0x1408587cd: add r15, 0xd6
	0x1408587de: mov r12, rbp
Load [EBP+0xd6](STATIC)
	0x1408587e8: movzx r15, word ptr [r15]
	0x1408587ec: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1408587f2: mov r15, qword ptr [r15]
	0x140858802: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x14085881a: movzx r12, word ptr [r12]
	0x140858834: add r12w, 0xbf0c
	0x140858841: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140858844: add qword ptr [r12], r15
	0x140858848: pushfq
	0x14085884c: mov rsi, 0
	0x140858853: mov rdx, rbp
	0x140858856: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140858864: mov rdx, qword ptr [rdx]
	0x14085886e: add rdx, 0xc
	0x140858875: mov sil, byte ptr [rdx]
	0x140858878: cmp sil, 0
	0x14085887c: je 0x1408588cb
	0x140858890: mov rdx, rbp
	0x140858893: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14085889d: mov rdx, qword ptr [rdx]
	0x1408588ae: add rdx, 6
	0x1408588b5: mov si, word ptr [rdx]
	0x1408588b8: add rsi, rbp
	0x1408588bb: pop r15
Store VM_REG [EBP+0x26]
	0x1408588bd: mov qword ptr [rsi], r15
	0x140858908: mov r14, rbp
	0x14085890e: add r14, 0x145
	0x140858915: mov r8, rbp
	0x140858918: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x140858929: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x14085892c: mov r14, qword ptr [r14]
	0x14085892f: add r14, 8
	0x14085893d: movzx r14, word ptr [r14]
	0x140858941: mov r13, rbp
	0x140858944: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085894e: sub r14d, dword ptr [r13]
	0x14085895c: add r14d, 0x9902061
	0x140858963: mov r9, rbp
	0x14085896d: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140858974: xor dword ptr [r9], r14d
	0x14085897a: and r14, 0xffff
	0x140858994: shl r14, 3
	0x14085899b: add r8, r14
	0x1408589a5: mov r13, qword ptr [r8]
	0x1408589b6: mov r14, rbp
	0x1408589b9: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941056
	0x1408589c0: add qword ptr [r14], 0xd
	0x1408589c7: jmp r13
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941064
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140804fd2: mov rax, rbp
	0x140804fd5: sub rcx, rcx
	0x140804fd8: add rax, 0x145
	0x140804fde: xor r9, 0xffff
	0x140804fe8: add r9, rsi
Load [EBP+0x145](STATIC)
	0x140804feb: mov rax, qword ptr [rax]
	0x140804fee: and r9, 0x90
	0x140804ff5: and rcx, rdx
	0x140804ff8: add rax, 0
	0x140804ffe: mov rdx, rsi
	0x140805001: xor rcx, 8
	0x140805008: movzx rax, word ptr [rax]
	0x14080501a: mov r13, rbp
	0x14080501d: sub r9, -0x80000000
	0x140805024: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140805032: mov r13, qword ptr [r13]
	0x140805036: xor rcx, rcx
	0x140805039: mov rbx, rbp
	0x14080503c: or r9, rcx
	0x14080504d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140805054: xor eax, dword ptr [rbx]
	0x14080506b: sub eax, 0x64960eaf
	0x14080507a: mov r8, rbp
	0x140805083: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080508a: or dword ptr [r8], eax
	0x14080508d: and rax, 0xffff
	0x1408050a7: shl rax, 3
	0x1408050ab: add r13, rax
	0x1408050b5: mov r12, qword ptr [r13]
	0x1408050c0: mov r8, rbp
	0x1408050c3: mov rax, 0
	0x1408050ca: add r8, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408050d4: mov qword ptr [r8], r12
	0x1408050e1: mov r15, rbp
	0x1408050e4: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408050eb: and dword ptr [r15], 0x57333fc5
	0x1408050f2: mov r10, 0
	0x1408050fc: mov r8, rbp
	0x14080510d: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080511b: mov r8, qword ptr [r8]
	0x140805121: add r8, 2
	0x14080512f: sub r12, rdx
	0x140805132: mov r10w, word ptr [r8]
	0x140805136: or r9, r8
	0x140805139: mov r11, rbp
	0x140805151: add r11, 0xbf
	0x140805166: or r12, 0x80
Load [EBP+0xbf](STATIC)
	0x14080516d: add r10d, dword ptr [r11]
	0x140805177: mov rdi, rbp
	0x140805188: add rdi, 0x120
Load [EBP+0x120](STATIC)
	0x140805199: xor r10d, dword ptr [rdi]
	0x1408051ad: mov r14, rbp
	0x1408051b0: xor r9, 8
	0x1408051b7: mov rcx, r12
	0x1408051ba: add r14, 0xbf
	0x1408051c8: add rcx, r9
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408051cb: and dword ptr [r14], r10d
	0x1408051ce: mov r14, rbp
	0x1408051d8: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408051e6: add dword ptr [r14], 0x4d8e9739
	0x1408051f4: mov r14, rbp
	0x1408051f7: sub rcx, 0x10
	0x1408051fe: add r14, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14080520c: xor word ptr [r14], r10w
	0x140805228: mov r8, rbp
	0x14080522b: add r8, 0xbf
	0x140805232: and r14, 0x90
	0x140805239: xor rcx, 0x40
	0x140805240: mov r9, rbp
	0x140805243: sub rax, -0x80000000
	0x140805249: add r9, 0x145
	0x140805257: xor rax, 0xffff
Load [EBP+0x145](STATIC)
	0x14080525d: mov r9, qword ptr [r9]
	0x140805260: add r9, 4
	0x140805267: movzx r11, word ptr [r9]
	0x14080526b: add rax, rcx
	0x140805275: mov r10, rax
	0x1408052a4: mov rdi, rbp
	0x1408052ae: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408052ca: xor r11d, dword ptr [rdi]
	0x1408052d0: mov rbx, rbp
	0x1408052d9: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408052ed: add dword ptr [rbx], r11d
	0x1408052fa: mov r9, rbp
	0x140805303: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080530a: xor dword ptr [r9], 0x3856de74
	0x140805311: mov rdi, rbp
	0x140805314: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140805328: mov r12b, byte ptr [rdi]
	0x14080532b: cmp r12b, 0xb4
	0x14080532f: jbe 0x140805343
	0x140805346: mov rax, rbp
	0x140805349: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080534f: xor word ptr [rax], r11w
	0x140805353: mov r12, rbp
	0x140805356: add r12, 0x145
	0x14080535d: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x140805360: mov r12, qword ptr [r12]
	0x140805364: add rsi, 0xd6
	0x14080536b: add r12, 2
Load [EBP+0xd6](STATIC)
	0x140805372: movzx rsi, word ptr [rsi]
	0x140805376: mov r15, rbp
	0x140805379: movzx r13, word ptr [r12]
	0x14080537e: mov rax, rbp
	0x140805381: add si, 0x60b4
	0x140805386: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080538c: add r13d, dword ptr [rax]
	0x14080538f: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140805392: mov rsi, qword ptr [rsi]
	0x140805395: add r15, 0x16e
Deref(t796,ds)
	0x14080539c: mov esi, dword ptr [rsi]
Load [EBP+0x16e](STATIC)
	0x14080539e: movzx r15, word ptr [r15]
	0x1408053a2: add r15, rbp
Store VM_REG [EBP+0xe8]
	0x1408053a5: mov dword ptr [r15], esi
	0x1408053a8: add r15, 4
Store VM_REG [EBP+0xec]
	0x1408053af: mov dword ptr [r15], 0
	0x1408053b6: mov rdi, 0x200
	0x1408053bd: and r13, 1
	0x1408053cb: add r14, 0x800
	0x1408053e3: mov al, 0x17
	0x1408053e5: mov rcx, rbp
	0x1408053e8: or r14, 0x7fffffff
	0x1408053ef: and rdi, r14
	0x1408053f2: add rcx, 0x130
	0x1408053f9: or r14, r11
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408053fc: sub byte ptr [rcx], al
	0x1408053fe: xor r14, r14
	0x140805408: xor r14, 0x88
	0x140805412: and r13, 0x20
	0x140805419: mov r9, 0x12
	0x140805420: push 0x3c67fa0b
	0x140805425: push 0x5e751057
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542a: mov qword ptr [rsp], rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14080542e: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140805431: mov r15, qword ptr [rsp]
	0x140805435: push r10
	0x140805437: mov r10, rsp
	0x14080543a: add r10, 8
	0x14080543e: push 0x645c3421
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x200
	0x140805443: mov qword ptr [rsp], rdi
	0x140805447: push rbx
	0x140805448: movabs rbx, 0x58effc32
	0x140805452: push rbx
	0x140805453: pop rdi
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x140805454: mov rbx, qword ptr [rsp]
	0x140805458: add rsp, 8
	0x14080545c: sub rsp, 8
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x140805463: mov qword ptr [rsp], rcx
	0x140805467: movabs rcx, 0x1fb779e1
	0x140805471: xor rcx, 0x4008e6d9
	0x140805478: xor rdi, rcx
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14080547b: mov rcx, qword ptr [rsp]
	0x14080547f: add rsp, 8
	0x140805483: push rax
	0x140805484: movabs rax, 0x776f2583
	0x14080548e: xor rdi, rax
	0x140805491: pop rax
	0x140805492: xor rdi, 0x703f4681
	0x140805499: add r10, rdi
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14080549c: mov rdi, qword ptr [rsp]
	0x1408054a0: add rsp, 8
	0x1408054a7: sub rsp, 8
	0x1408054ae: mov qword ptr [rsp], r10
	0x1408054b2: push qword ptr [rsp + 8]
	0x1408054b6: pop r10
	0x1408054b8: pop qword ptr [rsp]
	0x1408054bb: mov rsp, qword ptr [rsp]
	0x1408054bf: sub r14, r15
	0x1408054c2: add r13, 0xffff
	0x1408054c9: or r14, 0x10
	0x1408054d0: xor rdi, 1
	0x1408054d7: add r9, -0x80000000
	0x1408054de: xor r9, 0xffffffff80000000
	0x1408054e5: xor r13, 8
	0x1408054ec: push r9
	0x1408054ee: mov r9, rsp
	0x1408054f1: add r9, 8
	0x1408054f5: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1408054fc: xchg qword ptr [rsp], r9
	0x140805500: pop rsp
	0x140805501: push r8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xbf + context) & 0xffffffffffffffff)
	0x140805503: pop qword ptr [rsp]
	0x140805506: push rbx
	0x140805507: push rax
	0x140805508: push rbp
	0x140805509: movabs rbp, 0x7ff6604a
	0x140805513: movabs rax, 0xf58d95c0
	0x14080551d: sub rax, rbp
	0x140805520: pop rbp
	0x140805521: push rax
	0x140805522: add qword ptr [rsp], 0x75df38fd
	0x14080552a: pop rbx
	0x14080552b: sub rbx, 0x75df38fd
	0x140805532: mov rax, qword ptr [rsp]
	0x140805536: add rsp, 8
	0x14080553d: mov r8, rbx
	0x140805540: pop rbx
	0x140805541: push r13
	0x140805543: movabs r13, 0x6fff9f8e
	0x14080554d: and r8, r13
	0x140805550: pop r13
	0x140805552: push 0x2a097355
	0x140805557: mov qword ptr [rsp], rcx
	0x14080555b: movabs rcx, 0x2f3b7035
	0x140805565: xor r8, rcx
	0x14080556c: add rsp, 8
	0x140805570: or r8, 0x7e1f37fa
	0x140805577: shl r8, 2
	0x14080557b: shr r8, 4
	0x14080557f: push r12
	0x140805581: movabs r12, 0x5ca80437
	0x14080558b: shl r12, 1
	0x14080558f: push 0x136abbe8
	0x140805594: mov qword ptr [rsp], rbx
	0x140805598: mov rbx, -0x54266261
	0x14080559f: add r12, rbx
	0x1408055a6: push r14
	0x1408055a8: mov r14, rsp
	0x1408055ab: add r14, 8
	0x1408055af: add r14, 8
	0x1408055b6: xchg qword ptr [rsp], r14
	0x1408055ba: pop rsp
	0x1408055bb: xor r8, r12
	0x1408055be: pop r12
	0x1408055c0: push rbp
	0x1408055c1: push r9
	0x1408055c3: movabs r9, 0x7a867ab6
	0x1408055cd: mov rbp, r9
	0x1408055d0: pop r9
	0x1408055d2: xor r8, rbp
	0x1408055d5: pop rbp
	0x1408055d6: add r15, r8
	0x1408055d9: pop r8
	0x1408055db: add rdi, 0x7fffffff
	0x1408055e2: mov rcx, 0xd5
	0x1408055e9: or r13, 0x40
	0x1408055f0: push 0x35f3c600
	0x1408055f5: push 0x497a6267
	0x1408055fa: push r13
	0x1408055fc: mov r13, rcx
	0x1408055ff: mov qword ptr [rsp + 8], r13
	0x140805604: pop r13
	0x140805606: pop qword ptr [rsp]
	0x140805609: push 0x3a2bf514
	0x14080560e: mov qword ptr [rsp], r10
	0x140805612: push r13
	0x140805614: movabs r13, 0x5a6d8c24
	0x14080561e: movabs r10, 0xd9eb41dc
	0x140805628: add r10, 0xe7f789a
	0x14080562f: sub r10, r13
	0x140805632: sub r10, 0xe7f789a
	0x14080563d: add rsp, 8
	0x140805641: inc r10
	0x140805644: neg r10
	0x140805647: push rdi
	0x140805648: movabs rdi, 0x7a7f8b20
	0x140805652: xor r10, rdi
	0x140805655: pop rdi
	0x140805656: push 0x81e4e90
	0x14080565b: mov qword ptr [rsp], r14
	0x14080565f: movabs r14, 0xffffffff7b320e67
	0x140805669: sub r10, r14
	0x14080566c: pop r14
	0x14080566e: mov rcx, r10
	0x140805671: pop r10
	0x140805673: shr rcx, 8
	0x140805677: add rcx, 0x7f7e4291
	0x14080567e: xor rcx, 0x7ffe0e42
	0x140805685: push r14
	0x140805687: push r8
	0x140805689: movabs r8, 0x2f5fc02a
	0x140805693: add r8, -0x2f5fc02a
	0x14080569a: mov r14, r8
	0x14080569d: pop r8
	0x14080569f: add r14, 0x5d9f82c4
	0x1408056a6: add r14, r15
	0x1408056a9: sub r14, 0x5d9f82c4
	0x1408056b0: push rax
	0x1408056b1: mov rax, 0
	0x1408056b8: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x14094106a
	0x1408056bb: add qword ptr [rax], rcx
	0x1408056be: pop rax
	0x1408056c3: add rsp, 8
	0x1408056c7: push qword ptr [rsp]
	0x1408056ca: pop rcx
	0x1408056cb: add rsp, 8
	0x1408056d6: mov r9, rbp
	0x1408056e3: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x1408056fb: mov rcx, qword ptr [r9]
	0x140805705: add rcx, 0x30f18592
	0x14080570c: push rcx
	0x14080575c: pop rcx
	0x14080575d: sub rcx, 0x30f18592
	0x140805764: jmp rcx
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t807
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48094
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a480a0
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140941076
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941084
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088151e: mov r10, 0
	0x140881536: mov r14, rbp
	0x140881542: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140881550: mov r14, qword ptr [r14]
	0x140881560: add r14, 0
	0x140881574: mov r10w, word ptr [r14]
	0x14088157b: mov rbx, rbp
	0x14088158c: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140881593: xor r10d, dword ptr [rbx]
	0x1408815a7: mov r15, rbp
	0x1408815bb: add r15, 0x120
Load [EBP+0x120](STATIC)
	0x1408815d7: sub r10d, dword ptr [r15]
	0x1408815eb: mov r14, rbp
	0x1408815ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140881606: xor dword ptr [r14], r10d
	0x140881612: mov rsi, rbp
	0x140881615: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088162a: or dword ptr [rsi], 0x553689aa
	0x14088163a: mov rdx, rbp
	0x14088163d: add rdx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140881655: xor word ptr [rdx], r10w
	0x140881660: mov r15, rbp
	0x14088166c: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140881676: mov r15, qword ptr [r15]
	0x140881682: add r15, 3
	0x140881689: movzx r13, word ptr [r15]
	0x140881694: mov r12, rbp
	0x1408816a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408816b1: add r13d, dword ptr [r12]
	0x1408816c5: mov r12, rbp
	0x1408816c8: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408816e4: sub r13d, dword ptr [r12]
	0x1408816f2: mov r12, rbp
	0x1408816f5: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408816ff: or dword ptr [r12], r13d
	0x14088170a: mov rdx, rbp
	0x14088171e: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140881725: or dword ptr [rdx], 0x63caa920
	0x140881739: mov r15, rbp
	0x140881743: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14088174a: mov dl, byte ptr [r15]
	0x14088174d: cmp dl, 0xfa
	0x140881750: jbe 0x140881767
	0x14088176e: mov r12, rbp
	0x140881774: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088177e: sub word ptr [r12], r13w
	0x140881783: mov r9, rbp
	0x140881786: mov r8, 0x7a89bc3b
	0x14088178d: add r9, 0xd6
	0x140881794: mov rdx, rbp
	0x140881797: add rdx, 0xbf
	0x14088179e: mov r12, rbp
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408817a1: xor dword ptr [rdx], r8d
Load [EBP+0xd6](STATIC)
	0x1408817a4: movzx r9, word ptr [r9]
	0x1408817a8: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1408817af: movzx r12, word ptr [r12]
	0x1408817b4: add r12w, 0xdb78
	0x1408817ba: xor r9w, 0xcc61
	0x1408817c0: add r9, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1408817c3: mov r9, qword ptr [r9]
Deref(t812,ds)
	0x1408817c6: mov r9d, dword ptr [r9]
	0x1408817c9: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408817cc: xor dword ptr [r12], r9d
	0x1408817d0: pushfq
	0x1408817d1: add r12, 4
Store VM_REG [EBP+0xec]
	0x1408817d8: mov dword ptr [r12], 0
	0x1408817ee: mov r13, 0
	0x1408817f5: mov r11, rbp
	0x140881809: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14088181a: mov r11, qword ptr [r11]
	0x140881827: add r11, 2
	0x140881843: mov r13b, byte ptr [r11]
	0x140881846: cmp r13b, 0
	0x14088184a: je 0x14088189a
	0x14088185a: mov r11, rbp
	0x14088186b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140881875: mov r11, qword ptr [r11]
	0x14088187f: add r11, 5
	0x140881886: mov r13w, word ptr [r11]
	0x14088188a: add r13, rbp
	0x14088188d: pop rdi
Store VM_REG [EBP+0x26]
	0x14088188e: mov qword ptr [r13], rdi
	0x1408818e5: mov r13, rbp
	0x1408818e8: mov rsi, rbp
	0x1408818f9: add r13, 0x145
	0x140881907: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140881915: mov rsi, qword ptr [rsi]
Load [EBP+0x145](STATIC)
	0x140881926: mov r13, qword ptr [r13]
	0x14088192a: add r13, 7
	0x140881946: movzx r13, word ptr [r13]
	0x14088194b: mov rcx, rbp
	0x14088194e: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088195f: add r13d, dword ptr [rcx]
	0x140881984: mov rbx, rbp
	0x140881998: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408819b4: add dword ptr [rbx], r13d
	0x1408819be: and r13, 0xffff
	0x1408819c5: shl r13, 3
	0x1408819d7: add rsi, r13
	0x1408819da: mov r9, qword ptr [rsi]
	0x1408819e3: mov r8, rbp
	0x1408819e6: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094108d
	0x1408819ed: add qword ptr [r8], 9
	0x1408819f4: jmp r9
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x131](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140941097
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410a5
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407657a1: mov r14, rbp
	0x1407657a4: add r14, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407657ab: mov ebx, dword ptr [r14]
	0x1407657ae: and ebx, 1
	0x1407657b4: cmp ebx, 0
	0x1407657ba: je 0x1407657d1
	0x1407657c0: mov r14, rbp
	0x1407657c3: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407657ca: add dword ptr [r14], 0x4798db5c
	0x1407657db: mov r9, rbp
	0x1407657de: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407657f3: mov r9, qword ptr [r9]
	0x1407657fd: add r9, 5
	0x140765804: movzx r13, word ptr [r9]
	0x140765808: mov rcx, rbp
	0x14076580b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765819: xor r13d, dword ptr [rcx]
	0x14076581c: mov rdi, rbp
	0x14076582d: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x140765834: add r13d, dword ptr [rdi]
	0x14076583e: mov r8, rbp
	0x140765848: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076585d: sub dword ptr [r8], r13d
	0x140765863: mov rbx, rbp
	0x14076586c: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140765881: or dword ptr [rbx], 0x124f672
	0x140765887: mov rbx, rbp
	0x14076588a: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140765897: mov r9b, byte ptr [rbx]
	0x14076589a: cmp r9b, 0xe6
	0x14076589e: jbe 0x1407658ae
	0x1407658a7: sub r13d, 0x673d4bb8
	0x1407658bc: mov r12, rbp
	0x1407658c9: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407658d3: xor word ptr [r12], r13w
	0x1407658d8: mov rdx, rbp
	0x1407658db: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407658e2: mov r11d, dword ptr [rdx]
	0x1407658e5: and r11d, 1
	0x1407658ec: cmp r11d, 0
	0x1407658f3: je 0x140765909
	0x1407658f9: mov rdx, rbp
	0x1407658fc: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140765903: and dword ptr [rdx], 0x25c8a35d
	0x140765913: mov rcx, 0
	0x140765928: mov r11, rbp
	0x14076592e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076593c: mov r11, qword ptr [r11]
	0x140765946: add r11, 7
	0x140765950: mov cx, word ptr [r11]
	0x14076595e: mov r12, rbp
	0x140765961: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765971: add ecx, dword ptr [r12]
	0x14076598f: mov r11, rbp
	0x140765999: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407659a0: sub dword ptr [r11], ecx
	0x1407659a3: mov rsi, rbp
	0x1407659ad: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407659be: or dword ptr [rsi], 0x147e28ae
	0x1407659c4: mov r11, rbp
	0x1407659c7: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407659ce: add word ptr [r11], cx
	0x1407659d5: mov r14, rbp
	0x1407659df: mov rcx, rbp
	0x1407659ec: add rcx, 0x16e
	0x1407659f3: add r14, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407659fa: movzx r14, word ptr [r14]
	0x140765a05: add r14, rbp
Load [EBP+0x16e](STATIC)
	0x140765a0f: movzx rcx, word ptr [rcx]
Load [EBP+0x14d](VM_REGISTER)
	0x140765a13: mov r14, qword ptr [r14]
Deref(t826,ds)
	0x140765a16: mov r14d, dword ptr [r14]
	0x140765a19: xor cx, 0xc397
	0x140765a1e: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140765a21: cmp dword ptr [rcx], r14d
	0x140765a24: pushfq
	0x140765a33: mov r13, 0
	0x140765a44: mov r14, rbp
	0x140765a47: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765a51: mov r14, qword ptr [r14]
	0x140765a62: add r14, 0
	0x140765a70: mov r13b, byte ptr [r14]
	0x140765a73: cmp r13b, 0
	0x140765a77: je 0x140765ac9
	0x140765a7d: mov r14, rbp
	0x140765a83: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765a98: mov r14, qword ptr [r14]
	0x140765a9b: add r14, 3
	0x140765aa2: mov r13w, word ptr [r14]
	0x140765ab4: add r13, rbp
	0x140765abe: pop r14
Store VM_REG [EBP+0x26]
	0x140765ac0: mov qword ptr [r13], r14
	0x140765adc: mov r11b, 0x1c
	0x140765ae2: mov rdi, rbp
	0x140765ae5: add rdi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140765af5: or byte ptr [rdi], r11b
	0x140765aff: mov r14, rbp
	0x140765b02: mov rdi, rbp
	0x140765b0c: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x140765b1a: mov rdi, qword ptr [rdi]
	0x140765b20: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765b27: mov r14, qword ptr [r14]
	0x140765b30: add r14, 1
	0x140765b44: movzx r14, word ptr [r14]
	0x140765b48: mov r8, rbp
	0x140765b52: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765b67: xor r14d, dword ptr [r8]
	0x140765b70: xor r14d, 0x7235e557
	0x140765b77: mov rcx, rbp
	0x140765b7a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140765b81: or dword ptr [rcx], r14d
	0x140765b87: and r14, 0xffff
	0x140765b9c: shl r14, 3
	0x140765ba7: add rdi, r14
	0x140765bad: mov r12, qword ptr [rdi]
	0x140765bba: mov rsi, rbp
	0x140765bbd: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410ae
	0x140765bc4: add qword ptr [rsi], 9
	0x140765bcb: jmp r12
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410d0
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410ea
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca275: push r10
	0x1407ca277: and r10d, 0x40
	0x1407ca27e: je 0x1407ca2af
	0x1407ca28b: mov rax, rbp
	0x1407ca295: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca2a2: mov byte ptr [rax], 1
	0x1407ca2b6: pop r10
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407caa32: mov rdi, rbp
	0x1407caa3c: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411a2
	0x1407caa43: add qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca275: push r10
	0x1407ca277: and r10d, 0x40
	0x1407ca27e: je 0x1407ca2af
	0x1407ca28b: mov rax, rbp
	0x1407ca295: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca2a2: mov byte ptr [rax], 1
	0x1407ca2b6: pop r10
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410f7
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x14086130f: mov rcx, rbp
	0x140861319: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140861323: mov rcx, qword ptr [rcx]
	0x140861334: add rcx, 0
	0x140861348: mov r10d, dword ptr [rcx]
	0x140861352: mov r13, rbp
	0x140861355: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140861371: add r10d, dword ptr [r13]
	0x140861375: mov r13, rbp
	0x140861386: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x14086138d: add r10d, dword ptr [r13]
	0x1408613ab: mov r12, rbp
	0x1408613b5: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408613c3: add dword ptr [r12], 0x616ef747
	0x1408613dc: mov r14, rbp
	0x1408613e5: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408613ef: add dword ptr [r14], r10d
	0x1408613f9: mov r9, rbp
	0x140861411: add r9, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140861418: and dword ptr [r9], r10d
	0x14086142c: mov rdi, rbp
	0x140861444: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140861452: mov rdi, qword ptr [rdi]
	0x140861463: add rdi, 6
	0x14086146a: movzx r13, word ptr [rdi]
	0x140861483: mov rax, rbp
	0x14086148d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140861493: add r13d, dword ptr [rax]
	0x140861499: mov rcx, rbp
	0x1408614ad: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408614c2: add r13d, dword ptr [rcx]
	0x1408614e4: mov rdi, rbp
	0x1408614fc: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140861506: sub dword ptr [rdi], 0x17edf20d
	0x14086150c: mov r15, rbp
	0x140861516: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14086151d: mov r10b, byte ptr [r15]
	0x140861520: cmp r10b, 0x70
	0x140861524: jbe 0x14086153b
	0x14086152d: add r13d, 0x3b8c9005
	0x14086153b: mov r8, rbp
	0x14086153e: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140861556: sub word ptr [r8], r13w
	0x14086155a: mov r10, rbp
	0x140861564: add r10, 0x16e
	0x140861575: mov r8, rbp
Load [EBP+0x16e](STATIC)
	0x140861578: movzx r10, word ptr [r10]
	0x14086157f: add r8, 0x58
	0x14086158c: xor r10w, 0xca84
	0x140861592: add r10, rbp
Load [EBP+0x58](STATIC)
	0x1408615a2: mov r8d, dword ptr [r8]
	0x1408615a5: add r8d, 0x262ea186
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1408615bd: add dword ptr [r10], r8d
	0x1408615c0: add r10, 4
Store VM_REG [EBP+0x68]
	0x1408615c7: mov dword ptr [r10], 0
	0x1408615f2: mov r12, rbp
	0x140861603: mov r13, rbp
	0x140861609: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140861621: mov r13, qword ptr [r13]
	0x140861633: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14086163a: mov r12, qword ptr [r12]
	0x14086163e: add r12, 4
	0x140861645: movzx r12, word ptr [r12]
	0x140861651: mov r11, rbp
	0x14086165b: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086166c: xor r12d, dword ptr [r11]
	0x14086166f: sub r12d, 0x67ef2507
	0x14086168b: mov rdx, rbp
	0x140861695: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408616aa: xor dword ptr [rdx], r12d
	0x1408616b4: and r12, 0xffff
	0x1408616bb: shl r12, 3
	0x1408616d0: add r13, r12
	0x1408616d3: mov rdi, qword ptr [r13]
	0x1408616de: mov r13, rbp
	0x1408616e8: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409410ff
	0x1408616ef: add qword ptr [r13], 8
	0x1408616f7: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x140834de4: mov rbx, 0
	0x140834deb: mov r10, rbp
	0x140834dee: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140834df5: mov r10, qword ptr [r10]
	0x140834df8: add r10, 0xa
	0x140834dff: mov bx, word ptr [r10]
	0x140834e03: add rbx, rbp
	0x140834e06: mov rdi, 0
	0x140834e0d: mov rdx, rbp
	0x140834e10: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140834e17: mov rdx, qword ptr [rdx]
	0x140834e1a: add rdx, 0
	0x140834e21: mov di, word ptr [rdx]
	0x140834e24: add rdi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140834e27: push qword ptr [rbx]
Load [EBP+0x155](VM_REGISTER)
	0x140834e29: push qword ptr [rdi]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140834e2b: pop qword ptr [rbx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140834e2d: pop qword ptr [rdi]
	0x140834e39: mov rax, rbp
	0x140834e3c: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140834e49: mov rax, qword ptr [rax]
	0x140834e56: add rax, 2
	0x140834e5f: mov edx, dword ptr [rax]
	0x140834e83: mov rax, rbp
	0x140834e9b: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x140834eb6: sub edx, dword ptr [rax]
	0x140834ec9: mov rbx, rbp
	0x140834ed3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140834eda: sub dword ptr [rbx], edx
	0x140834ee3: mov rax, rbp
	0x140834ee6: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140834ef6: sub dword ptr [rax], 0xbf2ae01
	0x140834efc: mov rbx, rbp
	0x140834f0c: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140834f1a: sub dword ptr [rbx], edx
	0x140834f23: mov rax, rbp
	0x140834f3b: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140834f4b: xor dword ptr [rax], edx
	0x140834f5b: mov rdx, rbp
	0x140834f5e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140834f73: mov rdx, qword ptr [rdx]
	0x140834f8b: add rdx, 8
	0x140834f92: movzx rsi, word ptr [rdx]
	0x140834fa0: mov r15, rbp
	0x140834fa3: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140834fb4: xor esi, dword ptr [r15]
	0x140834fc5: mov rdx, rbp
	0x140834fd6: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140834fe7: add esi, dword ptr [rdx]
	0x140834ff3: mov r14, rbp
	0x140834ff6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140834ffd: xor dword ptr [r14], esi
	0x140835032: mov rdi, rbp
	0x14083503f: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140835050: mov r9b, byte ptr [rdi]
	0x140835053: cmp r9b, 0x9c
	0x140835057: jbe 0x140835071
	0x14083506b: add esi, 0x3a989bdd
	0x14083507a: mov r15, rbp
	0x140835092: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408350a3: sub word ptr [r15], si
	0x1408350a7: mov r8, rbp
	0x1408350b4: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1408350c9: movzx r8, word ptr [r8]
	0x1408350e1: xor r8w, 0x162b
	0x1408350ee: mov r12, rbp
	0x1408350f4: add r8, rbp
	0x1408350fd: add r12, 0x58
Load [EBP+0x58](STATIC)
	0x140835104: mov r12d, dword ptr [r12]
	0x14083510b: add r12d, 0x585ee16a
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14083511e: sub dword ptr [r8], r12d
	0x140835121: add r8, 4
Store VM_REG [EBP+0x68]
	0x140835136: mov dword ptr [r8], 0
	0x140835174: mov rax, rbp
	0x140835185: add rax, 0xab
	0x140835198: mov r11, rbp
	0x1408351a2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1408351ba: mov r11, qword ptr [r11]
Load [EBP+0xab](STATIC)
	0x1408351d2: mov rax, qword ptr [rax]
	0x1408351df: add r11, 6
	0x1408351f0: movzx r11, word ptr [r11]
	0x1408351fb: mov r9, rbp
	0x140835201: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083520f: sub r11d, dword ptr [r9]
	0x140835215: add r11d, 0x5dbdfddd
	0x14083523e: and r11, 0xffff
	0x14083524c: shl r11, 3
	0x140835257: add rax, r11
	0x14083526f: mov rdx, qword ptr [rax]
	0x140835279: mov r15, rbp
	0x14083527c: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094110b
	0x140835283: add qword ptr [r15], 0xc
	0x14083528a: jmp rdx
handlers outputs:



	0x140834de4: mov rbx, 0
	0x140834deb: mov r10, rbp
	0x140834dee: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140834df5: mov r10, qword ptr [r10]
	0x140834df8: add r10, 0xa
	0x140834dff: mov bx, word ptr [r10]
	0x140834e03: add rbx, rbp
	0x140834e06: mov rdi, 0
	0x140834e0d: mov rdx, rbp
	0x140834e10: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140834e17: mov rdx, qword ptr [rdx]
	0x140834e1a: add rdx, 0
	0x140834e21: mov di, word ptr [rdx]
	0x140834e24: add rdi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140834e27: push qword ptr [rbx]
Load [EBP+0x7a](VM_REGISTER)
	0x140834e29: push qword ptr [rdi]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140834e2b: pop qword ptr [rbx]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140834e2d: pop qword ptr [rdi]
	0x140834e39: mov rax, rbp
	0x140834e3c: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140834e49: mov rax, qword ptr [rax]
	0x140834e56: add rax, 2
	0x140834e5f: mov edx, dword ptr [rax]
	0x140834e83: mov rax, rbp
	0x140834e9b: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x140834eb6: sub edx, dword ptr [rax]
	0x140834ec9: mov rbx, rbp
	0x140834ed3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140834eda: sub dword ptr [rbx], edx
	0x140834ee3: mov rax, rbp
	0x140834ee6: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140834ef6: sub dword ptr [rax], 0xbf2ae01
	0x140834efc: mov rbx, rbp
	0x140834f0c: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140834f1a: sub dword ptr [rbx], edx
	0x140834f23: mov rax, rbp
	0x140834f3b: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140834f4b: xor dword ptr [rax], edx
	0x140834f5b: mov rdx, rbp
	0x140834f5e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140834f73: mov rdx, qword ptr [rdx]
	0x140834f8b: add rdx, 8
	0x140834f92: movzx rsi, word ptr [rdx]
	0x140834fa0: mov r15, rbp
	0x140834fa3: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140834fb4: xor esi, dword ptr [r15]
	0x140834fc5: mov rdx, rbp
	0x140834fd6: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140834fe7: add esi, dword ptr [rdx]
	0x140834ff3: mov r14, rbp
	0x140834ff6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140834ffd: xor dword ptr [r14], esi
	0x140835032: mov rdi, rbp
	0x14083503f: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140835050: mov r9b, byte ptr [rdi]
	0x140835053: cmp r9b, 0x9c
	0x140835057: jbe 0x140835071
	0x14083506b: add esi, 0x3a989bdd
	0x14083507a: mov r15, rbp
	0x140835092: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408350a3: sub word ptr [r15], si
	0x1408350a7: mov r8, rbp
	0x1408350b4: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1408350c9: movzx r8, word ptr [r8]
	0x1408350e1: xor r8w, 0x162b
	0x1408350ee: mov r12, rbp
	0x1408350f4: add r8, rbp
	0x1408350fd: add r12, 0x58
Load [EBP+0x58](STATIC)
	0x140835104: mov r12d, dword ptr [r12]
	0x14083510b: add r12d, 0x585ee16a
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14083511e: sub dword ptr [r8], r12d
	0x140835121: add r8, 4
Store VM_REG [EBP+0x68]
	0x140835136: mov dword ptr [r8], 0
	0x140835174: mov rax, rbp
	0x140835185: add rax, 0xab
	0x140835198: mov r11, rbp
	0x1408351a2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1408351ba: mov r11, qword ptr [r11]
Load [EBP+0xab](STATIC)
	0x1408351d2: mov rax, qword ptr [rax]
	0x1408351df: add r11, 6
	0x1408351f0: movzx r11, word ptr [r11]
	0x1408351fb: mov r9, rbp
	0x140835201: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083520f: sub r11d, dword ptr [r9]
	0x140835215: add r11d, 0x5dbdfddd
	0x14083523e: and r11, 0xffff
	0x14083524c: shl r11, 3
	0x140835257: add rax, r11
	0x14083526f: mov rdx, qword ptr [rax]
	0x140835279: mov r15, rbp
	0x14083527c: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941117
	0x140835283: add qword ptr [r15], 0xc
	0x14083528a: jmp rdx
handlers outputs:



basic block ends with indirect unconditional branch
	0x14087f5bc: mov r9, rbp
	0x14087f5d4: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14087f5db: mov r9, qword ptr [r9]
	0x14087f5e5: add r9, 6
	0x14087f5fa: movzx r14, word ptr [r9]
	0x14087f5fe: mov rcx, rbp
	0x14087f601: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087f60f: sub r14d, dword ptr [rcx]
	0x14087f627: mov r12, rbp
	0x14087f631: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14087f63f: xor r14d, dword ptr [r12]
	0x14087f685: mov r13, rbp
	0x14087f68f: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x14087f6a4: mov r12b, byte ptr [r13]
	0x14087f6a8: cmp r12b, 7
	0x14087f6ac: jbe 0x14087f6d5
	0x14087f6c7: xor r14d, 0x53b3fce6
	0x14087f6df: mov rdx, rbp
	0x14087f6e9: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14087f6fe: add word ptr [rdx], r14w
	0x14087f713: mov r12, 0
	0x14087f72b: mov rdx, rbp
	0x14087f734: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14087f749: mov rdx, qword ptr [rdx]
	0x14087f761: add rdx, 4
	0x14087f776: mov r12w, word ptr [rdx]
	0x14087f77a: mov rbx, rbp
	0x14087f77d: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087f792: sub r12d, dword ptr [rbx]
	0x14087f7fa: mov r8, rbp
	0x14087f804: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087f815: add dword ptr [r8], 0x34db89bd
	0x14087f82d: mov r10, rbp
	0x14087f841: add r10, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14087f848: add word ptr [r10], r12w
	0x14087f85a: mov rdx, 0xe1a7259
	0x14087f86a: mov rcx, rbp
	0x14087f882: mov r15, rbp
	0x14087f885: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087f8a1: sub dword ptr [rcx], edx
	0x14087f8aa: add r15, 0xd6
Load [EBP+0xd6](STATIC)
	0x14087f8b1: movzx r15, word ptr [r15]
	0x14087f8c6: sub r15w, 0x5e96
	0x14087f8da: add r15, rbp
	0x14087f8dd: mov rbx, rbp
	0x14087f8e7: add rbx, 0x16e
Load [EBP+0xe8](VM_REGISTER)
	0x14087f8f5: mov r15, qword ptr [r15]
Load [EBP+0x16e](STATIC)
	0x14087f8ff: movzx rbx, word ptr [rbx]
	0x14087f910: xor bx, 0xb1e0
	0x14087f922: add rbx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14087f925: add dword ptr [rbx], r15d
	0x14087f928: pushfq
	0x14087f92c: add rbx, 4
Store VM_REG [EBP+0x68]
	0x14087f93a: mov dword ptr [rbx], 0
	0x14087f947: mov r15, 0
	0x14087f94e: mov rsi, rbp
	0x14087f95f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087f977: mov rsi, qword ptr [rsi]
	0x14087f981: add rsi, 8
	0x14087f98f: mov r15b, byte ptr [rsi]
	0x14087f992: cmp r15b, 0
	0x14087f996: je 0x14087f9e7
	0x14087f99c: mov rsi, rbp
	0x14087f99f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14087f9a6: mov rsi, qword ptr [rsi]
	0x14087f9ac: add rsi, 0
	0x14087f9b6: mov r15w, word ptr [rsi]
	0x14087f9ca: add r15, rbp
	0x14087f9de: pop rcx
Store VM_REG [EBP+0x26]
	0x14087f9df: mov qword ptr [r15], rcx
	0x14087fa37: mov r9, rbp
	0x14087fa3a: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14087fa48: mov r9, qword ptr [r9]
	0x14087fa60: mov r11, rbp
	0x14087fa63: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14087fa6a: mov r11, qword ptr [r11]
	0x14087fa6d: add r11, 2
	0x14087fa7d: movzx r11, word ptr [r11]
	0x14087fa81: mov rcx, rbp
	0x14087fa84: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14087fa8b: add r11d, dword ptr [rcx]
	0x14087fa8e: xor r11d, 0x1b5cfdbc
	0x14087fac0: and r11, 0xffff
	0x14087fad8: shl r11, 3
	0x14087fadc: add r9, r11
	0x14087faf0: mov rdi, qword ptr [r9]
	0x14087faf3: mov rcx, rbp
	0x14087fb07: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941120
	0x14087fb0e: add qword ptr [rcx], 9
	0x14087fb15: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407b23a4: mov r15, rbp
	0x1407b23a7: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407b23ae: mov r15, qword ptr [r15]
	0x1407b23b9: add r15, 0xa
	0x1407b23c6: movzx r12, word ptr [r15]
	0x1407b23d4: mov r10, rbp
	0x1407b23d7: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407b23de: add r12d, dword ptr [r10]
	0x1407b23e1: mov r9, rbp
	0x1407b23e4: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b23eb: add dword ptr [r9], r12d
	0x1407b23ee: mov rdx, rbp
	0x1407b23f1: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b23f8: or dword ptr [rdx], 0x1f973947
	0x1407b23fe: mov r9, rbp
	0x1407b2401: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x1407b2408: mov r13b, byte ptr [r9]
	0x1407b240b: cmp r13b, 0xb1
	0x1407b240f: jbe 0x1407b2415
	0x1407b2415: mov rdx, rbp
	0x1407b2418: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407b241f: xor word ptr [rdx], r12w
	0x1407b243b: mov r12, rbp
	0x1407b244c: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2456: mov r12, qword ptr [r12]
	0x1407b2464: add r12, 0
	0x1407b2483: mov r11d, dword ptr [r12]
	0x1407b248e: mov rdx, rbp
	0x1407b2498: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b24b4: add r11d, dword ptr [rdx]
	0x1407b24eb: mov r15, rbp
	0x1407b24fc: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2506: xor dword ptr [r15], r11d
	0x1407b251e: mov rdx, rbp
	0x1407b2532: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b2546: or dword ptr [rdx], 0x386105fc
	0x1407b255d: mov r10, rbp
	0x1407b2563: add r10, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407b257b: add dword ptr [r10], r11d
	0x1407b258f: mov r12, rbp
	0x1407b2592: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407b25a0: or dword ptr [r12], r11d
	0x1407b25ae: mov rcx, rbp
	0x1407b25b1: mov r10, rbp
	0x1407b25b4: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407b25c9: movzx rcx, word ptr [rcx]
	0x1407b25d7: add cx, 0xa7ef
	0x1407b25dc: add rcx, rbp
	0x1407b25df: add r10, 0x58
Load [EBP+0x58](STATIC)
	0x1407b25e6: mov r10d, dword ptr [r10]
	0x1407b25e9: xor r10d, 0x2a47101
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407b25f0: add dword ptr [rcx], r10d
	0x1407b25f3: pushfq
	0x1407b25f4: add rcx, 4
Store VM_REG [EBP+0x68]
	0x1407b25fb: mov dword ptr [rcx], 0
	0x1407b2608: mov r11, 0
	0x1407b261c: mov rdx, rbp
	0x1407b261f: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2633: mov rdx, qword ptr [rdx]
	0x1407b2647: add rdx, 0xc
	0x1407b265c: mov r11b, byte ptr [rdx]
	0x1407b265f: cmp r11b, 0
	0x1407b2663: je 0x1407b26cc
	0x1407b266c: mov rdx, rbp
	0x1407b267c: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2689: mov rdx, qword ptr [rdx]
	0x1407b268c: add rdx, 8
	0x1407b2693: mov r11w, word ptr [rdx]
	0x1407b26a4: add r11, rbp
	0x1407b26b5: pop r14
Store VM_REG [EBP+0x26]
	0x1407b26b7: mov qword ptr [r11], r14
	0x1407b26ec: mov cl, 0x81
	0x1407b26fc: mov r9, rbp
	0x1407b2714: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407b2729: xor byte ptr [r9], cl
	0x1407b2748: mov rdi, rbp
	0x1407b2755: mov r13, rbp
	0x1407b2765: add r13, 0xab
	0x1407b2780: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2787: mov rdi, qword ptr [rdi]
	0x1407b279b: add rdi, 4
	0x1407b27a9: movzx rdi, word ptr [rdi]
Load [EBP+0xab](STATIC)
	0x1407b27b4: mov r13, qword ptr [r13]
	0x1407b27f2: mov r12, rbp
	0x1407b2803: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2814: or dword ptr [r12], edi
	0x1407b281f: and rdi, 0xffff
	0x1407b2834: shl rdi, 3
	0x1407b2838: add r13, rdi
	0x1407b2842: mov r10, qword ptr [r13]
	0x1407b284d: mov r12, rbp
	0x1407b2865: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094112f
	0x1407b286c: add qword ptr [r12], 0xf
	0x1407b2874: jmp r10
handlers outputs:



	0x14086130f: mov rcx, rbp
	0x140861319: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140861323: mov rcx, qword ptr [rcx]
	0x140861334: add rcx, 0
	0x140861348: mov r10d, dword ptr [rcx]
	0x140861352: mov r13, rbp
	0x140861355: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x140861371: add r10d, dword ptr [r13]
	0x140861375: mov r13, rbp
	0x140861386: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x14086138d: add r10d, dword ptr [r13]
	0x1408613ab: mov r12, rbp
	0x1408613b5: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408613c3: add dword ptr [r12], 0x616ef747
	0x1408613dc: mov r14, rbp
	0x1408613e5: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408613ef: add dword ptr [r14], r10d
	0x1408613f9: mov r9, rbp
	0x140861411: add r9, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140861418: and dword ptr [r9], r10d
	0x14086142c: mov rdi, rbp
	0x140861444: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140861452: mov rdi, qword ptr [rdi]
	0x140861463: add rdi, 6
	0x14086146a: movzx r13, word ptr [rdi]
	0x140861483: mov rax, rbp
	0x14086148d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140861493: add r13d, dword ptr [rax]
	0x140861499: mov rcx, rbp
	0x1408614ad: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408614c2: add r13d, dword ptr [rcx]
	0x1408614e4: mov rdi, rbp
	0x1408614fc: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140861506: sub dword ptr [rdi], 0x17edf20d
	0x14086150c: mov r15, rbp
	0x140861516: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14086151d: mov r10b, byte ptr [r15]
	0x140861520: cmp r10b, 0x70
	0x140861524: jbe 0x14086153b
	0x14086152d: add r13d, 0x3b8c9005
	0x14086153b: mov r8, rbp
	0x14086153e: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140861556: sub word ptr [r8], r13w
	0x14086155a: mov r10, rbp
	0x140861564: add r10, 0x16e
	0x140861575: mov r8, rbp
Load [EBP+0x16e](STATIC)
	0x140861578: movzx r10, word ptr [r10]
	0x14086157f: add r8, 0x58
	0x14086158c: xor r10w, 0xca84
	0x140861592: add r10, rbp
Load [EBP+0x58](STATIC)
	0x1408615a2: mov r8d, dword ptr [r8]
	0x1408615a5: add r8d, 0x262ea186
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1408615bd: add dword ptr [r10], r8d
	0x1408615c0: add r10, 4
Store VM_REG [EBP+0x68]
	0x1408615c7: mov dword ptr [r10], 0
	0x1408615f2: mov r12, rbp
	0x140861603: mov r13, rbp
	0x140861609: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140861621: mov r13, qword ptr [r13]
	0x140861633: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14086163a: mov r12, qword ptr [r12]
	0x14086163e: add r12, 4
	0x140861645: movzx r12, word ptr [r12]
	0x140861651: mov r11, rbp
	0x14086165b: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086166c: xor r12d, dword ptr [r11]
	0x14086166f: sub r12d, 0x67ef2507
	0x14086168b: mov rdx, rbp
	0x140861695: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408616aa: xor dword ptr [rdx], r12d
	0x1408616b4: and r12, 0xffff
	0x1408616bb: shl r12, 3
	0x1408616d0: add r13, r12
	0x1408616d3: mov rdi, qword ptr [r13]
	0x1408616de: mov r13, rbp
	0x1408616e8: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941137
	0x1408616ef: add qword ptr [r13], 8
	0x1408616f7: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407cd087: mov r10, rbp
	0x1407cd091: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd0a2: mov r10, qword ptr [r10]
	0x1407cd0a5: add r10, 2
	0x1407cd0b3: mov r8d, dword ptr [r10]
	0x1407cd0cb: mov rdi, rbp
	0x1407cd0dc: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd0f1: xor r8d, dword ptr [rdi]
	0x1407cd12f: mov rdx, rbp
	0x1407cd139: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cd153: or dword ptr [rdx], r8d
	0x1407cd15d: mov r14, rbp
	0x1407cd160: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407cd175: add dword ptr [r14], 0x5af029b3
	0x1407cd183: mov r11, rbp
	0x1407cd194: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407cd1ab: add dword ptr [r11], r8d
	0x1407cd1bf: mov r14, rbp
	0x1407cd1c2: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407cd1d7: add dword ptr [r14], r8d
	0x1407cd1e4: mov rdi, rbp
	0x1407cd1ee: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd20a: mov rdi, qword ptr [rdi]
	0x1407cd21a: add rdi, 0
	0x1407cd228: movzx r11, word ptr [rdi]
	0x1407cd23d: mov r15, rbp
	0x1407cd24e: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd263: sub r11d, dword ptr [r15]
	0x1407cd272: mov rbx, rbp
	0x1407cd275: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cd27c: and dword ptr [rbx], r11d
	0x1407cd289: mov r13, rbp
	0x1407cd28c: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407cd293: and dword ptr [r13], 0x738865b
	0x1407cd29e: mov r13, rbp
	0x1407cd2a1: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407cd2a8: mov bl, byte ptr [r13]
	0x1407cd2ac: cmp bl, 0x4b
	0x1407cd2af: jbe 0x1407cd2d1
	0x1407cd2d4: mov rsi, rbp
	0x1407cd2de: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407cd2f6: xor word ptr [rsi], r11w
	0x1407cd2fa: mov r12, rbp
	0x1407cd304: add r12, 0x16e
	0x1407cd30e: mov rax, rbp
	0x1407cd311: add rax, 0x58
Load [EBP+0x16e](STATIC)
	0x1407cd317: movzx r12, word ptr [r12]
Load [EBP+0x58](STATIC)
	0x1407cd323: mov eax, dword ptr [rax]
	0x1407cd325: add r12w, 0xc02
	0x1407cd32b: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407cd32e: sub dword ptr [r12], eax
	0x1407cd332: add r12, 4
Store VM_REG [EBP+0x68]
	0x1407cd339: mov dword ptr [r12], 0
	0x1407cd385: mov r15, rbp
	0x1407cd39d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd3b5: mov r15, qword ptr [r15]
	0x1407cd3c6: add r15, 6
	0x1407cd3cd: movzx r15, word ptr [r15]
	0x1407cd3d1: mov rsi, rbp
	0x1407cd3e5: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407cd3ef: mov rsi, qword ptr [rsi]
	0x1407cd403: mov rcx, rbp
	0x1407cd40d: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd429: add r15d, dword ptr [rcx]
	0x1407cd462: and r15, 0xffff
	0x1407cd485: shl r15, 3
	0x1407cd490: add rsi, r15
	0x1407cd49a: mov rax, qword ptr [rsi]
	0x1407cd4ae: mov rbx, rbp
	0x1407cd4b1: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094113f
	0x1407cd4b8: add qword ptr [rbx], 8
	0x1407cd4bf: jmp rax
handlers outputs:



basic block ends with indirect unconditional branch
	0x14083dbac: mov r13, rbp
	0x14083dbb6: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14083dbc7: mov r13, qword ptr [r13]
	0x14083dbcf: add r13, 4
	0x14083dbd6: movzx r8, word ptr [r13]
	0x14083dbdb: mov r14, rbp
	0x14083dbde: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083dbe5: sub r8d, dword ptr [r14]
	0x14083dbfb: mov rsi, rbp
	0x14083dbfe: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083dc05: sub dword ptr [rsi], r8d
	0x14083dc08: mov rbx, rbp
	0x14083dc0b: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083dc12: and dword ptr [rbx], 0x6d058c52
	0x14083dc18: mov rcx, rbp
	0x14083dc1b: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14083dc22: mov bl, byte ptr [rcx]
	0x14083dc24: cmp bl, 0x67
	0x14083dc27: jbe 0x14083dc34
	0x14083dc2d: add r8d, 0x6882d673
	0x14083dc34: mov rdi, rbp
	0x14083dc37: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14083dc3e: add word ptr [rdi], r8w
	0x14083dc45: mov r13, 0
	0x14083dc5a: mov r12, rbp
	0x14083dc64: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14083dc6b: mov r12, qword ptr [r12]
	0x14083dc76: add r12, 2
	0x14083dc7d: mov r13w, word ptr [r12]
	0x14083dc82: mov r11, rbp
	0x14083dc8b: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083dc92: add r13d, dword ptr [r11]
	0x14083dcc1: mov r12, rbp
	0x14083dcd5: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083dcf1: or dword ptr [r12], r13d
	0x14083dcf5: mov r15, rbp
	0x14083dcf8: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083dd0d: xor dword ptr [r15], 0x6e5338ff
	0x14083dd14: mov rdi, rbp
	0x14083dd1e: add rdi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14083dd25: sub word ptr [rdi], r13w
	0x14083dd30: mov r8, rbp
	0x14083dd33: add r8, 0xd6
Load [EBP+0xd6](STATIC)
	0x14083dd48: movzx r8, word ptr [r8]
	0x14083dd56: xor r8w, 0xadeb
	0x14083dd6c: mov rdi, rbp
	0x14083dd76: add rdi, 0x16e
	0x14083dd87: add r8, rbp
Load [EBP+0x16e](STATIC)
	0x14083dd98: movzx rdi, word ptr [rdi]
	0x14083dd9c: sub di, 0xc951
	0x14083dda1: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14083ddb8: mov r8, qword ptr [r8]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14083ddc1: xor dword ptr [rdi], r8d
	0x14083ddd4: add rdi, 4
Store VM_REG [EBP+0x68]
	0x14083dde8: mov dword ptr [rdi], 0
	0x14083ddfe: mov dl, 0xd1
	0x14083de00: mov r14, rbp
	0x14083de0a: add r14, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14083de1e: and byte ptr [r14], dl
	0x14083de2a: mov r12, rbp
	0x14083de36: add r12, 0xab
Load [EBP+0xab](STATIC)
	0x14083de47: mov r12, qword ptr [r12]
	0x14083de4b: mov r14, rbp
	0x14083de51: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14083de5e: mov r14, qword ptr [r14]
	0x14083de6f: add r14, 0
	0x14083de87: movzx r14, word ptr [r14]
	0x14083de95: mov rdx, rbp
	0x14083de98: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083de9f: add r14d, dword ptr [rdx]
	0x14083dea8: add r14d, 0x4ce47f80
	0x14083deaf: mov rdi, rbp
	0x14083dec7: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083dece: sub dword ptr [rdi], r14d
	0x14083dede: and r14, 0xffff
	0x14083dee8: shl r14, 3
	0x14083defa: add r12, r14
	0x14083df0e: mov r8, qword ptr [r12]
	0x14083df12: mov r14, rbp
	0x14083df15: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941147
	0x14083df1c: add qword ptr [r14], 8
	0x14083df23: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407a2e26: mov rcx, rbp
	0x1407a2e3d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407a2e54: mov rcx, qword ptr [rcx]
	0x1407a2e5e: add rcx, 0
	0x1407a2e72: mov r13d, dword ptr [rcx]
	0x1407a2e7b: mov r15, rbp
	0x1407a2e93: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a2ea7: sub r13d, dword ptr [r15]
	0x1407a2eb8: mov r11, rbp
	0x1407a2ebb: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407a2ec9: sub r13d, dword ptr [r11]
	0x1407a2efb: mov rcx, rbp
	0x1407a2f13: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407a2f2b: add dword ptr [rcx], 0x29f7865b
	0x1407a2f38: mov r14, rbp
	0x1407a2f3b: add r14, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407a2f45: sub dword ptr [r14], r13d
	0x1407a2f90: mov r8, rbp
	0x1407a2f93: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407a2fa8: mov r8, qword ptr [r8]
	0x1407a2fab: add r8, 4
	0x1407a2fb5: movzx r15, word ptr [r8]
	0x1407a2feb: mov r10, rbp
	0x1407a3003: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407a300a: sub r15d, dword ptr [r10]
	0x1407a3014: mov r11, rbp
	0x1407a3028: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a3040: or dword ptr [r11], r15d
	0x1407a306c: mov rdx, rbp
	0x1407a307d: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407a308e: mov r9b, byte ptr [rdx]
	0x1407a3091: cmp r9b, 0x49
	0x1407a3095: jbe 0x1407a30a5
	0x1407a30ab: mov r8, rbp
	0x1407a30b8: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407a30c6: xor word ptr [r8], r15w
	0x1407a30d1: mov r12, rbp
	0x1407a30db: mov r11, rbp
	0x1407a30e8: add r12, 0x16e
	0x1407a30f6: add r11, 0x58
Load [EBP+0x58](STATIC)
	0x1407a30fd: mov r11d, dword ptr [r11]
Load [EBP+0x16e](STATIC)
	0x1407a3103: movzx r12, word ptr [r12]
	0x1407a3116: add r11d, 0x76eda5ba
	0x1407a3120: xor r12w, 0x79fb
	0x1407a3133: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x1407a3140: mov r12, qword ptr [r12]
Deref(t898,ds)
	0x1407a3152: add dword ptr [r12], r11d
	0x1407a3175: mov r8b, 0x36
	0x1407a3186: mov r15, rbp
	0x1407a3193: add r15, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407a31a8: xor byte ptr [r15], r8b
	0x1407a31bc: mov r15, rbp
	0x1407a31c6: mov rdi, rbp
	0x1407a31c9: add rdi, 0x145
	0x1407a31d7: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x1407a31e8: mov rdi, qword ptr [rdi]
	0x1407a31fc: add rdi, 6
	0x1407a320a: movzx rdi, word ptr [rdi]
Load [EBP+0xab](STATIC)
	0x1407a3215: mov r15, qword ptr [r15]
	0x1407a3222: mov rsi, rbp
	0x1407a3233: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407a3248: sub edi, dword ptr [rsi]
	0x1407a325f: sub edi, 0x3ebf070
	0x1407a326c: mov r10, rbp
	0x1407a326f: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407a3280: or dword ptr [r10], edi
	0x1407a3294: and rdi, 0xffff
	0x1407a32ac: shl rdi, 3
	0x1407a32b7: add r15, rdi
	0x1407a32c1: mov r11, qword ptr [r15]
	0x1407a32c4: mov r9, rbp
	0x1407a32c7: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094114f
	0x1407a32ce: add qword ptr [r9], 8
	0x1407a32d5: jmp r11
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094115a
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0x10](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941166
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941188
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411a2
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x10](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411aa
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x14080ce63: mov r8, rbp
	0x14080ce74: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080ce8f: mov r8, qword ptr [r8]
	0x14080cea0: add r8, 8
	0x14080cebc: movzx r9, word ptr [r8]
	0x14080cec0: mov rbx, rbp
	0x14080ced4: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080cee9: xor r9d, dword ptr [rbx]
	0x14080cefa: mov r11, rbp
	0x14080cf0b: add r11, 0xf0
Load [EBP+0xf0](STATIC)
	0x14080cf20: add r9d, dword ptr [r11]
	0x14080cf2a: mov r14, rbp
	0x14080cf3b: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cf50: sub dword ptr [r14], r9d
	0x14080cf5d: mov rdi, rbp
	0x14080cf60: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080cf67: sub dword ptr [rdi], 0x95a8ba
	0x14080cf6d: mov rdi, rbp
	0x14080cf73: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14080cf81: mov dl, byte ptr [rdi]
	0x14080cf83: cmp dl, 0x2c
	0x14080cf86: jbe 0x14080cfa1
	0x14080cfa4: mov r12, rbp
	0x14080cfae: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080cfbc: xor word ptr [r12], r9w
	0x14080cfc1: mov rcx, rbp
	0x14080cfc4: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14080cfcb: mov rcx, qword ptr [rcx]
	0x14080cfce: add rcx, 4
	0x14080cfd5: mov r14d, dword ptr [rcx]
	0x14080cfd8: mov rdi, rbp
	0x14080cfdb: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cfe2: xor dword ptr [rdi], r14d
	0x14080cffe: mov rbx, rbp
	0x14080d016: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14080d01d: movzx r8, word ptr [rbx]
	0x14080d096: add r8, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14080d099: mov r8, qword ptr [r8]
Deref(t944,ds)
	0x14080d09c: mov r8, qword ptr [r8]
	0x14080d0a2: push r8
	0x14080d0a4: mov rcx, 0
	0x14080d0ab: mov r15, rbp
	0x14080d0c3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14080d0cd: mov r15, qword ptr [r15]
	0x14080d0d7: add r15, 0
	0x14080d0de: mov cx, word ptr [r15]
	0x14080d0e5: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080d0fd: sub qword ptr [rcx], 8
	0x14080d119: mov r10b, 0xd
	0x14080d131: mov rsi, rbp
	0x14080d142: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14080d149: or byte ptr [rsi], r10b
	0x14080d15a: mov rsi, rbp
	0x14080d164: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080d172: mov rsi, qword ptr [rsi]
	0x14080d17c: add rsi, 2
	0x14080d198: movzx rsi, word ptr [rsi]
	0x14080d1aa: mov r9, rbp
	0x14080d1b4: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14080d1c2: mov r9, qword ptr [r9]
	0x14080d1c5: mov r8, rbp
	0x14080d1d9: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080d1ee: add esi, dword ptr [r8]
	0x14080d1f1: add esi, 0x42aac01a
	0x14080d1fe: mov r8, rbp
	0x14080d212: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080d220: add dword ptr [r8], esi
	0x14080d231: and rsi, 0xffff
	0x14080d253: shl rsi, 3
	0x14080d25e: add r9, rsi
	0x14080d26b: mov rax, qword ptr [r9]
	0x14080d278: mov rsi, rbp
	0x14080d27b: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411b4
	0x14080d282: add qword ptr [rsi], 0xa
	0x14080d289: jmp rax
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411c2
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411c8
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0xc3]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x1409411d2
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411e0
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411eb
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407c3437: mov rdx, rbp
	0x1407c3448: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407c344f: mov rdx, qword ptr [rdx]
	0x1407c3458: add rdx, 4
	0x1407c3465: movzx rax, word ptr [rdx]
	0x1407c3470: mov r11, rbp
	0x1407c3476: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c347d: xor eax, dword ptr [r11]
	0x1407c3487: mov r9, rbp
	0x1407c3498: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407c34a6: add eax, dword ptr [r9]
	0x1407c34ba: mov rbx, rbp
	0x1407c34bd: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c34cb: add dword ptr [rbx], 0x68de9a6e
	0x1407c34d8: mov rdi, rbp
	0x1407c34db: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x1407c34e2: mov r12b, byte ptr [rdi]
	0x1407c34e5: cmp r12b, 0xc0
	0x1407c34e9: jbe 0x1407c350c
	0x1407c34f9: sub eax, 0x6064777a
	0x1407c350c: mov rsi, rbp
	0x1407c3519: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407c3520: add word ptr [rsi], ax
	0x1407c3531: mov r8, 0
	0x1407c3538: mov r14, rbp
	0x1407c353b: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407c3550: mov r14, qword ptr [r14]
	0x1407c3561: add r14, 0
	0x1407c3568: mov r8w, word ptr [r14]
	0x1407c358a: mov r11, rbp
	0x1407c3594: add r11, 0x120
Load [EBP+0x120](STATIC)
	0x1407c35a9: sub r8d, dword ptr [r11]
	0x1407c35b9: mov r10, rbp
	0x1407c35ca: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c35df: sub dword ptr [r10], r8d
	0x1407c35e2: mov r14, rbp
	0x1407c35e5: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c35fa: add dword ptr [r14], 0x53ccfbc1
	0x1407c3601: mov r9, rbp
	0x1407c3611: add r9, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407c3618: add word ptr [r9], r8w
	0x1407c361c: mov rax, rbp
	0x1407c3622: mov rdi, rbp
	0x1407c362f: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c3635: movzx rax, word ptr [rax]
	0x1407c3643: xor ax, 0xf4ff
	0x1407c3647: add rdi, 0xd6
	0x1407c364e: add rax, rbp
Load [EBP+0xd6](STATIC)
	0x1407c3658: movzx rdi, word ptr [rdi]
	0x1407c365c: xor di, 0x762d
	0x1407c3661: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x1407c3664: mov rax, qword ptr [rax]
Load [EBP+0xc3](VM_REGISTER)
	0x1407c3667: mov r10, qword ptr [rdi]
Deref(t975,ds)
	0x1407c366a: mov rsi, qword ptr [rax]
	0x1407c366d: mov qword ptr [rax], r10
Store VM_REG [EBP+0xc3]
	0x1407c3670: mov qword ptr [rdi], rsi
	0x1407c3699: mov rbx, rbp
	0x1407c369c: add rbx, 0x145
	0x1407c36a6: mov r15, rbp
Load [EBP+0x145](STATIC)
	0x1407c36b5: mov rbx, qword ptr [rbx]
	0x1407c36c5: add rbx, 2
	0x1407c36cc: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x1407c36dd: mov r15, qword ptr [r15]
	0x1407c36ea: movzx rbx, word ptr [rbx]
	0x1407c36ee: mov r9, rbp
	0x1407c36fb: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c3705: xor ebx, dword ptr [r9]
	0x1407c370f: xor ebx, 0x4a87e73c
	0x1407c3715: mov rax, rbp
	0x1407c3726: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c373a: add dword ptr [rax], ebx
	0x1407c3746: and rbx, 0xffff
	0x1407c3762: shl rbx, 3
	0x1407c3770: add r15, rbx
	0x1407c377a: mov rsi, qword ptr [r15]
	0x1407c377d: mov r9, rbp
	0x1407c3787: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411f1
	0x1407c378e: add qword ptr [r9], 6
	0x1407c3795: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x2e]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409411ff
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407930b1: mov r15, rbp
	0x1407930c2: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407930d0: mov r15, qword ptr [r15]
	0x1407930da: add r15, 0
	0x1407930f2: movzx r11, word ptr [r15]
	0x1407930fc: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140793109: mov rsp, qword ptr [r11]
	0x14079311d: mov r13, rbp
	0x140793120: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x140793127: mov r15d, dword ptr [r13]
	0x14079312b: mov r14, 0x7c5ea8e7
	0x140793132: mov r9, rbp
	0x140793135: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079313c: xor dword ptr [r9], r14d
	0x14079313f: and r15d, 1
	0x140793146: cmp r15d, 0
	0x14079314d: je 0x140793165
	0x1407931a9: mov r12, rbp
	0x1407931ac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407931c4: mov r12, qword ptr [r12]
	0x1407931cf: add r12, 4
	0x1407931d9: movzx r12, word ptr [r12]
	0x1407931eb: mov rax, rbp
	0x1407931ee: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x140793205: mov rax, qword ptr [rax]
	0x140793216: mov r15, rbp
	0x14079322a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140793231: add r12d, dword ptr [r15]
	0x14079324f: mov rdx, rbp
	0x140793259: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140793263: xor dword ptr [rdx], r12d
	0x140793266: and r12, 0xffff
	0x14079328f: shl r12, 3
	0x140793293: add rax, r12
	0x1407932ab: mov r11, qword ptr [rax]
	0x1407932b8: mov r12, rbp
	0x1407932cc: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941205
	0x1407932d3: add qword ptr [r12], 6
	0x1407932db: jmp r11
handlers outputs:



	0x14080ce63: mov r8, rbp
	0x14080ce74: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080ce8f: mov r8, qword ptr [r8]
	0x14080cea0: add r8, 8
	0x14080cebc: movzx r9, word ptr [r8]
	0x14080cec0: mov rbx, rbp
	0x14080ced4: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080cee9: xor r9d, dword ptr [rbx]
	0x14080cefa: mov r11, rbp
	0x14080cf0b: add r11, 0xf0
Load [EBP+0xf0](STATIC)
	0x14080cf20: add r9d, dword ptr [r11]
	0x14080cf2a: mov r14, rbp
	0x14080cf3b: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cf50: sub dword ptr [r14], r9d
	0x14080cf5d: mov rdi, rbp
	0x14080cf60: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080cf67: sub dword ptr [rdi], 0x95a8ba
	0x14080cf6d: mov rdi, rbp
	0x14080cf73: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14080cf81: mov dl, byte ptr [rdi]
	0x14080cf83: cmp dl, 0x2c
	0x14080cf86: jbe 0x14080cfa1
	0x14080cfa4: mov r12, rbp
	0x14080cfae: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080cfbc: xor word ptr [r12], r9w
	0x14080cfc1: mov rcx, rbp
	0x14080cfc4: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14080cfcb: mov rcx, qword ptr [rcx]
	0x14080cfce: add rcx, 4
	0x14080cfd5: mov r14d, dword ptr [rcx]
	0x14080cfd8: mov rdi, rbp
	0x14080cfdb: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cfe2: xor dword ptr [rdi], r14d
	0x14080cffe: mov rbx, rbp
	0x14080d016: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14080d01d: movzx r8, word ptr [rbx]
	0x14080d096: add r8, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14080d099: mov r8, qword ptr [r8]
Deref(t986,ds)
	0x14080d09c: mov r8, qword ptr [r8]
	0x14080d0a2: push r8
	0x14080d0a4: mov rcx, 0
	0x14080d0ab: mov r15, rbp
	0x14080d0c3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14080d0cd: mov r15, qword ptr [r15]
	0x14080d0d7: add r15, 0
	0x14080d0de: mov cx, word ptr [r15]
	0x14080d0e5: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080d0fd: sub qword ptr [rcx], 8
	0x14080d119: mov r10b, 0xd
	0x14080d131: mov rsi, rbp
	0x14080d142: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14080d149: or byte ptr [rsi], r10b
	0x14080d15a: mov rsi, rbp
	0x14080d164: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080d172: mov rsi, qword ptr [rsi]
	0x14080d17c: add rsi, 2
	0x14080d198: movzx rsi, word ptr [rsi]
	0x14080d1aa: mov r9, rbp
	0x14080d1b4: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14080d1c2: mov r9, qword ptr [r9]
	0x14080d1c5: mov r8, rbp
	0x14080d1d9: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080d1ee: add esi, dword ptr [r8]
	0x14080d1f1: add esi, 0x42aac01a
	0x14080d1fe: mov r8, rbp
	0x14080d212: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080d220: add dword ptr [r8], esi
	0x14080d231: and rsi, 0xffff
	0x14080d253: shl rsi, 3
	0x14080d25e: add r9, rsi
	0x14080d26b: mov rax, qword ptr [r9]
	0x14080d278: mov rsi, rbp
	0x14080d27b: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094120f
	0x14080d282: add qword ptr [rsi], 0xa
	0x14080d289: jmp rax
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094121d
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941228
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x1407930b1: mov r15, rbp
	0x1407930c2: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407930d0: mov r15, qword ptr [r15]
	0x1407930da: add r15, 0
	0x1407930f2: movzx r11, word ptr [r15]
	0x1407930fc: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140793109: mov rsp, qword ptr [r11]
	0x14079311d: mov r13, rbp
	0x140793120: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x140793127: mov r15d, dword ptr [r13]
	0x14079312b: mov r14, 0x7c5ea8e7
	0x140793132: mov r9, rbp
	0x140793135: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079313c: xor dword ptr [r9], r14d
	0x14079313f: and r15d, 1
	0x140793146: cmp r15d, 0
	0x14079314d: je 0x140793165
	0x1407931a9: mov r12, rbp
	0x1407931ac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407931c4: mov r12, qword ptr [r12]
	0x1407931cf: add r12, 4
	0x1407931d9: movzx r12, word ptr [r12]
	0x1407931eb: mov rax, rbp
	0x1407931ee: add rax, 0xab
Load [EBP+0xab](STATIC)
	0x140793205: mov rax, qword ptr [rax]
	0x140793216: mov r15, rbp
	0x14079322a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140793231: add r12d, dword ptr [r15]
	0x14079324f: mov rdx, rbp
	0x140793259: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140793263: xor dword ptr [rdx], r12d
	0x140793266: and r12, 0xffff
	0x14079328f: shl r12, 3
	0x140793293: add rax, r12
	0x1407932ab: mov r11, qword ptr [rax]
	0x1407932b8: mov r12, rbp
	0x1407932cc: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094122e
	0x1407932d3: add qword ptr [r12], 6
	0x1407932db: jmp r11
handlers outputs:



basic block ends with ret
	0x14083a7f1: mov r13, 0x30f2d24e
	0x14083a7fb: mov rcx, rbp
	0x14083a7fe: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083a805: xor dword ptr [rcx], r13d
	0x14083a82a: mov rbx, 0x12
	0x14083a831: mov r10, rbp
	0x14083a834: and rax, 0x78
	0x14083a83a: add r10, 0x145
	0x14083a841: or rbx, 0x800
	0x14083a848: and r13, 0x80
Load [EBP+0x145](STATIC)
	0x14083a84f: mov r10, qword ptr [r10]
	0x14083a852: mov rcx, 1
	0x14083a85c: add r10, 2
	0x14083a863: add r14, 0xffff
	0x14083a878: movzx r15, word ptr [r10]
	0x14083a87f: or rbx, r10
	0x14083a882: mov r11, rbp
	0x14083a885: add r11, 0xbf
	0x14083a88c: mov r9, rbp
	0x14083a88f: or r14, 0x20
	0x14083a896: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x14083a89d: add r15d, dword ptr [r9]
	0x14083a8a0: add rbx, 0xffff
	0x14083a8a7: mov r9, rbp
	0x14083a8b1: add rcx, 0x80
	0x14083a8b8: and rcx, 0x88
	0x14083a8bf: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083a8c6: and dword ptr [r9], r15d
	0x14083a8c9: mov r10, rbp
	0x14083a8cc: add r14, 0x80
	0x14083a8d3: or rcx, 1
	0x14083a8da: add r10, 0xa7
	0x14083a8e1: or rcx, 0xffff
	0x14083a8ef: sub rcx, r10
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083a8f2: add dword ptr [r10], 0x17c50ce5
	0x14083a8f9: mov rdi, rbp
	0x14083a8fc: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14083a903: mov r9b, byte ptr [rdi]
	0x14083a906: cmp r9b, 0x53
	0x14083a90a: jbe 0x14083a925
	0x14083a910: mov rax, 0
	0x14083a91e: sub r15d, 0xf5bb801
	0x14083a925: xor r14, 4
	0x14083a933: mov rdi, rbp
	0x14083a936: sub rbx, 0x20
	0x14083a93d: and rcx, r14
	0x14083a940: sub rbx, rdi
	0x14083a943: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14083a951: xor word ptr [rdi], r15w
	0x14083a95c: xor rbx, 0x80
	0x14083a96a: add r12, 1
	0x14083a971: sub r15, 0x3f
	0x14083a978: add rbx, rax
	0x14083a982: add r10, 4
	0x14083a989: or rbx, rbx
	0x14083a98c: xor r12, 0x20
	0x14083a99a: mov rsi, 0x200
	0x14083a9a1: mov r8, 0
	0x14083a9a8: mov edx, 0
	0x14083a9ad: push rdx
	0x14083a9ae: mov edx, 0xd5
	0x14083a9b3: add rax, 0x20
	0x14083a9b9: xor rbx, 0x20
	0x14083a9c0: and r8, 8
	0x14083a9c7: push rdx
	0x14083a9c8: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x14083a9cd: pop rdx
	0x14083a9e6: xor dx, 0x682e
	0x14083a9eb: add rdx, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14083aa03: mov rdx, qword ptr [rdx]
Deref(t1005,ds)
	0x14083aa13: mov rdx, qword ptr [rdx]
	0x14083aa16: push rdx
	0x14083aa17: mov r8, 0
	0x14083aa2f: mov rax, rbp
	0x14083aa47: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083aa4d: mov rax, qword ptr [rax]
	0x14083aa5d: add rax, 0
	0x14083aa63: mov r8w, word ptr [rax]
	0x14083aa67: add r8, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14083aa78: sub qword ptr [r8], 8
	0x14083aaae: mov rax, rbp
	0x14083aab8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083aabe: mov rax, qword ptr [rax]
	0x14083aacf: add rax, 4
	0x14083aae6: mov rsi, rbp
	0x14083aae9: movzx rax, word ptr [rax]
	0x14083aaed: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14083ab01: mov rsi, qword ptr [rsi]
	0x14083ab1c: sub eax, 0x3743edb2
	0x14083ab2b: mov r11, rbp
	0x14083ab2e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083ab43: and dword ptr [r11], eax
	0x14083ab50: and rax, 0xffff
	0x14083ab75: shl rax, 3
	0x14083ab8e: add rsi, rax
	0x14083ab98: mov r11, qword ptr [rsi]
	0x14083aba8: mov r14, rbp
	0x14083abab: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941234
	0x14083abb2: add qword ptr [r14], 6
	0x14083abb9: jmp r11
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xb7]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094123c
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941242
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd1d: xor r13d, 0x393b4259
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x2e](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x15d]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x14094124e
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941259
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941264
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x1407c3437: mov rdx, rbp
	0x1407c3448: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407c344f: mov rdx, qword ptr [rdx]
	0x1407c3458: add rdx, 4
	0x1407c3465: movzx rax, word ptr [rdx]
	0x1407c3470: mov r11, rbp
	0x1407c3476: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c347d: xor eax, dword ptr [r11]
	0x1407c3487: mov r9, rbp
	0x1407c3498: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407c34a6: add eax, dword ptr [r9]
	0x1407c34ba: mov rbx, rbp
	0x1407c34bd: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c34cb: add dword ptr [rbx], 0x68de9a6e
	0x1407c34d8: mov rdi, rbp
	0x1407c34db: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x1407c34e2: mov r12b, byte ptr [rdi]
	0x1407c34e5: cmp r12b, 0xc0
	0x1407c34e9: jbe 0x1407c350c
	0x1407c34f9: sub eax, 0x6064777a
	0x1407c350c: mov rsi, rbp
	0x1407c3519: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407c3520: add word ptr [rsi], ax
	0x1407c3531: mov r8, 0
	0x1407c3538: mov r14, rbp
	0x1407c353b: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407c3550: mov r14, qword ptr [r14]
	0x1407c3561: add r14, 0
	0x1407c3568: mov r8w, word ptr [r14]
	0x1407c358a: mov r11, rbp
	0x1407c3594: add r11, 0x120
Load [EBP+0x120](STATIC)
	0x1407c35a9: sub r8d, dword ptr [r11]
	0x1407c35b9: mov r10, rbp
	0x1407c35ca: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c35df: sub dword ptr [r10], r8d
	0x1407c35e2: mov r14, rbp
	0x1407c35e5: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407c35fa: add dword ptr [r14], 0x53ccfbc1
	0x1407c3601: mov r9, rbp
	0x1407c3611: add r9, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407c3618: add word ptr [r9], r8w
	0x1407c361c: mov rax, rbp
	0x1407c3622: mov rdi, rbp
	0x1407c362f: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c3635: movzx rax, word ptr [rax]
	0x1407c3643: xor ax, 0xf4ff
	0x1407c3647: add rdi, 0xd6
	0x1407c364e: add rax, rbp
Load [EBP+0xd6](STATIC)
	0x1407c3658: movzx rdi, word ptr [rdi]
	0x1407c365c: xor di, 0x762d
	0x1407c3661: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x1407c3664: mov rax, qword ptr [rax]
Load [EBP+0x15d](VM_REGISTER)
	0x1407c3667: mov r10, qword ptr [rdi]
Deref(t1027,ds)
	0x1407c366a: mov rsi, qword ptr [rax]
	0x1407c366d: mov qword ptr [rax], r10
Store VM_REG [EBP+0x15d]
	0x1407c3670: mov qword ptr [rdi], rsi
	0x1407c3699: mov rbx, rbp
	0x1407c369c: add rbx, 0x145
	0x1407c36a6: mov r15, rbp
Load [EBP+0x145](STATIC)
	0x1407c36b5: mov rbx, qword ptr [rbx]
	0x1407c36c5: add rbx, 2
	0x1407c36cc: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x1407c36dd: mov r15, qword ptr [r15]
	0x1407c36ea: movzx rbx, word ptr [rbx]
	0x1407c36ee: mov r9, rbp
	0x1407c36fb: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c3705: xor ebx, dword ptr [r9]
	0x1407c370f: xor ebx, 0x4a87e73c
	0x1407c3715: mov rax, rbp
	0x1407c3726: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c373a: add dword ptr [rax], ebx
	0x1407c3746: and rbx, 0xffff
	0x1407c3762: shl rbx, 3
	0x1407c3770: add r15, rbx
	0x1407c377a: mov rsi, qword ptr [r15]
	0x1407c377d: mov r9, rbp
	0x1407c3787: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094126a
	0x1407c378e: add qword ptr [r9], 6
	0x1407c3795: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x2e]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941278
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0xce](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941284
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



	0x14080ce63: mov r8, rbp
	0x14080ce74: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14080ce8f: mov r8, qword ptr [r8]
	0x14080cea0: add r8, 8
	0x14080cebc: movzx r9, word ptr [r8]
	0x14080cec0: mov rbx, rbp
	0x14080ced4: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080cee9: xor r9d, dword ptr [rbx]
	0x14080cefa: mov r11, rbp
	0x14080cf0b: add r11, 0xf0
Load [EBP+0xf0](STATIC)
	0x14080cf20: add r9d, dword ptr [r11]
	0x14080cf2a: mov r14, rbp
	0x14080cf3b: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cf50: sub dword ptr [r14], r9d
	0x14080cf5d: mov rdi, rbp
	0x14080cf60: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080cf67: sub dword ptr [rdi], 0x95a8ba
	0x14080cf6d: mov rdi, rbp
	0x14080cf73: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14080cf81: mov dl, byte ptr [rdi]
	0x14080cf83: cmp dl, 0x2c
	0x14080cf86: jbe 0x14080cfa1
	0x14080cfa4: mov r12, rbp
	0x14080cfae: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14080cfbc: xor word ptr [r12], r9w
	0x14080cfc1: mov rcx, rbp
	0x14080cfc4: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14080cfcb: mov rcx, qword ptr [rcx]
	0x14080cfce: add rcx, 4
	0x14080cfd5: mov r14d, dword ptr [rcx]
	0x14080cfd8: mov rdi, rbp
	0x14080cfdb: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080cfe2: xor dword ptr [rdi], r14d
	0x14080cffe: mov rbx, rbp
	0x14080d016: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14080d01d: movzx r8, word ptr [rbx]
	0x14080d096: add r8, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14080d099: mov r8, qword ptr [r8]
Deref(t1045,ds)
	0x14080d09c: mov r8, qword ptr [r8]
	0x14080d0a2: push r8
	0x14080d0a4: mov rcx, 0
	0x14080d0ab: mov r15, rbp
	0x14080d0c3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14080d0cd: mov r15, qword ptr [r15]
	0x14080d0d7: add r15, 0
	0x14080d0de: mov cx, word ptr [r15]
	0x14080d0e5: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080d0fd: sub qword ptr [rcx], 8
	0x14080d119: mov r10b, 0xd
	0x14080d131: mov rsi, rbp
	0x14080d142: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14080d149: or byte ptr [rsi], r10b
	0x14080d15a: mov rsi, rbp
	0x14080d164: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080d172: mov rsi, qword ptr [rsi]
	0x14080d17c: add rsi, 2
	0x14080d198: movzx rsi, word ptr [rsi]
	0x14080d1aa: mov r9, rbp
	0x14080d1b4: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x14080d1c2: mov r9, qword ptr [r9]
	0x14080d1c5: mov r8, rbp
	0x14080d1d9: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14080d1ee: add esi, dword ptr [r8]
	0x14080d1f1: add esi, 0x42aac01a
	0x14080d1fe: mov r8, rbp
	0x14080d212: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080d220: add dword ptr [r8], esi
	0x14080d231: and rsi, 0xffff
	0x14080d253: shl rsi, 3
	0x14080d25e: add r9, rsi
	0x14080d26b: mov rax, qword ptr [r9]
	0x14080d278: mov rsi, rbp
	0x14080d27b: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094128e
	0x14080d282: add qword ptr [rsi], 0xa
	0x14080d289: jmp rax
handlers outputs:



	0x140831887: mov rax, rbp
	0x14083188a: mov rcx, rbp
	0x14083188d: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x1408318a2: mov rcx, qword ptr [rcx]
	0x1408318a5: add rax, 0x145
	0x1408318b9: mov rsi, 0x200
Load [EBP+0x145](STATIC)
	0x1408318c0: mov rax, qword ptr [rax]
	0x1408318d4: add rax, 0
	0x1408318eb: movzx rax, word ptr [rax]
	0x1408318ef: mov r10, 0x400
	0x140831911: or rsi, 4
	0x140831918: add r10, r10
	0x14083191b: mov rbx, rbp
	0x140831925: xor rsi, 0x400
	0x14083192c: and rsi, 0xffffffff80000000
	0x140831933: add rbx, 0xbf
	0x140831948: or rsi, 0x3f
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083194f: xor dword ptr [rbx], eax
	0x140831951: and rax, 0xffff
	0x140831957: sub rsi, r10
	0x14083195a: and rsi, rax
	0x140831964: shl rax, 3
	0x140831968: add rcx, rax
	0x140831975: mov rax, qword ptr [rcx]
	0x140831978: mov rbx, 0xd5
	0x14083197f: mov r12, rbp
	0x140831982: or rsi, 0x400
	0x140831989: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140831990: mov qword ptr [r12], rax
	0x14083199b: and rcx, r12
	0x14083199e: mov r10, rbp
	0x1408319a7: add r10, 0x145
	0x1408319ae: and r13, 1
	0x1408319b5: mov r14, r12
Load [EBP+0x145](STATIC)
	0x1408319b8: mov r10, qword ptr [r10]
	0x1408319c5: add r10, 4
	0x1408319d3: movzx r12, word ptr [r10]
	0x1408319d7: mov rdx, rbp
	0x1408319e1: and rcx, 0x20
	0x1408319ef: add rdx, 0xbf
	0x1408319f6: and rcx, 0x88
	0x1408319fd: mov rdi, 1
Load [EBP+0xbf](STATIC)
	0x140831a04: sub r12d, dword ptr [rdx]
	0x140831a07: sub r14, r14
	0x140831a0d: and r14, 4
	0x140831a1a: mov r10, rbp
	0x140831a1d: or r14, rsi
	0x140831a27: add r10, 0xbf
	0x140831a2e: and rdi, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831a31: add dword ptr [r10], r12d
	0x140831a34: sub rdi, 0x10
	0x140831a42: xor r14, 0x10
	0x140831a49: mov r11, rbp
	0x140831a5a: add r11, 0xa7
	0x140831a61: xor rbx, 4
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831a68: sub dword ptr [r11], 0x4636dc37
	0x140831a6f: and r14, 0x3f
	0x140831a76: sub rbx, 0xf0
	0x140831a7d: mov rdx, rbp
	0x140831a80: sub rdi, rdi
	0x140831a83: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140831a8a: mov sil, byte ptr [rdx]
	0x140831a8d: cmp sil, 0x5a
	0x140831a91: jbe 0x140831a9e
	0x140831aa1: mov rsi, rbp
	0x140831aab: add rsi, 0x16e
	0x140831ab9: sub rbx, rdi
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140831ac3: add word ptr [rsi], r12w
	0x140831ac7: mov r15, 0x255578db
	0x140831ace: mov r10, rbp
	0x140831ad1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831ad8: sub dword ptr [r10], r15d
	0x140831adb: add rbx, r14
	0x140831ade: add rbx, 0x20
	0x140831ae5: mov rcx, 0
	0x140831af3: sub r13, 0x80
	0x140831afa: mov r10, rbp
	0x140831b07: mov r8, 0xd5
	0x140831b0e: add r10, 0x145
	0x140831b15: mov r9, 0x400
Load [EBP+0x145](STATIC)
	0x140831b1c: mov r10, qword ptr [r10]
	0x140831b1f: mov rsi, 0x200
	0x140831b26: or rbx, 1
	0x140831b2d: add rsi, 0x40
	0x140831b34: add r10, 2
	0x140831b3b: sub r14, 0x400
	0x140831b42: and rbx, 0x90
	0x140831b49: and rsi, 0x3f
	0x140831b50: mov cx, word ptr [r10]
	0x140831b54: and rbx, 0x80
	0x140831b5b: add r14, rsi
	0x140831b5e: xor r13, 0x3f
	0x140831b65: mov r10, rbp
	0x140831b68: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140831b6f: xor ecx, dword ptr [r10]
	0x140831b72: mov rax, rbp
	0x140831b7c: and r9, 0x80
	0x140831b83: add rbx, rbx
	0x140831b86: add rax, 0x120
	0x140831b8c: sub r13, r9
Load [EBP+0x120](STATIC)
	0x140831b99: add ecx, dword ptr [rax]
	0x140831ba2: mov rdx, rbp
	0x140831ba5: xor r14, rbx
	0x140831ba8: and r14, 0x80
	0x140831baf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831bcb: add dword ptr [rdx], ecx
	0x140831bcd: mov r12, rbp
	0x140831bd0: sub r13, 1
	0x140831bda: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831be1: add dword ptr [r12], 0x707911f3
	0x140831be9: mov r9, rbp
	0x140831bec: add r9, 0xd6
	0x140831bf3: add r14, 0x88
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140831bfa: sub word ptr [r9], cx
	0x140831c01: or rdx, 0x20
	0x140831c08: xor r9, 8
	0x140831c0f: mov rax, rbp
	0x140831c12: and r11, 0xf0
	0x140831c19: or r11, 4
	0x140831c20: sub rdx, r11
	0x140831c23: mov rdi, rbp
	0x140831c26: or r13, 4
	0x140831c2d: add rcx, rax
	0x140831c30: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140831c37: movzx rdi, word ptr [rdi]
	0x140831c42: sub rcx, 8
	0x140831c49: add rax, 0xd6
	0x140831c4f: mov r15, 0x12
	0x140831c56: xor di, 0x7573
Load [EBP+0xd6](STATIC)
	0x140831c5b: movzx rax, word ptr [rax]
	0x140831c5f: sub ax, 0x7451
	0x140831c63: add rax, rbp
	0x140831c66: xor r15, r9
	0x140831c70: mov r9, 0
Load [EBP+0x2e](VM_REGISTER)
	0x140831c77: mov rax, qword ptr [rax]
	0x140831c7a: add rdx, 0x88
	0x140831c81: sub r9, rcx
	0x140831c84: and r9, 0xf0
	0x140831c8b: add rdi, rbp
Deref(t1050,ds)
	0x140831c91: mov rax, qword ptr [rax]
Store VM_REG [EBP+0xce]
	0x140831c94: mov qword ptr [rdi], rax
	0x140831c97: xor rdx, 0x20
	0x140831c9e: add r15, 0xf0
	0x140831cac: mov rsi, 0xd5
	0x140831cb3: sub rdx, 4
	0x140831cba: and r15, 0x20
	0x140831cc1: xor rsi, r8
	0x140831cc7: mov r12, 0
	0x140831cce: mov rdi, 0x12
	0x140831cd5: or rsi, 4
	0x140831cdc: add r12, 0x20
	0x140831ce3: or rdi, 8
	0x140831cea: mov r11, 1
	0x140831cf1: and rsi, r12
	0x140831cf4: and rdx, 0xf0
	0x140831cfb: and rdx, 0x40
	0x140831d02: mov rbx, rbp
	0x140831d05: add rbx, 0xfd
	0x140831d0c: and rdx, r8
Load [EBP+0xfd](STATIC)
	0x140831d0f: mov r10, qword ptr [rbx]
	0x140831d12: add rdx, 0x80
	0x140831d19: mov r8, r13
	0x140831d1c: mov rcx, 0x400
	0x140831d23: add rcx, rcx
	0x140831d26: sub rsp, 8
	0x140831d2a: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140831d2b: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x7bfe7bec + context) & 0xffffffffffffffff)
	0x140831d2e: add qword ptr [rsp], 0x7bfe7bec
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831d36: mov r13, qword ptr [rsp]
	0x140831d3a: add rsp, 8
	0x140831d3e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1a
	0x140831d42: mov qword ptr [rsp], rdi
	0x140831d46: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x800
	0x140831d4a: mov qword ptr [rsp], rcx
	0x140831d4e: movabs rcx, 0x799ea5ff
	0x140831d58: shr rcx, 1
	0x140831d5c: push r15
	0x140831d5e: movabs r15, 0xb8b935b
	0x140831d68: and r15, 0x7eb7516c
	0x140831d6f: xor r15, 0x4db2385b
	0x140831d76: xor rcx, r15
	0x140831d7d: add rsp, 8
	0x140831d81: mov rdi, rcx
	0x140831d84: pop rcx
	0x140831d85: sub r13, 0xe2ffdbe
	0x140831d8c: sub r13, 0x7dfff37
	0x140831d93: sub r13, rdi
	0x140831d96: add r13, 0x7dfff37
	0x140831d9d: add r13, 0xe2ffdbe
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831da4: mov rdi, qword ptr [rsp]
	0x140831da8: sub rsp, 8
	0x140831dac: push r8
	0x140831dae: mov r8, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 4 | ((((0xffffffff4d3bfd17 + ((0xffffffffffffffff * context) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 4) & 0xf)) << 4 | 0x0)
	0x140831db1: mov qword ptr [rsp + 8], r8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140831db6: push qword ptr [rsp]
	0x140831db9: pop r8
	0x140831dbb: add rsp, 8
	0x140831dbf: mov r9, rsp
	0x140831dc2: add r9, 8
	0x140831dc6: add r9, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dcd: xor r9, qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1000
	0x140831dd1: xor qword ptr [rsp], r9
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dd9: mov rsp, qword ptr [rsp]
	0x140831de4: mov r15, 0x400
	0x140831deb: sub rsp, 8
	0x140831df2: mov qword ptr [rsp], rdx
	0x140831df6: mov rdx, rsp
	0x140831df9: add rdx, 8
	0x140831dfd: push 0x2d221d5a
	0x140831e02: mov qword ptr [rsp], rdi
	0x140831e06: movabs rdi, 8
	0x140831e10: sub rdx, rdi
unknown read addr: ff0 0xff0
	0x140831e13: mov rdi, qword ptr [rsp]
	0x140831e17: add rsp, 8
unknown read addr: ff8 0xff8
	0x140831e1b: xchg qword ptr [rsp], rdx
unknown read addr: ff8 0xff8
	0x140831e1f: mov rsp, qword ptr [rsp]
	0x140831e23: push r14
unknown read addr: ff0 0xff0
	0x140831e25: pop qword ptr [rsp]
	0x140831e28: movabs r14, 0x7efde3b5
	0x140831e32: dec r14
	0x140831e35: xor r14, 0x14da5629
	0x140831e3c: sub r14, 1
	0x140831e40: xor r14, 0x6a27b4d9
	0x140831e47: sub r13, 0x5ece19cb
	0x140831e4e: add r13, r14
	0x140831e51: add r13, 0x5ece19cb
unknown read addr: ff8 0xff8
	0x140831e58: push qword ptr [rsp]
	0x140831e5f: add rsp, 8
	0x140831e63: push rsi
	0x140831e64: mov rsi, rsp
	0x140831e67: add rsi, 8
	0x140831e6b: push rdi
	0x140831e6c: movabs rdi, 0x65ffae00
	0x140831e76: not rdi
	0x140831e79: sub rdi, 0x5bf7bcdc
	0x140831e80: push r10
	0x140831e82: movabs r10, 0xc1f76ae5
	0x140831e8c: add rdi, r10
	0x140831e8f: pop r10
	0x140831e91: add rsi, rdi
	0x140831e94: pop rdi
	0x140831e95: sub rsp, 8
	0x140831e99: mov qword ptr [rsp], rsi
	0x140831e9d: push qword ptr [rsp + 8]
	0x140831ea1: mov rsi, qword ptr [rsp]
	0x140831ea5: add rsp, 8
	0x140831eac: pop qword ptr [rsp]
	0x140831eaf: pop rsp
	0x140831eb7: push 0x4708252a
	0x140831ebc: push rbx
	0x140831ebd: pop qword ptr [rsp]
	0x140831ec0: push r11
	0x140831ec2: sub rsp, 8
	0x140831ec6: mov qword ptr [rsp], rax
	0x140831eca: movabs rax, 0x7767c9b6
	0x140831ed4: movabs r11, 0xc8fbef9
	0x140831ede: xor r11, rax
	0x140831ee5: push rdi
	0x140831ee6: mov rdi, rsp
	0x140831ee9: add rdi, 8
	0x140831eed: add rdi, 8
	0x140831ef4: xchg qword ptr [rsp], rdi
	0x140831ef8: pop rsp
	0x140831ef9: mov rbx, r11
	0x140831f00: add rsp, 8
	0x140831f07: xchg rbx, r12
	0x140831f0a: push r12
	0x140831f0c: not qword ptr [rsp]
	0x140831f10: pop r12
	0x140831f12: xchg rbx, r12
	0x140831f15: shr rbx, 2
	0x140831f19: push r12
	0x140831f1b: movabs r12, 0x27df7d1e
	0x140831f25: and r12, 0x5e9f7e8c
	0x140831f2c: shl r12, 3
	0x140831f30: add r12, -1
	0x140831f34: and r12, 0x3effb6c6
	0x140831f3b: xor r12, 0xb8ee917
	0x140831f42: add rbx, r12
	0x140831f49: add rsp, 8
	0x140831f4d: sub rsp, 8
	0x140831f54: push r15
	0x140831f56: mov r15, rsi
	0x140831f59: push r15
	0x140831f5b: pop qword ptr [rsp + 8]
	0x140831f63: add rsp, 8
	0x140831f67: movabs rsi, 0xbfffffffdf84d489
	0x140831f71: add rbx, 0x77bf8510
	0x140831f78: add rbx, rsi
	0x140831f7b: sub rbx, 0x77bf8510
	0x140831f82: pop rsi
Load [EBP+0x145](STATIC)
bytecode=0x140941294
	0x140831f83: add qword ptr [r13], rbx
	0x140831f8b: add rsp, 8
	0x140831f8f: xor r10, 0x594d5d99
	0x140831f96: push r10
	0x140831ff5: pop r9
	0x140831ff7: xor r9, 0x594d5d99
	0x140831ffe: jmp r9
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094129f
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f095: mov r9, rbp
	0x14081f098: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f09f: xor dword ptr [r9], 0x16359d86
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409412af
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409412ba
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0xe8](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409412c6
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x1409412d0
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409412d8
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x14d](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0xb7]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x1409412e4
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x2e](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x14d]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 2 | 0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 2 | 0x0) << 4 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0xf)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x1409412f0
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409412f8
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x155]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t1105
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48322
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a4832e
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140941304
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x14094130e
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094131c
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with ret
	0x140782677: mov rax, 0
	0x14078267e: mov r15, rbp
	0x140782681: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140782688: mov r15, qword ptr [r15]
	0x14078268b: add r15, 0xa
	0x140782692: mov ax, word ptr [r15]
	0x140782696: add rax, rbp
	0x140782699: mov rdi, 0
	0x1407826a0: mov r9, rbp
	0x1407826a3: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407826aa: mov r9, qword ptr [r9]
	0x1407826ad: add r9, 0
	0x1407826b4: mov di, word ptr [r9]
	0x1407826b8: add rdi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407826bb: push qword ptr [rax]
Load [EBP+0xc3](VM_REGISTER)
	0x1407826bd: push qword ptr [rdi]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x1407826bf: pop qword ptr [rax]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x1407826c1: pop qword ptr [rdi]
	0x1407826d4: mov rdx, rbp
	0x1407826e5: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407826fd: mov rdx, qword ptr [rdx]
	0x140782707: add rdx, 8
	0x140782715: movzx rax, word ptr [rdx]
	0x140782720: mov r12, rbp
	0x14078272a: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078273b: sub eax, dword ptr [r12]
	0x140782749: mov r13, rbp
	0x14078274f: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140782767: xor eax, dword ptr [r13]
	0x140782779: mov rsi, rbp
	0x140782783: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078278a: add dword ptr [rsi], eax
	0x14078278c: mov r15, rbp
	0x14078279d: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407827b5: xor dword ptr [r15], 0x6e46f922
	0x1407827c9: mov r15, rbp
	0x1407827d3: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407827e1: mov r8b, byte ptr [r15]
	0x1407827e4: cmp r8b, 0xbc
	0x1407827e8: jbe 0x140782812
	0x1407827ff: sub eax, 0x565d8ee7
	0x140782812: mov r10, rbp
	0x14078281f: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140782830: xor word ptr [r10], ax
	0x140782842: mov r10, rbp
	0x14078285a: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140782861: mov r10, qword ptr [r10]
	0x140782864: add r10, 2
	0x14078286e: mov edi, dword ptr [r10]
	0x140782882: mov r10, rbp
	0x140782885: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078288c: sub edi, dword ptr [r10]
	0x140782892: mov r13, rbp
	0x1407828a6: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407828ad: add edi, dword ptr [r13]
	0x1407828bf: mov r8, rbp
	0x1407828c2: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407828c9: or dword ptr [r8], edi
	0x1407828cc: mov r13, rbp
	0x1407828dd: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407828f1: add dword ptr [r13], 0x1edd52d5
	0x140782900: mov r8, rbp
	0x140782918: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140782930: add dword ptr [r8], edi
	0x140782933: mov r12, rbp
	0x140782940: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140782947: xor dword ptr [r12], edi
	0x140782968: mov r11, rbp
	0x140782979: mov r15, rbp
	0x140782983: add r15, 0x145
	0x14078298a: add r11, 0xab
	0x140782997: xor r12, 0x10
Load [EBP+0x145](STATIC)
	0x14078299e: mov r15, qword ptr [r15]
Load [EBP+0xab](STATIC)
	0x1407829a1: mov r11, qword ptr [r11]
	0x1407829b2: add r15, 6
	0x1407829c3: movzx r15, word ptr [r15]
	0x1407829fe: sub r15d, 0x3a179fa4
	0x140782a0c: mov r8, 0
	0x140782a37: and r15, 0xffff
	0x140782a41: shl r15, 3
	0x140782a45: add r11, r15
	0x140782a52: mov r15, qword ptr [r11]
	0x140782a5c: mov r10, rbp
	0x140782a66: add r8, 0x80
	0x140782a6d: mov rcx, 0x200
	0x140782a74: add r10, 0xfd
Store [EBP+0xfd](STATIC)
	0x140782a7b: mov qword ptr [r10], r15
	0x140782a8f: mov r13, rbp
	0x140782a99: add r13, 0x58
	0x140782aa0: and r12, 0x20
Load [EBP+0x58](STATIC)
	0x140782aae: mov r13d, dword ptr [r13]
	0x140782abc: sub r13d, 0x34729ddf
	0x140782acd: mov rdx, rbp
	0x140782ad0: or r12, 0xffff
	0x140782ade: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x140782ae5: movzx rdx, word ptr [rdx]
	0x140782af3: add dx, 0xd1a6
	0x140782af8: add rdx, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140782b02: mov rdx, qword ptr [rdx]
	0x140782b05: mov dword ptr [rdx], r13d
	0x140782b08: mov rax, rbp
	0x140782b0b: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x140782b1f: mov rdi, qword ptr [rax]
	0x140782b29: mov r8b, 0xbc
	0x140782b33: mov rdx, r12
	0x140782b36: mov r11, rbp
	0x140782b39: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140782b40: sub byte ptr [r11], r8b
	0x140782b43: mov r9, rdi
	0x140782b46: push 0x6ec0eaea
	0x140782b4b: sub rsp, 8
	0x140782b4f: sub rsp, 8
	0x140782b53: push 0x55af9c2
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x130 + context) & 0xffffffffffffffff)
	0x140782b58: mov qword ptr [rsp], r11
	0x140782b5c: push rsp
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x140782b5d: mov r11, qword ptr [rsp]
	0x140782b61: add rsp, 8
	0x140782b68: add r11, 8
	0x140782b6c: sub r11, 8
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x140782b73: xor r11, qword ptr [rsp]
	0x140782b77: push rcx
	0x140782b78: push r11
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((0xffffffffffffffe0 + stack) & 0xffffffffffffffff) ^ ((0x130 + context) & 0xffffffffffffffff)) ^ 0x6d7b32fa)
	0x140782b7a: xor qword ptr [rsp], 0x6d7b32fa
	0x140782b82: pop rcx
	0x140782b83: xor rcx, 0x6d7b32fa
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: 0xfe0
	0x140782b8a: xor qword ptr [rsp + 8], rcx
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x140782b8f: push qword ptr [rsp]
	0x140782b92: pop rcx
	0x140782b93: add rsp, 8
	0x140782b9a: xor r11, qword ptr [rsp]
	0x140782b9e: mov rsp, qword ptr [rsp]
	0x140782ba2: sub rsp, 8
	0x140782ba9: push rdi
	0x140782baa: pop qword ptr [rsp]
	0x140782bad: pop qword ptr [rsp]
	0x140782bb0: pop qword ptr [rsp]
	0x140782bb3: pop qword ptr [rsp]
	0x140782bb6: pop qword ptr [rsp]
	0x140782bb9: mov r15, 1
	0x140782bc3: or r15, 0x88
	0x140782bca: sub rdx, r15
	0x140782bcd: push 0x46b3a75a
	0x140782bd2: mov qword ptr [rsp], r9
	0x140782bd6: sub rsp, 8
	0x140782bda: mov qword ptr [rsp], rbp
	0x140782bde: mov r9, qword ptr [rsp]
	0x140782be2: add rsp, 8
	0x140782be9: sub rsp, 8
	0x140782bed: sub rsp, 8
	0x140782bf4: mov qword ptr [rsp], r9
	0x140782bf8: pop qword ptr [rsp]
	0x140782bfb: push qword ptr [rsp]
	0x140782bfe: push qword ptr [rsp]
	0x140782c01: push qword ptr [rsp]
	0x140782c04: mov rcx, qword ptr [rsp]
	0x140782c08: add rsp, 8
	0x140782c0f: add rsp, 8
	0x140782c13: add rsp, 8
	0x140782c17: add rsp, 8
	0x140782c1b: push qword ptr [rsp]
	0x140782c1e: push qword ptr [rsp]
	0x140782c21: pop r9
	0x140782c23: add rsp, 8
	0x140782c2a: add rsp, 8
	0x140782c2e: or r9, 0x800
	0x140782c3c: xor rdx, 0x40
	0x140782c43: and r15, 0x78
	0x140782c4a: sub rsp, 8
	0x140782c4e: push 0x67413844
	0x140782c53: push 0x23c4c8b6
	0x140782c58: mov qword ptr [rsp], r9
	0x140782c5c: pop qword ptr [rsp]
	0x140782c5f: pop qword ptr [rsp]
	0x140782c62: push 0x5755689a
	0x140782c67: mov qword ptr [rsp], rcx
	0x140782c6b: push r8
	0x140782c6d: push r15
	0x140782c6f: movabs r15, 0x145
	0x140782c79: mov r8, r15
	0x140782c80: add rsp, 8
	0x140782c87: sub rsp, 8
	0x140782c8b: push r8
	0x140782c8d: pop qword ptr [rsp]
	0x140782c90: mov rcx, qword ptr [rsp]
	0x140782c94: add rsp, 8
	0x140782c9b: pop r8
	0x140782c9d: mov r9, rcx
	0x140782ca0: mov rcx, qword ptr [rsp]
	0x140782ca4: add rsp, 8
	0x140782ca8: add rcx, 0x597ea394
	0x140782caf: sub rcx, 0x7fd7dffe
	0x140782cb6: add rcx, r9
	0x140782cb9: add rcx, 0x7fd7dffe
	0x140782cc0: sub rcx, 0x597ea394
	0x140782cc7: push qword ptr [rsp]
	0x140782cca: pop r9
	0x140782ccc: add rsp, 8
	0x140782cef: push 0x2b124456
	0x140782cf4: mov qword ptr [rsp], r11
	0x140782cf8: push rcx
	0x140782cf9: movabs rcx, 0x7fb77657
	0x140782d03: push 0x314c1e82
	0x140782d08: mov qword ptr [rsp], rax
	0x140782d0c: push r11
	0x140782d0e: movabs r11, 0x4f9e8d1d
	0x140782d18: movabs rax, 0x5ebcb907
	0x140782d22: push rcx
	0x140782d23: movabs rcx, 0xfba70efd
	0x140782d2d: xor rax, rcx
	0x140782d30: pop rcx
	0x140782d31: sub rax, r11
	0x140782d34: pop r11
	0x140782d36: movabs r11, 0x33fbf144
	0x140782d40: xor r11, 0x6e623c2c
	0x140782d47: sub r11, rax
	0x140782d4a: pop rax
	0x140782d4b: xor r11, rcx
	0x140782d4e: pop rcx
	0x140782d4f: shl r11, 4
	0x140782d53: add r11, 1
	0x140782d57: sub rsp, 8
	0x140782d5b: sub rsp, 8
	0x140782d62: mov qword ptr [rsp], rcx
	0x140782d66: push rdx
	0x140782d67: push qword ptr [rsp]
	0x140782d6a: pop rcx
	0x140782d6b: add rsp, 8
	0x140782d6f: push rcx
	0x140782d70: pop qword ptr [rsp + 8]
	0x140782d74: mov rcx, qword ptr [rsp]
	0x140782d78: add rsp, 8
	0x140782d7f: movabs rdx, 0x77abd4db5
	0x140782d89: sub r11, rdx
	0x140782d90: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140941328
	0x140782d94: add qword ptr [rcx], r11
	0x140782d97: push qword ptr [rsp]
	0x140782d9a: pop r11
	0x140782d9c: add rsp, 8
	0x140782dd2: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407ec587: mov r15, 0
	0x1407ec58e: mov r10, rbp
	0x1407ec591: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec598: mov r10, qword ptr [r10]
	0x1407ec59b: add r10, 0xa
	0x1407ec5a2: mov r15w, word ptr [r10]
	0x1407ec5a6: add r15, rbp
	0x1407ec5a9: mov r10, 0
	0x1407ec5b0: mov r13, rbp
	0x1407ec5b3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5ba: mov r13, qword ptr [r13]
	0x1407ec5be: add r13, 8
	0x1407ec5c5: mov r10w, word ptr [r13]
	0x1407ec5ca: add r10, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407ec5cd: push qword ptr [r15]
Load [EBP+0x15d](VM_REGISTER)
	0x1407ec5d0: push qword ptr [r10]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407ec5d3: pop qword ptr [r15]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407ec5d6: pop qword ptr [r10]
	0x1407ec5d9: mov r13, rbp
	0x1407ec5e3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5f4: mov r13, qword ptr [r13]
	0x1407ec605: add r13, 6
	0x1407ec60f: movzx r12, word ptr [r13]
	0x1407ec61b: mov r15, rbp
	0x1407ec628: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec62f: sub r12d, dword ptr [r15]
	0x1407ec63c: mov rax, rbp
	0x1407ec642: add rax, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407ec648: xor r12d, dword ptr [rax]
	0x1407ec655: mov r10, rbp
	0x1407ec666: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec66d: sub dword ptr [r10], r12d
	0x1407ec677: mov rax, rbp
	0x1407ec67a: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec68a: add dword ptr [rax], 0x34acd0d9
	0x1407ec690: mov rcx, rbp
	0x1407ec6a1: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1407ec6af: mov r14b, byte ptr [rcx]
	0x1407ec6b2: cmp r14b, 0x31
	0x1407ec6b6: jbe 0x1407ec6d1
	0x1407ec6d1: mov rdx, rbp
	0x1407ec6db: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407ec6ec: xor word ptr [rdx], r12w
	0x1407ec6f0: mov r13, rbp
	0x1407ec6fa: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec704: mov r13, qword ptr [r13]
	0x1407ec712: add r13, 0
	0x1407ec720: mov r12d, dword ptr [r13]
	0x1407ec731: mov rax, rbp
	0x1407ec734: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec744: xor r12d, dword ptr [rax]
	0x1407ec781: mov rdx, rbp
	0x1407ec784: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec792: xor dword ptr [rdx], r12d
	0x1407ec798: mov rdi, rbp
	0x1407ec79b: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec7a5: or dword ptr [rdi], 0x56aa0b47
	0x1407ec7c0: mov r11, rbp
	0x1407ec7d1: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407ec7ed: add dword ptr [r11], r12d
	0x1407ec7f0: mov r14, rbp
	0x1407ec804: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407ec812: xor dword ptr [r14], r12d
	0x1407ec81c: mov rax, rbp
	0x1407ec81f: mov r10, 0
	0x1407ec82d: mov r14, rbp
	0x1407ec83e: add r14, 0xab
	0x1407ec845: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec860: mov rax, qword ptr [rax]
	0x1407ec86a: add rax, 4
	0x1407ec885: movzx rax, word ptr [rax]
	0x1407ec889: mov r8, 0
Load [EBP+0xab](STATIC)
	0x1407ec890: mov r14, qword ptr [r14]
	0x1407ec893: mov rsi, rbp
	0x1407ec896: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec8a4: sub eax, dword ptr [rsi]
	0x1407ec8b4: xor r8, 4
	0x1407ec8bb: xor eax, 0x19b980fc
	0x1407ec8d1: mov rdx, rbp
	0x1407ec8d4: add rdx, 0xbf
	0x1407ec8db: xor r8, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec8e2: or dword ptr [rdx], eax
	0x1407ec8e4: mov r11, r10
	0x1407ec8ee: and rax, 0xffff
	0x1407ec8f4: sub r8, rax
	0x1407ec8f7: mov rcx, r10
	0x1407ec8fa: shl rax, 3
	0x1407ec8fe: xor r11, 8
	0x1407ec905: add r14, rax
	0x1407ec908: mov r10, qword ptr [r14]
	0x1407ec90b: mov rbx, rbp
	0x1407ec90e: add rbx, 0xfd
	0x1407ec91c: xor r11, 1
Store [EBP+0xfd](STATIC)
	0x1407ec923: mov qword ptr [rbx], r10
	0x1407ec926: mov r9, 0x200
	0x1407ec92d: xor rdx, rbx
	0x1407ec930: mov r14, rbp
	0x1407ec933: or r8, 0x20
	0x1407ec93a: xor r9, 0x7fffffff
	0x1407ec944: mov r15, rbp
	0x1407ec947: sub rdx, 0x40
	0x1407ec955: add r15, 0x58
	0x1407ec95c: xor r11, rcx
	0x1407ec962: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407ec972: movzx r14, word ptr [r14]
Load [EBP+0x58](STATIC)
	0x1407ec976: mov r15d, dword ptr [r15]
	0x1407ec979: sub r15d, 0x310f47f5
	0x1407ec983: mov rax, r15
	0x1407ec986: sub r14w, 0xfb81
	0x1407ec993: add r14, rbp
Store VM_REG [EBP+0x14d]
	0x1407ec9a4: mov qword ptr [r14], r15
	0x1407ec9ae: mov r10, 0x200
	0x1407ec9b5: xor r10, 0x40
	0x1407ec9d1: or r10, 8
	0x1407ec9db: mov rsi, 0x400
	0x1407eca05: mov rbx, 1
	0x1407eca0f: or rsi, 0xffff
	0x1407eca16: mov rdi, r10
	0x1407eca19: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x1407eca1d: mov qword ptr [rsp], rcx
	0x1407eca21: push 0x23c39100
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407eca26: mov qword ptr [rsp], rbp
	0x1407eca2a: push rdi
	0x1407eca2b: movabs rdi, 0x4bef41e7
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x4bef41e7 + context) & 0xffffffffffffffff)
	0x1407eca35: add qword ptr [rsp + 8], rdi
	0x1407eca3a: pop rdi
	0x1407eca3b: pop rcx
	0x1407eca3c: sub rcx, 0x4bef41e7
	0x1407eca43: push 0x6d044fc2
	0x1407eca48: push r8
	0x1407eca4a: mov r8, rsp
	0x1407eca4d: add r8, 8
	0x1407eca51: push rcx
	0x1407eca52: movabs rcx, 0x4dfad9d6
	0x1407eca5c: not rcx
	0x1407eca5f: push r8
	0x1407eca61: mov r8, 0x4dfad9df
	0x1407eca68: add rcx, r8
	0x1407eca6b: pop r8
	0x1407eca6d: sub r8, rcx
	0x1407eca70: pop rcx
	0x1407eca71: xchg qword ptr [rsp], r8
	0x1407eca75: mov rsp, qword ptr [rsp]
	0x1407eca79: sub rsp, 8
	0x1407eca7d: push rbp
	0x1407eca7e: pop qword ptr [rsp]
	0x1407eca81: pop qword ptr [rsp]
	0x1407eca84: pop qword ptr [rsp]
	0x1407eca87: push rbx
	0x1407eca88: push rcx
	0x1407eca89: pop rbx
	0x1407eca8a: mov rbp, rbx
	0x1407eca8d: pop rbx
	0x1407eca8e: push rbp
	0x1407eca8f: sub qword ptr [rsp], 0x5f4dcc71
	0x1407eca97: mov r8, qword ptr [rsp]
	0x1407eca9b: add rsp, 8
	0x1407ecaa2: add r8, 0x5f4dcc71
	0x1407ecaa9: mov rbp, qword ptr [rsp]
	0x1407ecaad: add rsp, 8
	0x1407ecab1: pop rcx
	0x1407ecab2: sub rsi, 0x88
	0x1407ecab9: add rsi, 0x20
	0x1407ecac0: push r10
	0x1407ecac2: push rsi
	0x1407ecac3: push rbx
	0x1407ecac4: push rsp
	0x1407ecac5: pop rbx
	0x1407ecac6: add rbx, 8
	0x1407ecaca: sub rbx, 8
	0x1407ecad1: xchg qword ptr [rsp], rbx
	0x1407ecad5: pop rsp
	0x1407ecad6: mov qword ptr [rsp], rbx
	0x1407ecada: push 0x31b62587
	0x1407ecadf: mov qword ptr [rsp], r8
	0x1407ecae3: movabs r8, 0x77f9f5ee
	0x1407ecaed: sub rsp, 8
	0x1407ecaf1: mov qword ptr [rsp], r11
	0x1407ecaf5: movabs r11, 0x6ffb5392
	0x1407ecaff: shl r11, 7
	0x1407ecb03: and r11, 0x76f7a183
	0x1407ecb0a: dec r11
	0x1407ecb0d: push r9
	0x1407ecb0f: mov r9, 0x78e6b6ed
	0x1407ecb16: sub r11, r9
	0x1407ecb19: pop r9
	0x1407ecb1b: mov rbx, r11
	0x1407ecb1e: pop r11
	0x1407ecb20: add rbx, r8
	0x1407ecb23: pop r8
	0x1407ecb25: push rbx
	0x1407ecb26: pop rsi
	0x1407ecb27: push qword ptr [rsp]
	0x1407ecb2a: mov rbx, qword ptr [rsp]
	0x1407ecb2e: add rsp, 8
	0x1407ecb32: push rbx
	0x1407ecb33: mov rbx, rsp
	0x1407ecb36: add rbx, 8
	0x1407ecb3a: add rbx, 8
	0x1407ecb41: xchg qword ptr [rsp], rbx
	0x1407ecb45: pop rsp
	0x1407ecb46: movabs r10, 0xeba43340
	0x1407ecb50: sub r10, rsi
	0x1407ecb53: mov rsi, qword ptr [rsp]
	0x1407ecb57: add rsp, 8
	0x1407ecb5b: add r10, -1
	0x1407ecb5f: dec r10
	0x1407ecb62: inc r10
	0x1407ecb65: and r10, 0x76f6abf0
	0x1407ecb6c: shl r10, 3
	0x1407ecb70: push rcx
	0x1407ecb71: movabs rcx, 0x3b731183b
	0x1407ecb7b: sub r10, rcx
	0x1407ecb7e: pop rcx
	0x1407ecb7f: sub r8, 0x64bbea81
	0x1407ecb86: add r8, r10
	0x1407ecb89: add r8, 0x64bbea81
	0x1407ecb90: push qword ptr [rsp]
	0x1407ecb93: pop r10
	0x1407ecb95: add rsp, 8
	0x1407ecba0: add rdi, 0x7fffffff
	0x1407ecba7: and rsi, 0xf0
	0x1407ecbae: push rsi
	0x1407ecbaf: movabs rsi, 0x4ebf22cc
	0x1407ecbb9: not rsi
	0x1407ecbbc: push r15
	0x1407ecbbe: movabs r15, 0x5fea8592
	0x1407ecbc8: add rsi, r15
	0x1407ecbcb: pop r15
	0x1407ecbcd: xor rsi, 0x5ffb70e6
	0x1407ecbd4: push rax
	0x1407ecbd5: movabs rax, 0x776f28e0
	0x1407ecbdf: push rdx
	0x1407ecbe0: movabs rdx, 0x5db69e5a
	0x1407ecbea: add rax, rdx
	0x1407ecbed: pop rdx
	0x1407ecbee: add rax, 1
	0x1407ecbf2: neg rax
	0x1407ecbf5: shl rax, 7
	0x1407ecbf9: xor rax, 0x7f2dfa00
	0x1407ecbff: sub rsp, 8
	0x1407ecc03: mov qword ptr [rsp], rdi
	0x1407ecc07: movabs rdi, 0xffffff94c3618651
	0x1407ecc11: sub rax, rdi
	0x1407ecc14: pop rdi
	0x1407ecc15: xor rsi, rax
	0x1407ecc18: pop rax
	0x1407ecc19: sub rsp, 8
	0x1407ecc1d: mov qword ptr [rsp], r11
	0x1407ecc21: push rdx
	0x1407ecc22: push 0x7b5764e4
	0x1407ecc27: mov rdx, qword ptr [rsp]
	0x1407ecc2b: add rsp, 8
	0x1407ecc2f: not rdx
	0x1407ecc32: inc rdx
	0x1407ecc35: shl rdx, 2
	0x1407ecc39: add edx, 0xed5d9390
	0x1407ecc3f: push 0x32dacacd
	0x1407ecc44: push r8
	0x1407ecc46: pop qword ptr [rsp]
	0x1407ecc49: mov r8, rdx
	0x1407ecc4c: mov r11, r8
	0x1407ecc4f: mov r8, qword ptr [rsp]
	0x1407ecc53: sub rsp, 8
	0x1407ecc5a: mov qword ptr [rsp], rdx
	0x1407ecc5e: mov rdx, rsp
	0x1407ecc61: add rdx, 8
	0x1407ecc65: add rdx, 8
	0x1407ecc6c: xchg qword ptr [rsp], rdx
	0x1407ecc70: pop rsp
	0x1407ecc71: mov rdx, qword ptr [rsp]
	0x1407ecc75: push r9
	0x1407ecc77: mov r9, rsp
	0x1407ecc7a: add r9, 8
	0x1407ecc7e: add r9, 8
	0x1407ecc85: xchg qword ptr [rsp], r9
	0x1407ecc89: pop rsp
	0x1407ecc8a: add r11, r8
	0x1407ecc8d: push rdx
	0x1407ecc8e: mov rdx, 0
	0x1407ecc95: add rdx, r11
Load [EBP+0x145](STATIC)
bytecode=0x140941334
	0x1407ecc98: add qword ptr [rdx], rsi
	0x1407ecc9b: pop rdx
	0x1407ecc9c: pop r11
	0x1407ecc9e: pop rsi
	0x1407ecca6: mov r10, rbp
	0x1407eccb0: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407eccc5: mov r15, qword ptr [r10]
	0x1407eccd9: sub r15, 0x5f3b81ea
	0x1407ecce7: push r15
	0x1407ecd07: pop rcx
	0x1407ecd08: add rcx, 0x5f3b81ea
	0x1407ecd0f: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407b2877: mov r10, 0x4e96a912
	0x1407b287e: mov r15, 0
	0x1407b2885: mov r11, rbp
	0x1407b2888: add r11, 0xa7
	0x1407b288f: mov rdi, rbp
	0x1407b2892: add rdi, 0x145
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b2899: sub dword ptr [r11], r10d
Load [EBP+0x145](STATIC)
	0x1407b289c: mov rdi, qword ptr [rdi]
	0x1407b289f: add rdi, 6
	0x1407b28a6: mov r15w, word ptr [rdi]
	0x1407b28aa: add r15, rbp
	0x1407b28ad: mov rdi, 0
	0x1407b28b4: mov r11, rbp
	0x1407b28b7: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407b28be: mov r11, qword ptr [r11]
	0x1407b28c1: add r11, 8
	0x1407b28c8: mov di, word ptr [r11]
	0x1407b28cc: add rdi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x1407b28cf: push qword ptr [r15]
Load [EBP+0x7a](VM_REGISTER)
	0x1407b28d2: push qword ptr [rdi]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x1407b28d4: pop qword ptr [r15]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x1407b28d7: pop qword ptr [rdi]
	0x1407b28d9: mov r8, 0x68ce9155
	0x1407b28e0: mov r11, rbp
	0x1407b28e3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b28ea: and dword ptr [r11], r8d
	0x1407b28fb: mov r13, rbp
	0x1407b2905: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407b291a: mov r13, qword ptr [r13]
	0x1407b2925: add r13, 2
	0x1407b293d: movzx rax, word ptr [r13]
	0x1407b294c: mov r11, rbp
	0x1407b2960: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b2971: sub eax, dword ptr [r11]
	0x1407b2974: mov rdi, rbp
	0x1407b2977: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407b298f: sub eax, dword ptr [rdi]
	0x1407b29b7: mov r13, rbp
	0x1407b29cf: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b29dd: or dword ptr [r13], 0x5d91b588
	0x1407b29e5: mov rbx, rbp
	0x1407b29f2: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407b2a07: mov dl, byte ptr [rbx]
	0x1407b2a09: cmp dl, 0x2f
	0x1407b2a0c: jbe 0x1407b2a25
	0x1407b2a3a: mov r15, rbp
	0x1407b2a3d: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407b2a52: add word ptr [r15], ax
	0x1407b2a5d: mov rdx, rbp
	0x1407b2a85: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407b2a93: movzx rsi, word ptr [rdx]
	0x1407b2aac: sub si, 0x41a0
	0x1407b2ad5: add rsi, rbp
	0x1407b2ae9: mov r13, rbp
	0x1407b2aec: add r13, 0x18
Load [EBP+0x18](STATIC)
	0x1407b2b00: mov rbx, qword ptr [r13]
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x1407b2b0a: add qword ptr [rsi], rbx
	0x1407b2b10: mov r8, rbp
	0x1407b2b1d: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407b2b2f: mov esi, dword ptr [r8]
	0x1407b2b3f: and esi, 1
	0x1407b2b45: cmp esi, 0
	0x1407b2b4b: je 0x1407b2b5b
	0x1407b2ba0: mov rax, rbp
	0x1407b2ba3: add rax, 0xab
	0x1407b2bba: mov r14, rbp
	0x1407b2bce: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2bd5: mov r14, qword ptr [r14]
Load [EBP+0xab](STATIC)
	0x1407b2be9: mov rax, qword ptr [rax]
	0x1407b2bf3: add r14, 0
	0x1407b2bfa: movzx r14, word ptr [r14]
	0x1407b2c05: mov r9, rbp
	0x1407b2c19: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b2c23: add r14d, dword ptr [r9]
	0x1407b2c26: xor r14d, 0x529d523b
	0x1407b2c42: mov rdi, rbp
	0x1407b2c53: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2c5a: and dword ptr [rdi], r14d
	0x1407b2c67: and r14, 0xffff
	0x1407b2c7f: shl r14, 3
	0x1407b2c83: add rax, r14
	0x1407b2c90: mov r15, qword ptr [rax]
	0x1407b2c9a: mov rsi, rbp
	0x1407b2ca0: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094133e
	0x1407b2ca7: add qword ptr [rsi], 0xa
	0x1407b2cae: jmp r15
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941346
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094134e
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941354
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094135e
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941364
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094136a
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941370
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941376
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094137e
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941386
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094138c
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941392
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094139a
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413a0
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413a8
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413b0
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413b6
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413be
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413c6
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409413e8
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941402
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941404
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



basic block ends with ret
	0x1408915c8: mov r8, 0
	0x1408915cf: mov r11, rbp
	0x1408915d2: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1408915d9: mov r11, qword ptr [r11]
	0x1408915dc: add r11, 6
	0x1408915e3: mov r8w, word ptr [r11]
	0x1408915e7: add r8, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1408915ea: mov r8, qword ptr [r8]
Deref(t1238,ds)
	0x1408915ed: mov r8, qword ptr [r8]
	0x1408915f0: mov rax, 0
	0x1408915f7: mov rsi, rbp
	0x1408915fa: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140891601: mov rsi, qword ptr [rsi]
	0x140891604: add rsi, 4
	0x14089160b: mov ax, word ptr [rsi]
	0x14089160e: add rax, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: t1239
	0x140891611: mov qword ptr [rax], r8
	0x140891614: add rax, 8
	0x14089161a: mov r14, 0
	0x140891621: mov r15, rbp
	0x140891624: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14089162b: mov r15, qword ptr [r15]
	0x14089162e: add r15, 0
	0x140891635: mov r14d, dword ptr [r15]
	0x140891638: mov rbx, rbp
	0x14089163b: add rbx, 0x18
Load [EBP+0x18](STATIC)
	0x140891642: add r14, qword ptr [rbx]
unknown store addr: 1088, lea_ast: ((0x88 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1409429aa
	0x140891645: mov qword ptr [rax], r14
	0x140891648: mov rbx, rbp
	0x14089164b: add rbx, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x140891652: mov dword ptr [rbx], 0
	0x140891658: pop r8
	0x14089165a: pop r9
	0x14089165c: pop r10
	0x14089165e: pop r11
	0x140891660: pop r12
	0x140891662: pop r13
	0x140891664: pop r14
	0x140891666: pop r15
	0x140891668: pop rdi
	0x140891669: pop rsi
	0x14089166a: pop rbp
	0x14089166b: pop rbx
	0x14089166c: pop rdx
	0x14089166d: pop rcx
	0x14089166e: pop rax
	0x14089166f: popfq
	0x140891670: ret 0
ret handler 0, 1409429aa
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a310c
[0x140765772]=0x14094140c
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x14094140c <- ByteCode
	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x15d](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941414
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407d44ac: mov r15, rbp
	0x1407d44af: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407d44b6: mov r15, qword ptr [r15]
	0x1407d44b9: add r15, 0xe
	0x1407d44c0: movzx rcx, word ptr [r15]
	0x1407d44c4: add rcx, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407d44c7: mov rcx, qword ptr [rcx]
	0x1407d44ca: sub r8, rcx
	0x1407d44cd: pushfq
	0x1407d44f7: pop r8
	0x1407d4507: mov rbx, rbp
	0x1407d4511: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407d4522: mov rbx, qword ptr [rbx]
	0x1407d452c: add rbx, 2
	0x1407d453d: movzx r10, word ptr [rbx]
	0x1407d4548: add r10, rbp
Store VM_REG [EBP+0x2e]
	0x1407d4560: mov qword ptr [r10], rsp
	0x1407d4563: mov r11, 0
	0x1407d456a: mov r8, rbp
	0x1407d4584: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407d458b: mov r8, qword ptr [r8]
	0x1407d4591: add r8, 0xc
	0x1407d4598: mov r11w, word ptr [r8]
	0x1407d45a0: add r11, rbp
	0x1407d45a3: mov r10, 0
	0x1407d45aa: mov rbx, rbp
	0x1407d45ad: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407d45b4: mov rbx, qword ptr [rbx]
	0x1407d45b7: add rbx, 0xa
	0x1407d45be: mov r10w, word ptr [rbx]
	0x1407d45c2: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407d45c5: push qword ptr [r11]
Load [EBP+0xb7](VM_REGISTER)
	0x1407d45c8: push qword ptr [r10]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407d45cb: pop qword ptr [r11]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407d45ce: pop qword ptr [r10]
	0x1407d45d1: mov r10, rbp
	0x1407d45d4: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407d45db: mov r10, qword ptr [r10]
	0x1407d45de: add r10, 4
	0x1407d45e5: mov edi, dword ptr [r10]
	0x1407d45e8: mov r8, rbp
	0x1407d45eb: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407d45f2: sub dword ptr [r8], edi
	0x1407d45f8: mov rsi, 0xb7c1865
	0x1407d45ff: mov r14, rbp
	0x1407d4602: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407d4609: xor dword ptr [r14], esi
	0x1407d4630: mov rbx, 0
	0x1407d464c: mov r15, rbp
	0x1407d4656: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407d466b: mov r15, qword ptr [r15]
	0x1407d467f: add r15, 0
	0x1407d4686: mov bx, word ptr [r15]
	0x1407d469b: shl rbx, 3
	0x1407d46a9: mov r15, rbp
	0x1407d46b9: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x1407d46c3: mov r9, qword ptr [r15]
	0x1407d46c6: add r9, rbx
	0x1407d46c9: mov rbx, qword ptr [r9]
	0x1407d46cc: mov r14, rbp
	0x1407d46d5: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941424
	0x1407d46dc: add qword ptr [r14], 0x10
	0x1407d46e3: jmp rbx
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x97]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094142c
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe0]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941434
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xc3]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094143c
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x7a]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941444
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941452
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x5c]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094145a
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x105]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941468
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941476
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941484
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x15d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094148c
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094149a
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414a8
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414b0
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xb7]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414be
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xce]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414cc
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414d4
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414da
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



basic block ends with indirect unconditional branch
	0x14083ebc7: mov r15, rbp
	0x14083ebca: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x14083ebd1: mov ecx, dword ptr [r15]
	0x14083ebd4: and ecx, 1
	0x14083ebda: cmp ecx, 0
	0x14083ebe0: je 0x14083ebf7
	0x14083ebe6: mov r15, rbp
	0x14083ebe9: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083ebf0: or dword ptr [r15], 0x5898b5b2
	0x14083ec04: mov rdx, rbp
	0x14083ec14: mov r15, rbp
	0x14083ec17: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14083ec1e: mov rdx, qword ptr [rdx]
	0x14083ec21: add rdx, 3
	0x14083ec32: add r15, 0x145
	0x14083ec39: movzx rdx, word ptr [rdx]
Load [EBP+0x145](STATIC)
	0x14083ec4b: mov r15, qword ptr [r15]
	0x14083ec5f: add rdx, rbp
	0x14083ec69: add r15, 0
	0x14083ec85: movzx r15, byte ptr [r15]
	0x14083ec97: add rsp, r15
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14083ec9a: add qword ptr [rdx], r15
	0x14083ec9d: mov r12, 0x1194700b
	0x14083eca4: mov r10, rbp
	0x14083eca7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083ecae: and dword ptr [r10], r12d
	0x14083ed0a: mov r10, rbp
	0x14083ed1e: mov r8, rbp
	0x14083ed36: add r10, 0xab
	0x14083ed3d: add r8, 0x145
Load [EBP+0xab](STATIC)
	0x14083ed4b: mov r10, qword ptr [r10]
Load [EBP+0x145](STATIC)
	0x14083ed4e: mov r8, qword ptr [r8]
	0x14083ed5f: add r8, 1
	0x14083ed69: movzx r8, word ptr [r8]
	0x14083ed93: xor r8d, 0x40fd3a6
	0x14083edc1: and r8, 0xffff
	0x14083edd9: shl r8, 3
	0x14083ede7: add r10, r8
	0x14083eded: mov rdi, qword ptr [r10]
	0x14083edf0: mov r11, rbp
	0x14083edf3: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414df
	0x14083edfa: add qword ptr [r11], 5
	0x14083ee01: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407eb199: mov r15, 0
	0x1407eb1a0: mov r9, rbp
	0x1407eb1a3: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb1aa: mov r9, qword ptr [r9]
	0x1407eb1ad: add r9, 5
	0x1407eb1b4: mov r15w, word ptr [r9]
	0x1407eb1b8: add r15, rbp
	0x1407eb1bb: mov rdi, 0
	0x1407eb1c2: mov rsi, rbp
	0x1407eb1c5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb1cc: mov rsi, qword ptr [rsi]
	0x1407eb1cf: add rsi, 9
	0x1407eb1d6: mov di, word ptr [rsi]
	0x1407eb1d9: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407eb1dc: push qword ptr [r15]
Load [EBP+0x10](VM_REGISTER)
	0x1407eb1df: push qword ptr [rdi]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x1407eb1e1: pop qword ptr [r15]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x1407eb1e4: pop qword ptr [rdi]
	0x1407eb1ed: mov r10, rbp
	0x1407eb1f0: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb1f7: mov r10, qword ptr [r10]
	0x1407eb1fa: add r10, 1
	0x1407eb20a: movzx rdi, word ptr [r10]
	0x1407eb244: mov r13, rbp
	0x1407eb24e: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb255: sub dword ptr [r13], edi
	0x1407eb260: mov r13, rbp
	0x1407eb26d: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb27a: or dword ptr [r13], 0x4fb073fe
	0x1407eb289: mov r11, rbp
	0x1407eb28c: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x1407eb29a: mov r13b, byte ptr [r11]
	0x1407eb29d: cmp r13b, 0x4a
	0x1407eb2a1: jbe 0x1407eb2ad
	0x1407eb2ad: mov rcx, rbp
	0x1407eb2b7: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407eb2be: sub word ptr [rcx], di
	0x1407eb2e8: mov r8, 0
	0x1407eb2ef: mov rsi, rbp
	0x1407eb2f5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb302: mov rsi, qword ptr [rsi]
	0x1407eb305: add rsi, 0xb
	0x1407eb30c: mov r8w, word ptr [rsi]
	0x1407eb350: mov rax, rbp
	0x1407eb35a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb360: or dword ptr [rax], r8d
	0x1407eb36d: mov r15, rbp
	0x1407eb377: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb37e: or dword ptr [r15], 0x4041eb0f
	0x1407eb385: mov r12, rbp
	0x1407eb396: add r12, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407eb3a0: sub word ptr [r12], r8w
	0x1407eb3a8: mov r10, rbp
	0x1407eb3b2: add r10, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407eb3b9: movzx r10, word ptr [r10]
	0x1407eb3bd: mov rbx, rbp
	0x1407eb3d0: sub r10w, 0xa3a
	0x1407eb3d9: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407eb3e0: movzx rbx, word ptr [rbx]
	0x1407eb3e4: add r10, rbp
	0x1407eb3e7: sub bx, 0x3cc5
	0x1407eb3ec: add rbx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407eb3ef: mov r10, qword ptr [r10]
Load [EBP+0xe8](VM_REGISTER)
	0x1407eb3f2: test dword ptr [rbx], r10d
	0x1407eb3f5: pushfq
	0x1407eb400: mov rax, 0
	0x1407eb407: mov r11, rbp
	0x1407eb418: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb41f: mov r11, qword ptr [r11]
	0x1407eb429: add r11, 0
	0x1407eb437: mov al, byte ptr [r11]
	0x1407eb43a: cmp al, 0
	0x1407eb43c: je 0x1407eb491
	0x1407eb44c: mov r11, rbp
	0x1407eb44f: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb45c: mov r11, qword ptr [r11]
	0x1407eb469: add r11, 3
	0x1407eb470: mov ax, word ptr [r11]
	0x1407eb474: add rax, rbp
	0x1407eb481: pop rdi
Store VM_REG [EBP+0x26]
	0x1407eb482: mov qword ptr [rax], rdi
	0x1407eb4bb: mov r8, rbp
	0x1407eb4c4: mov r13, rbp
	0x1407eb4d1: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb4df: mov r8, qword ptr [r8]
	0x1407eb4ec: add r13, 0xab
	0x1407eb4f6: add r8, 7
	0x1407eb4fd: movzx r8, word ptr [r8]
Load [EBP+0xab](STATIC)
	0x1407eb508: mov r13, qword ptr [r13]
	0x1407eb50c: mov r9, rbp
	0x1407eb516: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407eb52b: add r8d, dword ptr [r9]
	0x1407eb52e: add r8d, 0x3bcabac1
	0x1407eb535: mov r10, rbp
	0x1407eb53f: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb546: sub dword ptr [r10], r8d
	0x1407eb549: and r8, 0xffff
	0x1407eb560: shl r8, 3
	0x1407eb56e: add r13, r8
	0x1407eb57f: mov r11, qword ptr [r13]
	0x1407eb591: mov r15, rbp
	0x1407eb59b: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409414ec
	0x1407eb5a2: add qword ptr [r15], 0xd
	0x1407eb5a9: jmp r11
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094150e
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941528
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca275: push r10
	0x1407ca277: and r10d, 0x40
	0x1407ca27e: je 0x1407ca2af
	0x1407ca28b: mov rax, rbp
	0x1407ca295: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca2a2: mov byte ptr [rax], 1
	0x1407ca2b6: pop r10
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407caa32: mov rdi, rbp
	0x1407caa3c: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409420a5
	0x1407caa43: add qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca275: push r10
	0x1407ca277: and r10d, 0x40
	0x1407ca27e: je 0x1407ca2af
	0x1407ca28b: mov rax, rbp
	0x1407ca295: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca2a2: mov byte ptr [rax], 1
	0x1407ca2b6: pop r10
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941535
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x14094153f
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094154d
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407add29: mov r13, 0
	0x1407add30: mov rsi, rbp
	0x1407add3a: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407add4f: mov rsi, qword ptr [rsi]
	0x1407add58: add rsi, 2
	0x1407add66: mov r13w, word ptr [rsi]
	0x1407add6a: mov r10, rbp
	0x1407add70: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407add7e: xor r13d, dword ptr [r10]
	0x1407add81: mov rax, rbp
	0x1407add84: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x1407add94: xor r13d, dword ptr [rax]
	0x1407addd1: mov r10, rbp
	0x1407addd4: add r10, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407adddb: xor word ptr [r10], r13w
	0x1407addfc: mov r12, rbp
	0x1407addff: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ade06: xor dword ptr [r12], 0xb2762bb
	0x1407ade0e: mov r10, rbp
	0x1407ade11: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ade18: add dword ptr [r10], 0x66ac72d9
	0x1407ade2d: mov r11, rbp
	0x1407ade30: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407ade3a: mov r11, qword ptr [r11]
	0x1407ade3d: add r11, 0
	0x1407ade4e: movzx r13, word ptr [r11]
	0x1407ade5c: mov rcx, rbp
	0x1407ade69: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ade70: add r13d, dword ptr [rcx]
	0x1407ade73: mov r15, rbp
	0x1407ade7d: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407ade8a: add r13d, dword ptr [r15]
	0x1407ade8d: mov r9, rbp
	0x1407ade90: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ade97: sub dword ptr [r9], r13d
	0x1407adea4: mov r9, rbp
	0x1407adead: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407adebb: and dword ptr [r9], 0x79d3df64
	0x1407adec2: mov r10, rbp
	0x1407aded3: add r10, 0x130
	0x1407adee1: mov r14, 0x200
Load [EBP+0x130](STATIC)
	0x1407adee8: mov sil, byte ptr [r10]
	0x1407adeeb: cmp sil, 0x89
	0x1407adeef: jbe 0x1407adf0a
	0x1407adefc: sub r13d, 0x4fe52e90
	0x1407adf03: sub r14, 4
	0x1407adf0a: mov rsi, rbp
	0x1407adf14: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407adf1e: xor word ptr [rsi], r13w
	0x1407adf22: or r14, 1
	0x1407adf29: mov r12, rbp
	0x1407adf3a: add r12, 0xab
	0x1407adf48: mov rbx, rbp
Load [EBP+0xab](STATIC)
	0x1407adf59: mov r12, qword ptr [r12]
	0x1407adf6a: add rbx, 0x145
	0x1407adf74: mov r9, 0
Load [EBP+0x145](STATIC)
	0x1407adf7b: mov rbx, qword ptr [rbx]
	0x1407adf7e: add rbx, 4
	0x1407adf8c: sub r9, 0x80
	0x1407adf93: movzx rbx, word ptr [rbx]
	0x1407adf97: mov rdi, 0xd5
	0x1407adfa5: mov rdx, rbp
	0x1407adfa8: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407adfaf: xor ebx, dword ptr [rdx]
	0x1407adfb1: add ebx, 0x646ab949
	0x1407adfbe: mov rcx, rbp
	0x1407adfc8: add rcx, 0xbf
	0x1407adfd6: mov rax, rdi
	0x1407adfd9: and rbx, 0xffff
	0x1407adfe0: add r9, r14
	0x1407adff8: shl rbx, 3
	0x1407adffc: add r12, rbx
	0x1407adfff: mov r8, 0x400
	0x1407ae006: xor r8, rbx
	0x1407ae009: mov r15, qword ptr [r12]
	0x1407ae00d: add rax, rcx
	0x1407ae010: mov rbx, rbp
	0x1407ae01a: add rbx, 0xfd
	0x1407ae021: or r8, 0xf0
Store [EBP+0xfd](STATIC)
	0x1407ae028: mov qword ptr [rbx], r15
	0x1407ae02b: mov r15, r9
	0x1407ae02e: mov r10, rbp
	0x1407ae031: add r10, 0x16e
	0x1407ae038: and rax, rdx
	0x1407ae03b: mov rdx, rbp
	0x1407ae03e: add rcx, -0x80000000
	0x1407ae045: xor rax, rsi
Load [EBP+0x16e](STATIC)
	0x1407ae048: movzx r10, word ptr [r10]
	0x1407ae04c: sub r10w, 0xde96
	0x1407ae052: or r15, 0x400
	0x1407ae059: xor rcx, r9
	0x1407ae05c: add r10, rbp
	0x1407ae05f: sub r9, 4
	0x1407ae06d: add rdx, 0xd6
	0x1407ae074: add rcx, rsi
Load [EBP+0xd6](STATIC)
	0x1407ae07a: movzx rdx, word ptr [rdx]
	0x1407ae07e: xor dx, 0x12a1
	0x1407ae083: add rdx, rbp
	0x1407ae086: sub rcx, -0x80000000
Load [EBP+0x14d](VM_REGISTER)
	0x1407ae08d: mov rdx, qword ptr [rdx]
	0x1407ae090: or rax, 0x88
Deref(t1411,ds)
	0x1407ae096: mov dx, word ptr [rdx]
	0x1407ae09c: xor rax, 0x7fffffff
	0x1407ae0a2: movzx esi, dx
	0x1407ae0a5: add rax, 0x10
Store VM_REG [EBP+0x97]
	0x1407ae0ab: mov dword ptr [r10], esi
	0x1407ae0ae: add r10, 4
Store VM_REG [EBP+0x9b]
	0x1407ae0bc: mov dword ptr [r10], 0
	0x1407ae0c6: sub r10, 0x20
	0x1407ae0cd: mov rdx, 1
	0x1407ae0d4: add rdx, 8
	0x1407ae0db: add rax, 4
	0x1407ae0e1: xor rax, 0x800
	0x1407ae0e7: and rax, 0x40
	0x1407ae0ed: add rax, 8
	0x1407ae0f3: mov r13, 0
	0x1407ae0fa: sub rdx, 4
	0x1407ae101: push rbp
	0x1407ae102: push r15
	0x1407ae104: push r10
	0x1407ae106: movabs r10, 0x7ffb12c5
	0x1407ae110: movabs r15, 0xffffffffdff90cf3
	0x1407ae11a: add r15, r10
	0x1407ae11d: pop r10
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x5ff41fb8 + context) & 0xffffffffffffffff)
	0x1407ae11f: add qword ptr [rsp + 8], r15
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1407ae124: mov r15, qword ptr [rsp]
	0x1407ae128: add rsp, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x1407ae12c: push qword ptr [rsp]
	0x1407ae12f: pop rbx
	0x1407ae130: add rsp, 8
	0x1407ae137: push r13
	0x1407ae139: push r8
	0x1407ae13b: movabs r8, 0x6faf4010
	0x1407ae145: mov r13, r8
	0x1407ae148: pop r8
	0x1407ae14a: or r13, 0x356f709b
	0x1407ae151: push rcx
	0x1407ae152: movabs rcx, 0x3bffe5a2
	0x1407ae15c: inc rcx
	0x1407ae15f: dec rcx
	0x1407ae162: and rcx, 0x7ffdc9ac
	0x1407ae169: push rcx
	0x1407ae16a: push rax
	0x1407ae16b: pop rcx
	0x1407ae16c: pop rax
	0x1407ae16d: not rax
	0x1407ae170: xchg rax, rcx
	0x1407ae172: sub rsp, 8
	0x1407ae176: mov qword ptr [rsp], r13
	0x1407ae17a: movabs r13, 0x9bb47082
	0x1407ae184: add rcx, 0x6febc351
	0x1407ae18b: add rcx, r13
	0x1407ae18e: sub rcx, 0x6febc351
	0x1407ae195: pop r13
	0x1407ae197: and r13, rcx
	0x1407ae19a: mov rcx, qword ptr [rsp]
	0x1407ae19e: add rsp, 8
	0x1407ae1a5: sub rsp, 8
	0x1407ae1ac: mov qword ptr [rsp], r13
	0x1407ae1b0: neg qword ptr [rsp]
	0x1407ae1b4: pop r13
	0x1407ae1b6: sub rsp, 8
	0x1407ae1ba: mov qword ptr [rsp], rdx
	0x1407ae1be: movabs rdx, 0xffffffff4065bfc7
	0x1407ae1c8: sub r13, rdx
	0x1407ae1cb: push qword ptr [rsp]
	0x1407ae1ce: pop rdx
	0x1407ae1cf: add rsp, 8
	0x1407ae1d3: sub rbx, r13
	0x1407ae1d6: mov r13, qword ptr [rsp]
	0x1407ae1da: add rsp, 8
	0x1407ae1e1: and rdx, rcx
	0x1407ae1eb: push 0x2785165e
	0x1407ae1f0: mov qword ptr [rsp], rcx
	0x1407ae1f4: mov rcx, rsp
	0x1407ae1f7: add rcx, 8
	0x1407ae1fb: sub rcx, 8
	0x1407ae202: xor rcx, qword ptr [rsp]
	0x1407ae206: push rdx
	0x1407ae207: mov rdx, rcx
	0x1407ae20a: xor qword ptr [rsp + 8], rdx
	0x1407ae20f: pop rdx
	0x1407ae210: xor rcx, qword ptr [rsp]
	0x1407ae214: pop rsp
	0x1407ae215: push r13
unknown read addr: ff0 0xff0
	0x1407ae217: pop qword ptr [rsp]
	0x1407ae21a: push rdi
	0x1407ae21b: push rax
	0x1407ae21c: push rcx
	0x1407ae21d: movabs rcx, 0x7fd5eb02
	0x1407ae227: mov rax, rcx
	0x1407ae22a: pop rcx
	0x1407ae22b: movabs rdi, 0x766f0cc1
	0x1407ae235: dec rdi
	0x1407ae238: and rdi, 0x3f0873f6
	0x1407ae23f: push r13
	0x1407ae241: mov r13, 0
	0x1407ae248: sub r13, rdi
	0x1407ae24b: xchg rdi, r13
	0x1407ae24e: pop r13
	0x1407ae250: push r10
	0x1407ae252: mov r10, 0x3653e39e
	0x1407ae259: add rdi, r10
	0x1407ae25c: pop r10
	0x1407ae25e: xor rdi, rax
	0x1407ae261: mov rax, qword ptr [rsp]
	0x1407ae265: add rsp, 8
	0x1407ae269: push r15
	0x1407ae26b: movabs r15, 0x7f9e0b21
	0x1407ae275: mov r13, r15
	0x1407ae278: pop r15
	0x1407ae27a: add r13, 0xbfb4532
	0x1407ae281: sub r13, rdi
	0x1407ae284: sub r13, 0xbfb4532
	0x1407ae28b: pop rdi
	0x1407ae28c: sub rbx, 0x7defe4a1
	0x1407ae293: add rbx, r13
	0x1407ae296: add rbx, 0x7defe4a1
	0x1407ae29d: push qword ptr [rsp]
	0x1407ae2a0: push qword ptr [rsp]
	0x1407ae2a3: pop r13
	0x1407ae2a5: add rsp, 8
	0x1407ae2ac: add rsp, 8
	0x1407ae2b3: push r15
	0x1407ae2b5: push rcx
	0x1407ae2b6: movabs rcx, 0x375e16ce
	0x1407ae2c0: movabs r15, 0x975daa7f
	0x1407ae2ca: sub r15, 0xbffec91
	0x1407ae2d1: sub r15, 0x9861be3
	0x1407ae2d8: add r15, 0x7fe0519
	0x1407ae2df: sub r15, rcx
	0x1407ae2e2: sub r15, 0x7fe0519
	0x1407ae2e9: add r15, 0x9861be3
	0x1407ae2f0: add r15, 0xbffec91
	0x1407ae2fb: sub rsp, 8
	0x1407ae2ff: mov qword ptr [rsp], rsi
	0x1407ae303: mov rsi, rsp
	0x1407ae306: add rsi, 8
	0x1407ae30a: add rsi, 8
	0x1407ae311: xor rsi, qword ptr [rsp]
	0x1407ae315: xor qword ptr [rsp], rsi
	0x1407ae31d: pop rsp
	0x1407ae31e: inc r15
	0x1407ae321: add r15, -1
	0x1407ae325: push rax
	0x1407ae326: movabs rax, 0x67af3187
	0x1407ae330: add rax, 0x6cfb8800
	0x1407ae336: add rax, 0x5f7f1ca7
	0x1407ae33c: and rax, 0x3f9bdf40
	0x1407ae342: push rdi
	0x1407ae343: movabs rdi, 0x4b36a691
	0x1407ae34d: xor rax, rdi
	0x1407ae350: pop rdi
	0x1407ae351: sub r15, 0xf6f7016
	0x1407ae358: sub r15, rax
	0x1407ae35b: add r15, 0xf6f7016
unknown read addr: ff0 ((0xfffffffffffffff8 + t1415) & 0xffffffffffffffff)
	0x1407ae362: mov rax, qword ptr [rsp]
	0x1407ae366: add rsp, 8
	0x1407ae36d: xor r15, 0x7fedbbbe
	0x1407ae374: push 0x4fc83f21
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff8 + t1415) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 1 | ((((0x14 + ((((((~(((~(((~(((((0x194 + context) & 0xffffffffffffffff) >> 8) & 0x7)) & 0x7) | (~(((((0xbf + context) & 0xffffffffffffffff) >> 8) & 0x7)) & 0x7))) & 0x7) ^ ((((0x16e + context) & 0xffffffffffffffff) >> 8) & 0x7))) & 0x7)) << 1 | 0x0) << 3 | (~(((~(((~(((((0x194 + context) & 0xffffffffffffffff) >> 4) & 0x7)) & 0x7) | (~(((((0xbf + context) & 0xffffffffffffffff) >> 4) & 0x7)) & 0x7))) & 0x7) ^ ((((0x16e + context) & 0xffffffffffffffff) >> 4) & 0x7))) & 0x7)) << 1 | 0x0) << 3 | (~(((~(((~(((0x4 + (context & 0x7)) & 0x7)) & 0x7) | (~(((0x7 + (context & 0x7)) & 0x7)) & 0x7))) & 0x7) ^ ((0x6 + (context & 0x7)) & 0x7))) & 0x7))) & 0x7ff) >> 6) & 0x1)) << 6 | 0x8)
	0x1407ae379: mov qword ptr [rsp], rax
	0x1407ae37d: mov rax, 0x60d26768
	0x1407ae384: sub r15, 0x5fb7c52d
	0x1407ae38b: add r15, rax
	0x1407ae38e: add r15, 0x5fb7c52d
	0x1407ae395: pop rax
	0x1407ae396: push rax
	0x1407ae397: push r9
	0x1407ae399: movabs r9, 0
	0x1407ae3a3: mov rax, r9
	0x1407ae3aa: add rsp, 8
	0x1407ae3b1: sub rax, 0x7f485d7c
	0x1407ae3b7: add rax, rbx
	0x1407ae3ba: add rax, 0x7f485d7c
Load [EBP+0x145](STATIC)
bytecode=0x140941553
	0x1407ae3c0: add qword ptr [rax], r15
	0x1407ae3c3: pop rax
	0x1407ae3c4: pop r15
	0x1407ae3d4: mov r10, rbp
	0x1407ae3e5: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407ae3f6: mov rbx, qword ptr [r10]
	0x1407ae407: add rbx, 0x2fc61469
	0x1407ae40e: push rbx
	0x1407ae42a: pop rdi
	0x1407ae42b: sub rdi, 0x2fc61469
	0x1407ae432: jmp rdi
handlers outputs:



	0x14081f5f8: mov rax, rbp
	0x14081f5fb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f601: and dword ptr [rax], 0x21ecf901
	0x14081f607: mov rsi, rbp
	0x14081f60a: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f611: xor dword ptr [rsi], 0x499bb630
	0x14081f621: mov r10, rbp
	0x14081f624: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14081f639: mov r10, qword ptr [r10]
	0x14081f646: add r10, 0xa
	0x14081f662: movzx rsi, word ptr [r10]
	0x14081f674: mov r13, rbp
	0x14081f685: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f68c: sub esi, dword ptr [r13]
	0x14081f6c4: mov r9, rbp
	0x14081f6c7: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f6ce: xor dword ptr [r9], esi
	0x14081f6e6: mov r8, rbp
	0x14081f6fa: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f716: and dword ptr [r8], 0x727a8c4c
	0x14081f727: mov r15, rbp
	0x14081f730: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14081f737: mov cl, byte ptr [r15]
	0x14081f73a: cmp cl, 0x29
	0x14081f73d: jbe 0x14081f757
	0x14081f765: mov r15, rbp
	0x14081f772: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081f787: sub word ptr [r15], si
	0x14081f7a8: mov rbx, rbp
	0x14081f7b9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14081f7c7: mov rbx, qword ptr [rbx]
	0x14081f7cd: add rbx, 0
	0x14081f7e9: mov r11, qword ptr [rbx]
	0x14081f7ef: mov r14, rbp
	0x14081f7ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f809: add r11d, dword ptr [r14]
	0x14081f813: mov r14, rbp
	0x14081f81d: add r14, 0xa7
	0x14081f831: mov r12, 0
Load [EBP+0xa7](STATIC)
	0x14081f838: xor r11d, dword ptr [r14]
	0x14081f849: mov r15, rbp
	0x14081f84c: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f85d: or dword ptr [r15], r11d
	0x14081f875: mov rdi, rbp
	0x14081f886: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f88d: xor dword ptr [rdi], 0x381077e9
	0x14081f893: xor r12, 0x20
	0x14081f8a8: mov r9, rbp
	0x14081f8ab: sub r12, 0x88
	0x14081f8b5: add r9, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081f8bc: xor dword ptr [r9], r11d
	0x14081f8c9: mov r15, 0x200
	0x14081f8d0: mov r10, rbp
	0x14081f8d3: add r10, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081f8e1: or dword ptr [r10], r11d
	0x14081f8e4: mov rsi, rbp
	0x14081f8f4: add rsi, 0x145
	0x14081f8fb: mov r8, 0
	0x14081f902: mov r8, r8
	0x14081f905: and r8, r11
Load [EBP+0x145](STATIC)
	0x14081f908: mov rsi, qword ptr [rsi]
	0x14081f90b: add rsi, 0
	0x14081f915: mov r9, qword ptr [rsi]
	0x14081f91e: shr r9, 0x20
	0x14081f925: mov r11, rbp
	0x14081f928: xor r12, r15
	0x14081f92b: sub r12, 0xffff
	0x14081f932: xor r12, 0x80
	0x14081f939: add r11, 0x93
Store [EBP+0x93](STATIC)
	0x14081f940: mov dword ptr [r11], r9d
	0x14081f943: mov r13, rbp
	0x14081f946: mov r10, rbp
	0x14081f953: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x14081f960: mov r10, qword ptr [r10]
	0x14081f96d: add r13, 0x145
	0x14081f974: sub r8, 0xffff
Load [EBP+0x145](STATIC)
	0x14081f97b: mov r13, qword ptr [r13]
	0x14081f98d: add r13, 8
	0x14081f994: sub r12, 0x7fffffff
	0x14081f99b: movzx r13, word ptr [r13]
	0x14081f9a0: mov rsi, rbp
	0x14081f9a3: mov r14, r13
	0x14081f9a6: add rsi, 0xbf
	0x14081f9ad: sub r8, 0x20
	0x14081f9b4: sub r12, r14
Load [EBP+0xbf](STATIC)
	0x14081f9b7: sub r13d, dword ptr [rsi]
	0x14081f9cf: mov rcx, rbp
	0x14081f9d2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f9dc: and dword ptr [rcx], r13d
	0x14081f9e6: and r13, 0xffff
	0x14081f9ed: sub r12, rcx
	0x14081f9fe: shl r13, 3
	0x14081fa09: and r8, r12
	0x14081fa0c: add r10, r13
	0x14081fa0f: xor r8, r8
	0x14081fa20: mov rdi, qword ptr [r10]
	0x14081fa31: mov rbx, rbp
	0x14081fa34: add rbx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14081fa49: mov qword ptr [rbx], rdi
	0x14081fa4c: mov rax, rbp
	0x14081fa4f: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081fa58: mov ebx, dword ptr [rax]
	0x14081fa5a: and ebx, 1
	0x14081fa67: mov r15, rbp
	0x14081fa6a: add rsi, 0x10
	0x14081fa71: add r15, 0x16e
	0x14081fa78: cmp ebx, 0
	0x14081fa7e: je 0x14081fac0
	0x14081fa84: xor rdi, rsi
	0x14081fa87: mov rax, rbp
	0x14081fa9f: add rax, 0xa7
	0x14081faac: add rdi, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081faba: or dword ptr [rax], 0x43d87997
Load [EBP+0x16e](STATIC)
	0x14081fac0: movzx r15, word ptr [r15]
	0x14081fad2: add rsi, 0x800
	0x14081fad9: mov r10, rbp
	0x14081fae3: add r10, 0x58
	0x14081faed: add r15w, 0x89f2
	0x14081faf3: and rsi, 0x10
	0x14081fafa: add rsi, 0xffff
	0x14081fb01: add r15, rbp
Load [EBP+0x58](STATIC)
	0x14081fb04: mov r10d, dword ptr [r10]
	0x14081fb07: mov r12, 0xd5
	0x14081fb1c: xor r10d, 0x47103f9e
	0x14081fb23: sub r12, 0x800
	0x14081fb31: sub rsi, 8
Store VM_REG [EBP+0x82]
	0x14081fb38: mov qword ptr [r15], r10
	0x14081fb42: add rsi, 0x80
	0x14081fb49: add r15, 4
	0x14081fb5a: mov rbx, rbp
	0x14081fb5d: add rbx, 0x93
Load [EBP+0x93](STATIC)
	0x14081fb72: mov ebx, dword ptr [rbx]
	0x14081fb7e: sub ebx, 0x513124ee
	0x14081fb84: mov r10, 0x12
Store VM_REG [EBP+0x86]
	0x14081fb92: mov dword ptr [r15], ebx
	0x14081fb95: sub rbx, 0xffff
	0x14081fb9c: and r8, 0x20
	0x14081fba3: and r8, 0x3f
	0x14081fbaa: add r12, 0x20
	0x14081fbb1: and r8, r8
	0x14081fbb4: or r8, r10
	0x14081fbb7: mov r15, r8
	0x14081fbba: and rbx, rdi
	0x14081fbbd: xor r12, 0x40
	0x14081fbc4: or r15, 0x20
	0x14081fbcb: and rbx, 0x80
	0x14081fbd2: mov r9, rbp
	0x14081fbd5: and r12, 0x400
	0x14081fbe3: mov rdx, rbx
	0x14081fbe6: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x14081fbf4: mov rax, qword ptr [r9]
	0x14081fbfe: mov rcx, r10
	0x14081fc01: push 0x590c2982
	0x14081fc06: push 0x5e5ef98f
	0x14081fc0b: push rdx
	0x14081fc0c: push rsp
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14081fc0d: push qword ptr [rsp]
	0x14081fc10: pop rdx
	0x14081fc11: add rsp, 8
	0x14081fc15: add rdx, 8
	0x14081fc19: push r12
	0x14081fc1b: push r15
	0x14081fc1d: push rax
	0x14081fc1e: movabs rax, 8
	0x14081fc28: mov r15, rax
	0x14081fc2b: pop rax
	0x14081fc2c: mov r12, r15
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14081fc2f: mov r15, qword ptr [rsp]
	0x14081fc33: add rsp, 8
	0x14081fc37: sub rdx, r12
	0x14081fc3a: pop r12
	0x14081fc3c: push rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081fc3d: push qword ptr [rsp + 8]
	0x14081fc41: mov rdx, qword ptr [rsp]
	0x14081fc45: push rdx
	0x14081fc46: mov rdx, rsp
	0x14081fc49: add rdx, 8
	0x14081fc4d: add rdx, 8
	0x14081fc54: push rdx
	0x14081fc55: push qword ptr [rsp + 8]
	0x14081fc59: mov rdx, qword ptr [rsp]
	0x14081fc5d: push rsi
	0x14081fc5e: mov rsi, rsp
	0x14081fc61: add rsi, 8
	0x14081fc65: add rsi, 8
	0x14081fc6c: xchg qword ptr [rsp], rsi
	0x14081fc70: pop rsp
	0x14081fc71: pop qword ptr [rsp]
	0x14081fc74: mov rsp, qword ptr [rsp]
	0x14081fc78: pop qword ptr [rsp]
	0x14081fc7b: pop rsp
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc7c: mov qword ptr [rsp], rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc80: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc83: pop qword ptr [rsp]
	0x14081fc86: mov r10, 0x200
	0x14081fc94: mov rdi, r9
	0x14081fc9e: push 0x3ff0e338
	0x14081fca3: push rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081fca4: pop qword ptr [rsp]
	0x14081fca7: push r12
	0x14081fca9: movabs r12, 0x6fffb133
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 13 | (~(((context >> 15) & 0x1fff)) & 0x1fff)) << 1 | ((context >> 14) & 0x1)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 3 | ((context >> 9) & 0x7)) << 1 | (~(((context >> 8) & 0x1)) & 0x1)) << 2 | ((context >> 6) & 0x3)) << 2 | (~(((context >> 4) & 0x3)) & 0x3)) << 2 | ((context >> 2) & 0x3)) << 2 | (~((context & 0x3)) & 0x3))
	0x14081fcb3: xor qword ptr [rsp + 8], r12
	0x14081fcb8: pop r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14081fcba: mov r14, qword ptr [rsp]
	0x14081fcbe: add rsp, 8
	0x14081fcc5: push rcx
	0x14081fcc6: movabs rcx, 0x7fbc6298
	0x14081fcd0: neg rcx
	0x14081fcd3: inc rcx
	0x14081fcd6: sub rcx, 0x7ef3333c
	0x14081fcdd: xor rcx, 0x7b46e84e
	0x14081fce4: push r10
	0x14081fce6: movabs r10, 0x1bfc5975
	0x14081fcf0: add rcx, r10
	0x14081fcf3: push qword ptr [rsp]
	0x14081fcf6: pop r10
	0x14081fcf8: add rsp, 8
	0x14081fcfc: push 0x3c1104c5
	0x14081fd01: push rsi
	0x14081fd02: pop qword ptr [rsp]
	0x14081fd05: movabs rsi, 0xffffffff1f34d662
	0x14081fd0f: sub rcx, rsi
	0x14081fd12: pop rsi
	0x14081fd13: sub rsp, 8
	0x14081fd17: mov qword ptr [rsp], r11
	0x14081fd1b: movabs r11, 0x6fbd895c
	0x14081fd25: shr r11, 8
	0x14081fd29: push rax
	0x14081fd2a: movabs rax, 0x1dffdf5c
	0x14081fd34: add rax, 0x4bffc5d0
	0x14081fd3a: push rsi
	0x14081fd3b: movabs rsi, 0x5ffffbfd
	0x14081fd45: or rsi, 0x5eaf73f3
	0x14081fd4c: and rsi, 0x57f59b00
	0x14081fd53: dec rsi
	0x14081fd56: xor rsi, 0x348d6027
	0x14081fd5d: and rax, rsi
	0x14081fd60: pop rsi
	0x14081fd61: xor rax, 0xa8bf6be
	0x14081fd67: or r11, rax
	0x14081fd6a: pop rax
	0x14081fd6b: and r11, 0x6fcf0c3f
	0x14081fd72: sub r11, 1
	0x14081fd76: xor r11, 0x72eeb87b
	0x14081fd7d: xor rcx, r11
	0x14081fd84: add rsp, 8
	0x14081fd88: xor r14, rcx
	0x14081fd8b: mov rcx, qword ptr [rsp]
	0x14081fd8f: add rsp, 8
	0x14081fd9d: and rdi, 0x10
	0x14081fda4: mov r9, 0x400
	0x14081fdab: push rbp
	0x14081fdac: push 0x63c61f43
	0x14081fdb1: mov qword ptr [rsp], rcx
	0x14081fdb5: movabs rcx, 0x7f7a1293
	0x14081fdbf: movabs rbp, 0x1ad12dd7
	0x14081fdc9: xor rbp, rcx
	0x14081fdcc: push qword ptr [rsp]
	0x14081fdcf: mov rcx, qword ptr [rsp]
	0x14081fdd3: add rsp, 8
	0x14081fdda: add rsp, 8
	0x14081fde1: shr rbp, 8
	0x14081fde5: shr rbp, 3
	0x14081fde9: sub rsp, 8
	0x14081fdf0: mov qword ptr [rsp], r12
	0x14081fdf4: mov r12, 0
	0x14081fdfb: sub r12, rbp
	0x14081fdfe: xchg rbp, r12
	0x14081fe01: pop r12
	0x14081fe03: add rbp, 0x6fa4e6ce
	0x14081fe0a: sub rsp, 8
	0x14081fe0e: mov qword ptr [rsp], rcx
	0x14081fe12: movabs rcx, 0x5bff3c5c
	0x14081fe1c: dec rcx
	0x14081fe1f: push r15
	0x14081fe21: push r12
	0x14081fe23: movabs r12, 0x5eed2ac0
	0x14081fe2d: push r10
	0x14081fe2f: movabs r10, 0x7112223e
	0x14081fe39: mov r15, r10
	0x14081fe3c: pop r10
	0x14081fe3e: xor r15, r12
	0x14081fe41: pop r12
	0x14081fe43: push r12
	0x14081fe45: movabs r12, 0x23bb6708
	0x14081fe4f: sub r12, 0x1ccf46db
	0x14081fe56: inc r12
	0x14081fe59: xor r12, 0x5bdbaf88
	0x14081fe60: neg r12
	0x14081fe63: push rdx
	0x14081fe64: movabs rdx, 0xb934bcf3
	0x14081fe6e: add r12, rdx
	0x14081fe71: pop rdx
	0x14081fe72: or r15, r12
	0x14081fe75: pop r12
	0x14081fe77: xor r15, 0x7b1aa994
	0x14081fe7e: sub r15, 0x5fa512ee
	0x14081fe85: push rcx
	0x14081fe86: movabs rcx, 0xffffffff70d96504
	0x14081fe90: add r15, 0xf8ff0b8
	0x14081fe97: sub r15, rcx
	0x14081fe9a: sub r15, 0xf8ff0b8
	0x14081fea1: pop rcx
	0x14081fea2: xor rcx, r15
	0x14081fea5: pop r15
	0x14081fea7: xor rbp, rcx
	0x14081feae: add rsp, 8
	0x14081feb2: add r14, 0x3961e480
	0x14081feb9: add r14, rbp
	0x14081febc: sub r14, 0x3961e480
	0x14081fec3: push qword ptr [rsp]
	0x14081fec6: mov rbp, qword ptr [rsp]
	0x14081feca: add rsp, 8
	0x14081fece: add rsp, 8
	0x14081fed2: or rdi, 0x3f
	0x14081fed9: push rdi
	0x14081feda: push 0x474d8f78
	0x14081fedf: mov qword ptr [rsp], rdi
	0x14081fee3: sub rsp, 8
	0x14081feea: mov qword ptr [rsp], rsp
	0x14081feee: add qword ptr [rsp], 8
	0x14081fef3: mov rdi, qword ptr [rsp]
	0x14081fef7: add rsp, 8
	0x14081fefb: add rdi, 8
	0x14081feff: sub rdi, 8
	0x14081ff06: push rdi
	0x14081ff07: push qword ptr [rsp + 8]
	0x14081ff0f: add rsp, 8
	0x14081ff13: pop qword ptr [rsp]
	0x14081ff16: pop rsp
	0x14081ff17: mov qword ptr [rsp], r9
	0x14081ff1b: movabs r9, 0xc
	0x14081ff25: push r10
	0x14081ff27: mov r10, r9
	0x14081ff2a: mov rdi, r10
	0x14081ff2d: pop r10
	0x14081ff33: add rsp, 8
	0x14081ff37: push 0x659bbeb7
	0x14081ff3c: mov qword ptr [rsp], rax
	0x14081ff40: push r14
	0x14081ff42: mov r14, rsp
	0x14081ff45: add r14, 8
	0x14081ff49: sub r14, 8
	0x14081ff50: xchg qword ptr [rsp], r14
	0x14081ff54: pop rsp
	0x14081ff55: mov qword ptr [rsp], r12
	0x14081ff59: movabs r12, 0x77f7d6a2
	0x14081ff63: movabs rax, 0x77f7d6a2
	0x14081ff6d: xor rax, r12
	0x14081ff70: pop r12
	0x14081ff72: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x14094155f
	0x14081ff75: add qword ptr [rax], rdi
	0x14081ff78: pop rax
	0x14081ff79: push qword ptr [rsp]
	0x14081ff80: add rsp, 8
	0x14081ff87: add rsp, 8
	0x14081ffe8: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x82](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0xe8]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081a34f
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081a34f
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081a34f
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140941569
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x14081a34f: mov r14, rbp
	0x14081a360: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14081a367: mov r14, qword ptr [r14]
	0x14081a374: add r14, 8
	0x14081a382: mov ebx, dword ptr [r14]
	0x14081a385: and r9, 0x80
	0x14081a38c: mov rax, rbp
	0x14081a38f: xor r9, 0x7fffffff
	0x14081a396: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081a3ad: sub ebx, dword ptr [rax]
	0x14081a3b6: sub r9, 0x80
	0x14081a3c4: mov rax, rbp
	0x14081a3d5: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081a3e5: xor ebx, dword ptr [rax]
	0x14081a40c: sub r9, 0x10
	0x14081a413: mov r8, rbp
	0x14081a424: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081a439: or dword ptr [r8], 0x457ed066
	0x14081a447: and r9, 0x7fffffff
	0x14081a44e: mov r8, rbp
	0x14081a45f: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081a474: xor dword ptr [r8], ebx
	0x14081a491: sub r9, 4
	0x14081a4a6: mov r14, rbp
	0x14081a4ba: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x14081a4c1: mov r14, qword ptr [r14]
	0x14081a4c4: add r9, 1
	0x14081a4d9: mov r10, rbp
	0x14081a4dc: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14081a4ea: mov r10, qword ptr [r10]
	0x14081a4f4: add r10, 0
	0x14081a4fb: movzx r10, word ptr [r10]
	0x14081a4ff: mov r11, rbp
	0x14081a502: and r9, r10
	0x14081a50c: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081a51a: add r10d, dword ptr [r11]
	0x14081a520: xor r10d, 0x64246b5c
	0x14081a52a: mov rdi, rbp
	0x14081a53e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081a54c: xor dword ptr [rdi], r10d
	0x14081a564: and r10, 0xffff
	0x14081a572: and r9, 1
	0x14081a579: mov r15, 0xd5
	0x14081a580: mov rcx, 0x12
	0x14081a595: shl r10, 3
	0x14081a599: xor rcx, 1
	0x14081a5a7: add rcx, 0x80
	0x14081a5ae: add r14, r10
	0x14081a5b1: or r9, 0x80
	0x14081a5b8: mov r12, qword ptr [r14]
	0x14081a5bb: mov r14, rbp
	0x14081a5be: add r14, 0xfd
	0x14081a5c5: xor r9, 0x40
	0x14081a5cc: xor rcx, r9
Store [EBP+0xfd](STATIC)
	0x14081a5d2: mov qword ptr [r14], r12
	0x14081a5d5: sub rcx, 0xffff
	0x14081a5dc: mov r8, r15
	0x14081a5df: sub r11, r8
	0x14081a5e2: mov rdi, rbp
	0x14081a5e5: or r11, 0x7fffffff
	0x14081a5ef: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14081a604: mov rdi, qword ptr [rdi]
	0x14081a60e: add rdi, 6
	0x14081a615: movzx rbx, word ptr [rdi]
	0x14081a627: mov r14, rbp
	0x14081a62a: xor r10, 0x80
	0x14081a638: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081a646: add ebx, dword ptr [r14]
	0x14081a657: mov r8, rbp
	0x14081a664: add r8, 0xf0
	0x14081a66b: add r11, rbx
Load [EBP+0xf0](STATIC)
	0x14081a66e: sub ebx, dword ptr [r8]
	0x14081a678: mov r8, rbp
	0x14081a689: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081a697: xor dword ptr [r8], ebx
	0x14081a6a4: mov r12, rbp
	0x14081a6b4: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081a6bb: or dword ptr [r12], 0x1578f5ad
	0x14081a6ca: mov rdx, rbp
	0x14081a6cd: mov rax, 0x12
	0x14081a6d7: add rdx, 0x130
	0x14081a6de: sub r11, rcx
Load [EBP+0x130](STATIC)
	0x14081a6e1: mov cl, byte ptr [rdx]
	0x14081a6e3: cmp cl, 0xa1
	0x14081a6e6: jbe 0x14081a706
	0x14081a6fa: xor rax, 4
	0x14081a700: add ebx, 0x2831860b
	0x14081a706: or r11, 0xffff
	0x14081a717: mov r13, rbp
	0x14081a71d: add r13, 0x16e
	0x14081a724: sub r11, 0x20
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081a735: sub word ptr [r13], bx
	0x14081a73a: mov r14, rbp
	0x14081a73d: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14081a744: mov r14, qword ptr [r14]
	0x14081a747: add r14, 2
	0x14081a74e: mov r12d, dword ptr [r14]
	0x14081a751: mov rbx, rbp
	0x14081a754: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081a75b: or dword ptr [rbx], r12d
	0x14081a75e: sub r11, 0xf0
	0x14081a76b: mov rdx, rbp
	0x14081a76e: sub r11, 0x80
	0x14081a79e: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14081a7ac: movzx rdx, word ptr [rdx]
	0x14081a7c4: mov r13, rbp
	0x14081a7ce: add r13, 0xa7
	0x14081a7e6: mov r15, 1
	0x14081a7ed: xor dx, 0x6b57
	0x14081a7f2: mov r8, rbp
	0x14081a7f5: add r8, 0x58
	0x14081a7fc: sub r15, 1
Load [EBP+0x58](STATIC)
	0x14081a803: mov r8d, dword ptr [r8]
	0x14081a80d: sub r8d, 0xaf9507a
	0x14081a814: add rdx, rbp
Store VM_REG [EBP+0xe0]
	0x14081a828: mov dword ptr [rdx], r8d
	0x14081a83c: add rdx, 4
	0x14081a843: and r15, rdx
Store VM_REG [EBP+0xe4]
	0x14081a849: mov dword ptr [rdx], 0
	0x14081a84f: and r10, 0x10
	0x14081a856: mov r9, 0xd5
	0x14081a85d: add r9, rcx
	0x14081a860: xor r9, r9
	0x14081a863: or r10, r13
	0x14081a866: xor r10, 0x7fffffff
	0x14081a877: xor rax, r10
	0x14081a87a: mov r13b, 0xca
	0x14081a87d: mov rdi, rbp
	0x14081a880: and rax, 0xffffffff80000000
	0x14081a886: xor r9, 0x90
	0x14081a890: add rdi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081a8a5: add byte ptr [rdi], r13b
	0x14081a8af: xor r9, rcx
	0x14081a8b9: mov r8, rbp
	0x14081a8bc: add r8, 0xfd
	0x14081a8c3: mov r14, 0x400
Load [EBP+0xfd](STATIC)
	0x14081a8ca: mov rsi, qword ptr [r8]
	0x14081a8da: push 0x6cfad4a1
	0x14081a8df: push 0x609699bd
	0x14081a8e4: push r9
	0x14081a8e6: push rsp
	0x14081a8e7: pop r9
	0x14081a8e9: add r9, 8
	0x14081a8ed: push rdx
	0x14081a8ee: movabs rdx, 0x7ddf67b8
	0x14081a8f8: dec rdx
	0x14081a8fb: inc rdx
	0x14081a8fe: sub rdx, 0x6d5c1107
	0x14081a905: push r14
	0x14081a907: movabs r14, 0x108356b9
	0x14081a911: xor rdx, r14
	0x14081a914: pop r14
	0x14081a916: sub r9, rdx
	0x14081a919: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081a91a: xor r9, qword ptr [rsp]
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081a91e: xor qword ptr [rsp], r9
	0x14081a926: pop rsp
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081a927: mov qword ptr [rsp], rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081a92b: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081a92e: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14081a931: push qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14081a934: push qword ptr [rsp]
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081a937: mov r9, qword ptr [rsp]
	0x14081a93b: add rsp, 8
	0x14081a93f: push rbx
	0x14081a940: push rsp
	0x14081a941: pop rbx
	0x14081a942: add rbx, 8
	0x14081a946: add rbx, 8
	0x14081a94d: xor rbx, qword ptr [rsp]
	0x14081a951: xor qword ptr [rsp], rbx
	0x14081a955: xor rbx, qword ptr [rsp]
	0x14081a959: pop rsp
	0x14081a95a: add rsp, 8
	0x14081a95e: mov r8, 0x12
	0x14081a965: sub rsp, 8
	0x14081a969: push r8
unknown read addr: ff0 0xff0
	0x14081a96b: pop qword ptr [rsp]
	0x14081a96e: movabs r8, 0x2efbfb33
	0x14081a978: push r11
	0x14081a97a: movabs r11, 0x7daf7191
	0x14081a984: xor r11, rdi
	0x14081a987: xor rdi, r11
	0x14081a98a: xor r11, rdi
	0x14081a98d: neg rdi
	0x14081a990: xchg r11, rdi
	0x14081a993: push r14
	0x14081a995: mov r14, rsp
	0x14081a998: add r14, 8
	0x14081a99c: sub r14, 8
unknown read addr: fe8 0xfe8
	0x14081a9a3: xchg qword ptr [rsp], r14
unknown read addr: fe8 0xfe8
	0x14081a9a7: mov rsp, qword ptr [rsp]
	0x14081a9ab: mov qword ptr [rsp], r14
	0x14081a9af: movabs r14, 0xffffffff7252165f
	0x14081a9b9: sub r11, r14
	0x14081a9bc: pop r14
	0x14081a9be: add r8, r11
	0x14081a9c1: pop r11
	0x14081a9c3: add r8, -1
	0x14081a9c7: shl r8, 5
	0x14081a9cb: push rdi
	0x14081a9cc: movabs rdi, 0x77ed82b3
	0x14081a9d6: sub r8, rdi
	0x14081a9d9: pop rdi
	0x14081a9da: sub rsp, 8
	0x14081a9de: sub rsp, 8
	0x14081a9e5: mov qword ptr [rsp], r15
	0x14081a9e9: pop qword ptr [rsp]
	0x14081a9ec: movabs r15, 0x76760e448
	0x14081a9f6: add r8, 0xe7e5417
	0x14081a9fd: sub r8, 0x6ff21f1
	0x14081aa04: sub r8, 0xdefee4e
	0x14081aa0b: sub r8, 0xbab21ee
	0x14081aa12: sub r8, r15
	0x14081aa15: add r8, 0xbab21ee
	0x14081aa1c: add r8, 0xdefee4e
	0x14081aa23: add r8, 0x6ff21f1
	0x14081aa2a: sub r8, 0xe7e5417
	0x14081aa35: add rsp, 8
	0x14081aa39: sub r9, 0x7fbd5949
	0x14081aa40: add r9, r8
	0x14081aa43: add r9, 0x7fbd5949
	0x14081aa4a: pop r8
	0x14081aa5a: push 0x70ab0fe1
	0x14081aa5f: push r13
	0x14081aa61: mov r13, rbp
	0x14081aa64: push r13
	0x14081aa66: pop qword ptr [rsp + 8]
	0x14081aa6a: push qword ptr [rsp]
	0x14081aa6d: pop r13
	0x14081aa6f: push r9
	0x14081aa71: push rsp
	0x14081aa72: pop r9
	0x14081aa74: add r9, 8
	0x14081aa78: add r9, 8
	0x14081aa7f: xchg qword ptr [rsp], r9
	0x14081aa83: pop rsp
	0x14081aa84: movabs rbp, 0x331f0d6f
	0x14081aa8e: and rbp, 0x3c852e46
	0x14081aa95: shr rbp, 7
	0x14081aa99: and rbp, 0x5e6ecebc
	0x14081aaa0: xor rbp, 0x600a14
	0x14081aaa7: push rbx
	0x14081aaa8: mov rbx, 0
	0x14081aaaf: sub rbx, 0x6dffc578
	0x14081aab6: sub rbx, 0x7beb8f0e
	0x14081aabd: add rbx, 0x6af70efa
	0x14081aac4: add rbx, r9
	0x14081aac7: sub rbx, 0x6af70efa
	0x14081aace: add rbx, 0x7beb8f0e
	0x14081aad5: add rbx, 0x6dffc578
Load [EBP+0x145](STATIC)
bytecode=0x12115135a
	0x14081aadc: sub qword ptr [rbx], 0x1f7f020f
Load [EBP+0x145](STATIC)
bytecode=0x18bd369a4
	0x14081aae3: add qword ptr [rbx], 0x6abe564a
	0x14081aaea: push r14
	0x14081aaec: mov r14, 0
	0x14081aaf3: add r14, rbx
Load [EBP+0x145](STATIC)
bytecode=0x18bd369b0
	0x14081aaf6: add qword ptr [r14], rbp
	0x14081aaf9: pop r14
Load [EBP+0x145](STATIC)
bytecode=0x121151366
	0x14081aafb: sub qword ptr [rbx], 0x6abe564a
Load [EBP+0x145](STATIC)
bytecode=0x140941575
	0x14081ab02: add qword ptr [rbx], 0x1f7f020f
	0x14081ab09: pop rbx
	0x14081ab0a: push qword ptr [rsp]
	0x14081ab0d: mov rbp, qword ptr [rsp]
	0x14081ab11: push rax
	0x14081ab12: mov rax, rsp
	0x14081ab15: add rax, 8
	0x14081ab19: add rax, 8
	0x14081ab1f: xchg qword ptr [rsp], rax
	0x14081ab23: pop rsp
	0x14081ab24: add rsp, 8
	0x14081ab39: push rsi
	0x14081ab73: pop r12
	0x14081ab75: jmp r12
handlers outputs:



	0x14085847e: mov rdx, 0x1a8ab2d5
	0x140858485: mov r12, rbp
	0x140858488: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085848f: add dword ptr [r12], edx
	0x14085849a: mov rsi, rbp
	0x14085849d: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408584a4: mov rsi, qword ptr [rsi]
	0x1408584b8: add rsi, 2
	0x1408584c6: movzx r15, word ptr [rsi]
	0x1408584d0: mov rcx, rbp
	0x1408584d9: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408584e0: sub r15d, dword ptr [rcx]
	0x1408584f7: mov r14, rbp
	0x1408584fa: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x140858508: xor r15d, dword ptr [r14]
	0x140858526: mov rsi, rbp
	0x140858529: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140858537: sub dword ptr [rsi], 0x60c46d11
	0x14085853d: mov rbx, rbp
	0x140858540: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140858558: mov dl, byte ptr [rbx]
	0x14085855a: cmp dl, 0xb3
	0x14085855d: jbe 0x14085856d
	0x14085856d: mov rsi, rbp
	0x14085857e: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14085858f: add word ptr [rsi], r15w
	0x1408585a4: mov r13, rbp
	0x1408585ae: add r9, 0x400
	0x1408585b5: add r13, 0x145
	0x1408585bc: add r9, 0x800
	0x1408585c6: mov r10, 0
Load [EBP+0x145](STATIC)
	0x1408585d4: mov r13, qword ptr [r13]
	0x1408585d8: add r13, 0xa
	0x1408585e6: mov rbx, rbp
	0x1408585fa: movzx rax, word ptr [r13]
	0x14085860d: add rax, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140858625: mov rax, qword ptr [rax]
	0x140858628: add r9, rax
	0x14085862b: pushfq
	0x140858633: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14085863d: mov rbx, qword ptr [rbx]
	0x14085864e: add rbx, 4
	0x140858655: mov r10w, word ptr [rbx]
	0x14085871b: mov rcx, rbp
	0x140858725: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140858733: add dword ptr [rcx], r10d
	0x14085873c: mov rdi, rbp
	0x14085875d: pop r9
	0x14085875f: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085877b: and dword ptr [rdi], 0x30f68fba
	0x140858793: mov rcx, rbp
	0x140858796: add rcx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408587ae: sub word ptr [rcx], r10w
	0x1408587b9: mov r15, rbp
	0x1408587cd: add r15, 0xd6
	0x1408587de: mov r12, rbp
Load [EBP+0xd6](STATIC)
	0x1408587e8: movzx r15, word ptr [r15]
	0x1408587ec: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1408587f2: mov r15, qword ptr [r15]
	0x140858802: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x14085881a: movzx r12, word ptr [r12]
	0x140858834: add r12w, 0xbf0c
	0x140858841: add r12, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140858844: add qword ptr [r12], r15
	0x140858848: pushfq
	0x14085884c: mov rsi, 0
	0x140858853: mov rdx, rbp
	0x140858856: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140858864: mov rdx, qword ptr [rdx]
	0x14085886e: add rdx, 0xc
	0x140858875: mov sil, byte ptr [rdx]
	0x140858878: cmp sil, 0
	0x14085887c: je 0x1408588cb
	0x140858890: mov rdx, rbp
	0x140858893: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14085889d: mov rdx, qword ptr [rdx]
	0x1408588ae: add rdx, 6
	0x1408588b5: mov si, word ptr [rdx]
	0x1408588b8: add rsi, rbp
	0x1408588bb: pop r15
Store VM_REG [EBP+0x26]
	0x1408588bd: mov qword ptr [rsi], r15
	0x140858908: mov r14, rbp
	0x14085890e: add r14, 0x145
	0x140858915: mov r8, rbp
	0x140858918: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x140858929: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x14085892c: mov r14, qword ptr [r14]
	0x14085892f: add r14, 8
	0x14085893d: movzx r14, word ptr [r14]
	0x140858941: mov r13, rbp
	0x140858944: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085894e: sub r14d, dword ptr [r13]
	0x14085895c: add r14d, 0x9902061
	0x140858963: mov r9, rbp
	0x14085896d: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140858974: xor dword ptr [r9], r14d
	0x14085897a: and r14, 0xffff
	0x140858994: shl r14, 3
	0x14085899b: add r8, r14
	0x1408589a5: mov r13, qword ptr [r8]
	0x1408589b6: mov r14, rbp
	0x1408589b9: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941582
	0x1408589c0: add qword ptr [r14], 0xd
	0x1408589c7: jmp r13
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t1439
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a485ac
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a485b8
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x14094158e
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941596
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x14081641a: mov r13, 0
	0x140816421: mov rcx, rbp
	0x140816427: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081643c: mov rcx, qword ptr [rcx]
	0x14081643f: add rcx, 1
	0x140816446: mov r13w, word ptr [rcx]
	0x140816451: mov r12, rbp
	0x14081645b: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140816470: xor r13d, dword ptr [r12]
	0x140816493: mov rcx, rbp
	0x140816496: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408164a7: xor dword ptr [rcx], r13d
	0x1408164b1: mov r9, rbp
	0x1408164bb: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408164c2: xor dword ptr [r9], 0x595a871f
	0x1408164d3: mov rax, rbp
	0x1408164d6: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408164dc: sub word ptr [rax], r13w
	0x1408164ee: mov r14, rbp
	0x1408164f1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140816506: mov r14, qword ptr [r14]
	0x140816509: add r14, 5
	0x14081651a: movzx rdi, word ptr [r14]
	0x14081651e: mov r10, rbp
	0x14081652b: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140816539: xor edi, dword ptr [r10]
	0x140816552: mov r9, rbp
	0x140816563: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140816571: or dword ptr [r9], edi
	0x14081657e: mov r13, rbp
	0x140816584: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081658e: or dword ptr [r13], 0x660fa258
	0x140816596: mov r10, rbp
	0x1408165a3: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x1408165aa: mov r15b, byte ptr [r10]
	0x1408165ad: cmp r15b, 0x71
	0x1408165b1: jbe 0x1408165c4
	0x1408165c4: mov rcx, rbp
	0x1408165d1: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408165df: xor word ptr [rcx], di
	0x1408165e2: mov r8, rbp
	0x1408165e5: mov r10, rbp
	0x1408165e8: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x1408165ef: movzx r10, word ptr [r10]
	0x1408165f3: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408165fa: mov r11d, dword ptr [r8]
	0x1408165fd: and r11d, 1
	0x140816604: cmp r11d, 0
	0x14081660b: je 0x140816622
	0x140816611: mov r8, rbp
	0x140816614: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081661b: or dword ptr [r8], 0x111e9212
	0x140816622: xor r10w, 0x68f3
	0x140816628: add r10, rbp
	0x14081662b: mov rdx, rbp
	0x14081662e: add rdx, 0xd6
Load [EBP+0xd6](STATIC)
	0x140816635: movzx rdx, word ptr [rdx]
	0x140816639: xor dx, 0x17d4
	0x14081663e: add rdx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140816641: mov rdx, qword ptr [rdx]
Load [EBP+0x14d](VM_REGISTER)
	0x140816644: mov r10, qword ptr [r10]
Deref(t1445,ds)
	0x140816647: cmp dword ptr [r10], edx
	0x14081664a: pushfq
	0x140816652: mov r14, 0
	0x14081666a: mov r9, rbp
	0x14081666d: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081667b: mov r9, qword ptr [r9]
	0x140816685: add r9, 0
	0x14081669a: mov r14b, byte ptr [r9]
	0x14081669d: cmp r14b, 0
	0x1408166a1: je 0x1408166ee
	0x1408166ae: mov r9, rbp
	0x1408166b4: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408166bb: mov r9, qword ptr [r9]
	0x1408166c8: add r9, 7
	0x1408166cf: mov r14w, word ptr [r9]
	0x1408166e1: add r14, rbp
	0x1408166e4: pop r12
Store VM_REG [EBP+0x26]
	0x1408166e6: mov qword ptr [r14], r12
	0x14081674f: mov r11b, 0x32
	0x140816759: mov r15, rbp
	0x140816762: add r15, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081676c: xor byte ptr [r15], r11b
	0x140816779: mov rdi, rbp
	0x140816783: mov r11, rbp
	0x14081678d: add rdi, 0xab
	0x140816794: add r11, 0x145
Load [EBP+0xab](STATIC)
	0x1408167a1: mov rdi, qword ptr [rdi]
Load [EBP+0x145](STATIC)
	0x1408167a4: mov r11, qword ptr [r11]
	0x1408167b4: add r11, 3
	0x1408167bb: movzx r11, word ptr [r11]
	0x1408167bf: mov rcx, rbp
	0x1408167cb: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408167dc: add r11d, dword ptr [rcx]
	0x1408167df: xor r11d, 0x2922c221
	0x1408167ed: mov r12, rbp
	0x1408167fa: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140816807: xor dword ptr [r12], r11d
	0x140816812: and r11, 0xffff
	0x140816827: shl r11, 3
	0x140816839: add rdi, r11
	0x14081683c: mov r10, qword ptr [rdi]
	0x140816842: mov rcx, rbp
	0x140816845: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094159f
	0x14081684c: add qword ptr [rcx], 9
	0x140816853: jmp r10
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409415c1
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409415db
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca3d2: mov r8, r10
	0x1407ca3d5: and r10d, 0x40
	0x1407ca3dc: je 0x1407ca41f
	0x1407ca41f: and r8d, 1
	0x1407ca426: je 0x1407ca462
	0x1407ca43a: mov rax, rbp
	0x1407ca444: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca44a: mov byte ptr [rax], 1
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407caa32: mov rdi, rbp
	0x1407caa3c: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c39
	0x1407caa43: add qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca3d2: mov r8, r10
	0x1407ca3d5: and r10d, 0x40
	0x1407ca3dc: je 0x1407ca41f
	0x1407ca41f: and r8d, 1
	0x1407ca426: je 0x1407ca462
	0x1407ca43a: mov rax, rbp
	0x1407ca444: add rax, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca44a: mov byte ptr [rax], 1
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409415e8
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t1495
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48612
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a4861e
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x1409415f4
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409415fc
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



basic block ends with indirect unconditional branch
	0x14088873b: mov rbx, rbp
	0x14088874c: add rbx, 0x145
	0x140888753: sub rax, r14
Load [EBP+0x145](STATIC)
	0x140888756: mov rbx, qword ptr [rbx]
	0x140888760: add rbx, 6
	0x14088876a: movzx r15, word ptr [rbx]
	0x140888796: xor rax, 0x10
	0x1408887a6: mov rsi, rbp
	0x1408887b7: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408887c1: sub dword ptr [rsi], r15d
	0x1408887cb: mov r9, rbp
	0x1408887dc: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408887f1: and dword ptr [r9], 0x79ccda91
	0x1408887f8: mov rbx, rbp
	0x140888802: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140888813: mov r12b, byte ptr [rbx]
	0x140888816: cmp r12b, 0x1f
	0x14088881a: jbe 0x140888827
	0x140888827: mov rdi, rbp
	0x140888831: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140888846: add word ptr [rdi], r15w
	0x140888851: mov r13, rbp
	0x14088885b: add r13, 0xab
	0x140888869: mov r9, rbp
	0x140888876: add r9, 0x145
Load [EBP+0xab](STATIC)
	0x140888887: mov r13, qword ptr [r13]
Load [EBP+0x145](STATIC)
	0x140888892: mov r9, qword ptr [r9]
	0x14088889c: add r9, 0
	0x1408888aa: movzx r9, word ptr [r9]
	0x1408888ae: mov r15, rbp
	0x1408888b8: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408888bf: add r9d, dword ptr [r15]
	0x1408888d0: sub r9d, 0x12a0efe2
	0x1408888e1: mov r14, rbp
	0x1408888f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408888fc: sub dword ptr [r14], r9d
	0x140888909: and r9, 0xffff
	0x140888921: shl r9, 3
	0x14088892b: add r13, r9
	0x14088892e: mov rsi, qword ptr [r13]
	0x140888938: mov r13, rbp
	0x140888942: mov r12, r13
	0x140888945: add r13, 0xfd
Store [EBP+0xfd](STATIC)
	0x140888956: mov qword ptr [r13], rsi
	0x14088895a: mov rbx, 0
	0x140888961: mov r8, rbp
	0x14088896b: add rax, r8
	0x14088896e: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140888975: mov r8, qword ptr [r8]
	0x140888978: add r8, 4
	0x14088897f: mov bx, word ptr [r8]
	0x14088898d: mov rdi, rbp
	0x140888997: xor r12, 0x400
	0x14088899e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408889a5: add ebx, dword ptr [rdi]
	0x1408889a7: mov r14, rbp
	0x1408889aa: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x1408889b8: xor ebx, dword ptr [r14]
	0x1408889c5: mov rdi, rbp
	0x1408889cf: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408889e4: xor dword ptr [rdi], ebx
	0x1408889fa: mov rsi, rbp
	0x1408889fd: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140888a12: xor word ptr [rsi], bx
	0x140888a18: sub rax, r12
	0x140888a1b: mov r10, rbp
	0x140888a21: mov r9, rbp
	0x140888a24: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x140888a35: movzx r9, word ptr [r9]
	0x140888a39: and r14, 0x80
	0x140888a47: add r10, 0x16e
	0x140888a4e: or rax, r14
	0x140888a51: or rax, 0xffff
Load [EBP+0x16e](STATIC)
	0x140888a57: movzx r10, word ptr [r10]
	0x140888a5b: add r9, rbp
	0x140888a5e: or rax, 0x40
Load [EBP+0x14d](VM_REGISTER)
	0x140888a64: mov r9, qword ptr [r9]
	0x140888a6e: add r10, rbp
Deref(t1500,ds)
	0x140888a7b: mov r9w, word ptr [r9]
	0x140888a7f: movzx r12d, r9w
Store VM_REG [EBP+0x7a]
	0x140888a8a: mov dword ptr [r10], r12d
	0x140888a8d: mov r11, 1
	0x140888a9b: add r10, 4
Store VM_REG [EBP+0x7e]
	0x140888aa9: mov dword ptr [r10], 0
	0x140888ab0: mov r8, rbp
	0x140888ab3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140888aba: mov r8, qword ptr [r8]
	0x140888abd: add r8, 2
	0x140888ac4: movzx rcx, word ptr [r8]
	0x140888ac8: add rcx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140888acb: mov rcx, qword ptr [rcx]
	0x140888ace: xor r12, rcx
	0x140888ad1: pushfq
	0x140888ad2: xor rcx, 0x34a95579
	0x140888ae0: mov r15, rbp
	0x140888ae3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140888aea: mov r15, qword ptr [r15]
	0x140888aed: add r15, 8
	0x140888afb: pop r12
	0x140888afd: add r9, r9
	0x140888b0e: and rax, 4
	0x140888b14: sub r9, rax
	0x140888b17: mov dl, 0xac
	0x140888b20: add r9, 4
	0x140888b27: mov rsi, rbp
	0x140888b2d: add rsi, 0x130
	0x140888b34: mov rbx, 0
	0x140888b3b: sub r9, 0x3f
	0x140888b45: or rbx, 0x800
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140888b4c: and byte ptr [rsi], dl
	0x140888b4e: and rbx, 0x88
	0x140888b55: mov rdx, 0
	0x140888b5c: and rbx, rdx
	0x140888b5f: or rbx, 0x90
	0x140888b66: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140888b6d: mov qword ptr [rsp], rbp
	0x140888b71: push r15
	0x140888b73: push rdx
	0x140888b74: movabs rdx, 0x2dfdfa7f
	0x140888b7e: mov r15, rdx
	0x140888b81: pop rdx
	0x140888b82: not r15
	0x140888b85: shr r15, 7
	0x140888b89: dec r15
	0x140888b8c: push r11
	0x140888b8e: movabs r11, 0x1ffffffe854d20a
	0x140888b98: sub r15, 0xabe7e6b
	0x140888b9f: sub r15, r11
	0x140888ba2: add r15, 0xabe7e6b
	0x140888bad: add rsp, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((context >> 29) & 0x7ffffffff)) << 1 | (~(((context >> 28) & 0x1)) & 0x1)) << 1 | ((context >> 27) & 0x1)) << 3 | (~(((context >> 24) & 0x7)) & 0x7)) << 1 | ((context >> 23) & 0x1)) << 1 | (~(((context >> 22) & 0x1)) & 0x1)) << 2 | ((context >> 20) & 0x3)) << 4 | (~(((context >> 16) & 0xf)) & 0xf)) << 2 | ((context >> 14) & 0x3)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 2 | ((context >> 10) & 0x3)) << 1 | (~(((context >> 9) & 0x1)) & 0x1)) << 9 | (context & 0x1ff))
	0x140888bb1: xor qword ptr [rsp + 8], r15
	0x140888bb6: pop r15
	0x140888bb8: pop r14
	0x140888bba: push rdi
	0x140888bbb: push rdx
	0x140888bbc: movabs rdx, 0x6d8be573
	0x140888bc6: movabs rdi, 0x11d461f0
	0x140888bd0: add rdi, rdx
	0x140888bd3: pop rdx
	0x140888bd4: push rdi
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x7f604763
	0x140888bd5: xchg qword ptr [rsp], rdi
	0x140888bd9: xchg rax, rdi
	0x140888bdb: xchg rax, rsi
	0x140888bdd: not rsi
	0x140888be0: xchg rax, rsi
	0x140888be2: xchg rax, rdi
	0x140888be4: push rdi
	0x140888be5: push qword ptr [rsp + 8]
	0x140888be9: pop rdi
	0x140888bea: pop qword ptr [rsp]
	0x140888bed: mov rdi, qword ptr [rsp]
	0x140888bf1: add rsp, 8
	0x140888bf8: sub rsp, 8
	0x140888bfc: mov qword ptr [rsp], rcx
	0x140888c00: movabs rcx, 0xffffffff6950869c
	0x140888c0a: add rdi, 0x7fef262
	0x140888c11: sub rdi, 0x3f7cfb8
	0x140888c18: sub rdi, rcx
	0x140888c1b: add rdi, 0x3f7cfb8
	0x140888c22: sub rdi, 0x7fef262
	0x140888c29: pop rcx
	0x140888c2a: xor r14, rdi
	0x140888c2d: mov rdi, qword ptr [rsp]
	0x140888c31: push rsi
	0x140888c32: mov rsi, rsp
	0x140888c35: add rsi, 8
	0x140888c39: add rsi, 8
	0x140888c40: xchg qword ptr [rsp], rsi
	0x140888c44: pop rsp
	0x140888c45: mov r15, rbp
	0x140888c48: mov r13, 0
	0x140888c4f: add r15, 0xfd
	0x140888c64: push 0x2298e261
	0x140888c69: mov qword ptr [rsp], rsi
	0x140888c6d: movabs rsi, 0x76e9596b
	0x140888c77: push r13
	0x140888c79: movabs r13, 0x3de7ff84
	0x140888c83: add r13, 0x7bffec92
	0x140888c8a: neg r13
	0x140888c8d: not r13
	0x140888c90: dec r13
	0x140888c93: inc r13
	0x140888c96: push rbp
	0x140888c97: movabs rbp, 0xc40d72af
	0x140888ca1: xor r13, rbp
	0x140888ca4: pop rbp
	0x140888ca5: add rsi, r13
	0x140888ca8: pop r13
	0x140888caa: sub rsp, 8
	0x140888cae: mov qword ptr [rsp], r13
	0x140888cb2: push r8
	0x140888cb4: movabs r8, 0x2ffbd3e1
	0x140888cbe: mov r13, r8
	0x140888cc1: pop r8
	0x140888cc3: neg r13
	0x140888cc6: shr r13, 3
	0x140888cca: and r13, 0x5df559f6
	0x140888cd1: sub r13, 0x7dfd4ded
	0x140888cd8: push r15
	0x140888cda: mov r15, -0x35cc5b9f
	0x140888ce1: sub r13, r15
	0x140888ce4: pop r15
	0x140888ce6: and rsi, r13
	0x140888ce9: pop r13
	0x140888ceb: neg rsi
	0x140888cee: xchg rsi, r12
	0x140888cf1: not r12
	0x140888cf4: xchg rsi, r12
	0x140888cf7: xor rsi, 0x3b30a02a
	0x140888cfe: push rcx
	0x140888cff: movabs rcx, 0x684c2d99
	0x140888d09: xor rsi, rcx
	0x140888d0c: pop rcx
	0x140888d0d: push rdi
	0x140888d0e: movabs rdi, 0xff74f11
	0x140888d18: xor rdi, 0x388055bb
	0x140888d1f: add rsi, rdi
	0x140888d26: add rsp, 8
	0x140888d2d: sub rsp, 8
	0x140888d34: push rdx
	0x140888d35: pop qword ptr [rsp]
	0x140888d38: movabs rdx, 0xffffffff70c9610b
	0x140888d42: sub rsi, 0x75ef664a
	0x140888d49: add rsi, rdx
	0x140888d4c: add rsi, 0x75ef664a
	0x140888d53: pop rdx
	0x140888d54: add r14, 0x7f972df8
	0x140888d5b: add r14, rsi
	0x140888d5e: sub r14, 0x7f972df8
	0x140888d69: add rsp, 8
Load [EBP+0xfd](STATIC)
	0x140888d70: mov rcx, qword ptr [r15]
	0x140888d7a: sub rsp, 8
	0x140888d7e: mov qword ptr [rsp], r9
	0x140888d82: sub rsp, 8
	0x140888d89: mov qword ptr [rsp], rdx
	0x140888d8d: movabs rdx, 0x7eff4bbb
	0x140888d97: push 0x4ddb376b
	0x140888d9c: mov qword ptr [rsp], rdx
	0x140888da0: push r15
	0x140888da2: movabs r15, 0x7da9ccd5
	0x140888dac: sub qword ptr [rsp + 8], 0xeaff2d7
	0x140888db5: sub qword ptr [rsp + 8], r15
	0x140888dba: add qword ptr [rsp + 8], 0xeaff2d7
	0x140888dc3: pop r15
	0x140888dc5: pop r9
	0x140888dc7: push r12
	0x140888dc9: movabs r12, 0x7dbf32e6
	0x140888dd3: shr r12, 3
	0x140888dd7: sub rsp, 8
	0x140888dde: mov qword ptr [rsp], r15
	0x140888de2: movabs r15, 0x4f6bf3f5
	0x140888dec: dec r15
	0x140888def: push rbp
	0x140888df0: movabs rbp, 0x3d75d97d
	0x140888dfa: xor r15, rbp
	0x140888dfd: pop rbp
	0x140888dfe: xor r12, r15
	0x140888e01: pop r15
	0x140888e03: add r9, r12
	0x140888e06: pop r12
	0x140888e08: push qword ptr [rsp]
	0x140888e0b: pop rdx
	0x140888e0c: add rsp, 8
	0x140888e10: push rbx
	0x140888e11: movabs rbx, 0x1fbf1726
	0x140888e1b: dec rbx
	0x140888e1e: shr rbx, 5
	0x140888e22: inc rbx
	0x140888e25: neg rbx
	0x140888e28: shl rbx, 1
	0x140888e2c: push rcx
	0x140888e2d: mov rcx, -0x7bca3319
	0x140888e34: sub rbx, rcx
	0x140888e37: pop rcx
	0x140888e38: xor r9, rbx
	0x140888e3b: pop rbx
	0x140888e3c: inc r9
	0x140888e3f: shl r9, 2
	0x140888e43: push r12
	0x140888e45: movabs r12, 0x1cc42876
	0x140888e4f: xor r9, r12
	0x140888e52: pop r12
Load [EBP+0x145](STATIC)
bytecode=0xc094c84d
	0x140888e54: sub qword ptr [r14], 0x7fff4daf
Load [EBP+0x145](STATIC)
bytecode=0xc094c857
	0x140888e5b: add qword ptr [r14], r9
Load [EBP+0x145](STATIC)
bytecode=0x140941606
	0x140888e5e: add qword ptr [r14], 0x7fff4daf
	0x140888e65: push qword ptr [rsp]
	0x140888e6c: add rsp, 8
	0x140888e73: add rsp, 8
	0x140888e87: sub rcx, 0x216d4b42
	0x140888e9b: push rcx
	0x140888ed2: pop rdi
	0x140888ed3: add rdi, 0x216d4b42
	0x140888eda: jmp rdi
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140941610
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094161e
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0xc3]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t1533
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14076cfe5
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14076cfe5
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48648
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a48654
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x14094162a
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094164c
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941666
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x105](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094166e
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x14083c32d: mov rdi, rbp
	0x14083c341: add rdi, 0x145
	0x14083c348: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x14083c34e: mov rdi, qword ptr [rdi]
	0x14083c358: mov r15, 0x12
	0x14083c35f: and r15, 0x3f
	0x14083c366: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14083c382: mov rsi, qword ptr [rsi]
	0x14083c385: add rdi, 2
	0x14083c39a: movzx rdi, word ptr [rdi]
	0x14083c3a5: mov rdx, rbp
	0x14083c3af: add rdx, 0xbf
	0x14083c3c4: xor r15, 0x40
Load [EBP+0xbf](STATIC)
	0x14083c3cb: add edi, dword ptr [rdx]
	0x14083c3d4: xor r15, 0x7fffffff
	0x14083c3db: sub edi, 0x7ed43765
	0x14083c3e1: mov r11, rbp
	0x14083c3f5: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083c3fc: sub dword ptr [r11], edi
	0x14083c406: sub r15, 0x20
	0x14083c410: and rdi, 0xffff
	0x14083c41e: shl rdi, 3
	0x14083c425: add rsi, rdi
	0x14083c428: mov rdx, qword ptr [rsi]
	0x14083c42b: mov rsi, rbp
	0x14083c42e: add rsi, 0xfd
	0x14083c435: and r15, 0x78
Store [EBP+0xfd](STATIC)
	0x14083c43c: mov qword ptr [rsi], rdx
	0x14083c43f: mov rdx, 0
	0x14083c457: mov r13, rbp
	0x14083c45a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14083c464: mov r13, qword ptr [r13]
	0x14083c468: add r13, 0
	0x14083c476: mov dx, word ptr [r13]
	0x14083c482: mov r14, rbp
	0x14083c493: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083c4a8: xor edx, dword ptr [r14]
	0x14083c4ab: xor r15, 0x40
	0x14083c4c6: mov r14, 0x12
	0x14083c4e2: mov r12, r15
	0x14083c4e8: mov r10, rbp
	0x14083c4f9: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083c500: xor dword ptr [r10], edx
	0x14083c50a: mov r9, rbp
	0x14083c514: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083c522: and dword ptr [r9], 0x515d86f5
	0x14083c529: add r14, r12
	0x14083c536: mov r9, rbp
	0x14083c539: xor r14, 0x10
	0x14083c54a: add r9, 0xd6
	0x14083c551: xor r14, 0x7fffffff
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14083c562: add word ptr [r9], dx
	0x14083c56d: mov r9, rbp
	0x14083c585: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14083c596: mov r9, qword ptr [r9]
	0x14083c5a0: add r9, 4
	0x14083c5b1: movzx r15, word ptr [r9]
	0x14083c5b5: mov r9, rbp
	0x14083c5b8: mov r10, 0x200
	0x14083c5c6: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083c5db: xor r15d, dword ptr [r9]
	0x14083c5de: mov rdi, rbp
	0x14083c5ef: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14083c5fd: sub r15d, dword ptr [rdi]
	0x14083c622: sub r10, -0x80000000
	0x14083c633: mov rax, rbp
	0x14083c636: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x14083c646: mov sil, byte ptr [rax]
	0x14083c649: cmp sil, 0xb0
	0x14083c64d: jbe 0x14083c66f
	0x14083c67d: mov rdx, 1
	0x14083c684: mov r8, rbp
	0x14083c695: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14083c6b1: xor word ptr [r8], r15w
	0x14083c6b5: mov r13, rbp
	0x14083c6bf: sub r10, 0x10
	0x14083c6c6: mov r12, rbp
	0x14083c6c9: mov rcx, 0x12
	0x14083c6d0: xor r10, 0x40
	0x14083c6de: add r13, 0xd6
	0x14083c6ec: mov rdi, r13
Load [EBP+0xd6](STATIC)
	0x14083c6ef: movzx r13, word ptr [r13]
	0x14083c6fb: sub r14, 0x10
	0x14083c702: add rdi, 0xffff
	0x14083c709: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x14083c710: movzx r12, word ptr [r12]
	0x14083c715: add r12w, 0x6691
	0x14083c71b: add r10, -0x80000000
	0x14083c722: mov rsi, 0x655d7857
	0x14083c737: mov rax, rbp
	0x14083c73a: add r12, rbp
	0x14083c73d: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083c743: sub dword ptr [rax], esi
	0x14083c74c: and r14, 0x400
	0x14083c753: or rdi, 4
	0x14083c75a: add r13w, 0xcf1a
	0x14083c760: add r13, rbp
	0x14083c763: xor r10, 0xf0
	0x14083c76a: mov r15, 0x200
	0x14083c771: add r10, 4
Load [EBP+0xe0](VM_REGISTER)
	0x14083c778: mov r13, qword ptr [r13]
	0x14083c77c: add r10, r15
	0x14083c77f: xor rdi, 0xffff
Store VM_REG [EBP+0xce]
	0x14083c786: mov dword ptr [r12], r13d
	0x14083c78a: xor r10, 0x3f
	0x14083c791: add r12, 4
Store VM_REG [EBP+0xd2]
	0x14083c798: mov dword ptr [r12], 0
	0x14083c7a0: xor r14, 0x90
	0x14083c7a7: add r14, 0x88
	0x14083c7ae: or r10, 0xffffffff80000000
	0x14083c7b5: and r12, 0x7fffffff
	0x14083c7bc: mov rax, 0xd5
	0x14083c7c3: or r14, 8
	0x14083c7cd: mov r9, 1
	0x14083c7db: xor r9, 0x400
	0x14083c7e2: and r14, 1
	0x14083c7f0: push 0x6355b628
	0x14083c7f5: push r10
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xffffffff8000037b
	0x14083c7f7: pop qword ptr [rsp]
	0x14083c7fa: push 0x6f696320
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14083c7ff: mov qword ptr [rsp], rbp
	0x14083c803: push r13
	0x14083c805: movabs r13, 0x6fffcad0
	0x14083c80f: push rdx
	0x14083c810: mov rdx, r13
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 14 | (~(((context >> 14) & 0x3fff)) & 0x3fff)) << 2 | ((context >> 12) & 0x3)) << 1 | (~(((context >> 11) & 0x1)) & 0x1)) << 1 | ((context >> 10) & 0x1)) << 1 | (~(((context >> 9) & 0x1)) & 0x1)) << 1 | ((context >> 8) & 0x1)) << 2 | (~(((context >> 6) & 0x3)) & 0x3)) << 1 | ((context >> 5) & 0x1)) << 1 | (~(((context >> 4) & 0x1)) & 0x1)) << 4 | (context & 0xf))
	0x14083c813: xor qword ptr [rsp + 0x10], rdx
	0x14083c818: pop rdx
	0x14083c819: pop r13
	0x14083c81b: pop r10
	0x14083c81d: xor r10, 0x6fffcad0
	0x14083c824: mov rbx, r10
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14083c827: mov r10, qword ptr [rsp]
	0x14083c82b: push 0x8f1db66
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x200
	0x14083c830: mov qword ptr [rsp], r15
	0x14083c834: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14083c838: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14083c83c: add qword ptr [rsp], 8
	0x14083c841: pop r15
	0x14083c843: add r15, 8
	0x14083c847: push r13
	0x14083c849: movabs r13, 0x7b5716d2
	0x14083c853: xor r13, 0x78f7528e
	0x14083c85a: or r13, 0x7c77d000
	0x14083c861: shr r13, 6
	0x14083c865: xor r13, 0x3f3e065a
	0x14083c86c: inc r13
	0x14083c86f: xor r13, 0x3ec1d904
	0x14083c876: sub r15, r13
	0x14083c879: pop r13
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0xff0
	0x14083c87b: xchg qword ptr [rsp], r15
	0x14083c87f: pop rsp
	0x14083c880: mov qword ptr [rsp], r12
	0x14083c884: sub rsp, 8
	0x14083c88b: mov qword ptr [rsp], rsp
	0x14083c88f: add qword ptr [rsp], 8
	0x14083c894: pop r12
	0x14083c896: add r12, 8
	0x14083c89a: push rbx
	0x14083c89b: movabs rbx, 0x3bf96a60
	0x14083c8a5: xor rbx, 0x3bf96a68
	0x14083c8ac: add r12, rbx
	0x14083c8af: pop rbx
	0x14083c8b0: push r12
	0x14083c8b2: push qword ptr [rsp + 8]
	0x14083c8b6: pop r12
	0x14083c8b8: pop qword ptr [rsp]
	0x14083c8bb: mov rsp, qword ptr [rsp]
	0x14083c8bf: sub rsp, 8
	0x14083c8c3: sub rsp, 8
	0x14083c8c7: mov qword ptr [rsp], r9
	0x14083c8cb: pop qword ptr [rsp]
	0x14083c8ce: push 0xad7e6ce
	0x14083c8d3: push r14
	0x14083c8d5: mov r14, r10
	0x14083c8d8: mov qword ptr [rsp + 8], r14
	0x14083c8dd: pop r14
	0x14083c8df: push rax
	0x14083c8e0: movabs rax, 0x5f7bc7a3
	0x14083c8ea: mov r10, rax
	0x14083c8ed: pop rax
	0x14083c8ee: shr r10, 4
	0x14083c8f2: and r10, 0x36ff9137
	0x14083c8f9: or r10, 0x7bf72676
	0x14083c900: add r10, 0x7e77180d
	0x14083c907: sub rsp, 8
	0x14083c90b: mov qword ptr [rsp], rcx
	0x14083c90f: movabs rcx, 0xffffffff019132c2
	0x14083c919: add r10, rcx
	0x14083c920: add rsp, 8
	0x14083c924: push 0x2c2591f9
	0x14083c929: mov qword ptr [rsp], r14
	0x14083c92d: mov r14, r10
	0x14083c930: push r14
	0x14083c932: add qword ptr [rsp], 0x177ddcc7
	0x14083c93a: pop r9
	0x14083c93c: sub r9, 0x177ddcc7
	0x14083c943: push qword ptr [rsp]
	0x14083c946: pop r14
	0x14083c948: push r14
	0x14083c94a: mov r14, rsp
	0x14083c94d: add r14, 8
	0x14083c951: add r14, 8
	0x14083c958: xchg qword ptr [rsp], r14
	0x14083c95c: mov rsp, qword ptr [rsp]
	0x14083c960: pop r10
	0x14083c962: sub rbx, 0x57814511
	0x14083c969: add rbx, r9
	0x14083c96c: add rbx, 0x57814511
	0x14083c977: add rsp, 8
	0x14083c97b: or r14, 0xffffffff80000000
	0x14083c989: sub rsp, 8
	0x14083c98d: push 0x7df5cd14
	0x14083c992: mov qword ptr [rsp], rax
	0x14083c996: pop qword ptr [rsp]
	0x14083c999: push rdx
	0x14083c99a: movabs rdx, 0x5fedbd00
	0x14083c9a4: mov rax, rdx
	0x14083c9a7: push qword ptr [rsp]
	0x14083c9aa: pop rdx
	0x14083c9ab: add rsp, 8
	0x14083c9af: sub rax, 1
	0x14083c9b3: sub rax, -1
	0x14083c9b7: shr rax, 8
	0x14083c9bb: and rax, 0x7fbec1af
	0x14083c9c1: dec rax
	0x14083c9c4: xchg rax, r14
	0x14083c9c6: push r14
	0x14083c9c8: not qword ptr [rsp]
	0x14083c9cc: pop r14
	0x14083c9ce: xchg rax, r14
	0x14083c9d0: push rdi
	0x14083c9d1: mov rdi, -0x1ec1b3
	0x14083c9d8: sub rax, rdi
	0x14083c9db: push qword ptr [rsp]
	0x14083c9de: pop rdi
	0x14083c9df: sub rsp, 8
	0x14083c9e3: mov qword ptr [rsp], r10
	0x14083c9e7: push rsp
	0x14083c9e8: pop r10
	0x14083c9ea: add r10, 8
	0x14083c9ee: push rdi
	0x14083c9ef: movabs rdi, 0x3ebdb772
	0x14083c9f9: and rdi, 0x2e6b658d
	0x14083ca00: xor rdi, 0x2e292508
	0x14083ca07: add r10, 0x69377d00
	0x14083ca0e: add r10, rdi
	0x14083ca11: sub r10, 0x69377d00
	0x14083ca1c: add rsp, 8
	0x14083ca20: xchg qword ptr [rsp], r10
	0x14083ca24: pop rsp
Load [EBP+0x145](STATIC)
bytecode=0x140941674
	0x14083ca25: add qword ptr [rbx], rax
	0x14083ca28: pop rax
	0x14083ca3a: mov r12, rbp
	0x14083ca4d: add r12, 0xfd
Load [EBP+0xfd](STATIC)
	0x14083ca54: mov rsi, qword ptr [r12]
	0x14083ca58: sub rsi, 0xd0ea935
	0x14083ca6d: push rsi
	0x14083cab1: pop rbx
	0x14083cab2: add rbx, 0xd0ea935
	0x14083cab9: jmp rbx
handlers outputs:



	0x14083c32d: mov rdi, rbp
	0x14083c341: add rdi, 0x145
	0x14083c348: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x14083c34e: mov rdi, qword ptr [rdi]
	0x14083c358: mov r15, 0x12
	0x14083c35f: and r15, 0x3f
	0x14083c366: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x14083c382: mov rsi, qword ptr [rsi]
	0x14083c385: add rdi, 2
	0x14083c39a: movzx rdi, word ptr [rdi]
	0x14083c3a5: mov rdx, rbp
	0x14083c3af: add rdx, 0xbf
	0x14083c3c4: xor r15, 0x40
Load [EBP+0xbf](STATIC)
	0x14083c3cb: add edi, dword ptr [rdx]
	0x14083c3d4: xor r15, 0x7fffffff
	0x14083c3db: sub edi, 0x7ed43765
	0x14083c3e1: mov r11, rbp
	0x14083c3f5: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083c3fc: sub dword ptr [r11], edi
	0x14083c406: sub r15, 0x20
	0x14083c410: and rdi, 0xffff
	0x14083c41e: shl rdi, 3
	0x14083c425: add rsi, rdi
	0x14083c428: mov rdx, qword ptr [rsi]
	0x14083c42b: mov rsi, rbp
	0x14083c42e: add rsi, 0xfd
	0x14083c435: and r15, 0x78
Store [EBP+0xfd](STATIC)
	0x14083c43c: mov qword ptr [rsi], rdx
	0x14083c43f: mov rdx, 0
	0x14083c457: mov r13, rbp
	0x14083c45a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14083c464: mov r13, qword ptr [r13]
	0x14083c468: add r13, 0
	0x14083c476: mov dx, word ptr [r13]
	0x14083c482: mov r14, rbp
	0x14083c493: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083c4a8: xor edx, dword ptr [r14]
	0x14083c4ab: xor r15, 0x40
	0x14083c4c6: mov r14, 0x12
	0x14083c4e2: mov r12, r15
	0x14083c4e8: mov r10, rbp
	0x14083c4f9: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083c500: xor dword ptr [r10], edx
	0x14083c50a: mov r9, rbp
	0x14083c514: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083c522: and dword ptr [r9], 0x515d86f5
	0x14083c529: add r14, r12
	0x14083c536: mov r9, rbp
	0x14083c539: xor r14, 0x10
	0x14083c54a: add r9, 0xd6
	0x14083c551: xor r14, 0x7fffffff
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14083c562: add word ptr [r9], dx
	0x14083c56d: mov r9, rbp
	0x14083c585: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14083c596: mov r9, qword ptr [r9]
	0x14083c5a0: add r9, 4
	0x14083c5b1: movzx r15, word ptr [r9]
	0x14083c5b5: mov r9, rbp
	0x14083c5b8: mov r10, 0x200
	0x14083c5c6: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14083c5db: xor r15d, dword ptr [r9]
	0x14083c5de: mov rdi, rbp
	0x14083c5ef: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14083c5fd: sub r15d, dword ptr [rdi]
	0x14083c622: sub r10, -0x80000000
	0x14083c633: mov rax, rbp
	0x14083c636: add rax, 0x130
Load [EBP+0x130](STATIC)
	0x14083c646: mov sil, byte ptr [rax]
	0x14083c649: cmp sil, 0xb0
	0x14083c64d: jbe 0x14083c66f
	0x14083c67d: mov rdx, 1
	0x14083c684: mov r8, rbp
	0x14083c695: add r8, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14083c6b1: xor word ptr [r8], r15w
	0x14083c6b5: mov r13, rbp
	0x14083c6bf: sub r10, 0x10
	0x14083c6c6: mov r12, rbp
	0x14083c6c9: mov rcx, 0x12
	0x14083c6d0: xor r10, 0x40
	0x14083c6de: add r13, 0xd6
	0x14083c6ec: mov rdi, r13
Load [EBP+0xd6](STATIC)
	0x14083c6ef: movzx r13, word ptr [r13]
	0x14083c6fb: sub r14, 0x10
	0x14083c702: add rdi, 0xffff
	0x14083c709: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x14083c710: movzx r12, word ptr [r12]
	0x14083c715: add r12w, 0x6691
	0x14083c71b: add r10, -0x80000000
	0x14083c722: mov rsi, 0x655d7857
	0x14083c737: mov rax, rbp
	0x14083c73a: add r12, rbp
	0x14083c73d: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083c743: sub dword ptr [rax], esi
	0x14083c74c: and r14, 0x400
	0x14083c753: or rdi, 4
	0x14083c75a: add r13w, 0xcf1a
	0x14083c760: add r13, rbp
	0x14083c763: xor r10, 0xf0
	0x14083c76a: mov r15, 0x200
	0x14083c771: add r10, 4
Load [EBP+0x7a](VM_REGISTER)
	0x14083c778: mov r13, qword ptr [r13]
	0x14083c77c: add r10, r15
	0x14083c77f: xor rdi, 0xffff
Store VM_REG [EBP+0xe8]
	0x14083c786: mov dword ptr [r12], r13d
	0x14083c78a: xor r10, 0x3f
	0x14083c791: add r12, 4
Store VM_REG [EBP+0xec]
	0x14083c798: mov dword ptr [r12], 0
	0x14083c7a0: xor r14, 0x90
	0x14083c7a7: add r14, 0x88
	0x14083c7ae: or r10, 0xffffffff80000000
	0x14083c7b5: and r12, 0x7fffffff
	0x14083c7bc: mov rax, 0xd5
	0x14083c7c3: or r14, 8
	0x14083c7cd: mov r9, 1
	0x14083c7db: xor r9, 0x400
	0x14083c7e2: and r14, 1
	0x14083c7f0: push 0x6355b628
	0x14083c7f5: push r10
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xffffffff8000037b
	0x14083c7f7: pop qword ptr [rsp]
	0x14083c7fa: push 0x6f696320
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14083c7ff: mov qword ptr [rsp], rbp
	0x14083c803: push r13
	0x14083c805: movabs r13, 0x6fffcad0
	0x14083c80f: push rdx
	0x14083c810: mov rdx, r13
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 14 | (~(((context >> 14) & 0x3fff)) & 0x3fff)) << 2 | ((context >> 12) & 0x3)) << 1 | (~(((context >> 11) & 0x1)) & 0x1)) << 1 | ((context >> 10) & 0x1)) << 1 | (~(((context >> 9) & 0x1)) & 0x1)) << 1 | ((context >> 8) & 0x1)) << 2 | (~(((context >> 6) & 0x3)) & 0x3)) << 1 | ((context >> 5) & 0x1)) << 1 | (~(((context >> 4) & 0x1)) & 0x1)) << 4 | (context & 0xf))
	0x14083c813: xor qword ptr [rsp + 0x10], rdx
	0x14083c818: pop rdx
	0x14083c819: pop r13
	0x14083c81b: pop r10
	0x14083c81d: xor r10, 0x6fffcad0
	0x14083c824: mov rbx, r10
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14083c827: mov r10, qword ptr [rsp]
	0x14083c82b: push 0x8f1db66
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x200
	0x14083c830: mov qword ptr [rsp], r15
	0x14083c834: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14083c838: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14083c83c: add qword ptr [rsp], 8
	0x14083c841: pop r15
	0x14083c843: add r15, 8
	0x14083c847: push r13
	0x14083c849: movabs r13, 0x7b5716d2
	0x14083c853: xor r13, 0x78f7528e
	0x14083c85a: or r13, 0x7c77d000
	0x14083c861: shr r13, 6
	0x14083c865: xor r13, 0x3f3e065a
	0x14083c86c: inc r13
	0x14083c86f: xor r13, 0x3ec1d904
	0x14083c876: sub r15, r13
	0x14083c879: pop r13
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0xff0
	0x14083c87b: xchg qword ptr [rsp], r15
	0x14083c87f: pop rsp
	0x14083c880: mov qword ptr [rsp], r12
	0x14083c884: sub rsp, 8
	0x14083c88b: mov qword ptr [rsp], rsp
	0x14083c88f: add qword ptr [rsp], 8
	0x14083c894: pop r12
	0x14083c896: add r12, 8
	0x14083c89a: push rbx
	0x14083c89b: movabs rbx, 0x3bf96a60
	0x14083c8a5: xor rbx, 0x3bf96a68
	0x14083c8ac: add r12, rbx
	0x14083c8af: pop rbx
	0x14083c8b0: push r12
	0x14083c8b2: push qword ptr [rsp + 8]
	0x14083c8b6: pop r12
	0x14083c8b8: pop qword ptr [rsp]
	0x14083c8bb: mov rsp, qword ptr [rsp]
	0x14083c8bf: sub rsp, 8
	0x14083c8c3: sub rsp, 8
	0x14083c8c7: mov qword ptr [rsp], r9
	0x14083c8cb: pop qword ptr [rsp]
	0x14083c8ce: push 0xad7e6ce
	0x14083c8d3: push r14
	0x14083c8d5: mov r14, r10
	0x14083c8d8: mov qword ptr [rsp + 8], r14
	0x14083c8dd: pop r14
	0x14083c8df: push rax
	0x14083c8e0: movabs rax, 0x5f7bc7a3
	0x14083c8ea: mov r10, rax
	0x14083c8ed: pop rax
	0x14083c8ee: shr r10, 4
	0x14083c8f2: and r10, 0x36ff9137
	0x14083c8f9: or r10, 0x7bf72676
	0x14083c900: add r10, 0x7e77180d
	0x14083c907: sub rsp, 8
	0x14083c90b: mov qword ptr [rsp], rcx
	0x14083c90f: movabs rcx, 0xffffffff019132c2
	0x14083c919: add r10, rcx
	0x14083c920: add rsp, 8
	0x14083c924: push 0x2c2591f9
	0x14083c929: mov qword ptr [rsp], r14
	0x14083c92d: mov r14, r10
	0x14083c930: push r14
	0x14083c932: add qword ptr [rsp], 0x177ddcc7
	0x14083c93a: pop r9
	0x14083c93c: sub r9, 0x177ddcc7
	0x14083c943: push qword ptr [rsp]
	0x14083c946: pop r14
	0x14083c948: push r14
	0x14083c94a: mov r14, rsp
	0x14083c94d: add r14, 8
	0x14083c951: add r14, 8
	0x14083c958: xchg qword ptr [rsp], r14
	0x14083c95c: mov rsp, qword ptr [rsp]
	0x14083c960: pop r10
	0x14083c962: sub rbx, 0x57814511
	0x14083c969: add rbx, r9
	0x14083c96c: add rbx, 0x57814511
	0x14083c977: add rsp, 8
	0x14083c97b: or r14, 0xffffffff80000000
	0x14083c989: sub rsp, 8
	0x14083c98d: push 0x7df5cd14
	0x14083c992: mov qword ptr [rsp], rax
	0x14083c996: pop qword ptr [rsp]
	0x14083c999: push rdx
	0x14083c99a: movabs rdx, 0x5fedbd00
	0x14083c9a4: mov rax, rdx
	0x14083c9a7: push qword ptr [rsp]
	0x14083c9aa: pop rdx
	0x14083c9ab: add rsp, 8
	0x14083c9af: sub rax, 1
	0x14083c9b3: sub rax, -1
	0x14083c9b7: shr rax, 8
	0x14083c9bb: and rax, 0x7fbec1af
	0x14083c9c1: dec rax
	0x14083c9c4: xchg rax, r14
	0x14083c9c6: push r14
	0x14083c9c8: not qword ptr [rsp]
	0x14083c9cc: pop r14
	0x14083c9ce: xchg rax, r14
	0x14083c9d0: push rdi
	0x14083c9d1: mov rdi, -0x1ec1b3
	0x14083c9d8: sub rax, rdi
	0x14083c9db: push qword ptr [rsp]
	0x14083c9de: pop rdi
	0x14083c9df: sub rsp, 8
	0x14083c9e3: mov qword ptr [rsp], r10
	0x14083c9e7: push rsp
	0x14083c9e8: pop r10
	0x14083c9ea: add r10, 8
	0x14083c9ee: push rdi
	0x14083c9ef: movabs rdi, 0x3ebdb772
	0x14083c9f9: and rdi, 0x2e6b658d
	0x14083ca00: xor rdi, 0x2e292508
	0x14083ca07: add r10, 0x69377d00
	0x14083ca0e: add r10, rdi
	0x14083ca11: sub r10, 0x69377d00
	0x14083ca1c: add rsp, 8
	0x14083ca20: xchg qword ptr [rsp], r10
	0x14083ca24: pop rsp
Load [EBP+0x145](STATIC)
bytecode=0x14094167a
	0x14083ca25: add qword ptr [rbx], rax
	0x14083ca28: pop rax
	0x14083ca3a: mov r12, rbp
	0x14083ca4d: add r12, 0xfd
Load [EBP+0xfd](STATIC)
	0x14083ca54: mov rsi, qword ptr [r12]
	0x14083ca58: sub rsi, 0xd0ea935
	0x14083ca6d: push rsi
	0x14083cab1: pop rbx
	0x14083cab2: add rbx, 0xd0ea935
	0x14083cab9: jmp rbx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407c1da7: mov r10, rbp
	0x1407c1db1: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407c1dbf: mov r10, qword ptr [r10]
	0x1407c1dc9: add r10, 6
	0x1407c1dd7: movzx r9, word ptr [r10]
	0x1407c1de2: mov rcx, rbp
	0x1407c1df3: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c1e04: xor r9d, dword ptr [rcx]
	0x1407c1e07: mov r10, rbp
	0x1407c1e11: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407c1e1b: xor r9d, dword ptr [r10]
	0x1407c1e1e: mov r13, rbp
	0x1407c1e27: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1e2e: or dword ptr [r13], r9d
	0x1407c1e4d: mov r15, rbp
	0x1407c1e53: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1407c1e5a: mov dil, byte ptr [r15]
	0x1407c1e5d: cmp dil, 0x64
	0x1407c1e61: jbe 0x1407c1e7f
	0x1407c1e89: mov rax, rbp
	0x1407c1e9a: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407c1ea3: xor word ptr [rax], r9w
	0x1407c1eae: mov rdx, rbp
	0x1407c1ebe: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1ec5: movzx rdx, word ptr [rdx]
	0x1407c1ed0: add dx, 0xd88c
	0x1407c1edb: add rdx, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x1407c1ee5: inc dword ptr [rdx]
	0x1407c1ee7: add rdx, 4
Store VM_REG [EBP+0xe4]
	0x1407c1eee: mov dword ptr [rdx], 0
	0x1407c1f27: mov r15, rbp
	0x1407c1f38: mov r12, rbp
	0x1407c1f45: add r12, 0xab
	0x1407c1f4c: add r15, 0x145
Load [EBP+0xab](STATIC)
	0x1407c1f61: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x1407c1f65: mov r15, qword ptr [r15]
	0x1407c1f68: add r15, 4
	0x1407c1f6f: movzx r15, word ptr [r15]
	0x1407c1f7d: mov rdx, rbp
	0x1407c1f8e: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407c1f95: add r15d, dword ptr [rdx]
	0x1407c1f98: xor r15d, 0x3500752b
	0x1407c1fa5: mov rax, rbp
	0x1407c1fa8: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1fb5: sub dword ptr [rax], r15d
	0x1407c1fbb: and r15, 0xffff
	0x1407c1fd0: shl r15, 3
	0x1407c1fdb: add r12, r15
	0x1407c1fe5: mov r8, qword ptr [r12]
	0x1407c1fe9: mov rsi, rbp
	0x1407c1ffa: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941682
	0x1407c2001: add qword ptr [rsi], 8
	0x1407c2008: jmp r8
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407722af: mov r9, 0
	0x1407722bd: mov rax, rbp
	0x1407722ca: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407722de: mov rax, qword ptr [rax]
	0x1407722e1: add rax, 7
	0x1407722f5: mov r9w, word ptr [rax]
	0x140772300: mov r12, rbp
	0x140772306: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140772314: xor r9d, dword ptr [r12]
	0x140772337: mov rdx, rbp
	0x140772344: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140772352: or dword ptr [rdx], r9d
	0x14077235c: mov r12, rbp
	0x14077235f: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140772366: add dword ptr [r12], 0x655ba598
	0x140772375: mov rbx, rbp
	0x140772386: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140772390: sub word ptr [rbx], r9w
	0x14077239b: mov r15, rbp
	0x14077239e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407723b3: mov r15, qword ptr [r15]
	0x1407723bd: add r15, 2
	0x1407723c4: movzx r13, word ptr [r15]
	0x1407723c8: mov r14, rbp
	0x1407723d1: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407723d8: add r13d, dword ptr [r14]
	0x1407723e9: mov r8, rbp
	0x1407723f3: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140772408: xor r13d, dword ptr [r8]
	0x140772412: mov rbx, rbp
	0x140772415: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140772423: sub dword ptr [rbx], r13d
	0x140772426: mov rsi, rbp
	0x14077242c: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077243d: and dword ptr [rsi], 0x3abb5cf2
	0x14077244a: mov rdi, rbp
	0x140772454: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x140772462: mov r11b, byte ptr [rdi]
	0x140772465: cmp r11b, 0xe5
	0x140772469: jbe 0x140772487
	0x140772487: mov r14, rbp
	0x140772491: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140772498: add word ptr [r14], r13w
	0x14077249f: mov rdx, rbp
	0x1407724a2: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407724a9: movzx rdx, word ptr [rdx]
	0x1407724b4: add rdx, rbp
	0x1407724bd: mov r12, rbp
	0x1407724c7: add r12, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407724d1: movzx r12, word ptr [r12]
	0x1407724e0: xor r12w, 0x1ec2
	0x1407724f0: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140772501: mov r12, qword ptr [r12]
	0x140772508: mov rax, rdx
	0x140772512: mov rcx, r12
	0x140772518: mov dl, cl
	0x14077251a: and dl, 0x3f
	0x14077251d: cmp dl, 0
	0x140772520: je 0x140772535
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140772526: shl dword ptr [rax], cl
	0x140772528: pushfq
	0x140772575: mov r15, rax
	0x14077257f: add r15, 4
Store VM_REG [EBP+0xec]
	0x14077258d: mov dword ptr [r15], 0
	0x1407725a5: mov r15, 0
	0x1407725ac: mov rbx, rbp
	0x1407725ca: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407725e1: mov rbx, qword ptr [rbx]
	0x1407725eb: add rbx, 6
	0x1407725f9: mov r15b, byte ptr [rbx]
	0x140772604: cmp r15b, 0
	0x140772608: je 0x14077265f
	0x14077260e: mov rbx, rbp
	0x140772618: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140772622: mov rbx, qword ptr [rbx]
	0x14077262f: add rbx, 4
	0x14077263d: mov r15w, word ptr [rbx]
	0x140772641: add r15, rbp
	0x14077264e: pop r13
Store VM_REG [EBP+0x26]
	0x140772650: mov qword ptr [r15], r13
	0x14077267c: mov r10b, 0xea
	0x14077268d: mov r15, rbp
	0x140772697: add r15, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407726a5: add byte ptr [r15], r10b
	0x1407726b8: mov r15, rbp
	0x1407726bb: mov rbx, rbp
	0x1407726be: add r15, 0x145
	0x1407726c5: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1407726cc: mov rbx, qword ptr [rbx]
Load [EBP+0x145](STATIC)
	0x1407726dd: mov r15, qword ptr [r15]
	0x1407726e7: add r15, 0
	0x1407726ee: movzx r15, word ptr [r15]
	0x140772711: mov rax, rbp
	0x14077271e: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140772724: or dword ptr [rax], r15d
	0x140772727: and r15, 0xffff
	0x14077274a: shl r15, 3
	0x140772758: add rbx, r15
	0x140772762: mov r10, qword ptr [rbx]
	0x14077276c: mov r15, rbp
	0x140772776: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094168b
	0x14077277d: add qword ptr [r15], 9
	0x140772784: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941691
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094169b
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416a1
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416a7
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416af
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416b7
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x131](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416bd
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416c3
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416c9
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416cf
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416d5
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416db
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416e1
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416e7
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416ef
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416f5
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409416fd
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094171f
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941739
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094173b
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



basic block ends with ret
	0x14083d4a0: mov r15, rbp
	0x14083d4a3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14083d4aa: mov r15, qword ptr [r15]
	0x14083d4ad: add r15, 0
	0x14083d4b4: mov al, byte ptr [r15]
	0x14083d4b7: cmp al, 1
	0x14083d4b9: je 0x14083d4cc
	0x14083d4bf: cmp al, 2
	0x14083d4c1: je 0x14083d4cc
	0x14083d60c: mov r12, 0
	0x14083d613: mov r10, rbp
	0x14083d616: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14083d61d: mov r10, qword ptr [r10]
	0x14083d620: add r10, 7
	0x14083d627: mov r12d, dword ptr [r10]
	0x14083d62a: mov r14, rbp
	0x14083d62d: add r14, 0x18
Load [EBP+0x18](STATIC)
	0x14083d634: add r12, qword ptr [r14]
	0x14083d637: mov rsi, 0
	0x14083d63e: mov rax, rbp
	0x14083d641: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083d647: mov rax, qword ptr [rax]
	0x14083d64a: add rax, 0xb
	0x14083d650: mov si, word ptr [rax]
	0x14083d653: add rsi, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140942426
	0x14083d656: mov qword ptr [rsi], r12
	0x14083d659: mov r8, rbp
	0x14083d65c: add r8, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x14083d663: mov dword ptr [r8], 0
	0x14083d66a: pop r8
	0x14083d66c: pop r9
	0x14083d66e: pop r10
	0x14083d670: pop r11
	0x14083d672: pop r12
	0x14083d674: pop r13
	0x14083d676: pop r14
	0x14083d678: pop r15
	0x14083d67a: pop rdi
	0x14083d67b: pop rsi
	0x14083d67c: pop rbp
	0x14083d67d: pop rbx
	0x14083d67e: pop rdx
	0x14083d67f: pop rcx
	0x14083d680: pop rax
	0x14083d681: popfq
	0x14083d682: ret 0
ret handler 140942426, 0
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a3248
[0x140765772]=0x140941748
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140941748 <- ByteCode
	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x15d](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941750
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408437d8: mov r9, rbp
	0x1408437db: add r9, 0x120
	0x1408437f5: mov rdx, rbp
	0x140843808: add rdx, 0x145
	0x14084380f: add r14, 0x800
Load [EBP+0x145](STATIC)
	0x140843816: mov rdx, qword ptr [rdx]
	0x140843819: add rdx, 2
	0x140843820: or r14, r9
	0x14084382a: movzx r9, word ptr [rdx]
	0x14084382e: add r9, rbp
Store VM_REG [EBP+0x2e]
	0x140843831: mov qword ptr [r9], rsp
	0x140843834: mov r15, rbp
	0x140843837: mov r13, rbp
	0x14084383a: add r13, 0x145
	0x140843841: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140843848: mov r15, qword ptr [r15]
	0x14084384b: add r15, 4
Load [EBP+0x145](STATIC)
	0x140843852: mov r13, qword ptr [r13]
	0x140843856: add r13, 0xc
	0x14084385d: movzx r8, word ptr [r15]
	0x140843861: mov edi, dword ptr [r13]
	0x140843865: add r8, rbp
	0x140843868: mov r10, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14084386b: mov r8, qword ptr [r8]
	0x14084386e: add r10, 0xbf
	0x140843875: xor r14, r8
	0x140843878: pushfq
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140843880: and dword ptr [r10], edi
	0x1408438a5: pop r14
	0x1408438a7: mov r9, rbp
	0x1408438aa: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408438b1: mov r9, qword ptr [r9]
	0x1408438b4: add r9, 8
	0x1408438bb: mov ecx, dword ptr [r9]
	0x1408438be: mov r15, rbp
	0x1408438c1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408438c8: sub dword ptr [r15], ecx
	0x1408438ce: mov r14, 0
	0x1408438d8: mov r15, rbp
	0x1408438de: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408438f3: mov r15, qword ptr [r15]
	0x14084390b: add r15, 0
	0x140843927: mov r14w, word ptr [r15]
	0x140843943: shl r14, 3
	0x14084394e: mov r12, rbp
	0x140843962: add r12, 0xab
Load [EBP+0xab](STATIC)
	0x140843970: mov rbx, qword ptr [r12]
	0x140843982: add rbx, r14
	0x140843985: mov rdx, qword ptr [rbx]
	0x140843988: mov r8, rbp
	0x1408439a0: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941760
	0x1408439a7: add qword ptr [r8], 0x10
	0x1408439ae: jmp rdx
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094176e
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xe0]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094177c
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941784
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941792
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xc3]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094179a
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417a8
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x105]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417b6
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417c4
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417cc
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417d4
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417e2
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417f0
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x15d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409417f8
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941800
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094180e
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xce]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094181c
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941822
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x14083ebc7: mov r15, rbp
	0x14083ebca: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x14083ebd1: mov ecx, dword ptr [r15]
	0x14083ebd4: and ecx, 1
	0x14083ebda: cmp ecx, 0
	0x14083ebe0: je 0x14083ebf7
	0x14083ec04: mov rdx, rbp
	0x14083ec14: mov r15, rbp
	0x14083ec17: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14083ec1e: mov rdx, qword ptr [rdx]
	0x14083ec21: add rdx, 3
	0x14083ec32: add r15, 0x145
	0x14083ec39: movzx rdx, word ptr [rdx]
Load [EBP+0x145](STATIC)
	0x14083ec4b: mov r15, qword ptr [r15]
	0x14083ec5f: add rdx, rbp
	0x14083ec69: add r15, 0
	0x14083ec85: movzx r15, byte ptr [r15]
	0x14083ec97: add rsp, r15
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14083ec9a: add qword ptr [rdx], r15
	0x14083ec9d: mov r12, 0x1194700b
	0x14083eca4: mov r10, rbp
	0x14083eca7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083ecae: and dword ptr [r10], r12d
	0x14083ed0a: mov r10, rbp
	0x14083ed1e: mov r8, rbp
	0x14083ed36: add r10, 0xab
	0x14083ed3d: add r8, 0x145
Load [EBP+0xab](STATIC)
	0x14083ed4b: mov r10, qword ptr [r10]
Load [EBP+0x145](STATIC)
	0x14083ed4e: mov r8, qword ptr [r8]
	0x14083ed5f: add r8, 1
	0x14083ed69: movzx r8, word ptr [r8]
	0x14083ed93: xor r8d, 0x40fd3a6
	0x14083edc1: and r8, 0xffff
	0x14083edd9: shl r8, 3
	0x14083ede7: add r10, r8
	0x14083eded: mov rdi, qword ptr [r10]
	0x14083edf0: mov r11, rbp
	0x14083edf3: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941827
	0x14083edfa: add qword ptr [r11], 5
	0x14083ee01: jmp rdi
handlers outputs:



	0x14088873b: mov rbx, rbp
	0x14088874c: add rbx, 0x145
	0x140888753: sub rax, r14
Load [EBP+0x145](STATIC)
	0x140888756: mov rbx, qword ptr [rbx]
	0x140888760: add rbx, 6
	0x14088876a: movzx r15, word ptr [rbx]
	0x140888796: xor rax, 0x10
	0x1408887a6: mov rsi, rbp
	0x1408887b7: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408887c1: sub dword ptr [rsi], r15d
	0x1408887cb: mov r9, rbp
	0x1408887dc: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408887f1: and dword ptr [r9], 0x79ccda91
	0x1408887f8: mov rbx, rbp
	0x140888802: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140888813: mov r12b, byte ptr [rbx]
	0x140888816: cmp r12b, 0x1f
	0x14088881a: jbe 0x140888827
	0x140888827: mov rdi, rbp
	0x140888831: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140888846: add word ptr [rdi], r15w
	0x140888851: mov r13, rbp
	0x14088885b: add r13, 0xab
	0x140888869: mov r9, rbp
	0x140888876: add r9, 0x145
Load [EBP+0xab](STATIC)
	0x140888887: mov r13, qword ptr [r13]
Load [EBP+0x145](STATIC)
	0x140888892: mov r9, qword ptr [r9]
	0x14088889c: add r9, 0
	0x1408888aa: movzx r9, word ptr [r9]
	0x1408888ae: mov r15, rbp
	0x1408888b8: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408888bf: add r9d, dword ptr [r15]
	0x1408888d0: sub r9d, 0x12a0efe2
	0x1408888e1: mov r14, rbp
	0x1408888f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408888fc: sub dword ptr [r14], r9d
	0x140888909: and r9, 0xffff
	0x140888921: shl r9, 3
	0x14088892b: add r13, r9
	0x14088892e: mov rsi, qword ptr [r13]
	0x140888938: mov r13, rbp
	0x140888942: mov r12, r13
	0x140888945: add r13, 0xfd
Store [EBP+0xfd](STATIC)
	0x140888956: mov qword ptr [r13], rsi
	0x14088895a: mov rbx, 0
	0x140888961: mov r8, rbp
	0x14088896b: add rax, r8
	0x14088896e: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140888975: mov r8, qword ptr [r8]
	0x140888978: add r8, 4
	0x14088897f: mov bx, word ptr [r8]
	0x14088898d: mov rdi, rbp
	0x140888997: xor r12, 0x400
	0x14088899e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408889a5: add ebx, dword ptr [rdi]
	0x1408889a7: mov r14, rbp
	0x1408889aa: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x1408889b8: xor ebx, dword ptr [r14]
	0x1408889c5: mov rdi, rbp
	0x1408889cf: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408889e4: xor dword ptr [rdi], ebx
	0x1408889fa: mov rsi, rbp
	0x1408889fd: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140888a12: xor word ptr [rsi], bx
	0x140888a18: sub rax, r12
	0x140888a1b: mov r10, rbp
	0x140888a21: mov r9, rbp
	0x140888a24: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x140888a35: movzx r9, word ptr [r9]
	0x140888a39: and r14, 0x80
	0x140888a47: add r10, 0x16e
	0x140888a4e: or rax, r14
	0x140888a51: or rax, 0xffff
Load [EBP+0x16e](STATIC)
	0x140888a57: movzx r10, word ptr [r10]
	0x140888a5b: add r9, rbp
	0x140888a5e: or rax, 0x40
Load [EBP+0x97](VM_REGISTER)
	0x140888a64: mov r9, qword ptr [r9]
	0x140888a6e: add r10, rbp
Deref(t1808,ds)
	0x140888a7b: mov r9w, word ptr [r9]
	0x140888a7f: movzx r12d, r9w
Store VM_REG [EBP+0xce]
	0x140888a8a: mov dword ptr [r10], r12d
	0x140888a8d: mov r11, 1
	0x140888a9b: add r10, 4
Store VM_REG [EBP+0xd2]
	0x140888aa9: mov dword ptr [r10], 0
	0x140888ab0: mov r8, rbp
	0x140888ab3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140888aba: mov r8, qword ptr [r8]
	0x140888abd: add r8, 2
	0x140888ac4: movzx rcx, word ptr [r8]
	0x140888ac8: add rcx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140888acb: mov rcx, qword ptr [rcx]
	0x140888ace: xor r12, rcx
	0x140888ad1: pushfq
	0x140888ad2: xor rcx, 0x34a95579
	0x140888ae0: mov r15, rbp
	0x140888ae3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140888aea: mov r15, qword ptr [r15]
	0x140888aed: add r15, 8
	0x140888afb: pop r12
	0x140888afd: add r9, r9
	0x140888b0e: and rax, 4
	0x140888b14: sub r9, rax
	0x140888b17: mov dl, 0xac
	0x140888b20: add r9, 4
	0x140888b27: mov rsi, rbp
	0x140888b2d: add rsi, 0x130
	0x140888b34: mov rbx, 0
	0x140888b3b: sub r9, 0x3f
	0x140888b45: or rbx, 0x800
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140888b4c: and byte ptr [rsi], dl
	0x140888b4e: and rbx, 0x88
	0x140888b55: mov rdx, 0
	0x140888b5c: and rbx, rdx
	0x140888b5f: or rbx, 0x90
	0x140888b66: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140888b6d: mov qword ptr [rsp], rbp
	0x140888b71: push r15
	0x140888b73: push rdx
	0x140888b74: movabs rdx, 0x2dfdfa7f
	0x140888b7e: mov r15, rdx
	0x140888b81: pop rdx
	0x140888b82: not r15
	0x140888b85: shr r15, 7
	0x140888b89: dec r15
	0x140888b8c: push r11
	0x140888b8e: movabs r11, 0x1ffffffe854d20a
	0x140888b98: sub r15, 0xabe7e6b
	0x140888b9f: sub r15, r11
	0x140888ba2: add r15, 0xabe7e6b
	0x140888bad: add rsp, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((context >> 29) & 0x7ffffffff)) << 1 | (~(((context >> 28) & 0x1)) & 0x1)) << 1 | ((context >> 27) & 0x1)) << 3 | (~(((context >> 24) & 0x7)) & 0x7)) << 1 | ((context >> 23) & 0x1)) << 1 | (~(((context >> 22) & 0x1)) & 0x1)) << 2 | ((context >> 20) & 0x3)) << 4 | (~(((context >> 16) & 0xf)) & 0xf)) << 2 | ((context >> 14) & 0x3)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 2 | ((context >> 10) & 0x3)) << 1 | (~(((context >> 9) & 0x1)) & 0x1)) << 9 | (context & 0x1ff))
	0x140888bb1: xor qword ptr [rsp + 8], r15
	0x140888bb6: pop r15
	0x140888bb8: pop r14
	0x140888bba: push rdi
	0x140888bbb: push rdx
	0x140888bbc: movabs rdx, 0x6d8be573
	0x140888bc6: movabs rdi, 0x11d461f0
	0x140888bd0: add rdi, rdx
	0x140888bd3: pop rdx
	0x140888bd4: push rdi
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x7f604763
	0x140888bd5: xchg qword ptr [rsp], rdi
	0x140888bd9: xchg rax, rdi
	0x140888bdb: xchg rax, rsi
	0x140888bdd: not rsi
	0x140888be0: xchg rax, rsi
	0x140888be2: xchg rax, rdi
	0x140888be4: push rdi
	0x140888be5: push qword ptr [rsp + 8]
	0x140888be9: pop rdi
	0x140888bea: pop qword ptr [rsp]
	0x140888bed: mov rdi, qword ptr [rsp]
	0x140888bf1: add rsp, 8
	0x140888bf8: sub rsp, 8
	0x140888bfc: mov qword ptr [rsp], rcx
	0x140888c00: movabs rcx, 0xffffffff6950869c
	0x140888c0a: add rdi, 0x7fef262
	0x140888c11: sub rdi, 0x3f7cfb8
	0x140888c18: sub rdi, rcx
	0x140888c1b: add rdi, 0x3f7cfb8
	0x140888c22: sub rdi, 0x7fef262
	0x140888c29: pop rcx
	0x140888c2a: xor r14, rdi
	0x140888c2d: mov rdi, qword ptr [rsp]
	0x140888c31: push rsi
	0x140888c32: mov rsi, rsp
	0x140888c35: add rsi, 8
	0x140888c39: add rsi, 8
	0x140888c40: xchg qword ptr [rsp], rsi
	0x140888c44: pop rsp
	0x140888c45: mov r15, rbp
	0x140888c48: mov r13, 0
	0x140888c4f: add r15, 0xfd
	0x140888c64: push 0x2298e261
	0x140888c69: mov qword ptr [rsp], rsi
	0x140888c6d: movabs rsi, 0x76e9596b
	0x140888c77: push r13
	0x140888c79: movabs r13, 0x3de7ff84
	0x140888c83: add r13, 0x7bffec92
	0x140888c8a: neg r13
	0x140888c8d: not r13
	0x140888c90: dec r13
	0x140888c93: inc r13
	0x140888c96: push rbp
	0x140888c97: movabs rbp, 0xc40d72af
	0x140888ca1: xor r13, rbp
	0x140888ca4: pop rbp
	0x140888ca5: add rsi, r13
	0x140888ca8: pop r13
	0x140888caa: sub rsp, 8
	0x140888cae: mov qword ptr [rsp], r13
	0x140888cb2: push r8
	0x140888cb4: movabs r8, 0x2ffbd3e1
	0x140888cbe: mov r13, r8
	0x140888cc1: pop r8
	0x140888cc3: neg r13
	0x140888cc6: shr r13, 3
	0x140888cca: and r13, 0x5df559f6
	0x140888cd1: sub r13, 0x7dfd4ded
	0x140888cd8: push r15
	0x140888cda: mov r15, -0x35cc5b9f
	0x140888ce1: sub r13, r15
	0x140888ce4: pop r15
	0x140888ce6: and rsi, r13
	0x140888ce9: pop r13
	0x140888ceb: neg rsi
	0x140888cee: xchg rsi, r12
	0x140888cf1: not r12
	0x140888cf4: xchg rsi, r12
	0x140888cf7: xor rsi, 0x3b30a02a
	0x140888cfe: push rcx
	0x140888cff: movabs rcx, 0x684c2d99
	0x140888d09: xor rsi, rcx
	0x140888d0c: pop rcx
	0x140888d0d: push rdi
	0x140888d0e: movabs rdi, 0xff74f11
	0x140888d18: xor rdi, 0x388055bb
	0x140888d1f: add rsi, rdi
	0x140888d26: add rsp, 8
	0x140888d2d: sub rsp, 8
	0x140888d34: push rdx
	0x140888d35: pop qword ptr [rsp]
	0x140888d38: movabs rdx, 0xffffffff70c9610b
	0x140888d42: sub rsi, 0x75ef664a
	0x140888d49: add rsi, rdx
	0x140888d4c: add rsi, 0x75ef664a
	0x140888d53: pop rdx
	0x140888d54: add r14, 0x7f972df8
	0x140888d5b: add r14, rsi
	0x140888d5e: sub r14, 0x7f972df8
	0x140888d69: add rsp, 8
Load [EBP+0xfd](STATIC)
	0x140888d70: mov rcx, qword ptr [r15]
	0x140888d7a: sub rsp, 8
	0x140888d7e: mov qword ptr [rsp], r9
	0x140888d82: sub rsp, 8
	0x140888d89: mov qword ptr [rsp], rdx
	0x140888d8d: movabs rdx, 0x7eff4bbb
	0x140888d97: push 0x4ddb376b
	0x140888d9c: mov qword ptr [rsp], rdx
	0x140888da0: push r15
	0x140888da2: movabs r15, 0x7da9ccd5
	0x140888dac: sub qword ptr [rsp + 8], 0xeaff2d7
	0x140888db5: sub qword ptr [rsp + 8], r15
	0x140888dba: add qword ptr [rsp + 8], 0xeaff2d7
	0x140888dc3: pop r15
	0x140888dc5: pop r9
	0x140888dc7: push r12
	0x140888dc9: movabs r12, 0x7dbf32e6
	0x140888dd3: shr r12, 3
	0x140888dd7: sub rsp, 8
	0x140888dde: mov qword ptr [rsp], r15
	0x140888de2: movabs r15, 0x4f6bf3f5
	0x140888dec: dec r15
	0x140888def: push rbp
	0x140888df0: movabs rbp, 0x3d75d97d
	0x140888dfa: xor r15, rbp
	0x140888dfd: pop rbp
	0x140888dfe: xor r12, r15
	0x140888e01: pop r15
	0x140888e03: add r9, r12
	0x140888e06: pop r12
	0x140888e08: push qword ptr [rsp]
	0x140888e0b: pop rdx
	0x140888e0c: add rsp, 8
	0x140888e10: push rbx
	0x140888e11: movabs rbx, 0x1fbf1726
	0x140888e1b: dec rbx
	0x140888e1e: shr rbx, 5
	0x140888e22: inc rbx
	0x140888e25: neg rbx
	0x140888e28: shl rbx, 1
	0x140888e2c: push rcx
	0x140888e2d: mov rcx, -0x7bca3319
	0x140888e34: sub rbx, rcx
	0x140888e37: pop rcx
	0x140888e38: xor r9, rbx
	0x140888e3b: pop rbx
	0x140888e3c: inc r9
	0x140888e3f: shl r9, 2
	0x140888e43: push r12
	0x140888e45: movabs r12, 0x1cc42876
	0x140888e4f: xor r9, r12
	0x140888e52: pop r12
Load [EBP+0x145](STATIC)
bytecode=0xc094ca78
	0x140888e54: sub qword ptr [r14], 0x7fff4daf
Load [EBP+0x145](STATIC)
bytecode=0xc094ca82
	0x140888e5b: add qword ptr [r14], r9
Load [EBP+0x145](STATIC)
bytecode=0x140941831
	0x140888e5e: add qword ptr [r14], 0x7fff4daf
	0x140888e65: push qword ptr [rsp]
	0x140888e6c: add rsp, 8
	0x140888e73: add rsp, 8
	0x140888e87: sub rcx, 0x216d4b42
	0x140888e9b: push rcx
	0x140888ed2: pop rdi
	0x140888ed3: add rdi, 0x216d4b42
	0x140888eda: jmp rdi
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x97](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x14d]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x3)) << 1 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 6) & 0x3)) << 1 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x14094183d
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941845
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x14d](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0x97]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x1)) << 1 | 0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x3)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x1)) << 1 | 0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 4) & 0x3)) << 1 | 0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x1)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x140941851
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x140868ac7: mov rdi, rbp
	0x140868ad8: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140868adf: mov rdi, qword ptr [rdi]
	0x140868ae2: add rdi, 0xd
	0x140868ae9: movzx r15, word ptr [rdi]
	0x140868b05: mov r13, rbp
	0x140868b08: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140868b19: sub r15d, dword ptr [r13]
	0x140868b1d: mov r8, rbp
	0x140868b2e: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140868b3c: or dword ptr [r8], r15d
	0x140868b3f: mov r8, rbp
	0x140868b42: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140868b50: sub dword ptr [r8], 0x5a189b17
	0x140868b65: mov rbx, rbp
	0x140868b6f: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140868b80: mov r10b, byte ptr [rbx]
	0x140868b83: cmp r10b, 0x48
	0x140868b87: jbe 0x140868b9b
	0x140868b9e: mov r9, rbp
	0x140868ba1: add r9, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140868bb2: add word ptr [r9], r15w
	0x140868bff: mov r8, 0
	0x140868c0d: mov rdi, rbp
	0x140868c17: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140868c25: mov rdi, qword ptr [rdi]
	0x140868c28: add rdi, 0
	0x140868c2f: mov r8w, word ptr [rdi]
	0x140868c36: mov rdx, rbp
	0x140868c40: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140868c47: xor r8d, dword ptr [rdx]
	0x140868c58: mov rdx, rbp
	0x140868c62: add rdx, 0x120
Load [EBP+0x120](STATIC)
	0x140868c70: sub r8d, dword ptr [rdx]
	0x140868c73: mov rax, rbp
	0x140868c80: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140868c8d: and dword ptr [rax], r8d
	0x140868c97: mov r10, rbp
	0x140868ca1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140868ca8: add dword ptr [r10], 0x5ffa608c
	0x140868cb6: mov r15, rbp
	0x140868cb9: add r15, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140868cce: add word ptr [r15], r8w
	0x140868cd8: mov rcx, rbp
	0x140868cdb: add rcx, 0x16e
	0x140868cec: mov r8, rbp
	0x140868cf6: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140868d04: add dword ptr [r8], 0x1d389f97
Load [EBP+0x16e](STATIC)
	0x140868d19: movzx rcx, word ptr [rcx]
	0x140868d24: mov rsi, rbp
	0x140868d42: sub cx, 0x8105
	0x140868d51: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
	0x140868d66: movzx rsi, word ptr [rsi]
	0x140868d6a: add rcx, rbp
	0x140868d7e: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140868d81: mov rsi, qword ptr [rsi]
Load [EBP+0x7a](VM_REGISTER)
	0x140868d8b: mov r14, qword ptr [rcx]
	0x140868d8e: imul r14, rsi
	0x140868d92: pushfq
Store VM_REG [EBP+0x7a]
	0x140868d9d: mov qword ptr [rcx], r14
	0x140868da0: mov r10, 0
	0x140868dae: mov r11, rbp
	0x140868dbf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140868dd4: mov r11, qword ptr [r11]
	0x140868de3: add r11, 0xc
	0x140868dea: mov r10b, byte ptr [r11]
	0x140868ded: cmp r10b, 0
	0x140868df1: je 0x140868e55
	0x140868dfe: mov r11, rbp
	0x140868e0f: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140868e1d: mov r11, qword ptr [r11]
	0x140868e27: add r11, 2
	0x140868e38: mov r10w, word ptr [r11]
	0x140868e49: add r10, rbp
	0x140868e4c: pop rcx
Store VM_REG [EBP+0x26]
	0x140868e4d: mov qword ptr [r10], rcx
	0x140868e8d: mov rbx, rbp
	0x140868e90: add rbx, 0xab
	0x140868ea5: mov r12, rbp
	0x140868ea8: add r12, 0x145
Load [EBP+0xab](STATIC)
	0x140868ebd: mov rbx, qword ptr [rbx]
Load [EBP+0x145](STATIC)
	0x140868ec7: mov r12, qword ptr [r12]
	0x140868ece: add r12, 4
	0x140868edc: movzx r12, word ptr [r12]
	0x140868f0a: xor r12d, 0x4e073909
	0x140868f17: mov r8, rbp
	0x140868f1a: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140868f24: xor dword ptr [r8], r12d
	0x140868f2e: and r12, 0xffff
	0x140868f4a: shl r12, 3
	0x140868f55: add rbx, r12
	0x140868f58: mov r8, qword ptr [rbx]
	0x140868f62: mov r13, rbp
	0x140868f65: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941860
	0x140868f6c: add qword ptr [r13], 0xf
	0x140868f74: jmp r8
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941866
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941870
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941876
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094187c
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941882
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941888
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941890
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941896
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094189c
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418a2
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418a8
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418ae
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418b6
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418bc
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418c4
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418ca
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418d2
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409418f4
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094190e
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941910
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



	0x14083d4a0: mov r15, rbp
	0x14083d4a3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14083d4aa: mov r15, qword ptr [r15]
	0x14083d4ad: add r15, 0
	0x14083d4b4: mov al, byte ptr [r15]
	0x14083d4b7: cmp al, 1
	0x14083d4b9: je 0x14083d4cc
	0x14083d4bf: cmp al, 2
	0x14083d4c1: je 0x14083d4cc
	0x14083d60c: mov r12, 0
	0x14083d613: mov r10, rbp
	0x14083d616: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14083d61d: mov r10, qword ptr [r10]
	0x14083d620: add r10, 7
	0x14083d627: mov r12d, dword ptr [r10]
	0x14083d62a: mov r14, rbp
	0x14083d62d: add r14, 0x18
Load [EBP+0x18](STATIC)
	0x14083d634: add r12, qword ptr [r14]
	0x14083d637: mov rsi, 0
	0x14083d63e: mov rax, rbp
	0x14083d641: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083d647: mov rax, qword ptr [rax]
	0x14083d64a: add rax, 0xb
	0x14083d650: mov si, word ptr [rax]
	0x14083d653: add rsi, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140942583
	0x14083d656: mov qword ptr [rsi], r12
	0x14083d659: mov r8, rbp
	0x14083d65c: add r8, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x14083d663: mov dword ptr [r8], 0
	0x14083d66a: pop r8
	0x14083d66c: pop r9
	0x14083d66e: pop r10
	0x14083d670: pop r11
	0x14083d672: pop r12
	0x14083d674: pop r13
	0x14083d676: pop r14
	0x14083d678: pop r15
	0x14083d67a: pop rdi
	0x14083d67b: pop rsi
	0x14083d67c: pop rbp
	0x14083d67d: pop rbx
	0x14083d67e: pop rdx
	0x14083d67f: pop rcx
	0x14083d680: pop rax
	0x14083d681: popfq
	0x14083d682: ret 0
ret handler 140942583, 0
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a3c1d
[0x140765772]=0x14094191d
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x14094191d <- ByteCode
	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941923
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407cb9e1: mov rax, 0x75c39e5e
	0x1407cb9e8: mov rbx, rbp
	0x1407cb9eb: mov r12, 0x75c39e5e
	0x1407cb9f2: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cb9f9: add dword ptr [rbx], eax
	0x1407cb9fb: mov r11, rbp
	0x1407cb9fe: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407cba05: add dword ptr [r11], r12d
	0x1407cba08: mov rcx, rbp
	0x1407cba0b: mov r14, rbp
	0x1407cba0e: add r14, 0x145
	0x1407cba15: add rcx, 0xa7
Load [EBP+0x145](STATIC)
	0x1407cba1c: mov r14, qword ptr [r14]
Load [EBP+0xa7](STATIC)
	0x1407cba1f: mov ebx, dword ptr [rcx]
	0x1407cba21: add r14, 4
	0x1407cba28: mov r15d, dword ptr [r14]
	0x1407cba2b: mov r11, rbp
	0x1407cba2e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cba35: add dword ptr [r11], r15d
	0x1407cba38: and ebx, 1
	0x1407cba3e: cmp ebx, 0
	0x1407cba44: je 0x1407cba5a
	0x1407cba5a: mov rcx, rbp
	0x1407cba5d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407cba64: mov rcx, qword ptr [rcx]
	0x1407cba6e: add rcx, 0
	0x1407cba78: movzx r10, word ptr [rcx]
	0x1407cba7c: add r10, rbp
Store VM_REG [EBP+0x2e]
	0x1407cba8d: mov qword ptr [r10], rsp
	0x1407cba90: mov r8, 0
	0x1407cbaa3: mov r12, rbp
	0x1407cbab0: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407cbac3: mov r12, qword ptr [r12]
	0x1407cbad0: add r12, 2
	0x1407cbae5: mov r8w, word ptr [r12]
	0x1407cbaf7: shl r8, 3
	0x1407cbafb: mov rdi, rbp
	0x1407cbafe: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x1407cbb1a: mov rax, qword ptr [rdi]
	0x1407cbb2a: add rax, r8
	0x1407cbb30: mov r14, qword ptr [rax]
	0x1407cbb33: mov r15, rbp
	0x1407cbb36: add r15, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094192b
	0x1407cbb3d: add qword ptr [r15], 8
	0x1407cbb44: jmp r14
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x97]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941933
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe0]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094193b
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941949
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x7a]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941951
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094195f
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x5c]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941967
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x105]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941975
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094197d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941985
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941993
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419a1
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419a9
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xe8]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419b7
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419c5
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419d3
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xce]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419e1
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419e7
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x14083ebc7: mov r15, rbp
	0x14083ebca: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x14083ebd1: mov ecx, dword ptr [r15]
	0x14083ebd4: and ecx, 1
	0x14083ebda: cmp ecx, 0
	0x14083ebe0: je 0x14083ebf7
	0x14083ebe6: mov r15, rbp
	0x14083ebe9: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14083ebf0: or dword ptr [r15], 0x5898b5b2
	0x14083ec04: mov rdx, rbp
	0x14083ec14: mov r15, rbp
	0x14083ec17: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14083ec1e: mov rdx, qword ptr [rdx]
	0x14083ec21: add rdx, 3
	0x14083ec32: add r15, 0x145
	0x14083ec39: movzx rdx, word ptr [rdx]
Load [EBP+0x145](STATIC)
	0x14083ec4b: mov r15, qword ptr [r15]
	0x14083ec5f: add rdx, rbp
	0x14083ec69: add r15, 0
	0x14083ec85: movzx r15, byte ptr [r15]
	0x14083ec97: add rsp, r15
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14083ec9a: add qword ptr [rdx], r15
	0x14083ec9d: mov r12, 0x1194700b
	0x14083eca4: mov r10, rbp
	0x14083eca7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083ecae: and dword ptr [r10], r12d
	0x14083ed0a: mov r10, rbp
	0x14083ed1e: mov r8, rbp
	0x14083ed36: add r10, 0xab
	0x14083ed3d: add r8, 0x145
Load [EBP+0xab](STATIC)
	0x14083ed4b: mov r10, qword ptr [r10]
Load [EBP+0x145](STATIC)
	0x14083ed4e: mov r8, qword ptr [r8]
	0x14083ed5f: add r8, 1
	0x14083ed69: movzx r8, word ptr [r8]
	0x14083ed93: xor r8d, 0x40fd3a6
	0x14083edc1: and r8, 0xffff
	0x14083edd9: shl r8, 3
	0x14083ede7: add r10, r8
	0x14083eded: mov rdi, qword ptr [r10]
	0x14083edf0: mov r11, rbp
	0x14083edf3: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419ec
	0x14083edfa: add qword ptr [r11], 5
	0x14083ee01: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2f9e: mov r12, rbp
	0x1407e2fa1: and rcx, 0x40
	0x1407e2faf: add r12, 0xa7
	0x1407e2fb6: or rax, 0x88
	0x1407e2fbc: mov r10, 0xd5
	0x1407e2fc3: and rax, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2fc9: add dword ptr [r12], 0x7e6102a5
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419f2
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409419fc
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a02
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a08
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a0e
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a16
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x131](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a1c
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a24
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a2c
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a32
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a38
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a3e
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a46
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a4e
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a54
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a5c
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a64
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941a86
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941aa0
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941aa2
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



	0x14083d4a0: mov r15, rbp
	0x14083d4a3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14083d4aa: mov r15, qword ptr [r15]
	0x14083d4ad: add r15, 0
	0x14083d4b4: mov al, byte ptr [r15]
	0x14083d4b7: cmp al, 1
	0x14083d4b9: je 0x14083d4cc
	0x14083d4bf: cmp al, 2
	0x14083d4c1: je 0x14083d4cc
	0x14083d60c: mov r12, 0
	0x14083d613: mov r10, rbp
	0x14083d616: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14083d61d: mov r10, qword ptr [r10]
	0x14083d620: add r10, 7
	0x14083d627: mov r12d, dword ptr [r10]
	0x14083d62a: mov r14, rbp
	0x14083d62d: add r14, 0x18
Load [EBP+0x18](STATIC)
	0x14083d634: add r12, qword ptr [r14]
	0x14083d637: mov rsi, 0
	0x14083d63e: mov rax, rbp
	0x14083d641: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083d647: mov rax, qword ptr [rax]
	0x14083d64a: add rax, 0xb
	0x14083d650: mov si, word ptr [rax]
	0x14083d653: add rsi, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1409426d0
	0x14083d656: mov qword ptr [rsi], r12
	0x14083d659: mov r8, rbp
	0x14083d65c: add r8, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x14083d663: mov dword ptr [r8], 0
	0x14083d66a: pop r8
	0x14083d66c: pop r9
	0x14083d66e: pop r10
	0x14083d670: pop r11
	0x14083d672: pop r12
	0x14083d674: pop r13
	0x14083d676: pop r14
	0x14083d678: pop r15
	0x14083d67a: pop rdi
	0x14083d67b: pop rsi
	0x14083d67c: pop rbp
	0x14083d67d: pop rbx
	0x14083d67e: pop rdx
	0x14083d67f: pop rcx
	0x14083d680: pop rax
	0x14083d681: popfq
	0x14083d682: ret 0
ret handler 1409426d0, 0
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a3faf
[0x140765772]=0x140941aaf
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140941aaf <- ByteCode
	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x64](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ab7
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



	0x14085179e: mov rax, rbp
	0x1408517a1: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408517a7: or dword ptr [rax], 0x7684443a
	0x1408517b7: mov r8, rbp
	0x1408517ba: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408517c1: mov edi, dword ptr [r8]
	0x1408517c4: and edi, 1
	0x1408517ca: cmp edi, 0
	0x1408517d0: je 0x1408517e0
	0x1408517e3: mov r15, rbp
	0x1408517ed: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140851801: mov r15, qword ptr [r15]
	0x14085180b: add r15, 0
	0x14085181c: movzx rdi, word ptr [r15]
	0x14085182a: add rdi, rbp
Store VM_REG [EBP+0x2e]
	0x140851830: mov qword ptr [rdi], rsp
	0x140851833: mov r12, rbp
	0x140851836: mov r11, rbp
	0x140851839: add r12, 0xa7
	0x140851840: add r11, 0x145
Load [EBP+0xa7](STATIC)
	0x140851847: mov r15d, dword ptr [r12]
Load [EBP+0x145](STATIC)
	0x14085184b: mov r11, qword ptr [r11]
	0x14085184e: and r15d, 1
	0x140851855: cmp r15d, 0
	0x14085185c: je 0x140851874
	0x140851874: add r11, 4
	0x14085187b: mov eax, dword ptr [r11]
	0x14085187e: mov rsi, rbp
	0x140851881: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140851888: add dword ptr [rsi], eax
	0x140851891: mov r14, 0
	0x1408518a6: mov rbx, rbp
	0x1408518a9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1408518b0: mov rbx, qword ptr [rbx]
	0x1408518ba: add rbx, 2
	0x1408518d6: mov r14w, word ptr [rbx]
	0x1408518ee: shl r14, 3
	0x1408518f5: mov rcx, rbp
	0x140851902: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x140851917: mov r11, qword ptr [rcx]
	0x140851924: add r11, r14
	0x140851927: mov rdi, qword ptr [r11]
	0x140851938: mov r8, rbp
	0x14085194c: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941abf
	0x140851953: add qword ptr [r8], 8
	0x14085195a: jmp rdi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941acd
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe0]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ad5
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ae3
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941aeb
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941af9
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b07
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x7a]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b0f
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x105]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b17
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b25
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b2d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b3b
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b49
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b57
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xb7]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b65
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b6d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b7b
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b81
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x14083ebc7: mov r15, rbp
	0x14083ebca: add r15, 0xa7
Load [EBP+0xa7](STATIC)
	0x14083ebd1: mov ecx, dword ptr [r15]
	0x14083ebd4: and ecx, 1
	0x14083ebda: cmp ecx, 0
	0x14083ebe0: je 0x14083ebf7
	0x14083ec04: mov rdx, rbp
	0x14083ec14: mov r15, rbp
	0x14083ec17: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14083ec1e: mov rdx, qword ptr [rdx]
	0x14083ec21: add rdx, 3
	0x14083ec32: add r15, 0x145
	0x14083ec39: movzx rdx, word ptr [rdx]
Load [EBP+0x145](STATIC)
	0x14083ec4b: mov r15, qword ptr [r15]
	0x14083ec5f: add rdx, rbp
	0x14083ec69: add r15, 0
	0x14083ec85: movzx r15, byte ptr [r15]
	0x14083ec97: add rsp, r15
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14083ec9a: add qword ptr [rdx], r15
	0x14083ec9d: mov r12, 0x1194700b
	0x14083eca4: mov r10, rbp
	0x14083eca7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083ecae: and dword ptr [r10], r12d
	0x14083ed0a: mov r10, rbp
	0x14083ed1e: mov r8, rbp
	0x14083ed36: add r10, 0xab
	0x14083ed3d: add r8, 0x145
Load [EBP+0xab](STATIC)
	0x14083ed4b: mov r10, qword ptr [r10]
Load [EBP+0x145](STATIC)
	0x14083ed4e: mov r8, qword ptr [r8]
	0x14083ed5f: add r8, 1
	0x14083ed69: movzx r8, word ptr [r8]
	0x14083ed93: xor r8d, 0x40fd3a6
	0x14083edc1: and r8, 0xffff
	0x14083edd9: shl r8, 3
	0x14083ede7: add r10, r8
	0x14083eded: mov rdi, qword ptr [r10]
	0x14083edf0: mov r11, rbp
	0x14083edf3: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b86
	0x14083edfa: add qword ptr [r11], 5
	0x14083ee01: jmp rdi
handlers outputs:



	0x140812601: mov rbx, rbp
	0x140812604: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140812620: mov rbx, qword ptr [rbx]
	0x14081262a: add rbx, 0
	0x140812638: movzx rsi, word ptr [rbx]
	0x14081263c: mov r12, rbp
	0x14081263f: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081264f: add esi, dword ptr [r12]
	0x14081265a: mov rbx, rbp
	0x14081265d: add rbx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140812664: add esi, dword ptr [rbx]
	0x140812699: mov rdi, rbp
	0x14081269c: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408126a6: and dword ptr [rdi], 0x388841f1
	0x1408126b3: mov r15, rbp
	0x1408126c0: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x1408126dc: mov bl, byte ptr [r15]
	0x1408126df: cmp bl, 0x1e
	0x1408126e2: jbe 0x14081270a
	0x14081271f: mov r12, rbp
	0x14081272c: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081273a: sub word ptr [r12], si
	0x14081274c: mov rdx, 0
	0x140812756: mov r12, rbp
	0x140812767: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14081276e: mov r12, qword ptr [r12]
	0x14081277c: add r12, 9
	0x140812783: mov dx, word ptr [r12]
	0x1408127c8: mov r9, rbp
	0x1408127dc: add r9, 0x120
Load [EBP+0x120](STATIC)
	0x1408127ea: sub edx, dword ptr [r9]
	0x1408127f7: mov rsi, rbp
	0x14081280f: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812819: add dword ptr [rsi], edx
	0x140812829: mov r12, rbp
	0x14081283a: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140812852: sub dword ptr [r12], 0x4d64e8d5
	0x14081285a: mov rsi, rbp
	0x14081286b: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140812883: sub word ptr [rsi], dx
	0x140812886: mov rbx, 0xe1e0d53
	0x14081288d: mov rdi, rbp
	0x140812890: mov rdx, rbp
	0x140812893: mov r14, rbp
	0x140812896: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081289d: sub dword ptr [r14], ebx
	0x1408128a0: add rdi, 0xd6
	0x1408128a7: add rdx, 0x16e
Load [EBP+0xd6](STATIC)
	0x1408128ae: movzx rdi, word ptr [rdi]
Load [EBP+0x16e](STATIC)
	0x1408128b2: movzx rdx, word ptr [rdx]
	0x1408128b6: xor di, 0x868e
	0x1408128bb: add rdx, rbp
	0x1408128be: add rdi, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1408128c1: mov rdi, qword ptr [rdi]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x1408128c4: xor qword ptr [rdx], rdi
	0x1408128c7: pushfq
	0x1408128cf: mov r14, 0
	0x1408128e4: mov rcx, rbp
	0x1408128ee: mov rdx, rbp
	0x1408128f8: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081290d: mov rcx, qword ptr [rcx]
	0x140812917: add rcx, 8
	0x140812921: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812928: add dword ptr [rdx], 0x167b7033
	0x140812938: mov rsi, rbp
	0x14081293e: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140812945: sub dword ptr [rsi], 0x183b7a32
	0x140812952: mov r14b, byte ptr [rcx]
	0x140812955: cmp r14b, 0
	0x140812959: je 0x1408129d7
	0x14081295f: mov rcx, rbp
	0x140812969: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140812981: mov rcx, qword ptr [rcx]
	0x140812992: add rcx, 0xb
	0x1408129a0: mov r14w, word ptr [rcx]
	0x1408129a4: add r14, rbp
	0x1408129b8: pop r8
Store VM_REG [EBP+0x26]
	0x1408129ba: mov qword ptr [r14], r8
	0x1408129ea: mov r15, rbp
	0x1408129ed: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408129f4: mov r15, qword ptr [r15]
	0x1408129f7: add r15, 2
	0x1408129fe: mov ebx, dword ptr [r15]
	0x140812a01: mov r11, rbp
	0x140812a04: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812a0b: add dword ptr [r11], ebx
	0x140812a26: mov r14b, 0xa9
	0x140812a2f: mov r15, rbp
	0x140812a47: add r15, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140812a51: or byte ptr [r15], r14b
	0x140812a72: mov r15, rbp
	0x140812a7f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140812a96: mov r15, qword ptr [r15]
	0x140812a9c: mov r14, rbp
	0x140812ab4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140812abb: mov r14, qword ptr [r14]
	0x140812abe: add r14, 6
	0x140812ad3: movzx r14, word ptr [r14]
	0x140812ade: mov r12, rbp
	0x140812aef: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140812afd: xor r14d, dword ptr [r12]
	0x140812b04: sub r14d, 0x6e9573f7
	0x140812b0b: mov r13, rbp
	0x140812b1c: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140812b23: and dword ptr [r13], r14d
	0x140812b27: and r14, 0xffff
	0x140812b43: shl r14, 3
	0x140812b55: add r15, r14
	0x140812b5f: mov r13, qword ptr [r15]
	0x140812b62: mov r14, rbp
	0x140812b6c: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941b93
	0x140812b73: add qword ptr [r14], 0xd
	0x140812b7a: jmp r13
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140941b9d
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941bab
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x1407657a1: mov r14, rbp
	0x1407657a4: add r14, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407657ab: mov ebx, dword ptr [r14]
	0x1407657ae: and ebx, 1
	0x1407657b4: cmp ebx, 0
	0x1407657ba: je 0x1407657d1
	0x1407657c0: mov r14, rbp
	0x1407657c3: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407657ca: add dword ptr [r14], 0x4798db5c
	0x1407657db: mov r9, rbp
	0x1407657de: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407657f3: mov r9, qword ptr [r9]
	0x1407657fd: add r9, 5
	0x140765804: movzx r13, word ptr [r9]
	0x140765808: mov rcx, rbp
	0x14076580b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765819: xor r13d, dword ptr [rcx]
	0x14076581c: mov rdi, rbp
	0x14076582d: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x140765834: add r13d, dword ptr [rdi]
	0x14076583e: mov r8, rbp
	0x140765848: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076585d: sub dword ptr [r8], r13d
	0x140765863: mov rbx, rbp
	0x14076586c: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140765881: or dword ptr [rbx], 0x124f672
	0x140765887: mov rbx, rbp
	0x14076588a: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x140765897: mov r9b, byte ptr [rbx]
	0x14076589a: cmp r9b, 0xe6
	0x14076589e: jbe 0x1407658ae
	0x1407658a7: sub r13d, 0x673d4bb8
	0x1407658bc: mov r12, rbp
	0x1407658c9: add r12, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407658d3: xor word ptr [r12], r13w
	0x1407658d8: mov rdx, rbp
	0x1407658db: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407658e2: mov r11d, dword ptr [rdx]
	0x1407658e5: and r11d, 1
	0x1407658ec: cmp r11d, 0
	0x1407658f3: je 0x140765909
	0x1407658f9: mov rdx, rbp
	0x1407658fc: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140765903: and dword ptr [rdx], 0x25c8a35d
	0x140765913: mov rcx, 0
	0x140765928: mov r11, rbp
	0x14076592e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076593c: mov r11, qword ptr [r11]
	0x140765946: add r11, 7
	0x140765950: mov cx, word ptr [r11]
	0x14076595e: mov r12, rbp
	0x140765961: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765971: add ecx, dword ptr [r12]
	0x14076598f: mov r11, rbp
	0x140765999: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407659a0: sub dword ptr [r11], ecx
	0x1407659a3: mov rsi, rbp
	0x1407659ad: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407659be: or dword ptr [rsi], 0x147e28ae
	0x1407659c4: mov r11, rbp
	0x1407659c7: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1407659ce: add word ptr [r11], cx
	0x1407659d5: mov r14, rbp
	0x1407659df: mov rcx, rbp
	0x1407659ec: add rcx, 0x16e
	0x1407659f3: add r14, 0xd6
Load [EBP+0xd6](STATIC)
	0x1407659fa: movzx r14, word ptr [r14]
	0x140765a05: add r14, rbp
Load [EBP+0x16e](STATIC)
	0x140765a0f: movzx rcx, word ptr [rcx]
Load [EBP+0x14d](VM_REGISTER)
	0x140765a13: mov r14, qword ptr [r14]
Deref(t2295,ds)
	0x140765a16: mov r14d, dword ptr [r14]
	0x140765a19: xor cx, 0xc397
	0x140765a1e: add rcx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140765a21: cmp dword ptr [rcx], r14d
	0x140765a24: pushfq
	0x140765a33: mov r13, 0
	0x140765a44: mov r14, rbp
	0x140765a47: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765a51: mov r14, qword ptr [r14]
	0x140765a62: add r14, 0
	0x140765a70: mov r13b, byte ptr [r14]
	0x140765a73: cmp r13b, 0
	0x140765a77: je 0x140765ac9
	0x140765a7d: mov r14, rbp
	0x140765a83: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765a98: mov r14, qword ptr [r14]
	0x140765a9b: add r14, 3
	0x140765aa2: mov r13w, word ptr [r14]
	0x140765ab4: add r13, rbp
	0x140765abe: pop r14
Store VM_REG [EBP+0x26]
	0x140765ac0: mov qword ptr [r13], r14
	0x140765adc: mov r11b, 0x1c
	0x140765ae2: mov rdi, rbp
	0x140765ae5: add rdi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140765af5: or byte ptr [rdi], r11b
	0x140765aff: mov r14, rbp
	0x140765b02: mov rdi, rbp
	0x140765b0c: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x140765b1a: mov rdi, qword ptr [rdi]
	0x140765b20: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140765b27: mov r14, qword ptr [r14]
	0x140765b30: add r14, 1
	0x140765b44: movzx r14, word ptr [r14]
	0x140765b48: mov r8, rbp
	0x140765b52: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x140765b67: xor r14d, dword ptr [r8]
	0x140765b70: xor r14d, 0x7235e557
	0x140765b77: mov rcx, rbp
	0x140765b7a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140765b81: or dword ptr [rcx], r14d
	0x140765b87: and r14, 0xffff
	0x140765b9c: shl r14, 3
	0x140765ba7: add rdi, r14
	0x140765bad: mov r12, qword ptr [rdi]
	0x140765bba: mov rsi, rbp
	0x140765bbd: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941bb4
	0x140765bc4: add qword ptr [rsi], 9
	0x140765bcb: jmp r12
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941bd6
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941bf0
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca38c: and r10d, 1
	0x1407ca393: je 0x1407ca3b5
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407ca9e6: and r13, 0x7fffffff
	0x1407caa01: mov rdi, rbp
	0x1407caa0a: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941666
	0x1407caa11: sub qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca38c: and r10d, 1
	0x1407ca393: je 0x1407ca3b5
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941bfd
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c1f
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c39
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c3f
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



	0x14081f5f8: mov rax, rbp
	0x14081f5fb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f601: and dword ptr [rax], 0x21ecf901
	0x14081f607: mov rsi, rbp
	0x14081f60a: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f611: xor dword ptr [rsi], 0x499bb630
	0x14081f621: mov r10, rbp
	0x14081f624: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14081f639: mov r10, qword ptr [r10]
	0x14081f646: add r10, 0xa
	0x14081f662: movzx rsi, word ptr [r10]
	0x14081f674: mov r13, rbp
	0x14081f685: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f68c: sub esi, dword ptr [r13]
	0x14081f6c4: mov r9, rbp
	0x14081f6c7: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f6ce: xor dword ptr [r9], esi
	0x14081f6e6: mov r8, rbp
	0x14081f6fa: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f716: and dword ptr [r8], 0x727a8c4c
	0x14081f727: mov r15, rbp
	0x14081f730: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14081f737: mov cl, byte ptr [r15]
	0x14081f73a: cmp cl, 0x29
	0x14081f73d: jbe 0x14081f757
	0x14081f765: mov r15, rbp
	0x14081f772: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081f787: sub word ptr [r15], si
	0x14081f7a8: mov rbx, rbp
	0x14081f7b9: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14081f7c7: mov rbx, qword ptr [rbx]
	0x14081f7cd: add rbx, 0
	0x14081f7e9: mov r11, qword ptr [rbx]
	0x14081f7ef: mov r14, rbp
	0x14081f7ff: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081f809: add r11d, dword ptr [r14]
	0x14081f813: mov r14, rbp
	0x14081f81d: add r14, 0xa7
	0x14081f831: mov r12, 0
Load [EBP+0xa7](STATIC)
	0x14081f838: xor r11d, dword ptr [r14]
	0x14081f849: mov r15, rbp
	0x14081f84c: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f85d: or dword ptr [r15], r11d
	0x14081f875: mov rdi, rbp
	0x14081f886: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f88d: xor dword ptr [rdi], 0x381077e9
	0x14081f893: xor r12, 0x20
	0x14081f8a8: mov r9, rbp
	0x14081f8ab: sub r12, 0x88
	0x14081f8b5: add r9, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081f8bc: xor dword ptr [r9], r11d
	0x14081f8c9: mov r15, 0x200
	0x14081f8d0: mov r10, rbp
	0x14081f8d3: add r10, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081f8e1: or dword ptr [r10], r11d
	0x14081f8e4: mov rsi, rbp
	0x14081f8f4: add rsi, 0x145
	0x14081f8fb: mov r8, 0
	0x14081f902: mov r8, r8
	0x14081f905: and r8, r11
Load [EBP+0x145](STATIC)
	0x14081f908: mov rsi, qword ptr [rsi]
	0x14081f90b: add rsi, 0
	0x14081f915: mov r9, qword ptr [rsi]
	0x14081f91e: shr r9, 0x20
	0x14081f925: mov r11, rbp
	0x14081f928: xor r12, r15
	0x14081f92b: sub r12, 0xffff
	0x14081f932: xor r12, 0x80
	0x14081f939: add r11, 0x93
Store [EBP+0x93](STATIC)
	0x14081f940: mov dword ptr [r11], r9d
	0x14081f943: mov r13, rbp
	0x14081f946: mov r10, rbp
	0x14081f953: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x14081f960: mov r10, qword ptr [r10]
	0x14081f96d: add r13, 0x145
	0x14081f974: sub r8, 0xffff
Load [EBP+0x145](STATIC)
	0x14081f97b: mov r13, qword ptr [r13]
	0x14081f98d: add r13, 8
	0x14081f994: sub r12, 0x7fffffff
	0x14081f99b: movzx r13, word ptr [r13]
	0x14081f9a0: mov rsi, rbp
	0x14081f9a3: mov r14, r13
	0x14081f9a6: add rsi, 0xbf
	0x14081f9ad: sub r8, 0x20
	0x14081f9b4: sub r12, r14
Load [EBP+0xbf](STATIC)
	0x14081f9b7: sub r13d, dword ptr [rsi]
	0x14081f9cf: mov rcx, rbp
	0x14081f9d2: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f9dc: and dword ptr [rcx], r13d
	0x14081f9e6: and r13, 0xffff
	0x14081f9ed: sub r12, rcx
	0x14081f9fe: shl r13, 3
	0x14081fa09: and r8, r12
	0x14081fa0c: add r10, r13
	0x14081fa0f: xor r8, r8
	0x14081fa20: mov rdi, qword ptr [r10]
	0x14081fa31: mov rbx, rbp
	0x14081fa34: add rbx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14081fa49: mov qword ptr [rbx], rdi
	0x14081fa4c: mov rax, rbp
	0x14081fa4f: add rax, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081fa58: mov ebx, dword ptr [rax]
	0x14081fa5a: and ebx, 1
	0x14081fa67: mov r15, rbp
	0x14081fa6a: add rsi, 0x10
	0x14081fa71: add r15, 0x16e
	0x14081fa78: cmp ebx, 0
	0x14081fa7e: je 0x14081fac0
	0x14081fa84: xor rdi, rsi
	0x14081fa87: mov rax, rbp
	0x14081fa9f: add rax, 0xa7
	0x14081faac: add rdi, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081faba: or dword ptr [rax], 0x43d87997
Load [EBP+0x16e](STATIC)
	0x14081fac0: movzx r15, word ptr [r15]
	0x14081fad2: add rsi, 0x800
	0x14081fad9: mov r10, rbp
	0x14081fae3: add r10, 0x58
	0x14081faed: add r15w, 0x89f2
	0x14081faf3: and rsi, 0x10
	0x14081fafa: add rsi, 0xffff
	0x14081fb01: add r15, rbp
Load [EBP+0x58](STATIC)
	0x14081fb04: mov r10d, dword ptr [r10]
	0x14081fb07: mov r12, 0xd5
	0x14081fb1c: xor r10d, 0x47103f9e
	0x14081fb23: sub r12, 0x800
	0x14081fb31: sub rsi, 8
Store VM_REG [EBP+0x82]
	0x14081fb38: mov qword ptr [r15], r10
	0x14081fb42: add rsi, 0x80
	0x14081fb49: add r15, 4
	0x14081fb5a: mov rbx, rbp
	0x14081fb5d: add rbx, 0x93
Load [EBP+0x93](STATIC)
	0x14081fb72: mov ebx, dword ptr [rbx]
	0x14081fb7e: sub ebx, 0x513124ee
	0x14081fb84: mov r10, 0x12
Store VM_REG [EBP+0x86]
	0x14081fb92: mov dword ptr [r15], ebx
	0x14081fb95: sub rbx, 0xffff
	0x14081fb9c: and r8, 0x20
	0x14081fba3: and r8, 0x3f
	0x14081fbaa: add r12, 0x20
	0x14081fbb1: and r8, r8
	0x14081fbb4: or r8, r10
	0x14081fbb7: mov r15, r8
	0x14081fbba: and rbx, rdi
	0x14081fbbd: xor r12, 0x40
	0x14081fbc4: or r15, 0x20
	0x14081fbcb: and rbx, 0x80
	0x14081fbd2: mov r9, rbp
	0x14081fbd5: and r12, 0x400
	0x14081fbe3: mov rdx, rbx
	0x14081fbe6: add r9, 0xfd
Load [EBP+0xfd](STATIC)
	0x14081fbf4: mov rax, qword ptr [r9]
	0x14081fbfe: mov rcx, r10
	0x14081fc01: push 0x590c2982
	0x14081fc06: push 0x5e5ef98f
	0x14081fc0b: push rdx
	0x14081fc0c: push rsp
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14081fc0d: push qword ptr [rsp]
	0x14081fc10: pop rdx
	0x14081fc11: add rsp, 8
	0x14081fc15: add rdx, 8
	0x14081fc19: push r12
	0x14081fc1b: push r15
	0x14081fc1d: push rax
	0x14081fc1e: movabs rax, 8
	0x14081fc28: mov r15, rax
	0x14081fc2b: pop rax
	0x14081fc2c: mov r12, r15
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14081fc2f: mov r15, qword ptr [rsp]
	0x14081fc33: add rsp, 8
	0x14081fc37: sub rdx, r12
	0x14081fc3a: pop r12
	0x14081fc3c: push rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14081fc3d: push qword ptr [rsp + 8]
	0x14081fc41: mov rdx, qword ptr [rsp]
	0x14081fc45: push rdx
	0x14081fc46: mov rdx, rsp
	0x14081fc49: add rdx, 8
	0x14081fc4d: add rdx, 8
	0x14081fc54: push rdx
	0x14081fc55: push qword ptr [rsp + 8]
	0x14081fc59: mov rdx, qword ptr [rsp]
	0x14081fc5d: push rsi
	0x14081fc5e: mov rsi, rsp
	0x14081fc61: add rsi, 8
	0x14081fc65: add rsi, 8
	0x14081fc6c: xchg qword ptr [rsp], rsi
	0x14081fc70: pop rsp
	0x14081fc71: pop qword ptr [rsp]
	0x14081fc74: mov rsp, qword ptr [rsp]
	0x14081fc78: pop qword ptr [rsp]
	0x14081fc7b: pop rsp
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc7c: mov qword ptr [rsp], rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc80: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14081fc83: pop qword ptr [rsp]
	0x14081fc86: mov r10, 0x200
	0x14081fc94: mov rdi, r9
	0x14081fc9e: push 0x3ff0e338
	0x14081fca3: push rbp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14081fca4: pop qword ptr [rsp]
	0x14081fca7: push r12
	0x14081fca9: movabs r12, 0x6fffb133
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((context >> 31) & 0x1ffffffff)) << 2 | (~(((context >> 29) & 0x3)) & 0x3)) << 1 | ((context >> 28) & 0x1)) << 13 | (~(((context >> 15) & 0x1fff)) & 0x1fff)) << 1 | ((context >> 14) & 0x1)) << 2 | (~(((context >> 12) & 0x3)) & 0x3)) << 3 | ((context >> 9) & 0x7)) << 1 | (~(((context >> 8) & 0x1)) & 0x1)) << 2 | ((context >> 6) & 0x3)) << 2 | (~(((context >> 4) & 0x3)) & 0x3)) << 2 | ((context >> 2) & 0x3)) << 2 | (~((context & 0x3)) & 0x3))
	0x14081fcb3: xor qword ptr [rsp + 8], r12
	0x14081fcb8: pop r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x14081fcba: mov r14, qword ptr [rsp]
	0x14081fcbe: add rsp, 8
	0x14081fcc5: push rcx
	0x14081fcc6: movabs rcx, 0x7fbc6298
	0x14081fcd0: neg rcx
	0x14081fcd3: inc rcx
	0x14081fcd6: sub rcx, 0x7ef3333c
	0x14081fcdd: xor rcx, 0x7b46e84e
	0x14081fce4: push r10
	0x14081fce6: movabs r10, 0x1bfc5975
	0x14081fcf0: add rcx, r10
	0x14081fcf3: push qword ptr [rsp]
	0x14081fcf6: pop r10
	0x14081fcf8: add rsp, 8
	0x14081fcfc: push 0x3c1104c5
	0x14081fd01: push rsi
	0x14081fd02: pop qword ptr [rsp]
	0x14081fd05: movabs rsi, 0xffffffff1f34d662
	0x14081fd0f: sub rcx, rsi
	0x14081fd12: pop rsi
	0x14081fd13: sub rsp, 8
	0x14081fd17: mov qword ptr [rsp], r11
	0x14081fd1b: movabs r11, 0x6fbd895c
	0x14081fd25: shr r11, 8
	0x14081fd29: push rax
	0x14081fd2a: movabs rax, 0x1dffdf5c
	0x14081fd34: add rax, 0x4bffc5d0
	0x14081fd3a: push rsi
	0x14081fd3b: movabs rsi, 0x5ffffbfd
	0x14081fd45: or rsi, 0x5eaf73f3
	0x14081fd4c: and rsi, 0x57f59b00
	0x14081fd53: dec rsi
	0x14081fd56: xor rsi, 0x348d6027
	0x14081fd5d: and rax, rsi
	0x14081fd60: pop rsi
	0x14081fd61: xor rax, 0xa8bf6be
	0x14081fd67: or r11, rax
	0x14081fd6a: pop rax
	0x14081fd6b: and r11, 0x6fcf0c3f
	0x14081fd72: sub r11, 1
	0x14081fd76: xor r11, 0x72eeb87b
	0x14081fd7d: xor rcx, r11
	0x14081fd84: add rsp, 8
	0x14081fd88: xor r14, rcx
	0x14081fd8b: mov rcx, qword ptr [rsp]
	0x14081fd8f: add rsp, 8
	0x14081fd9d: and rdi, 0x10
	0x14081fda4: mov r9, 0x400
	0x14081fdab: push rbp
	0x14081fdac: push 0x63c61f43
	0x14081fdb1: mov qword ptr [rsp], rcx
	0x14081fdb5: movabs rcx, 0x7f7a1293
	0x14081fdbf: movabs rbp, 0x1ad12dd7
	0x14081fdc9: xor rbp, rcx
	0x14081fdcc: push qword ptr [rsp]
	0x14081fdcf: mov rcx, qword ptr [rsp]
	0x14081fdd3: add rsp, 8
	0x14081fdda: add rsp, 8
	0x14081fde1: shr rbp, 8
	0x14081fde5: shr rbp, 3
	0x14081fde9: sub rsp, 8
	0x14081fdf0: mov qword ptr [rsp], r12
	0x14081fdf4: mov r12, 0
	0x14081fdfb: sub r12, rbp
	0x14081fdfe: xchg rbp, r12
	0x14081fe01: pop r12
	0x14081fe03: add rbp, 0x6fa4e6ce
	0x14081fe0a: sub rsp, 8
	0x14081fe0e: mov qword ptr [rsp], rcx
	0x14081fe12: movabs rcx, 0x5bff3c5c
	0x14081fe1c: dec rcx
	0x14081fe1f: push r15
	0x14081fe21: push r12
	0x14081fe23: movabs r12, 0x5eed2ac0
	0x14081fe2d: push r10
	0x14081fe2f: movabs r10, 0x7112223e
	0x14081fe39: mov r15, r10
	0x14081fe3c: pop r10
	0x14081fe3e: xor r15, r12
	0x14081fe41: pop r12
	0x14081fe43: push r12
	0x14081fe45: movabs r12, 0x23bb6708
	0x14081fe4f: sub r12, 0x1ccf46db
	0x14081fe56: inc r12
	0x14081fe59: xor r12, 0x5bdbaf88
	0x14081fe60: neg r12
	0x14081fe63: push rdx
	0x14081fe64: movabs rdx, 0xb934bcf3
	0x14081fe6e: add r12, rdx
	0x14081fe71: pop rdx
	0x14081fe72: or r15, r12
	0x14081fe75: pop r12
	0x14081fe77: xor r15, 0x7b1aa994
	0x14081fe7e: sub r15, 0x5fa512ee
	0x14081fe85: push rcx
	0x14081fe86: movabs rcx, 0xffffffff70d96504
	0x14081fe90: add r15, 0xf8ff0b8
	0x14081fe97: sub r15, rcx
	0x14081fe9a: sub r15, 0xf8ff0b8
	0x14081fea1: pop rcx
	0x14081fea2: xor rcx, r15
	0x14081fea5: pop r15
	0x14081fea7: xor rbp, rcx
	0x14081feae: add rsp, 8
	0x14081feb2: add r14, 0x3961e480
	0x14081feb9: add r14, rbp
	0x14081febc: sub r14, 0x3961e480
	0x14081fec3: push qword ptr [rsp]
	0x14081fec6: mov rbp, qword ptr [rsp]
	0x14081feca: add rsp, 8
	0x14081fece: add rsp, 8
	0x14081fed2: or rdi, 0x3f
	0x14081fed9: push rdi
	0x14081feda: push 0x474d8f78
	0x14081fedf: mov qword ptr [rsp], rdi
	0x14081fee3: sub rsp, 8
	0x14081feea: mov qword ptr [rsp], rsp
	0x14081feee: add qword ptr [rsp], 8
	0x14081fef3: mov rdi, qword ptr [rsp]
	0x14081fef7: add rsp, 8
	0x14081fefb: add rdi, 8
	0x14081feff: sub rdi, 8
	0x14081ff06: push rdi
	0x14081ff07: push qword ptr [rsp + 8]
	0x14081ff0f: add rsp, 8
	0x14081ff13: pop qword ptr [rsp]
	0x14081ff16: pop rsp
	0x14081ff17: mov qword ptr [rsp], r9
	0x14081ff1b: movabs r9, 0xc
	0x14081ff25: push r10
	0x14081ff27: mov r10, r9
	0x14081ff2a: mov rdi, r10
	0x14081ff2d: pop r10
	0x14081ff33: add rsp, 8
	0x14081ff37: push 0x659bbeb7
	0x14081ff3c: mov qword ptr [rsp], rax
	0x14081ff40: push r14
	0x14081ff42: mov r14, rsp
	0x14081ff45: add r14, 8
	0x14081ff49: sub r14, 8
	0x14081ff50: xchg qword ptr [rsp], r14
	0x14081ff54: pop rsp
	0x14081ff55: mov qword ptr [rsp], r12
	0x14081ff59: movabs r12, 0x77f7d6a2
	0x14081ff63: movabs rax, 0x77f7d6a2
	0x14081ff6d: xor rax, r12
	0x14081ff70: pop r12
	0x14081ff72: add rax, r14
Load [EBP+0x145](STATIC)
bytecode=0x140941c4b
	0x14081ff75: add qword ptr [rax], rdi
	0x14081ff78: pop rax
	0x14081ff79: push qword ptr [rsp]
	0x14081ff80: add rsp, 8
	0x14081ff87: add rsp, 8
	0x14081ffe8: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x82](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0xe0]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140822908
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140822908
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140822908
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140941c55
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t2376
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14078a885
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48c7f
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a48c8b
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140941c61
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c69
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x14d](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0xce]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 1 | 0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x0) << 1 | ((((0xd6 + context) & 0xffffffffffffffff) >> 10) & 0x1)) << 1 | 0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x140941c75
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x1408008cf: mov r9, rbp
	0x1408008dc: mov r10, rbp
	0x1408008f3: add r10, 0x145
	0x14080090b: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x140800912: mov r9, qword ptr [r9]
Load [EBP+0x145](STATIC)
	0x14080091b: mov r10, qword ptr [r10]
	0x140800928: add r10, 6
	0x140800935: movzx r10, word ptr [r10]
	0x140800953: add r10d, 0x28af1060
	0x14080095d: mov rbx, rbp
	0x140800967: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800978: sub dword ptr [rbx], r10d
	0x14080098c: and r10, 0xffff
	0x1408009a1: shl r10, 3
	0x1408009ac: add r9, r10
	0x1408009bd: mov rax, qword ptr [r9]
	0x1408009d1: mov r10, rbp
	0x1408009d4: add r10, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408009e8: mov qword ptr [r10], rax
	0x1408009eb: mov r11, rbp
	0x1408009f5: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140800a06: mov r11, qword ptr [r11]
	0x140800a13: add r11, 4
	0x140800a27: movzx r14, word ptr [r11]
	0x140800a32: mov rcx, rbp
	0x140800a4a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800a51: xor r14d, dword ptr [rcx]
	0x140800a57: mov r13, rbp
	0x140800a64: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140800a72: sub r14d, dword ptr [r13]
	0x140800a7d: mov r15, rbp
	0x140800a87: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800a95: and dword ptr [r15], r14d
	0x140800a98: mov rbx, rbp
	0x140800aa5: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800aac: xor dword ptr [rbx], 0x684cba10
	0x140800ac7: mov r15, rbp
	0x140800ad7: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x140800aeb: mov sil, byte ptr [r15]
	0x140800aee: cmp sil, 0x52
	0x140800af2: jbe 0x140800b1b
	0x140800b06: xor r14d, 0x21e62de9
	0x140800b22: mov r15, rbp
	0x140800b33: add r15, 0x16e
	0x140800b3a: mov rcx, 0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140800b41: add word ptr [r15], r14w
	0x140800b4f: mov r12, rbp
	0x140800b59: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140800b60: mov r12, qword ptr [r12]
	0x140800b64: add r12, 0
	0x140800b6e: mov r15d, dword ptr [r12]
	0x140800b79: mov r11, rbp
	0x140800b83: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800b98: xor r15d, dword ptr [r11]
	0x140800bb2: mov r9, rbp
	0x140800bbf: add r9, 0xbf
	0x140800bcd: mov r11, rbp
	0x140800bde: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800be8: xor dword ptr [r11], 0x2746ad5e
	0x140800bf9: mov r8, rbp
	0x140800bfc: add r8, 0x58
	0x140800c03: mov rbx, 0x12
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140800c18: sub dword ptr [r8], r15d
	0x140800c2c: mov rdx, rbp
	0x140800c3f: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140800c46: or dword ptr [rdx], r15d
	0x140800c49: mov rsi, rbp
	0x140800c4c: add rsi, 0xbf
	0x140800c56: mov r15, rbp
	0x140800c59: add r15, 0x120
	0x140800c60: mov r11, rbp
	0x140800c63: add r11, 0x58
Load [EBP+0x120](STATIC)
	0x140800c6a: and r9d, dword ptr [r15]
	0x140800c70: mov r10, rbp
	0x140800c73: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140800c7a: movzx r10, word ptr [r10]
	0x140800c7e: sub r10w, 0x9025
Load [EBP+0x58](STATIC)
	0x140800c84: mov r11d, dword ptr [r11]
	0x140800c87: add r10, rbp
Store VM_REG [EBP+0xb7]
	0x140800c8a: mov dword ptr [r10], r11d
	0x140800c8d: add r10, 4
Store VM_REG [EBP+0xbb]
	0x140800c94: mov dword ptr [r10], 0
	0x140800c9b: mov rdi, 0x7fc0bc02
	0x140800ca2: mov r13, rbp
	0x140800ca5: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800cac: sub dword ptr [r13], edi
	0x140800cb0: mov r15, rbp
	0x140800cb3: add r15, 0xfd
Load [EBP+0xfd](STATIC)
	0x140800cba: mov rax, qword ptr [r15]
	0x140800cbd: sub rsp, 8
	0x140800cc1: sub rsp, 8
	0x140800cc5: push r13
	0x140800cc7: mov r13, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((0x0) << 5 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0x1f)) << 1 | 0x0) << 11 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x7ff)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) << 1 | 0x0) << 11 | ((0xbf + (context & 0x7ff)) & 0x7ff))
	0x140800cca: mov qword ptr [rsp + 8], r13
	0x140800ccf: pop r13
	0x140800cd1: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800cd8: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800cdc: add qword ptr [rsp], 8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800ce1: mov r9, qword ptr [rsp]
	0x140800ce5: add rsp, 8
	0x140800cec: add r9, 8
	0x140800cf0: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x140800cf4: mov qword ptr [rsp], rcx
	0x140800cf8: movabs rcx, 8
	0x140800d02: sub r9, 0xb7da6e8
	0x140800d09: add r9, 0xfbc4b83
	0x140800d10: add r9, 0xfd1e092
	0x140800d17: sub r9, rcx
	0x140800d1a: sub r9, 0xfd1e092
	0x140800d21: sub r9, 0xfbc4b83
	0x140800d28: add r9, 0xb7da6e8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800d2f: mov rcx, qword ptr [rsp]
	0x140800d33: add rsp, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d37: xor r9, qword ptr [rsp]
	0x140800d3b: push rdx
	0x140800d3c: push r9
	0x140800d3e: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
	0x140800d3f: xor qword ptr [rsp + 8], rdx
	0x140800d44: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d49: mov rsp, qword ptr [rsp]
	0x140800d4d: push rax
unknown read addr: fe8 ((0xfffffffffffffff8 + ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: 0x14079ac68
	0x140800d4e: pop qword ptr [rsp]
unknown read addr: ff0 ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
unknown store addr: ff8, lea_ast: ((0x8 + ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff), simplified_source_node: 0x14079ac68
	0x140800d51: pop qword ptr [rsp]
	0x140800d54: xor rdi, 0x800
	0x140800d5b: add rsi, r11
	0x140800d5e: mov rdx, 0x200
	0x140800d65: xor rdi, 0x10
	0x140800d6c: or rdi, 0x400
	0x140800d81: and rdx, 0x40
	0x140800d88: sub rbx, -0x80000000
	0x140800d8f: mov rax, rsi
	0x140800d92: or rax, 0x90
	0x140800d98: sub rax, rsi
	0x140800d9b: push 0xe96057d
	0x140800da0: push rdx
	0x140800da1: push r10
	0x140800da3: pop rdx
unknown store addr: ff0, lea_ast: ((((((((((((((((((0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 4 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 26) & 0xf)) << 1 | 0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x3)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 8) & 0x1)) & 0x1)) << 3 | ((((0xbf + (context & 0x7ff)) & 0x7ff) >> 5) & 0x7)) << 3 | (~(((((0xbf + (context & 0x7ff)) & 0x7ff) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: ((0xbb + context) & 0xffffffffffffffff)
	0x140800da4: mov qword ptr [rsp + 8], rdx
	0x140800da9: pop rdx
	0x140800daa: mov r10, rbp
	0x140800dad: push rdx
	0x140800dae: push 0x60442fae
	0x140800db3: push r10
	0x140800db5: pop qword ptr [rsp]
	0x140800db8: sub qword ptr [rsp], 0xfda5ba9
	0x140800dc0: push qword ptr [rsp]
	0x140800dc3: pop rdx
	0x140800dc4: push 0x19066ad
	0x140800dc9: mov qword ptr [rsp], rsi
	0x140800dcd: push rsp
	0x140800dce: pop rsi
	0x140800dcf: add rsi, 8
	0x140800dd3: add rsi, 8
	0x140800dda: xchg qword ptr [rsp], rsi
	0x140800dde: mov rsp, qword ptr [rsp]
	0x140800de2: add rdx, 0xfda5ba9
	0x140800de9: sub rsp, 8
	0x140800df0: mov qword ptr [rsp], rdx
	0x140800df4: push qword ptr [rsp]
	0x140800df7: pop r14
	0x140800df9: push r10
	0x140800dfb: mov r10, rsp
	0x140800dfe: add r10, 8
	0x140800e02: add r10, 8
	0x140800e09: xchg qword ptr [rsp], r10
	0x140800e0d: pop rsp
	0x140800e0e: pop rdx
	0x140800e0f: mov r10, qword ptr [rsp]
	0x140800e13: add rsp, 8
	0x140800e17: xor r15, 0x400
	0x140800e1e: sub rsi, rsi
	0x140800e21: push rdi
	0x140800e22: push r15
	0x140800e24: movabs r15, 0x76efb200
	0x140800e2e: sub rsp, 8
	0x140800e35: mov qword ptr [rsp], r11
	0x140800e39: push rsi
	0x140800e3a: push rbx
	0x140800e3b: movabs rbx, 0x79fe49bf
	0x140800e45: movabs rsi, 0xf0edfd04
	0x140800e4f: sub rsi, 0xebff891
	0x140800e56: sub rsi, 0x36bcbea
	0x140800e5d: add rsi, 0x43eae26
	0x140800e64: sub rsi, rbx
	0x140800e67: sub rsi, 0x43eae26
	0x140800e6e: add rsi, 0x36bcbea
	0x140800e75: add rsi, 0xebff891
	0x140800e7c: pop rbx
	0x140800e7d: push rsi
	0x140800e7e: xor qword ptr [rsp], 0x7fddb4a5
	0x140800e86: pop r11
	0x140800e88: xor r11, 0x7fddb4a5
	0x140800e93: push rdi
	0x140800e94: mov rdi, rsp
	0x140800e97: add rdi, 8
	0x140800e9b: add rdi, 8
	0x140800ea2: xchg qword ptr [rsp], rdi
	0x140800ea6: mov rsp, qword ptr [rsp]
	0x140800eaa: push rdx
	0x140800eab: mov rdx, r11
	0x140800eae: mov rdi, rdx
	0x140800eb1: pop rdx
	0x140800eb2: pop r11
	0x140800eb4: sub rdi, r15
	0x140800eb7: push qword ptr [rsp]
	0x140800eba: pop r15
	0x140800ebc: push rcx
	0x140800ebd: push rsp
	0x140800ebe: pop rcx
	0x140800ebf: add rcx, 8
	0x140800ec3: push rax
	0x140800ec4: movabs rax, 0x3dafab26
	0x140800ece: push rdi
	0x140800ecf: movabs rdi, 0x3dafab2e
	0x140800ed9: xor rax, rdi
	0x140800edc: pop rdi
	0x140800edd: add rcx, rax
	0x140800ee0: pop rax
	0x140800ee1: xchg qword ptr [rsp], rcx
	0x140800ee5: pop rsp
	0x140800ee6: add r14, rdi
	0x140800ee9: pop rdi
	0x140800eea: push 0x28dbaebe
	0x140800eef: push 0x78a8644c
	0x140800ef4: push rbx
	0x140800ef5: pop qword ptr [rsp]
	0x140800ef8: pop qword ptr [rsp]
	0x140800efb: push rbp
	0x140800efc: push r10
	0x140800efe: movabs r10, 0x7fbc6e0f
	0x140800f08: movabs rbp, 0x7fbc6e17
	0x140800f12: sub rbp, r10
	0x140800f15: pop r10
	0x140800f17: mov rbx, rbp
	0x140800f1a: push qword ptr [rsp]
	0x140800f1d: pop rbp
	0x140800f1e: add rsp, 8
	0x140800f22: sub rsp, 8
	0x140800f29: push rax
	0x140800f2a: pop qword ptr [rsp]
	0x140800f2d: mov rax, 0
	0x140800f34: sub rax, 0x66df1d55
	0x140800f3a: add rax, r14
	0x140800f3d: add rax, 0x66df1d55
Load [EBP+0x145](STATIC)
bytecode=0x140941c7d
	0x140800f43: add qword ptr [rax], rbx
	0x140800f46: push qword ptr [rsp]
	0x140800f49: mov rax, qword ptr [rsp]
	0x140800f4d: add rsp, 8
	0x140800f54: push rax
	0x140800f55: mov rax, rsp
	0x140800f58: add rax, 8
	0x140800f5c: add rax, 8
	0x140800f62: xchg qword ptr [rsp], rax
	0x140800f66: pop rsp
	0x140800f67: push qword ptr [rsp]
	0x140800f6e: add rsp, 8
	0x140800f72: add rsp, 8
	0x140800f8a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x14079ac79: mov r10, 0
	0x14079ac8e: mov rdx, rbp
	0x14079ac91: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14079aca4: mov rdx, qword ptr [rdx]
	0x14079acae: add rdx, 5
	0x14079acbc: mov r10w, word ptr [rdx]
	0x14079acce: mov r12, rbp
	0x14079acdb: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14079ace8: add r10d, dword ptr [r12]
	0x14079acf8: mov r13, rbp
	0x14079ad02: add r13, 0x120
Load [EBP+0x120](STATIC)
	0x14079ad1e: sub r10d, dword ptr [r13]
	0x14079ad5a: mov rcx, rbp
	0x14079ad6a: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14079ad7f: add dword ptr [rcx], 0x315cdaf2
	0x14079ad85: mov r15, rbp
	0x14079ad8b: add r15, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14079ad9c: add word ptr [r15], r10w
	0x14079ada0: mov r10, rbp
	0x14079adac: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14079adba: mov r10, qword ptr [r10]
	0x14079adc4: add r10, 7
	0x14079adcb: movzx r13, word ptr [r10]
	0x14079add6: mov r10, rbp
	0x14079addc: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14079ade3: xor r13d, dword ptr [r10]
	0x14079adf6: mov rsi, rbp
	0x14079adf9: add rsi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14079ae00: xor r13d, dword ptr [rsi]
	0x14079ae0d: mov r10, rbp
	0x14079ae13: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14079ae1a: xor dword ptr [r10], r13d
	0x14079ae1d: mov r15, rbp
	0x14079ae27: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14079ae3f: and dword ptr [r15], 0x3df8adf0
	0x14079ae53: mov r10, rbp
	0x14079ae56: add r10, 0x130
Load [EBP+0x130](STATIC)
	0x14079ae64: mov dil, byte ptr [r10]
	0x14079ae67: cmp dil, 0x57
	0x14079ae6b: jbe 0x14079ae7b
	0x14079ae71: xor r13d, 0x4ac0efd8
	0x14079ae85: mov r15, rbp
	0x14079ae88: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14079aea0: sub word ptr [r15], r13w
	0x14079aed3: mov r14, rbp
	0x14079aed6: mov rsi, rbp
	0x14079aedc: add r14, 0x16e
	0x14079aeed: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
	0x14079aef4: movzx rsi, word ptr [rsi]
Load [EBP+0x16e](STATIC)
	0x14079af2b: movzx r14, word ptr [r14]
	0x14079af32: add si, 0x3571
	0x14079af4b: add r14, rbp
	0x14079af5f: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14079af70: mov rsi, qword ptr [rsi]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14079af73: add qword ptr [r14], rsi
	0x14079af76: pushfq
	0x14079af77: mov rax, 0
	0x14079af88: mov r15, rbp
	0x14079af92: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14079afa3: mov r15, qword ptr [r15]
	0x14079afa6: add r15, 4
	0x14079afad: mov al, byte ptr [r15]
	0x14079afb0: cmp al, 0
	0x14079afb2: je 0x14079b02e
	0x14079afc2: mov r15, rbp
	0x14079afd3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14079afe1: mov r15, qword ptr [r15]
	0x14079afed: add r15, 0
	0x14079affb: mov ax, word ptr [r15]
	0x14079b014: add rax, rbp
	0x14079b021: pop r12
Store VM_REG [EBP+0x26]
	0x14079b023: mov qword ptr [rax], r12
	0x14079b092: mov r15, rbp
	0x14079b095: add r15, 0xab
	0x14079b0a6: mov rsi, rbp
Load [EBP+0xab](STATIC)
	0x14079b0a9: mov r15, qword ptr [r15]
	0x14079b0ac: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14079b0b3: mov rsi, qword ptr [rsi]
	0x14079b0c0: add rsi, 2
	0x14079b0c7: movzx rsi, word ptr [rsi]
	0x14079b120: and rsi, 0xffff
	0x14079b12a: shl rsi, 3
	0x14079b138: add r15, rsi
	0x14079b149: mov rsi, qword ptr [r15]
	0x14079b156: mov r14, rbp
	0x14079b16e: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c86
	0x14079b175: add qword ptr [r14], 9
	0x14079b17c: jmp rsi
handlers outputs:



basic block ends with ret
	0x1408827cb: mov rsi, 0
	0x1408827d2: mov rcx, rbp
	0x1408827d5: mov rbx, rbp
	0x1408827d8: add rcx, 0xa7
	0x1408827df: add rbx, 0x145
Load [EBP+0xa7](STATIC)
	0x1408827e6: mov r14d, dword ptr [rcx]
	0x1408827e9: and r14d, 1
Load [EBP+0x145](STATIC)
	0x1408827f0: mov rbx, qword ptr [rbx]
	0x1408827f3: add rbx, 2
	0x1408827fa: mov si, word ptr [rbx]
	0x1408827fd: add rsi, rbp
	0x140882800: cmp r14d, 0
	0x140882807: je 0x14088281d
	0x14088281d: mov rax, 0
	0x140882824: mov r12, rbp
	0x140882827: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14088282e: mov r12, qword ptr [r12]
	0x140882832: add r12, 0
	0x140882839: mov ax, word ptr [r12]
	0x14088283e: add rax, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140882841: push qword ptr [rsi]
Load [EBP+0xe8](VM_REGISTER)
	0x140882843: push qword ptr [rax]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140882845: pop qword ptr [rsi]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140882847: pop qword ptr [rax]
	0x140882857: mov rdi, rbp
	0x14088286f: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140882880: mov rdi, qword ptr [rdi]
	0x140882891: add rdi, 8
	0x140882898: movzx r11, word ptr [rdi]
	0x14088289c: mov rsi, rbp
	0x1408828a2: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408828a9: xor r11d, dword ptr [rsi]
	0x1408828bd: mov r15, rbp
	0x1408828c0: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408828d1: xor r11d, dword ptr [r15]
	0x1408828e1: mov r10, rbp
	0x1408828eb: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408828f8: add dword ptr [r10], r11d
	0x1408828fb: mov r9, rbp
	0x140882913: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140882920: sub dword ptr [r9], 0x4355fe7b
	0x140882927: mov r8, rbp
	0x140882938: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x140882954: mov r14b, byte ptr [r8]
	0x140882957: cmp r14b, 0x3a
	0x14088295b: jbe 0x140882968
	0x140882961: add r11d, 0x461f8d25
	0x140882968: mov r15, rbp
	0x140882971: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140882978: add word ptr [r15], r11w
	0x140882986: mov r12, rbp
	0x140882997: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408829ab: mov r12, qword ptr [r12]
	0x1408829b9: add r12, 4
	0x1408829ce: mov r15d, dword ptr [r12]
	0x1408829e3: mov r13, rbp
	0x1408829ec: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408829f3: xor r15d, dword ptr [r13]
	0x1408829fe: mov r9, rbp
	0x140882a08: add r9, 0xa7
Load [EBP+0xa7](STATIC)
	0x140882a20: sub r15d, dword ptr [r9]
	0x140882a23: mov r8, rbp
	0x140882a36: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882a51: and dword ptr [r8], r15d
	0x140882a7d: mov rdx, rbp
	0x140882a95: add rdx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140882aa3: xor dword ptr [rdx], r15d
	0x140882aa6: mov rsi, rbp
	0x140882ab7: add rsi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140882ac5: sub dword ptr [rsi], r15d
	0x140882ad9: mov rsi, rbp
	0x140882aed: mov r9, rbp
	0x140882af0: add r9, 0x145
	0x140882b08: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140882b1d: mov rsi, qword ptr [rsi]
Load [EBP+0x145](STATIC)
	0x140882b35: mov r9, qword ptr [r9]
	0x140882b38: add r9, 0xa
	0x140882b3f: mov r12, 1
	0x140882b4d: movzx r9, word ptr [r9]
	0x140882b51: mov r14, 0
	0x140882b5f: mov r15, rbp
	0x140882b62: or r14, 0x78
	0x140882b69: and r14, 1
	0x140882b77: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140882b93: sub r9d, dword ptr [r15]
	0x140882ba0: sub r9d, 0x2657a55
	0x140882ba7: mov r13, rbp
	0x140882bb4: add r12, 1
	0x140882bbb: add r13, 0xbf
	0x140882bc2: sub r14, rsi
	0x140882bc5: sub r12, -0x80000000
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882bcf: add dword ptr [r13], r9d
	0x140882bd3: and r9, 0xffff
	0x140882bef: add r14, 8
	0x140882bf6: shl r9, 3
	0x140882bfa: add rsi, r9
	0x140882bfd: xor r14, r13
	0x140882c0e: mov r9, qword ptr [rsi]
	0x140882c18: mov rdi, rbp
	0x140882c1b: mov r11, 0x12
	0x140882c25: or r12, 0xffffffff80000000
	0x140882c2c: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140882c3a: mov qword ptr [rdi], r9
	0x140882c3d: mov rsi, r15
	0x140882c43: mov r10, rbp
	0x140882c46: add r12, 0xffff
	0x140882c4d: add r14, 0xf0
	0x140882c5b: add r10, 0x16e
	0x140882c62: sub r15, 0x20
	0x140882c69: mov rcx, rbp
	0x140882c6c: or r14, 0x80
Load [EBP+0x16e](STATIC)
	0x140882c73: movzx r10, word ptr [r10]
	0x140882c77: mov rdx, r15
	0x140882c7a: add r10w, 0x238
	0x140882c80: or rdx, 8
	0x140882c87: sub r14, 8
	0x140882c8e: add r14, 0x88
	0x140882c95: add r10, rbp
	0x140882c98: or rsi, r12
	0x140882c9b: add rcx, 0x58
Load [EBP+0x58](STATIC)
	0x140882ca2: mov ecx, dword ptr [rcx]
	0x140882ca4: mov rdi, 0
	0x140882cab: add ecx, 0x64106b77
	0x140882cb1: and rdi, 0x10
Store VM_REG [EBP+0x14d]
	0x140882cc5: mov qword ptr [r10], rcx
	0x140882cdd: xor r11, rdx
	0x140882ce0: add r11, 0x3f
	0x140882cee: mov rdx, rbp
	0x140882cf1: add r11, 4
	0x140882cf8: mov r8, 0
	0x140882cff: add rdx, 0xfd
Load [EBP+0xfd](STATIC)
	0x140882d06: mov r13, qword ptr [rdx]
	0x140882d09: mov r12, 0xd5
	0x140882d10: or r8, 0x80
	0x140882d17: xor r11, 0x20
	0x140882d1e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 6) & 0x3ffffffffffffff)) << 1 | (~(((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 5) & 0x1)) & 0x1)) << 5 | ((0x3 + ((((((~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0x1f))
	0x140882d25: mov qword ptr [rsp], r11
	0x140882d29: mov r11, rsp
	0x140882d2c: add r11, 8
	0x140882d30: push rdx
	0x140882d31: push r10
	0x140882d33: movabs r10, 8
	0x140882d3d: mov rdx, r10
	0x140882d40: pop r10
	0x140882d42: sub r11, rdx
	0x140882d45: pop rdx
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d46: xchg qword ptr [rsp], r11
	0x140882d4a: pop rsp
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140882d4b: mov qword ptr [rsp], rbp
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d4f: push qword ptr [rsp]
	0x140882d52: pop r9
	0x140882d54: push 0xd1cde00
	0x140882d59: push r15
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x9f + context) & 0xffffffffffffffff)
	0x140882d5b: pop qword ptr [rsp]
	0x140882d5e: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xfe8
	0x140882d62: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xff0
	0x140882d66: add qword ptr [rsp], 8
	0x140882d6b: pop r15
	0x140882d6d: add r15, 8
	0x140882d71: push 0x2c9cd00f
	0x140882d76: mov qword ptr [rsp], rsi
	0x140882d7a: push rdi
	0x140882d7b: movabs rdi, 0x5ff74b71
	0x140882d85: push r13
	0x140882d87: mov r13, rdi
	0x140882d8a: mov rsi, r13
	0x140882d8d: pop r13
	0x140882d8f: pop rdi
	0x140882d90: dec rsi
	0x140882d93: xor rsi, 0x57effeb0
	0x140882d9a: push rbp
	0x140882d9b: movabs rbp, 0x6dbf7c51
	0x140882da5: or rbp, 0x7f1af610
	0x140882dac: xor rbp, 0x1b7c19b2
	0x140882db3: xor rbp, 0x6cdb522b
	0x140882dba: xor rsi, rbp
	0x140882dbd: pop rbp
	0x140882dbe: sub r15, 0x7fef7feb
	0x140882dc5: add r15, rsi
	0x140882dc8: add r15, 0x7fef7feb
	0x140882dcf: pop rsi
	0x140882dd0: xchg qword ptr [rsp], r15
	0x140882dd4: mov rsp, qword ptr [rsp]
	0x140882ddf: push rdi
	0x140882de0: mov rdi, rsp
	0x140882de3: add rdi, 8
	0x140882de7: push rbp
	0x140882de8: movabs rbp, 0x1c0bd100
	0x140882df2: push 0
	0x140882df4: sub qword ptr [rsp], rbp
	0x140882df8: pop rbp
	0x140882df9: neg rbp
	0x140882dfc: shl rbp, 6
	0x140882e00: push r15
	0x140882e02: movabs r15, 0xfffffff8fd0bc008
	0x140882e0c: add rbp, r15
	0x140882e0f: mov r15, qword ptr [rsp]
	0x140882e13: add rsp, 8
	0x140882e1a: sub rdi, rbp
	0x140882e1d: pop rbp
	0x140882e1e: xchg qword ptr [rsp], rdi
	0x140882e22: pop rsp
	0x140882e23: mov qword ptr [rsp], rdi
	0x140882e27: push rsi
	0x140882e28: sub rsp, 8
	0x140882e2c: push rcx
	0x140882e2d: pop qword ptr [rsp]
	0x140882e30: movabs rcx, 0x68ffb2ff
	0x140882e3a: movabs rsi, 0x9cfce571
	0x140882e44: sub rsi, rcx
	0x140882e47: mov rcx, qword ptr [rsp]
	0x140882e4b: add rsp, 8
	0x140882e4f: mov rdi, rsi
	0x140882e52: pop rsi
	0x140882e53: push rcx
	0x140882e54: movabs rcx, 0x7bff58f9
	0x140882e5e: add rdi, 0xffb7188
	0x140882e65: sub rdi, rcx
	0x140882e68: sub rdi, 0xffb7188
	0x140882e6f: mov rcx, qword ptr [rsp]
	0x140882e73: add rsp, 8
	0x140882e7a: push 0x3e198c
	0x140882e7f: push r14
	0x140882e81: pop qword ptr [rsp]
	0x140882e84: mov r14, -0x480227cc
	0x140882e8b: add rdi, 0x771550d
	0x140882e92: sub rdi, r14
	0x140882e95: sub rdi, 0x771550d
	0x140882ea0: add rsp, 8
	0x140882ea4: sub r9, 0x79796164
	0x140882eab: add r9, rdi
	0x140882eae: add r9, 0x79796164
	0x140882eb9: add rsp, 8
	0x140882ebd: push 0x402e0970
	0x140882ec2: sub rsp, 8
	0x140882ec6: sub rsp, 8
	0x140882eca: push 0x3f7ea06b
	0x140882ecf: sub rsp, 8
	0x140882ed3: sub rsp, 8
	0x140882ed7: mov qword ptr [rsp], rsi
	0x140882edb: sub rsp, 8
	0x140882ee2: mov qword ptr [rsp], r8
	0x140882ee6: push r15
	0x140882ee8: mov r15, r13
	0x140882eeb: push r15
	0x140882eed: sub qword ptr [rsp], 0x5b7b1a29
	0x140882ef5: pop r8
	0x140882ef7: add r8, 0x5b7b1a29
	0x140882efe: pop r15
	0x140882f00: push r13
	0x140882f02: mov r13, r8
	0x140882f05: mov rsi, r13
	0x140882f08: pop r13
	0x140882f0e: add rsp, 8
	0x140882f15: push rsi
	0x140882f16: pop qword ptr [rsp + 8]
	0x140882f1a: pop rsi
	0x140882f1b: pop qword ptr [rsp]
	0x140882f1e: pop qword ptr [rsp]
	0x140882f21: pop qword ptr [rsp]
	0x140882f24: pop qword ptr [rsp]
	0x140882f27: mov r10, 0x200
	0x140882f2e: push 0x43749c6
	0x140882f33: mov qword ptr [rsp], r10
	0x140882f37: push 0x658bcc8b
	0x140882f3c: mov qword ptr [rsp], rcx
	0x140882f40: movabs rcx, 0xc
	0x140882f4a: mov r10, rcx
	0x140882f4d: push qword ptr [rsp]
	0x140882f50: pop rcx
	0x140882f51: add rsp, 8
	0x140882f58: sub rsp, 8
	0x140882f5c: mov qword ptr [rsp], r12
	0x140882f60: sub rsp, 8
	0x140882f64: mov qword ptr [rsp], r9
	0x140882f68: push r9
	0x140882f6a: mov r9, qword ptr [rsp]
	0x140882f6e: add rsp, 8
	0x140882f75: push 0x32a53d72
	0x140882f7a: mov qword ptr [rsp], r13
	0x140882f7e: push rcx
	0x140882f7f: movabs rcx, 0
	0x140882f89: mov r13, rcx
	0x140882f8c: pop rcx
	0x140882f8d: mov qword ptr [rsp + 8], r13
	0x140882f96: add rsp, 8
	0x140882f9d: pop r12
	0x140882f9f: add r12, 0x5c366276
	0x140882fa6: sub r12, 0x4f9b1bc2
	0x140882fad: sub r12, 0x786f2056
	0x140882fb4: add r12, r9
	0x140882fb7: add r12, 0x786f2056
	0x140882fbe: add r12, 0x4f9b1bc2
	0x140882fc5: sub r12, 0x5c366276
Load [EBP+0x145](STATIC)
bytecode=0x140941c92
	0x140882fcc: add qword ptr [r12], r10
	0x140882fd0: pop r12
	0x140882fd2: pop r10
	0x14088301a: ret 0
handlers outputs:



	0x1407b2877: mov r10, 0x4e96a912
	0x1407b287e: mov r15, 0
	0x1407b2885: mov r11, rbp
	0x1407b2888: add r11, 0xa7
	0x1407b288f: mov rdi, rbp
	0x1407b2892: add rdi, 0x145
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b2899: sub dword ptr [r11], r10d
Load [EBP+0x145](STATIC)
	0x1407b289c: mov rdi, qword ptr [rdi]
	0x1407b289f: add rdi, 6
	0x1407b28a6: mov r15w, word ptr [rdi]
	0x1407b28aa: add r15, rbp
	0x1407b28ad: mov rdi, 0
	0x1407b28b4: mov r11, rbp
	0x1407b28b7: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407b28be: mov r11, qword ptr [r11]
	0x1407b28c1: add r11, 8
	0x1407b28c8: mov di, word ptr [r11]
	0x1407b28cc: add rdi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407b28cf: push qword ptr [r15]
Load [EBP+0x5c](VM_REGISTER)
	0x1407b28d2: push qword ptr [rdi]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x1407b28d4: pop qword ptr [r15]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x1407b28d7: pop qword ptr [rdi]
	0x1407b28d9: mov r8, 0x68ce9155
	0x1407b28e0: mov r11, rbp
	0x1407b28e3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b28ea: and dword ptr [r11], r8d
	0x1407b28fb: mov r13, rbp
	0x1407b2905: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407b291a: mov r13, qword ptr [r13]
	0x1407b2925: add r13, 2
	0x1407b293d: movzx rax, word ptr [r13]
	0x1407b294c: mov r11, rbp
	0x1407b2960: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b2971: sub eax, dword ptr [r11]
	0x1407b2974: mov rdi, rbp
	0x1407b2977: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407b298f: sub eax, dword ptr [rdi]
	0x1407b29b7: mov r13, rbp
	0x1407b29cf: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b29dd: or dword ptr [r13], 0x5d91b588
	0x1407b29e5: mov rbx, rbp
	0x1407b29f2: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407b2a07: mov dl, byte ptr [rbx]
	0x1407b2a09: cmp dl, 0x2f
	0x1407b2a0c: jbe 0x1407b2a25
	0x1407b2a20: sub eax, 0x68e2ff70
	0x1407b2a3a: mov r15, rbp
	0x1407b2a3d: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407b2a52: add word ptr [r15], ax
	0x1407b2a5d: mov rdx, rbp
	0x1407b2a85: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407b2a93: movzx rsi, word ptr [rdx]
	0x1407b2aac: sub si, 0x41a0
	0x1407b2ad5: add rsi, rbp
	0x1407b2ae9: mov r13, rbp
	0x1407b2aec: add r13, 0x18
Load [EBP+0x18](STATIC)
	0x1407b2b00: mov rbx, qword ptr [r13]
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x1407b2b0a: add qword ptr [rsi], rbx
	0x1407b2b10: mov r8, rbp
	0x1407b2b1d: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407b2b2f: mov esi, dword ptr [r8]
	0x1407b2b3f: and esi, 1
	0x1407b2b45: cmp esi, 0
	0x1407b2b4b: je 0x1407b2b5b
	0x1407b2ba0: mov rax, rbp
	0x1407b2ba3: add rax, 0xab
	0x1407b2bba: mov r14, rbp
	0x1407b2bce: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2bd5: mov r14, qword ptr [r14]
Load [EBP+0xab](STATIC)
	0x1407b2be9: mov rax, qword ptr [rax]
	0x1407b2bf3: add r14, 0
	0x1407b2bfa: movzx r14, word ptr [r14]
	0x1407b2c05: mov r9, rbp
	0x1407b2c19: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b2c23: add r14d, dword ptr [r9]
	0x1407b2c26: xor r14d, 0x529d523b
	0x1407b2c42: mov rdi, rbp
	0x1407b2c53: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2c5a: and dword ptr [rdi], r14d
	0x1407b2c67: and r14, 0xffff
	0x1407b2c7f: shl r14, 3
	0x1407b2c83: add rax, r14
	0x1407b2c90: mov r15, qword ptr [rax]
	0x1407b2c9a: mov rsi, rbp
	0x1407b2ca0: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941c9c
	0x1407b2ca7: add qword ptr [rsi], 0xa
	0x1407b2cae: jmp r15
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941caa
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x5c]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t2412
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1407e6d11
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1407e6d11
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a48cd4
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a48ce0
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140941cb6
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cbe
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cc8
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2f9e: mov r12, rbp
	0x1407e2fa1: and rcx, 0x40
	0x1407e2faf: add r12, 0xa7
	0x1407e2fb6: or rax, 0x88
	0x1407e2fbc: mov r10, 0xd5
	0x1407e2fc3: and rax, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2fc9: add dword ptr [r12], 0x7e6102a5
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cce
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cd6
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cdc
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ce2
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cea
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cf0
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cf6
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941cfc
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d04
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d0c
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d12
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d1a
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d20
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d28
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d30
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d52
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d6c
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d6e
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



	0x14083d4a0: mov r15, rbp
	0x14083d4a3: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14083d4aa: mov r15, qword ptr [r15]
	0x14083d4ad: add r15, 0
	0x14083d4b4: mov al, byte ptr [r15]
	0x14083d4b7: cmp al, 1
	0x14083d4b9: je 0x14083d4cc
	0x14083d4bf: cmp al, 2
	0x14083d4c1: je 0x14083d4cc
	0x14083d60c: mov r12, 0
	0x14083d613: mov r10, rbp
	0x14083d616: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14083d61d: mov r10, qword ptr [r10]
	0x14083d620: add r10, 7
	0x14083d627: mov r12d, dword ptr [r10]
	0x14083d62a: mov r14, rbp
	0x14083d62d: add r14, 0x18
Load [EBP+0x18](STATIC)
	0x14083d634: add r12, qword ptr [r14]
	0x14083d637: mov rsi, 0
	0x14083d63e: mov rax, rbp
	0x14083d641: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14083d647: mov rax, qword ptr [rax]
	0x14083d64a: add rax, 0xb
	0x14083d650: mov si, word ptr [rax]
	0x14083d653: add rsi, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140942852
	0x14083d656: mov qword ptr [rsi], r12
	0x14083d659: mov r8, rbp
	0x14083d65c: add r8, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x14083d663: mov dword ptr [r8], 0
	0x14083d66a: pop r8
	0x14083d66c: pop r9
	0x14083d66e: pop r10
	0x14083d670: pop r11
	0x14083d672: pop r12
	0x14083d674: pop r13
	0x14083d676: pop r14
	0x14083d678: pop r15
	0x14083d67a: pop rdi
	0x14083d67b: pop rsi
	0x14083d67c: pop rbp
	0x14083d67d: pop rbx
	0x14083d67e: pop rdx
	0x14083d67f: pop rcx
	0x14083d680: pop rax
	0x14083d681: popfq
	0x14083d682: ret 0
ret handler 140942852, 0
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a387b
[0x140765772]=0x140941d7b
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140941d7b <- ByteCode
	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d81
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



	0x1408437d8: mov r9, rbp
	0x1408437db: add r9, 0x120
	0x1408437f5: mov rdx, rbp
	0x140843808: add rdx, 0x145
	0x14084380f: add r14, 0x800
Load [EBP+0x145](STATIC)
	0x140843816: mov rdx, qword ptr [rdx]
	0x140843819: add rdx, 2
	0x140843820: or r14, r9
	0x14084382a: movzx r9, word ptr [rdx]
	0x14084382e: add r9, rbp
Store VM_REG [EBP+0x2e]
	0x140843831: mov qword ptr [r9], rsp
	0x140843834: mov r15, rbp
	0x140843837: mov r13, rbp
	0x14084383a: add r13, 0x145
	0x140843841: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140843848: mov r15, qword ptr [r15]
	0x14084384b: add r15, 4
Load [EBP+0x145](STATIC)
	0x140843852: mov r13, qword ptr [r13]
	0x140843856: add r13, 0xc
	0x14084385d: movzx r8, word ptr [r15]
	0x140843861: mov edi, dword ptr [r13]
	0x140843865: add r8, rbp
	0x140843868: mov r10, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14084386b: mov r8, qword ptr [r8]
	0x14084386e: add r10, 0xbf
	0x140843875: xor r14, r8
	0x140843878: pushfq
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140843880: and dword ptr [r10], edi
	0x1408438a5: pop r14
	0x1408438a7: mov r9, rbp
	0x1408438aa: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408438b1: mov r9, qword ptr [r9]
	0x1408438b4: add r9, 8
	0x1408438bb: mov ecx, dword ptr [r9]
	0x1408438be: mov r15, rbp
	0x1408438c1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408438c8: sub dword ptr [r15], ecx
	0x1408438ce: mov r14, 0
	0x1408438d8: mov r15, rbp
	0x1408438de: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408438f3: mov r15, qword ptr [r15]
	0x14084390b: add r15, 0
	0x140843927: mov r14w, word ptr [r15]
	0x140843943: shl r14, 3
	0x14084394e: mov r12, rbp
	0x140843962: add r12, 0xab
Load [EBP+0xab](STATIC)
	0x140843970: mov rbx, qword ptr [r12]
	0x140843982: add rbx, r14
	0x140843985: mov rdx, qword ptr [rbx]
	0x140843988: mov r8, rbp
	0x1408439a0: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d91
	0x1408439a7: add qword ptr [r8], 0x10
	0x1408439ae: jmp rdx
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x97]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941d9f
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xe0]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941dad
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xc3]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941db5
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941dc3
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941dd1
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x7a]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941dd9
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x105]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941de1
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941def
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941df7
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e05
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x131]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e0d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x15d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e15
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x15d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e1d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xce]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e2b
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xb7]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e39
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e47
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e4d
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x1408103a1: mov r13, rbp
	0x1408103a7: mov rcx, rbp
	0x1408103b7: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408103be: mov rcx, qword ptr [rcx]
	0x1408103c8: add rcx, 0xe
	0x1408103dd: movzx rcx, byte ptr [rcx]
	0x1408103f2: add rsp, rcx
	0x1408103f5: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408103fc: mov r13, qword ptr [r13]
	0x140810400: add r13, 6
	0x140810418: movzx r13, word ptr [r13]
	0x140810420: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140810426: add qword ptr [r13], rcx
	0x140810434: mov r9, rbp
	0x14081043a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140810441: mov r9, qword ptr [r9]
	0x140810452: add r9, 2
	0x140810459: mov r8d, dword ptr [r9]
	0x14081045f: mov r13, rbp
	0x140810462: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140810469: xor dword ptr [r13], r8d
	0x14081047a: mov r10, rbp
	0x14081047d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140810487: mov r10, qword ptr [r10]
	0x140810491: add r10, 8
	0x14081049c: mov r13d, dword ptr [r10]
	0x1408104a5: mov rdi, rbp
	0x1408104a8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408104b2: or dword ptr [rdi], r13d
	0x1408104bf: mov r12b, 0x13
	0x1408104c9: mov r10, rbp
	0x1408104cc: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408104da: and byte ptr [r10], r12b
	0x140810500: mov rcx, rbp
	0x140810503: mov r12, rbp
	0x140810506: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14081050d: mov rcx, qword ptr [rcx]
	0x140810517: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140810528: mov r12, qword ptr [r12]
	0x14081052c: add r12, 0
	0x140810533: movzx r12, word ptr [r12]
	0x140810538: mov rax, rbp
	0x140810545: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140810559: sub r12d, dword ptr [rax]
	0x14081058b: and r12, 0xffff
	0x14081059c: shl r12, 3
	0x1408105ae: add rcx, r12
	0x1408105b1: mov rbx, qword ptr [rcx]
	0x1408105b4: mov rsi, rbp
	0x1408105cc: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e5e
	0x1408105d3: add qword ptr [rsi], 0x11
	0x1408105da: jmp rbx
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e64
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e6a
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e74
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e7a
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e82
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e88
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e8e
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e96
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941e9c
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ea4
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941eaa
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941eb2
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941eba
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ec2
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ec8
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ece
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ed4
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941eda
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941efc
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f16
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f18
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



basic block ends with ret
	0x14078014f: mov r10, 0
	0x140780156: mov r12, rbp
	0x140780159: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140780160: mov r12, qword ptr [r12]
	0x140780164: add r12, 6
	0x14078016b: mov r10d, dword ptr [r12]
	0x14078016f: mov r12, rbp
	0x140780172: add r12, 0x18
Load [EBP+0x18](STATIC)
	0x140780179: add r10, qword ptr [r12]
	0x14078017d: mov r13, 0
	0x140780184: mov rdi, rbp
	0x140780187: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14078018e: mov rdi, qword ptr [rdi]
	0x140780191: add rdi, 4
	0x140780198: mov r13w, word ptr [rdi]
	0x14078019c: add r13, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140002628
	0x14078019f: mov qword ptr [r13], r10
	0x1407801a3: add r13, 8
	0x1407801aa: mov r14, 0
	0x1407801b1: mov r15, rbp
	0x1407801b4: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407801bb: mov r15, qword ptr [r15]
	0x1407801be: add r15, 0
	0x1407801c5: mov r14d, dword ptr [r15]
	0x1407801c8: mov r15, rbp
	0x1407801cb: add r15, 0x18
Load [EBP+0x18](STATIC)
	0x1407801d2: add r14, qword ptr [r15]
unknown store addr: 1088, lea_ast: ((0x88 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140942b0b
	0x1407801d5: mov qword ptr [r13], r14
	0x1407801d9: mov rdi, rbp
	0x1407801dc: add rdi, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x1407801e3: mov dword ptr [rdi], 0
	0x1407801e9: pop r8
	0x1407801eb: pop r9
	0x1407801ed: pop r10
	0x1407801ef: pop r11
	0x1407801f1: pop r12
	0x1407801f3: pop r13
	0x1407801f5: pop r14
	0x1407801f7: pop r15
	0x1407801f9: pop rdi
	0x1407801fa: pop rsi
	0x1407801fb: pop rbp
	0x1407801fc: pop rbx
	0x1407801fd: pop rdx
	0x1407801fe: pop rcx
	0x1407801ff: pop rax
	0x140780200: popfq
	0x140780201: ret 0
ret handler 140002628, 140942b0b
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a3a22
[0x140765772]=0x140941f22
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140941f22 <- ByteCode
	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x97](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f2a
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



	0x1408437d8: mov r9, rbp
	0x1408437db: add r9, 0x120
	0x1408437f5: mov rdx, rbp
	0x140843808: add rdx, 0x145
	0x14084380f: add r14, 0x800
Load [EBP+0x145](STATIC)
	0x140843816: mov rdx, qword ptr [rdx]
	0x140843819: add rdx, 2
	0x140843820: or r14, r9
	0x14084382a: movzx r9, word ptr [rdx]
	0x14084382e: add r9, rbp
Store VM_REG [EBP+0x2e]
	0x140843831: mov qword ptr [r9], rsp
	0x140843834: mov r15, rbp
	0x140843837: mov r13, rbp
	0x14084383a: add r13, 0x145
	0x140843841: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140843848: mov r15, qword ptr [r15]
	0x14084384b: add r15, 4
Load [EBP+0x145](STATIC)
	0x140843852: mov r13, qword ptr [r13]
	0x140843856: add r13, 0xc
	0x14084385d: movzx r8, word ptr [r15]
	0x140843861: mov edi, dword ptr [r13]
	0x140843865: add r8, rbp
	0x140843868: mov r10, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14084386b: mov r8, qword ptr [r8]
	0x14084386e: add r10, 0xbf
	0x140843875: xor r14, r8
	0x140843878: pushfq
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140843880: and dword ptr [r10], edi
	0x1408438a5: pop r14
	0x1408438a7: mov r9, rbp
	0x1408438aa: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408438b1: mov r9, qword ptr [r9]
	0x1408438b4: add r9, 8
	0x1408438bb: mov ecx, dword ptr [r9]
	0x1408438be: mov r15, rbp
	0x1408438c1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408438c8: sub dword ptr [r15], ecx
	0x1408438ce: mov r14, 0
	0x1408438d8: mov r15, rbp
	0x1408438de: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408438f3: mov r15, qword ptr [r15]
	0x14084390b: add r15, 0
	0x140843927: mov r14w, word ptr [r15]
	0x140843943: shl r14, 3
	0x14084394e: mov r12, rbp
	0x140843962: add r12, 0xab
Load [EBP+0xab](STATIC)
	0x140843970: mov rbx, qword ptr [r12]
	0x140843982: add rbx, r14
	0x140843985: mov rdx, qword ptr [rbx]
	0x140843988: mov r8, rbp
	0x1408439a0: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f3a
	0x1408439a7: add qword ptr [r8], 0x10
	0x1408439ae: jmp rdx
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x97]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f42
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe0]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f4a
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f58
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x7a]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f66
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f74
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x10d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f82
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x105]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f8a
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x5c]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941f92
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fa0
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fa8
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fb6
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x64]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fbe
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fcc
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xb7]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fda
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xce]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fe2
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xe8]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941fea
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140941ff0
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x1408103a1: mov r13, rbp
	0x1408103a7: mov rcx, rbp
	0x1408103b7: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408103be: mov rcx, qword ptr [rcx]
	0x1408103c8: add rcx, 0xe
	0x1408103dd: movzx rcx, byte ptr [rcx]
	0x1408103f2: add rsp, rcx
	0x1408103f5: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408103fc: mov r13, qword ptr [r13]
	0x140810400: add r13, 6
	0x140810418: movzx r13, word ptr [r13]
	0x140810420: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140810426: add qword ptr [r13], rcx
	0x140810434: mov r9, rbp
	0x14081043a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140810441: mov r9, qword ptr [r9]
	0x140810452: add r9, 2
	0x140810459: mov r8d, dword ptr [r9]
	0x14081045f: mov r13, rbp
	0x140810462: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140810469: xor dword ptr [r13], r8d
	0x14081047a: mov r10, rbp
	0x14081047d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140810487: mov r10, qword ptr [r10]
	0x140810491: add r10, 8
	0x14081049c: mov r13d, dword ptr [r10]
	0x1408104a5: mov rdi, rbp
	0x1408104a8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408104b2: or dword ptr [rdi], r13d
	0x1408104bf: mov r12b, 0x13
	0x1408104c9: mov r10, rbp
	0x1408104cc: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408104da: and byte ptr [r10], r12b
	0x140810500: mov rcx, rbp
	0x140810503: mov r12, rbp
	0x140810506: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14081050d: mov rcx, qword ptr [rcx]
	0x140810517: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140810528: mov r12, qword ptr [r12]
	0x14081052c: add r12, 0
	0x140810533: movzx r12, word ptr [r12]
	0x140810538: mov rax, rbp
	0x140810545: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140810559: sub r12d, dword ptr [rax]
	0x14081058b: and r12, 0xffff
	0x14081059c: shl r12, 3
	0x1408105ae: add rcx, r12
	0x1408105b1: mov rbx, qword ptr [rcx]
	0x1408105b4: mov rsi, rbp
	0x1408105cc: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942001
	0x1408105d3: add qword ptr [rsi], 0x11
	0x1408105da: jmp rbx
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x14094200b
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942019
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0xb7]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t2872
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14076cfe5
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14076cfe5
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a49043
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a4904f
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140942025
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942047
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942061
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



	0x14085606a: mov r15, 0
	0x140856071: mov rsi, rbp
	0x140856074: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140856082: mov rsi, qword ptr [rsi]
	0x140856088: add rsi, 0
	0x14085609c: mov r15w, word ptr [rsi]
	0x1408560b1: shl r15, 3
	0x1408560ca: mov rbx, rbp
	0x1408560d0: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408560e1: mov r13, qword ptr [rbx]
	0x1408560f1: add r13, r15
	0x140856102: mov r15, qword ptr [r13]
	0x140856106: mov r10, 0
	0x14085610d: mov rax, rbp
	0x140856125: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140856135: mov rax, qword ptr [rax]
	0x14085614d: add rax, 4
	0x14085615a: mov r10d, dword ptr [rax]
	0x14085615d: mov r11, r10
	0x140856167: and r10d, 0x80000000
	0x14085616e: cmp r10d, 0
	0x140856175: je 0x1408561aa
	0x1408561bb: mov rax, rbp
	0x1408561c5: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942119
	0x1408561d2: add qword ptr [rax], r11
	0x1408561d5: jmp r15
handlers outputs:



	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094211f
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



	0x1408827cb: mov rsi, 0
	0x1408827d2: mov rcx, rbp
	0x1408827d5: mov rbx, rbp
	0x1408827d8: add rcx, 0xa7
	0x1408827df: add rbx, 0x145
Load [EBP+0xa7](STATIC)
	0x1408827e6: mov r14d, dword ptr [rcx]
	0x1408827e9: and r14d, 1
Load [EBP+0x145](STATIC)
	0x1408827f0: mov rbx, qword ptr [rbx]
	0x1408827f3: add rbx, 2
	0x1408827fa: mov si, word ptr [rbx]
	0x1408827fd: add rsi, rbp
	0x140882800: cmp r14d, 0
	0x140882807: je 0x14088281d
	0x14088281d: mov rax, 0
	0x140882824: mov r12, rbp
	0x140882827: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14088282e: mov r12, qword ptr [r12]
	0x140882832: add r12, 0
	0x140882839: mov ax, word ptr [r12]
	0x14088283e: add rax, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140882841: push qword ptr [rsi]
Load [EBP+0xc3](VM_REGISTER)
	0x140882843: push qword ptr [rax]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140882845: pop qword ptr [rsi]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140882847: pop qword ptr [rax]
	0x140882857: mov rdi, rbp
	0x14088286f: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140882880: mov rdi, qword ptr [rdi]
	0x140882891: add rdi, 8
	0x140882898: movzx r11, word ptr [rdi]
	0x14088289c: mov rsi, rbp
	0x1408828a2: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408828a9: xor r11d, dword ptr [rsi]
	0x1408828bd: mov r15, rbp
	0x1408828c0: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408828d1: xor r11d, dword ptr [r15]
	0x1408828e1: mov r10, rbp
	0x1408828eb: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408828f8: add dword ptr [r10], r11d
	0x1408828fb: mov r9, rbp
	0x140882913: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140882920: sub dword ptr [r9], 0x4355fe7b
	0x140882927: mov r8, rbp
	0x140882938: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x140882954: mov r14b, byte ptr [r8]
	0x140882957: cmp r14b, 0x3a
	0x14088295b: jbe 0x140882968
	0x140882968: mov r15, rbp
	0x140882971: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140882978: add word ptr [r15], r11w
	0x140882986: mov r12, rbp
	0x140882997: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408829ab: mov r12, qword ptr [r12]
	0x1408829b9: add r12, 4
	0x1408829ce: mov r15d, dword ptr [r12]
	0x1408829e3: mov r13, rbp
	0x1408829ec: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408829f3: xor r15d, dword ptr [r13]
	0x1408829fe: mov r9, rbp
	0x140882a08: add r9, 0xa7
Load [EBP+0xa7](STATIC)
	0x140882a20: sub r15d, dword ptr [r9]
	0x140882a23: mov r8, rbp
	0x140882a36: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882a51: and dword ptr [r8], r15d
	0x140882a7d: mov rdx, rbp
	0x140882a95: add rdx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140882aa3: xor dword ptr [rdx], r15d
	0x140882aa6: mov rsi, rbp
	0x140882ab7: add rsi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140882ac5: sub dword ptr [rsi], r15d
	0x140882ad9: mov rsi, rbp
	0x140882aed: mov r9, rbp
	0x140882af0: add r9, 0x145
	0x140882b08: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140882b1d: mov rsi, qword ptr [rsi]
Load [EBP+0x145](STATIC)
	0x140882b35: mov r9, qword ptr [r9]
	0x140882b38: add r9, 0xa
	0x140882b3f: mov r12, 1
	0x140882b4d: movzx r9, word ptr [r9]
	0x140882b51: mov r14, 0
	0x140882b5f: mov r15, rbp
	0x140882b62: or r14, 0x78
	0x140882b69: and r14, 1
	0x140882b77: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140882b93: sub r9d, dword ptr [r15]
	0x140882ba0: sub r9d, 0x2657a55
	0x140882ba7: mov r13, rbp
	0x140882bb4: add r12, 1
	0x140882bbb: add r13, 0xbf
	0x140882bc2: sub r14, rsi
	0x140882bc5: sub r12, -0x80000000
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882bcf: add dword ptr [r13], r9d
	0x140882bd3: and r9, 0xffff
	0x140882bef: add r14, 8
	0x140882bf6: shl r9, 3
	0x140882bfa: add rsi, r9
	0x140882bfd: xor r14, r13
	0x140882c0e: mov r9, qword ptr [rsi]
	0x140882c18: mov rdi, rbp
	0x140882c1b: mov r11, 0x12
	0x140882c25: or r12, 0xffffffff80000000
	0x140882c2c: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140882c3a: mov qword ptr [rdi], r9
	0x140882c3d: mov rsi, r15
	0x140882c43: mov r10, rbp
	0x140882c46: add r12, 0xffff
	0x140882c4d: add r14, 0xf0
	0x140882c5b: add r10, 0x16e
	0x140882c62: sub r15, 0x20
	0x140882c69: mov rcx, rbp
	0x140882c6c: or r14, 0x80
Load [EBP+0x16e](STATIC)
	0x140882c73: movzx r10, word ptr [r10]
	0x140882c77: mov rdx, r15
	0x140882c7a: add r10w, 0x238
	0x140882c80: or rdx, 8
	0x140882c87: sub r14, 8
	0x140882c8e: add r14, 0x88
	0x140882c95: add r10, rbp
	0x140882c98: or rsi, r12
	0x140882c9b: add rcx, 0x58
Load [EBP+0x58](STATIC)
	0x140882ca2: mov ecx, dword ptr [rcx]
	0x140882ca4: mov rdi, 0
	0x140882cab: add ecx, 0x64106b77
	0x140882cb1: and rdi, 0x10
Store VM_REG [EBP+0x14d]
	0x140882cc5: mov qword ptr [r10], rcx
	0x140882cdd: xor r11, rdx
	0x140882ce0: add r11, 0x3f
	0x140882cee: mov rdx, rbp
	0x140882cf1: add r11, 4
	0x140882cf8: mov r8, 0
	0x140882cff: add rdx, 0xfd
Load [EBP+0xfd](STATIC)
	0x140882d06: mov r13, qword ptr [rdx]
	0x140882d09: mov r12, 0xd5
	0x140882d10: or r8, 0x80
	0x140882d17: xor r11, 0x20
	0x140882d1e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 6) & 0x3ffffffffffffff)) << 1 | (~(((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 5) & 0x1)) & 0x1)) << 5 | ((0x3 + ((((((~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0x1f))
	0x140882d25: mov qword ptr [rsp], r11
	0x140882d29: mov r11, rsp
	0x140882d2c: add r11, 8
	0x140882d30: push rdx
	0x140882d31: push r10
	0x140882d33: movabs r10, 8
	0x140882d3d: mov rdx, r10
	0x140882d40: pop r10
	0x140882d42: sub r11, rdx
	0x140882d45: pop rdx
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d46: xchg qword ptr [rsp], r11
	0x140882d4a: pop rsp
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140882d4b: mov qword ptr [rsp], rbp
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d4f: push qword ptr [rsp]
	0x140882d52: pop r9
	0x140882d54: push 0xd1cde00
	0x140882d59: push r15
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x9f + context) & 0xffffffffffffffff)
	0x140882d5b: pop qword ptr [rsp]
	0x140882d5e: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xfe8
	0x140882d62: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xff0
	0x140882d66: add qword ptr [rsp], 8
	0x140882d6b: pop r15
	0x140882d6d: add r15, 8
	0x140882d71: push 0x2c9cd00f
	0x140882d76: mov qword ptr [rsp], rsi
	0x140882d7a: push rdi
	0x140882d7b: movabs rdi, 0x5ff74b71
	0x140882d85: push r13
	0x140882d87: mov r13, rdi
	0x140882d8a: mov rsi, r13
	0x140882d8d: pop r13
	0x140882d8f: pop rdi
	0x140882d90: dec rsi
	0x140882d93: xor rsi, 0x57effeb0
	0x140882d9a: push rbp
	0x140882d9b: movabs rbp, 0x6dbf7c51
	0x140882da5: or rbp, 0x7f1af610
	0x140882dac: xor rbp, 0x1b7c19b2
	0x140882db3: xor rbp, 0x6cdb522b
	0x140882dba: xor rsi, rbp
	0x140882dbd: pop rbp
	0x140882dbe: sub r15, 0x7fef7feb
	0x140882dc5: add r15, rsi
	0x140882dc8: add r15, 0x7fef7feb
	0x140882dcf: pop rsi
	0x140882dd0: xchg qword ptr [rsp], r15
	0x140882dd4: mov rsp, qword ptr [rsp]
	0x140882ddf: push rdi
	0x140882de0: mov rdi, rsp
	0x140882de3: add rdi, 8
	0x140882de7: push rbp
	0x140882de8: movabs rbp, 0x1c0bd100
	0x140882df2: push 0
	0x140882df4: sub qword ptr [rsp], rbp
	0x140882df8: pop rbp
	0x140882df9: neg rbp
	0x140882dfc: shl rbp, 6
	0x140882e00: push r15
	0x140882e02: movabs r15, 0xfffffff8fd0bc008
	0x140882e0c: add rbp, r15
	0x140882e0f: mov r15, qword ptr [rsp]
	0x140882e13: add rsp, 8
	0x140882e1a: sub rdi, rbp
	0x140882e1d: pop rbp
	0x140882e1e: xchg qword ptr [rsp], rdi
	0x140882e22: pop rsp
	0x140882e23: mov qword ptr [rsp], rdi
	0x140882e27: push rsi
	0x140882e28: sub rsp, 8
	0x140882e2c: push rcx
	0x140882e2d: pop qword ptr [rsp]
	0x140882e30: movabs rcx, 0x68ffb2ff
	0x140882e3a: movabs rsi, 0x9cfce571
	0x140882e44: sub rsi, rcx
	0x140882e47: mov rcx, qword ptr [rsp]
	0x140882e4b: add rsp, 8
	0x140882e4f: mov rdi, rsi
	0x140882e52: pop rsi
	0x140882e53: push rcx
	0x140882e54: movabs rcx, 0x7bff58f9
	0x140882e5e: add rdi, 0xffb7188
	0x140882e65: sub rdi, rcx
	0x140882e68: sub rdi, 0xffb7188
	0x140882e6f: mov rcx, qword ptr [rsp]
	0x140882e73: add rsp, 8
	0x140882e7a: push 0x3e198c
	0x140882e7f: push r14
	0x140882e81: pop qword ptr [rsp]
	0x140882e84: mov r14, -0x480227cc
	0x140882e8b: add rdi, 0x771550d
	0x140882e92: sub rdi, r14
	0x140882e95: sub rdi, 0x771550d
	0x140882ea0: add rsp, 8
	0x140882ea4: sub r9, 0x79796164
	0x140882eab: add r9, rdi
	0x140882eae: add r9, 0x79796164
	0x140882eb9: add rsp, 8
	0x140882ebd: push 0x402e0970
	0x140882ec2: sub rsp, 8
	0x140882ec6: sub rsp, 8
	0x140882eca: push 0x3f7ea06b
	0x140882ecf: sub rsp, 8
	0x140882ed3: sub rsp, 8
	0x140882ed7: mov qword ptr [rsp], rsi
	0x140882edb: sub rsp, 8
	0x140882ee2: mov qword ptr [rsp], r8
	0x140882ee6: push r15
	0x140882ee8: mov r15, r13
	0x140882eeb: push r15
	0x140882eed: sub qword ptr [rsp], 0x5b7b1a29
	0x140882ef5: pop r8
	0x140882ef7: add r8, 0x5b7b1a29
	0x140882efe: pop r15
	0x140882f00: push r13
	0x140882f02: mov r13, r8
	0x140882f05: mov rsi, r13
	0x140882f08: pop r13
	0x140882f0e: add rsp, 8
	0x140882f15: push rsi
	0x140882f16: pop qword ptr [rsp + 8]
	0x140882f1a: pop rsi
	0x140882f1b: pop qword ptr [rsp]
	0x140882f1e: pop qword ptr [rsp]
	0x140882f21: pop qword ptr [rsp]
	0x140882f24: pop qword ptr [rsp]
	0x140882f27: mov r10, 0x200
	0x140882f2e: push 0x43749c6
	0x140882f33: mov qword ptr [rsp], r10
	0x140882f37: push 0x658bcc8b
	0x140882f3c: mov qword ptr [rsp], rcx
	0x140882f40: movabs rcx, 0xc
	0x140882f4a: mov r10, rcx
	0x140882f4d: push qword ptr [rsp]
	0x140882f50: pop rcx
	0x140882f51: add rsp, 8
	0x140882f58: sub rsp, 8
	0x140882f5c: mov qword ptr [rsp], r12
	0x140882f60: sub rsp, 8
	0x140882f64: mov qword ptr [rsp], r9
	0x140882f68: push r9
	0x140882f6a: mov r9, qword ptr [rsp]
	0x140882f6e: add rsp, 8
	0x140882f75: push 0x32a53d72
	0x140882f7a: mov qword ptr [rsp], r13
	0x140882f7e: push rcx
	0x140882f7f: movabs rcx, 0
	0x140882f89: mov r13, rcx
	0x140882f8c: pop rcx
	0x140882f8d: mov qword ptr [rsp + 8], r13
	0x140882f96: add rsp, 8
	0x140882f9d: pop r12
	0x140882f9f: add r12, 0x5c366276
	0x140882fa6: sub r12, 0x4f9b1bc2
	0x140882fad: sub r12, 0x786f2056
	0x140882fb4: add r12, r9
	0x140882fb7: add r12, 0x786f2056
	0x140882fbe: add r12, 0x4f9b1bc2
	0x140882fc5: sub r12, 0x5c366276
Load [EBP+0x145](STATIC)
bytecode=0x14094212b
	0x140882fcc: add qword ptr [r12], r10
	0x140882fd0: pop r12
	0x140882fd2: pop r10
	0x14088301a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x140774b02: mov r14, 0
	0x140774b09: mov rax, rbp
	0x140774b0c: mov r13, rbp
	0x140774b0f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774b16: sub dword ptr [r13], 0x52a82941
	0x140774b21: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140774b27: mov rax, qword ptr [rax]
	0x140774b31: add rax, 4
	0x140774b37: mov r14w, word ptr [rax]
	0x140774b3b: add r14, rbp
	0x140774b3e: mov r15, 0
	0x140774b45: mov rsi, rbp
	0x140774b48: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140774b4f: mov rsi, qword ptr [rsi]
	0x140774b52: add rsi, 8
	0x140774b59: mov r15w, word ptr [rsi]
	0x140774b5d: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140774b60: push qword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
	0x140774b63: push qword ptr [r15]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140774b66: pop qword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140774b69: pop qword ptr [r15]
	0x140774b6c: mov r8, 0
	0x140774b73: mov r13, rbp
	0x140774b76: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140774b7d: mov r13, qword ptr [r13]
	0x140774b84: add r13, 6
	0x140774b8b: mov r8w, word ptr [r13]
	0x140774b90: add r8, rbp
	0x140774b99: mov r15, 0
	0x140774ba0: mov rdi, rbp
	0x140774ba3: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140774baa: mov rdi, qword ptr [rdi]
	0x140774bad: add rdi, 0xe
	0x140774bb4: mov r15w, word ptr [rdi]
	0x140774bb8: mov rax, rbp
	0x140774bbb: add r15, rbp
	0x140774bbe: add rax, 0xa7
Load [EBP+0xe8](VM_REGISTER)
	0x140774bc4: push qword ptr [r8]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774bc7: add dword ptr [rax], 0x60a0de21
Load [EBP+0x15d](VM_REGISTER)
	0x140774bcd: push qword ptr [r15]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140774bd0: pop qword ptr [r8]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140774bd3: pop qword ptr [r15]
	0x140774bdd: mov r10, rbp
	0x140774bec: mov r8, rbp
	0x140774bef: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140774bfd: mov r8, qword ptr [r8]
	0x140774c15: add r10, 0x145
	0x140774c26: add r8, 0xa
Load [EBP+0x145](STATIC)
	0x140774c42: mov r10, qword ptr [r10]
	0x140774c45: movzx rbx, word ptr [r8]
	0x140774c57: add r10, 2
	0x140774c5e: mov r14, rbp
	0x140774c64: movzx rax, word ptr [r10]
	0x140774c76: add rax, rbp
	0x140774c79: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774c80: add ebx, dword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
	0x140774c98: mov rax, qword ptr [rax]
	0x140774c9b: or r9, rax
	0x140774c9e: pushfq
	0x140774cad: mov r8, rbp
	0x140774cc7: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140774cce: add ebx, dword ptr [r8]
	0x140774ce2: mov rax, rbp
	0x140774cf3: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774d11: add dword ptr [rax], ebx
	0x140774d3a: mov rax, rbp
	0x140774d44: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774d54: and dword ptr [rax], 0x105d0f2e
	0x140774d83: mov r13, rbp
	0x140774d8d: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x140774da9: mov dil, byte ptr [r13]
	0x140774dad: cmp dil, 0x29
	0x140774db1: jbe 0x140774dd6
	0x140774deb: mov r11, rbp
	0x140774df5: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140774dff: sub word ptr [r11], bx
	0x140774e18: pop r9
	0x140774e24: mov r10, rbp
	0x140774e35: mov rdx, rbp
	0x140774e38: add r10, 0x16e
	0x140774e3f: add rdx, 0xbf
Load [EBP+0x16e](STATIC)
	0x140774e49: movzx rsi, word ptr [r10]
	0x140774e4d: sub si, 0x47b2
	0x140774e52: add rsi, rbp
	0x140774e55: mov r8, rbp
	0x140774e5e: add r8, 0x18
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774e65: and dword ptr [rdx], 0x2327d8d0
	0x140774e6e: mov r10, rbp
Load [EBP+0x18](STATIC)
	0x140774e71: mov r14, qword ptr [r8]
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x140774e74: add qword ptr [rsi], r14
	0x140774e7e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774e93: or dword ptr [r10], 0x3783020c
	0x140774ebc: mov dl, 0xd6
	0x140774ecc: mov r9, rbp
	0x140774ed2: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140774ee7: xor byte ptr [r9], dl
	0x140774efe: mov rcx, rbp
	0x140774f01: mov rdx, rbp
	0x140774f04: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140774f0e: mov rcx, qword ptr [rcx]
	0x140774f17: add rdx, 0xab
	0x140774f1e: add rcx, 0xc
	0x140774f32: movzx rcx, word ptr [rcx]
Load [EBP+0xab](STATIC)
	0x140774f36: mov rdx, qword ptr [rdx]
	0x140774f4e: mov r12, rbp
	0x140774f5e: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774f73: add ecx, dword ptr [r12]
	0x140774f81: xor ecx, 0x41f4abe6
	0x140774f87: mov rsi, rbp
	0x140774f8a: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774f98: sub dword ptr [rsi], ecx
	0x140774fa1: and rcx, 0xffff
	0x140774fbc: shl rcx, 3
	0x140774fce: add rdx, rcx
	0x140774fd1: mov r9, qword ptr [rdx]
	0x140774fde: mov r12, rbp
	0x140774fe1: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094213b
	0x140774fe8: add qword ptr [r12], 0x10
	0x140774ff0: jmp r9
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942143
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x140831887: mov rax, rbp
	0x14083188a: mov rcx, rbp
	0x14083188d: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x1408318a2: mov rcx, qword ptr [rcx]
	0x1408318a5: add rax, 0x145
	0x1408318b9: mov rsi, 0x200
Load [EBP+0x145](STATIC)
	0x1408318c0: mov rax, qword ptr [rax]
	0x1408318d4: add rax, 0
	0x1408318eb: movzx rax, word ptr [rax]
	0x1408318ef: mov r10, 0x400
	0x140831911: or rsi, 4
	0x140831918: add r10, r10
	0x14083191b: mov rbx, rbp
	0x140831925: xor rsi, 0x400
	0x14083192c: and rsi, 0xffffffff80000000
	0x140831933: add rbx, 0xbf
	0x140831948: or rsi, 0x3f
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083194f: xor dword ptr [rbx], eax
	0x140831951: and rax, 0xffff
	0x140831957: sub rsi, r10
	0x14083195a: and rsi, rax
	0x140831964: shl rax, 3
	0x140831968: add rcx, rax
	0x140831975: mov rax, qword ptr [rcx]
	0x140831978: mov rbx, 0xd5
	0x14083197f: mov r12, rbp
	0x140831982: or rsi, 0x400
	0x140831989: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140831990: mov qword ptr [r12], rax
	0x14083199b: and rcx, r12
	0x14083199e: mov r10, rbp
	0x1408319a7: add r10, 0x145
	0x1408319ae: and r13, 1
	0x1408319b5: mov r14, r12
Load [EBP+0x145](STATIC)
	0x1408319b8: mov r10, qword ptr [r10]
	0x1408319c5: add r10, 4
	0x1408319d3: movzx r12, word ptr [r10]
	0x1408319d7: mov rdx, rbp
	0x1408319e1: and rcx, 0x20
	0x1408319ef: add rdx, 0xbf
	0x1408319f6: and rcx, 0x88
	0x1408319fd: mov rdi, 1
Load [EBP+0xbf](STATIC)
	0x140831a04: sub r12d, dword ptr [rdx]
	0x140831a07: sub r14, r14
	0x140831a0d: and r14, 4
	0x140831a1a: mov r10, rbp
	0x140831a1d: or r14, rsi
	0x140831a27: add r10, 0xbf
	0x140831a2e: and rdi, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831a31: add dword ptr [r10], r12d
	0x140831a34: sub rdi, 0x10
	0x140831a42: xor r14, 0x10
	0x140831a49: mov r11, rbp
	0x140831a5a: add r11, 0xa7
	0x140831a61: xor rbx, 4
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831a68: sub dword ptr [r11], 0x4636dc37
	0x140831a6f: and r14, 0x3f
	0x140831a76: sub rbx, 0xf0
	0x140831a7d: mov rdx, rbp
	0x140831a80: sub rdi, rdi
	0x140831a83: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140831a8a: mov sil, byte ptr [rdx]
	0x140831a8d: cmp sil, 0x5a
	0x140831a91: jbe 0x140831a9e
	0x140831a97: add r12d, 0x3f95bd85
	0x140831aa1: mov rsi, rbp
	0x140831aab: add rsi, 0x16e
	0x140831ab9: sub rbx, rdi
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140831ac3: add word ptr [rsi], r12w
	0x140831ac7: mov r15, 0x255578db
	0x140831ace: mov r10, rbp
	0x140831ad1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831ad8: sub dword ptr [r10], r15d
	0x140831adb: add rbx, r14
	0x140831ade: add rbx, 0x20
	0x140831ae5: mov rcx, 0
	0x140831af3: sub r13, 0x80
	0x140831afa: mov r10, rbp
	0x140831b07: mov r8, 0xd5
	0x140831b0e: add r10, 0x145
	0x140831b15: mov r9, 0x400
Load [EBP+0x145](STATIC)
	0x140831b1c: mov r10, qword ptr [r10]
	0x140831b1f: mov rsi, 0x200
	0x140831b26: or rbx, 1
	0x140831b2d: add rsi, 0x40
	0x140831b34: add r10, 2
	0x140831b3b: sub r14, 0x400
	0x140831b42: and rbx, 0x90
	0x140831b49: and rsi, 0x3f
	0x140831b50: mov cx, word ptr [r10]
	0x140831b54: and rbx, 0x80
	0x140831b5b: add r14, rsi
	0x140831b5e: xor r13, 0x3f
	0x140831b65: mov r10, rbp
	0x140831b68: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140831b6f: xor ecx, dword ptr [r10]
	0x140831b72: mov rax, rbp
	0x140831b7c: and r9, 0x80
	0x140831b83: add rbx, rbx
	0x140831b86: add rax, 0x120
	0x140831b8c: sub r13, r9
Load [EBP+0x120](STATIC)
	0x140831b99: add ecx, dword ptr [rax]
	0x140831ba2: mov rdx, rbp
	0x140831ba5: xor r14, rbx
	0x140831ba8: and r14, 0x80
	0x140831baf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831bcb: add dword ptr [rdx], ecx
	0x140831bcd: mov r12, rbp
	0x140831bd0: sub r13, 1
	0x140831bda: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831be1: add dword ptr [r12], 0x707911f3
	0x140831be9: mov r9, rbp
	0x140831bec: add r9, 0xd6
	0x140831bf3: add r14, 0x88
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140831bfa: sub word ptr [r9], cx
	0x140831c01: or rdx, 0x20
	0x140831c08: xor r9, 8
	0x140831c0f: mov rax, rbp
	0x140831c12: and r11, 0xf0
	0x140831c19: or r11, 4
	0x140831c20: sub rdx, r11
	0x140831c23: mov rdi, rbp
	0x140831c26: or r13, 4
	0x140831c2d: add rcx, rax
	0x140831c30: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140831c37: movzx rdi, word ptr [rdi]
	0x140831c42: sub rcx, 8
	0x140831c49: add rax, 0xd6
	0x140831c4f: mov r15, 0x12
	0x140831c56: xor di, 0x7573
Load [EBP+0xd6](STATIC)
	0x140831c5b: movzx rax, word ptr [rax]
	0x140831c5f: sub ax, 0x7451
	0x140831c63: add rax, rbp
	0x140831c66: xor r15, r9
	0x140831c70: mov r9, 0
Load [EBP+0x14d](VM_REGISTER)
	0x140831c77: mov rax, qword ptr [rax]
	0x140831c7a: add rdx, 0x88
	0x140831c81: sub r9, rcx
	0x140831c84: and r9, 0xf0
	0x140831c8b: add rdi, rbp
Deref(t2923,ds)
	0x140831c91: mov rax, qword ptr [rax]
Store VM_REG [EBP+0xce]
	0x140831c94: mov qword ptr [rdi], rax
	0x140831c97: xor rdx, 0x20
	0x140831c9e: add r15, 0xf0
	0x140831cac: mov rsi, 0xd5
	0x140831cb3: sub rdx, 4
	0x140831cba: and r15, 0x20
	0x140831cc1: xor rsi, r8
	0x140831cc7: mov r12, 0
	0x140831cce: mov rdi, 0x12
	0x140831cd5: or rsi, 4
	0x140831cdc: add r12, 0x20
	0x140831ce3: or rdi, 8
	0x140831cea: mov r11, 1
	0x140831cf1: and rsi, r12
	0x140831cf4: and rdx, 0xf0
	0x140831cfb: and rdx, 0x40
	0x140831d02: mov rbx, rbp
	0x140831d05: add rbx, 0xfd
	0x140831d0c: and rdx, r8
Load [EBP+0xfd](STATIC)
	0x140831d0f: mov r10, qword ptr [rbx]
	0x140831d12: add rdx, 0x80
	0x140831d19: mov r8, r13
	0x140831d1c: mov rcx, 0x400
	0x140831d23: add rcx, rcx
	0x140831d26: sub rsp, 8
	0x140831d2a: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140831d2b: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x7bfe7bec + context) & 0xffffffffffffffff)
	0x140831d2e: add qword ptr [rsp], 0x7bfe7bec
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831d36: mov r13, qword ptr [rsp]
	0x140831d3a: add rsp, 8
	0x140831d3e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1a
	0x140831d42: mov qword ptr [rsp], rdi
	0x140831d46: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x800
	0x140831d4a: mov qword ptr [rsp], rcx
	0x140831d4e: movabs rcx, 0x799ea5ff
	0x140831d58: shr rcx, 1
	0x140831d5c: push r15
	0x140831d5e: movabs r15, 0xb8b935b
	0x140831d68: and r15, 0x7eb7516c
	0x140831d6f: xor r15, 0x4db2385b
	0x140831d76: xor rcx, r15
	0x140831d7d: add rsp, 8
	0x140831d81: mov rdi, rcx
	0x140831d84: pop rcx
	0x140831d85: sub r13, 0xe2ffdbe
	0x140831d8c: sub r13, 0x7dfff37
	0x140831d93: sub r13, rdi
	0x140831d96: add r13, 0x7dfff37
	0x140831d9d: add r13, 0xe2ffdbe
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831da4: mov rdi, qword ptr [rsp]
	0x140831da8: sub rsp, 8
	0x140831dac: push r8
	0x140831dae: mov r8, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 4 | ((((0xffffffff18ae75a6 + ((0xffffffffffffffff * context) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 4) & 0xf)) << 4 | 0x0)
	0x140831db1: mov qword ptr [rsp + 8], r8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140831db6: push qword ptr [rsp]
	0x140831db9: pop r8
	0x140831dbb: add rsp, 8
	0x140831dbf: mov r9, rsp
	0x140831dc2: add r9, 8
	0x140831dc6: add r9, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dcd: xor r9, qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1000
	0x140831dd1: xor qword ptr [rsp], r9
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dd9: mov rsp, qword ptr [rsp]
	0x140831de4: mov r15, 0x400
	0x140831deb: sub rsp, 8
	0x140831df2: mov qword ptr [rsp], rdx
	0x140831df6: mov rdx, rsp
	0x140831df9: add rdx, 8
	0x140831dfd: push 0x2d221d5a
	0x140831e02: mov qword ptr [rsp], rdi
	0x140831e06: movabs rdi, 8
	0x140831e10: sub rdx, rdi
unknown read addr: ff0 0xff0
	0x140831e13: mov rdi, qword ptr [rsp]
	0x140831e17: add rsp, 8
unknown read addr: ff8 0xff8
	0x140831e1b: xchg qword ptr [rsp], rdx
unknown read addr: ff8 0xff8
	0x140831e1f: mov rsp, qword ptr [rsp]
	0x140831e23: push r14
unknown read addr: ff0 0xff0
	0x140831e25: pop qword ptr [rsp]
	0x140831e28: movabs r14, 0x7efde3b5
	0x140831e32: dec r14
	0x140831e35: xor r14, 0x14da5629
	0x140831e3c: sub r14, 1
	0x140831e40: xor r14, 0x6a27b4d9
	0x140831e47: sub r13, 0x5ece19cb
	0x140831e4e: add r13, r14
	0x140831e51: add r13, 0x5ece19cb
unknown read addr: ff8 0xff8
	0x140831e58: push qword ptr [rsp]
	0x140831e5f: add rsp, 8
	0x140831e63: push rsi
	0x140831e64: mov rsi, rsp
	0x140831e67: add rsi, 8
	0x140831e6b: push rdi
	0x140831e6c: movabs rdi, 0x65ffae00
	0x140831e76: not rdi
	0x140831e79: sub rdi, 0x5bf7bcdc
	0x140831e80: push r10
	0x140831e82: movabs r10, 0xc1f76ae5
	0x140831e8c: add rdi, r10
	0x140831e8f: pop r10
	0x140831e91: add rsi, rdi
	0x140831e94: pop rdi
	0x140831e95: sub rsp, 8
	0x140831e99: mov qword ptr [rsp], rsi
	0x140831e9d: push qword ptr [rsp + 8]
	0x140831ea1: mov rsi, qword ptr [rsp]
	0x140831ea5: add rsp, 8
	0x140831eac: pop qword ptr [rsp]
	0x140831eaf: pop rsp
	0x140831eb7: push 0x4708252a
	0x140831ebc: push rbx
	0x140831ebd: pop qword ptr [rsp]
	0x140831ec0: push r11
	0x140831ec2: sub rsp, 8
	0x140831ec6: mov qword ptr [rsp], rax
	0x140831eca: movabs rax, 0x7767c9b6
	0x140831ed4: movabs r11, 0xc8fbef9
	0x140831ede: xor r11, rax
	0x140831ee5: push rdi
	0x140831ee6: mov rdi, rsp
	0x140831ee9: add rdi, 8
	0x140831eed: add rdi, 8
	0x140831ef4: xchg qword ptr [rsp], rdi
	0x140831ef8: pop rsp
	0x140831ef9: mov rbx, r11
	0x140831f00: add rsp, 8
	0x140831f07: xchg rbx, r12
	0x140831f0a: push r12
	0x140831f0c: not qword ptr [rsp]
	0x140831f10: pop r12
	0x140831f12: xchg rbx, r12
	0x140831f15: shr rbx, 2
	0x140831f19: push r12
	0x140831f1b: movabs r12, 0x27df7d1e
	0x140831f25: and r12, 0x5e9f7e8c
	0x140831f2c: shl r12, 3
	0x140831f30: add r12, -1
	0x140831f34: and r12, 0x3effb6c6
	0x140831f3b: xor r12, 0xb8ee917
	0x140831f42: add rbx, r12
	0x140831f49: add rsp, 8
	0x140831f4d: sub rsp, 8
	0x140831f54: push r15
	0x140831f56: mov r15, rsi
	0x140831f59: push r15
	0x140831f5b: pop qword ptr [rsp + 8]
	0x140831f63: add rsp, 8
	0x140831f67: movabs rsi, 0xbfffffffdf84d489
	0x140831f71: add rbx, 0x77bf8510
	0x140831f78: add rbx, rsi
	0x140831f7b: sub rbx, 0x77bf8510
	0x140831f82: pop rsi
Load [EBP+0x145](STATIC)
bytecode=0x140942149
	0x140831f83: add qword ptr [r13], rbx
	0x140831f8b: add rsp, 8
	0x140831f8f: xor r10, 0x594d5d99
	0x140831f96: push r10
	0x140831ff5: pop r9
	0x140831ff7: xor r9, 0x594d5d99
	0x140831ffe: jmp r9
handlers outputs:



	0x1407ec587: mov r15, 0
	0x1407ec58e: mov r10, rbp
	0x1407ec591: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec598: mov r10, qword ptr [r10]
	0x1407ec59b: add r10, 0xa
	0x1407ec5a2: mov r15w, word ptr [r10]
	0x1407ec5a6: add r15, rbp
	0x1407ec5a9: mov r10, 0
	0x1407ec5b0: mov r13, rbp
	0x1407ec5b3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5ba: mov r13, qword ptr [r13]
	0x1407ec5be: add r13, 8
	0x1407ec5c5: mov r10w, word ptr [r13]
	0x1407ec5ca: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407ec5cd: push qword ptr [r15]
Load [EBP+0xe0](VM_REGISTER)
	0x1407ec5d0: push qword ptr [r10]
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x1407ec5d3: pop qword ptr [r15]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x1407ec5d6: pop qword ptr [r10]
	0x1407ec5d9: mov r13, rbp
	0x1407ec5e3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5f4: mov r13, qword ptr [r13]
	0x1407ec605: add r13, 6
	0x1407ec60f: movzx r12, word ptr [r13]
	0x1407ec61b: mov r15, rbp
	0x1407ec628: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec62f: sub r12d, dword ptr [r15]
	0x1407ec63c: mov rax, rbp
	0x1407ec642: add rax, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407ec648: xor r12d, dword ptr [rax]
	0x1407ec655: mov r10, rbp
	0x1407ec666: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec66d: sub dword ptr [r10], r12d
	0x1407ec677: mov rax, rbp
	0x1407ec67a: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec68a: add dword ptr [rax], 0x34acd0d9
	0x1407ec690: mov rcx, rbp
	0x1407ec6a1: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1407ec6af: mov r14b, byte ptr [rcx]
	0x1407ec6b2: cmp r14b, 0x31
	0x1407ec6b6: jbe 0x1407ec6d1
	0x1407ec6c3: sub r12d, 0x4faaff32
	0x1407ec6d1: mov rdx, rbp
	0x1407ec6db: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407ec6ec: xor word ptr [rdx], r12w
	0x1407ec6f0: mov r13, rbp
	0x1407ec6fa: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec704: mov r13, qword ptr [r13]
	0x1407ec712: add r13, 0
	0x1407ec720: mov r12d, dword ptr [r13]
	0x1407ec731: mov rax, rbp
	0x1407ec734: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec744: xor r12d, dword ptr [rax]
	0x1407ec781: mov rdx, rbp
	0x1407ec784: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec792: xor dword ptr [rdx], r12d
	0x1407ec798: mov rdi, rbp
	0x1407ec79b: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec7a5: or dword ptr [rdi], 0x56aa0b47
	0x1407ec7c0: mov r11, rbp
	0x1407ec7d1: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407ec7ed: add dword ptr [r11], r12d
	0x1407ec7f0: mov r14, rbp
	0x1407ec804: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407ec812: xor dword ptr [r14], r12d
	0x1407ec81c: mov rax, rbp
	0x1407ec81f: mov r10, 0
	0x1407ec82d: mov r14, rbp
	0x1407ec83e: add r14, 0xab
	0x1407ec845: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec860: mov rax, qword ptr [rax]
	0x1407ec86a: add rax, 4
	0x1407ec885: movzx rax, word ptr [rax]
	0x1407ec889: mov r8, 0
Load [EBP+0xab](STATIC)
	0x1407ec890: mov r14, qword ptr [r14]
	0x1407ec893: mov rsi, rbp
	0x1407ec896: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec8a4: sub eax, dword ptr [rsi]
	0x1407ec8b4: xor r8, 4
	0x1407ec8bb: xor eax, 0x19b980fc
	0x1407ec8d1: mov rdx, rbp
	0x1407ec8d4: add rdx, 0xbf
	0x1407ec8db: xor r8, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec8e2: or dword ptr [rdx], eax
	0x1407ec8e4: mov r11, r10
	0x1407ec8ee: and rax, 0xffff
	0x1407ec8f4: sub r8, rax
	0x1407ec8f7: mov rcx, r10
	0x1407ec8fa: shl rax, 3
	0x1407ec8fe: xor r11, 8
	0x1407ec905: add r14, rax
	0x1407ec908: mov r10, qword ptr [r14]
	0x1407ec90b: mov rbx, rbp
	0x1407ec90e: add rbx, 0xfd
	0x1407ec91c: xor r11, 1
Store [EBP+0xfd](STATIC)
	0x1407ec923: mov qword ptr [rbx], r10
	0x1407ec926: mov r9, 0x200
	0x1407ec92d: xor rdx, rbx
	0x1407ec930: mov r14, rbp
	0x1407ec933: or r8, 0x20
	0x1407ec93a: xor r9, 0x7fffffff
	0x1407ec944: mov r15, rbp
	0x1407ec947: sub rdx, 0x40
	0x1407ec955: add r15, 0x58
	0x1407ec95c: xor r11, rcx
	0x1407ec962: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407ec972: movzx r14, word ptr [r14]
Load [EBP+0x58](STATIC)
	0x1407ec976: mov r15d, dword ptr [r15]
	0x1407ec979: sub r15d, 0x310f47f5
	0x1407ec983: mov rax, r15
	0x1407ec986: sub r14w, 0xfb81
	0x1407ec993: add r14, rbp
Store VM_REG [EBP+0x14d]
	0x1407ec9a4: mov qword ptr [r14], r15
	0x1407ec9ae: mov r10, 0x200
	0x1407ec9b5: xor r10, 0x40
	0x1407ec9d1: or r10, 8
	0x1407ec9db: mov rsi, 0x400
	0x1407eca05: mov rbx, 1
	0x1407eca0f: or rsi, 0xffff
	0x1407eca16: mov rdi, r10
	0x1407eca19: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x1407eca1d: mov qword ptr [rsp], rcx
	0x1407eca21: push 0x23c39100
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407eca26: mov qword ptr [rsp], rbp
	0x1407eca2a: push rdi
	0x1407eca2b: movabs rdi, 0x4bef41e7
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x4bef41e7 + context) & 0xffffffffffffffff)
	0x1407eca35: add qword ptr [rsp + 8], rdi
	0x1407eca3a: pop rdi
	0x1407eca3b: pop rcx
	0x1407eca3c: sub rcx, 0x4bef41e7
	0x1407eca43: push 0x6d044fc2
	0x1407eca48: push r8
	0x1407eca4a: mov r8, rsp
	0x1407eca4d: add r8, 8
	0x1407eca51: push rcx
	0x1407eca52: movabs rcx, 0x4dfad9d6
	0x1407eca5c: not rcx
	0x1407eca5f: push r8
	0x1407eca61: mov r8, 0x4dfad9df
	0x1407eca68: add rcx, r8
	0x1407eca6b: pop r8
	0x1407eca6d: sub r8, rcx
	0x1407eca70: pop rcx
	0x1407eca71: xchg qword ptr [rsp], r8
	0x1407eca75: mov rsp, qword ptr [rsp]
	0x1407eca79: sub rsp, 8
	0x1407eca7d: push rbp
	0x1407eca7e: pop qword ptr [rsp]
	0x1407eca81: pop qword ptr [rsp]
	0x1407eca84: pop qword ptr [rsp]
	0x1407eca87: push rbx
	0x1407eca88: push rcx
	0x1407eca89: pop rbx
	0x1407eca8a: mov rbp, rbx
	0x1407eca8d: pop rbx
	0x1407eca8e: push rbp
	0x1407eca8f: sub qword ptr [rsp], 0x5f4dcc71
	0x1407eca97: mov r8, qword ptr [rsp]
	0x1407eca9b: add rsp, 8
	0x1407ecaa2: add r8, 0x5f4dcc71
	0x1407ecaa9: mov rbp, qword ptr [rsp]
	0x1407ecaad: add rsp, 8
	0x1407ecab1: pop rcx
	0x1407ecab2: sub rsi, 0x88
	0x1407ecab9: add rsi, 0x20
	0x1407ecac0: push r10
	0x1407ecac2: push rsi
	0x1407ecac3: push rbx
	0x1407ecac4: push rsp
	0x1407ecac5: pop rbx
	0x1407ecac6: add rbx, 8
	0x1407ecaca: sub rbx, 8
	0x1407ecad1: xchg qword ptr [rsp], rbx
	0x1407ecad5: pop rsp
	0x1407ecad6: mov qword ptr [rsp], rbx
	0x1407ecada: push 0x31b62587
	0x1407ecadf: mov qword ptr [rsp], r8
	0x1407ecae3: movabs r8, 0x77f9f5ee
	0x1407ecaed: sub rsp, 8
	0x1407ecaf1: mov qword ptr [rsp], r11
	0x1407ecaf5: movabs r11, 0x6ffb5392
	0x1407ecaff: shl r11, 7
	0x1407ecb03: and r11, 0x76f7a183
	0x1407ecb0a: dec r11
	0x1407ecb0d: push r9
	0x1407ecb0f: mov r9, 0x78e6b6ed
	0x1407ecb16: sub r11, r9
	0x1407ecb19: pop r9
	0x1407ecb1b: mov rbx, r11
	0x1407ecb1e: pop r11
	0x1407ecb20: add rbx, r8
	0x1407ecb23: pop r8
	0x1407ecb25: push rbx
	0x1407ecb26: pop rsi
	0x1407ecb27: push qword ptr [rsp]
	0x1407ecb2a: mov rbx, qword ptr [rsp]
	0x1407ecb2e: add rsp, 8
	0x1407ecb32: push rbx
	0x1407ecb33: mov rbx, rsp
	0x1407ecb36: add rbx, 8
	0x1407ecb3a: add rbx, 8
	0x1407ecb41: xchg qword ptr [rsp], rbx
	0x1407ecb45: pop rsp
	0x1407ecb46: movabs r10, 0xeba43340
	0x1407ecb50: sub r10, rsi
	0x1407ecb53: mov rsi, qword ptr [rsp]
	0x1407ecb57: add rsp, 8
	0x1407ecb5b: add r10, -1
	0x1407ecb5f: dec r10
	0x1407ecb62: inc r10
	0x1407ecb65: and r10, 0x76f6abf0
	0x1407ecb6c: shl r10, 3
	0x1407ecb70: push rcx
	0x1407ecb71: movabs rcx, 0x3b731183b
	0x1407ecb7b: sub r10, rcx
	0x1407ecb7e: pop rcx
	0x1407ecb7f: sub r8, 0x64bbea81
	0x1407ecb86: add r8, r10
	0x1407ecb89: add r8, 0x64bbea81
	0x1407ecb90: push qword ptr [rsp]
	0x1407ecb93: pop r10
	0x1407ecb95: add rsp, 8
	0x1407ecba0: add rdi, 0x7fffffff
	0x1407ecba7: and rsi, 0xf0
	0x1407ecbae: push rsi
	0x1407ecbaf: movabs rsi, 0x4ebf22cc
	0x1407ecbb9: not rsi
	0x1407ecbbc: push r15
	0x1407ecbbe: movabs r15, 0x5fea8592
	0x1407ecbc8: add rsi, r15
	0x1407ecbcb: pop r15
	0x1407ecbcd: xor rsi, 0x5ffb70e6
	0x1407ecbd4: push rax
	0x1407ecbd5: movabs rax, 0x776f28e0
	0x1407ecbdf: push rdx
	0x1407ecbe0: movabs rdx, 0x5db69e5a
	0x1407ecbea: add rax, rdx
	0x1407ecbed: pop rdx
	0x1407ecbee: add rax, 1
	0x1407ecbf2: neg rax
	0x1407ecbf5: shl rax, 7
	0x1407ecbf9: xor rax, 0x7f2dfa00
	0x1407ecbff: sub rsp, 8
	0x1407ecc03: mov qword ptr [rsp], rdi
	0x1407ecc07: movabs rdi, 0xffffff94c3618651
	0x1407ecc11: sub rax, rdi
	0x1407ecc14: pop rdi
	0x1407ecc15: xor rsi, rax
	0x1407ecc18: pop rax
	0x1407ecc19: sub rsp, 8
	0x1407ecc1d: mov qword ptr [rsp], r11
	0x1407ecc21: push rdx
	0x1407ecc22: push 0x7b5764e4
	0x1407ecc27: mov rdx, qword ptr [rsp]
	0x1407ecc2b: add rsp, 8
	0x1407ecc2f: not rdx
	0x1407ecc32: inc rdx
	0x1407ecc35: shl rdx, 2
	0x1407ecc39: add edx, 0xed5d9390
	0x1407ecc3f: push 0x32dacacd
	0x1407ecc44: push r8
	0x1407ecc46: pop qword ptr [rsp]
	0x1407ecc49: mov r8, rdx
	0x1407ecc4c: mov r11, r8
	0x1407ecc4f: mov r8, qword ptr [rsp]
	0x1407ecc53: sub rsp, 8
	0x1407ecc5a: mov qword ptr [rsp], rdx
	0x1407ecc5e: mov rdx, rsp
	0x1407ecc61: add rdx, 8
	0x1407ecc65: add rdx, 8
	0x1407ecc6c: xchg qword ptr [rsp], rdx
	0x1407ecc70: pop rsp
	0x1407ecc71: mov rdx, qword ptr [rsp]
	0x1407ecc75: push r9
	0x1407ecc77: mov r9, rsp
	0x1407ecc7a: add r9, 8
	0x1407ecc7e: add r9, 8
	0x1407ecc85: xchg qword ptr [rsp], r9
	0x1407ecc89: pop rsp
	0x1407ecc8a: add r11, r8
	0x1407ecc8d: push rdx
	0x1407ecc8e: mov rdx, 0
	0x1407ecc95: add rdx, r11
Load [EBP+0x145](STATIC)
bytecode=0x140942155
	0x1407ecc98: add qword ptr [rdx], rsi
	0x1407ecc9b: pop rdx
	0x1407ecc9c: pop r11
	0x1407ecc9e: pop rsi
	0x1407ecca6: mov r10, rbp
	0x1407eccb0: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407eccc5: mov r15, qword ptr [r10]
	0x1407eccd9: sub r15, 0x5f3b81ea
	0x1407ecce7: push r15
	0x1407ecd07: pop rcx
	0x1407ecd08: add rcx, 0x5f3b81ea
	0x1407ecd0f: jmp rcx
handlers outputs:



	0x140774b02: mov r14, 0
	0x140774b09: mov rax, rbp
	0x140774b0c: mov r13, rbp
	0x140774b0f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774b16: sub dword ptr [r13], 0x52a82941
	0x140774b21: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140774b27: mov rax, qword ptr [rax]
	0x140774b31: add rax, 4
	0x140774b37: mov r14w, word ptr [rax]
	0x140774b3b: add r14, rbp
	0x140774b3e: mov r15, 0
	0x140774b45: mov rsi, rbp
	0x140774b48: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140774b4f: mov rsi, qword ptr [rsi]
	0x140774b52: add rsi, 8
	0x140774b59: mov r15w, word ptr [rsi]
	0x140774b5d: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140774b60: push qword ptr [r14]
Load [EBP+0x155](VM_REGISTER)
	0x140774b63: push qword ptr [r15]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140774b66: pop qword ptr [r14]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140774b69: pop qword ptr [r15]
	0x140774b6c: mov r8, 0
	0x140774b73: mov r13, rbp
	0x140774b76: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140774b7d: mov r13, qword ptr [r13]
	0x140774b84: add r13, 6
	0x140774b8b: mov r8w, word ptr [r13]
	0x140774b90: add r8, rbp
	0x140774b99: mov r15, 0
	0x140774ba0: mov rdi, rbp
	0x140774ba3: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140774baa: mov rdi, qword ptr [rdi]
	0x140774bad: add rdi, 0xe
	0x140774bb4: mov r15w, word ptr [rdi]
	0x140774bb8: mov rax, rbp
	0x140774bbb: add r15, rbp
	0x140774bbe: add rax, 0xa7
Load [EBP+0x155](VM_REGISTER)
	0x140774bc4: push qword ptr [r8]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774bc7: add dword ptr [rax], 0x60a0de21
Load [EBP+0xe8](VM_REGISTER)
	0x140774bcd: push qword ptr [r15]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140774bd0: pop qword ptr [r8]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140774bd3: pop qword ptr [r15]
	0x140774bdd: mov r10, rbp
	0x140774bec: mov r8, rbp
	0x140774bef: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140774bfd: mov r8, qword ptr [r8]
	0x140774c15: add r10, 0x145
	0x140774c26: add r8, 0xa
Load [EBP+0x145](STATIC)
	0x140774c42: mov r10, qword ptr [r10]
	0x140774c45: movzx rbx, word ptr [r8]
	0x140774c57: add r10, 2
	0x140774c5e: mov r14, rbp
	0x140774c64: movzx rax, word ptr [r10]
	0x140774c76: add rax, rbp
	0x140774c79: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774c80: add ebx, dword ptr [r14]
Load [EBP+0x155](VM_REGISTER)
	0x140774c98: mov rax, qword ptr [rax]
	0x140774c9b: or r9, rax
	0x140774c9e: pushfq
	0x140774cad: mov r8, rbp
	0x140774cc7: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140774cce: add ebx, dword ptr [r8]
	0x140774ce2: mov rax, rbp
	0x140774cf3: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774d11: add dword ptr [rax], ebx
	0x140774d3a: mov rax, rbp
	0x140774d44: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774d54: and dword ptr [rax], 0x105d0f2e
	0x140774d83: mov r13, rbp
	0x140774d8d: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x140774da9: mov dil, byte ptr [r13]
	0x140774dad: cmp dil, 0x29
	0x140774db1: jbe 0x140774dd6
	0x140774deb: mov r11, rbp
	0x140774df5: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140774dff: sub word ptr [r11], bx
	0x140774e18: pop r9
	0x140774e24: mov r10, rbp
	0x140774e35: mov rdx, rbp
	0x140774e38: add r10, 0x16e
	0x140774e3f: add rdx, 0xbf
Load [EBP+0x16e](STATIC)
	0x140774e49: movzx rsi, word ptr [r10]
	0x140774e4d: sub si, 0x47b2
	0x140774e52: add rsi, rbp
	0x140774e55: mov r8, rbp
	0x140774e5e: add r8, 0x18
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774e65: and dword ptr [rdx], 0x2327d8d0
	0x140774e6e: mov r10, rbp
Load [EBP+0x18](STATIC)
	0x140774e71: mov r14, qword ptr [r8]
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x140774e74: add qword ptr [rsi], r14
	0x140774e7e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774e93: or dword ptr [r10], 0x3783020c
	0x140774ebc: mov dl, 0xd6
	0x140774ecc: mov r9, rbp
	0x140774ed2: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140774ee7: xor byte ptr [r9], dl
	0x140774efe: mov rcx, rbp
	0x140774f01: mov rdx, rbp
	0x140774f04: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140774f0e: mov rcx, qword ptr [rcx]
	0x140774f17: add rdx, 0xab
	0x140774f1e: add rcx, 0xc
	0x140774f32: movzx rcx, word ptr [rcx]
Load [EBP+0xab](STATIC)
	0x140774f36: mov rdx, qword ptr [rdx]
	0x140774f4e: mov r12, rbp
	0x140774f5e: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774f73: add ecx, dword ptr [r12]
	0x140774f81: xor ecx, 0x41f4abe6
	0x140774f87: mov rsi, rbp
	0x140774f8a: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774f98: sub dword ptr [rsi], ecx
	0x140774fa1: and rcx, 0xffff
	0x140774fbc: shl rcx, 3
	0x140774fce: add rdx, rcx
	0x140774fd1: mov r9, qword ptr [rdx]
	0x140774fde: mov r12, rbp
	0x140774fe1: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942165
	0x140774fe8: add qword ptr [r12], 0x10
	0x140774ff0: jmp r9
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942173
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x14d](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0xc3]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1408008c1
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1408008c1
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1408008c1
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x14094217d
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x1408008cf: mov r9, rbp
	0x1408008dc: mov r10, rbp
	0x1408008f3: add r10, 0x145
	0x14080090b: add r9, 0xab
Load [EBP+0xab](STATIC)
	0x140800912: mov r9, qword ptr [r9]
Load [EBP+0x145](STATIC)
	0x14080091b: mov r10, qword ptr [r10]
	0x140800928: add r10, 6
	0x140800935: movzx r10, word ptr [r10]
	0x140800953: add r10d, 0x28af1060
	0x14080095d: mov rbx, rbp
	0x140800967: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800978: sub dword ptr [rbx], r10d
	0x14080098c: and r10, 0xffff
	0x1408009a1: shl r10, 3
	0x1408009ac: add r9, r10
	0x1408009bd: mov rax, qword ptr [r9]
	0x1408009d1: mov r10, rbp
	0x1408009d4: add r10, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408009e8: mov qword ptr [r10], rax
	0x1408009eb: mov r11, rbp
	0x1408009f5: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140800a06: mov r11, qword ptr [r11]
	0x140800a13: add r11, 4
	0x140800a27: movzx r14, word ptr [r11]
	0x140800a32: mov rcx, rbp
	0x140800a4a: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800a51: xor r14d, dword ptr [rcx]
	0x140800a57: mov r13, rbp
	0x140800a64: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x140800a72: sub r14d, dword ptr [r13]
	0x140800a7d: mov r15, rbp
	0x140800a87: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140800a95: and dword ptr [r15], r14d
	0x140800a98: mov rbx, rbp
	0x140800aa5: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800aac: xor dword ptr [rbx], 0x684cba10
	0x140800ac7: mov r15, rbp
	0x140800ad7: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x140800aeb: mov sil, byte ptr [r15]
	0x140800aee: cmp sil, 0x52
	0x140800af2: jbe 0x140800b1b
	0x140800b06: xor r14d, 0x21e62de9
	0x140800b22: mov r15, rbp
	0x140800b33: add r15, 0x16e
	0x140800b3a: mov rcx, 0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140800b41: add word ptr [r15], r14w
	0x140800b4f: mov r12, rbp
	0x140800b59: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140800b60: mov r12, qword ptr [r12]
	0x140800b64: add r12, 0
	0x140800b6e: mov r15d, dword ptr [r12]
	0x140800b79: mov r11, rbp
	0x140800b83: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x140800b98: xor r15d, dword ptr [r11]
	0x140800bb2: mov r9, rbp
	0x140800bbf: add r9, 0xbf
	0x140800bcd: mov r11, rbp
	0x140800bde: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800be8: xor dword ptr [r11], 0x2746ad5e
	0x140800bf9: mov r8, rbp
	0x140800bfc: add r8, 0x58
	0x140800c03: mov rbx, 0x12
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140800c18: sub dword ptr [r8], r15d
	0x140800c2c: mov rdx, rbp
	0x140800c3f: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140800c46: or dword ptr [rdx], r15d
	0x140800c49: mov rsi, rbp
	0x140800c4c: add rsi, 0xbf
	0x140800c56: mov r15, rbp
	0x140800c59: add r15, 0x120
	0x140800c60: mov r11, rbp
	0x140800c63: add r11, 0x58
Load [EBP+0x120](STATIC)
	0x140800c6a: and r9d, dword ptr [r15]
	0x140800c70: mov r10, rbp
	0x140800c73: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140800c7a: movzx r10, word ptr [r10]
	0x140800c7e: sub r10w, 0x9025
Load [EBP+0x58](STATIC)
	0x140800c84: mov r11d, dword ptr [r11]
	0x140800c87: add r10, rbp
Store VM_REG [EBP+0x10]
	0x140800c8a: mov dword ptr [r10], r11d
	0x140800c8d: add r10, 4
Store VM_REG [EBP+0x14]
	0x140800c94: mov dword ptr [r10], 0
	0x140800c9b: mov rdi, 0x7fc0bc02
	0x140800ca2: mov r13, rbp
	0x140800ca5: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140800cac: sub dword ptr [r13], edi
	0x140800cb0: mov r15, rbp
	0x140800cb3: add r15, 0xfd
Load [EBP+0xfd](STATIC)
	0x140800cba: mov rax, qword ptr [r15]
	0x140800cbd: sub rsp, 8
	0x140800cc1: sub rsp, 8
	0x140800cc5: push r13
	0x140800cc7: mov r13, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((((((((((0x0) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x3)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 14 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x3fff)) << 1 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x7)) << 1 | 0x0) << 7 | ((0x3f + (context & 0x7f)) & 0x7f))
	0x140800cca: mov qword ptr [rsp + 8], r13
	0x140800ccf: pop r13
	0x140800cd1: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800cd8: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800cdc: add qword ptr [rsp], 8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800ce1: mov r9, qword ptr [rsp]
	0x140800ce5: add rsp, 8
	0x140800cec: add r9, 8
	0x140800cf0: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x140800cf4: mov qword ptr [rsp], rcx
	0x140800cf8: movabs rcx, 8
	0x140800d02: sub r9, 0xb7da6e8
	0x140800d09: add r9, 0xfbc4b83
	0x140800d10: add r9, 0xfd1e092
	0x140800d17: sub r9, rcx
	0x140800d1a: sub r9, 0xfd1e092
	0x140800d21: sub r9, 0xfbc4b83
	0x140800d28: add r9, 0xb7da6e8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140800d2f: mov rcx, qword ptr [rsp]
	0x140800d33: add rsp, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d37: xor r9, qword ptr [rsp]
	0x140800d3b: push rdx
	0x140800d3c: push r9
	0x140800d3e: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
	0x140800d3f: xor qword ptr [rsp + 8], rdx
	0x140800d44: pop rdx
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140800d49: mov rsp, qword ptr [rsp]
	0x140800d4d: push rax
unknown read addr: fe8 ((0xfffffffffffffff8 + (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: 0x140822908
	0x140800d4e: pop qword ptr [rsp]
unknown read addr: ff0 (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))
unknown store addr: ff8, lea_ast: ((0x8 + (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3))) & 0xffffffffffffffff), simplified_source_node: 0x140822908
	0x140800d51: pop qword ptr [rsp]
	0x140800d54: xor rdi, 0x800
	0x140800d5b: add rsi, r11
	0x140800d5e: mov rdx, 0x200
	0x140800d65: xor rdi, 0x10
	0x140800d6c: or rdi, 0x400
	0x140800d81: and rdx, 0x40
	0x140800d88: sub rbx, -0x80000000
	0x140800d8f: mov rax, rsi
	0x140800d92: or rax, 0x90
	0x140800d98: sub rax, rsi
	0x140800d9b: push 0xe96057d
	0x140800da0: push rdx
	0x140800da1: push r10
	0x140800da3: pop rdx
unknown store addr: ff0, lea_ast: (((((((((((((((((((((0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 31) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 30) & 0x1)) & 0x1)) << 1 | 0x0) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 28) & 0x1)) << 2 | 0x0) << 3 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 23) & 0x7)) << 3 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 20) & 0x7)) & 0x7)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 19) & 0x1)) << 2 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 17) & 0x3)) & 0x3)) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 15) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 14) & 0x1)) & 0x1)) << 1 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 13) & 0x1)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 12) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 9) & 0x3)) << 1 | (~(((((0xbf + (context & 0xffffffff)) & 0xffffffff) >> 8) & 0x1)) & 0x1)) << 1 | 0x1) << 2 | ((((0x3f + (context & 0x7f)) & 0x7f) >> 5) & 0x3)) << 3 | (~(((((0x3f + (context & 0x7f)) & 0x7f) >> 2) & 0x7)) & 0x7)) << 2 | ((0x3 + (context & 0x3)) & 0x3)), simplified_source_node: ((0x14 + context) & 0xffffffffffffffff)
	0x140800da4: mov qword ptr [rsp + 8], rdx
	0x140800da9: pop rdx
	0x140800daa: mov r10, rbp
	0x140800dad: push rdx
	0x140800dae: push 0x60442fae
	0x140800db3: push r10
	0x140800db5: pop qword ptr [rsp]
	0x140800db8: sub qword ptr [rsp], 0xfda5ba9
	0x140800dc0: push qword ptr [rsp]
	0x140800dc3: pop rdx
	0x140800dc4: push 0x19066ad
	0x140800dc9: mov qword ptr [rsp], rsi
	0x140800dcd: push rsp
	0x140800dce: pop rsi
	0x140800dcf: add rsi, 8
	0x140800dd3: add rsi, 8
	0x140800dda: xchg qword ptr [rsp], rsi
	0x140800dde: mov rsp, qword ptr [rsp]
	0x140800de2: add rdx, 0xfda5ba9
	0x140800de9: sub rsp, 8
	0x140800df0: mov qword ptr [rsp], rdx
	0x140800df4: push qword ptr [rsp]
	0x140800df7: pop r14
	0x140800df9: push r10
	0x140800dfb: mov r10, rsp
	0x140800dfe: add r10, 8
	0x140800e02: add r10, 8
	0x140800e09: xchg qword ptr [rsp], r10
	0x140800e0d: pop rsp
	0x140800e0e: pop rdx
	0x140800e0f: mov r10, qword ptr [rsp]
	0x140800e13: add rsp, 8
	0x140800e17: xor r15, 0x400
	0x140800e1e: sub rsi, rsi
	0x140800e21: push rdi
	0x140800e22: push r15
	0x140800e24: movabs r15, 0x76efb200
	0x140800e2e: sub rsp, 8
	0x140800e35: mov qword ptr [rsp], r11
	0x140800e39: push rsi
	0x140800e3a: push rbx
	0x140800e3b: movabs rbx, 0x79fe49bf
	0x140800e45: movabs rsi, 0xf0edfd04
	0x140800e4f: sub rsi, 0xebff891
	0x140800e56: sub rsi, 0x36bcbea
	0x140800e5d: add rsi, 0x43eae26
	0x140800e64: sub rsi, rbx
	0x140800e67: sub rsi, 0x43eae26
	0x140800e6e: add rsi, 0x36bcbea
	0x140800e75: add rsi, 0xebff891
	0x140800e7c: pop rbx
	0x140800e7d: push rsi
	0x140800e7e: xor qword ptr [rsp], 0x7fddb4a5
	0x140800e86: pop r11
	0x140800e88: xor r11, 0x7fddb4a5
	0x140800e93: push rdi
	0x140800e94: mov rdi, rsp
	0x140800e97: add rdi, 8
	0x140800e9b: add rdi, 8
	0x140800ea2: xchg qword ptr [rsp], rdi
	0x140800ea6: mov rsp, qword ptr [rsp]
	0x140800eaa: push rdx
	0x140800eab: mov rdx, r11
	0x140800eae: mov rdi, rdx
	0x140800eb1: pop rdx
	0x140800eb2: pop r11
	0x140800eb4: sub rdi, r15
	0x140800eb7: push qword ptr [rsp]
	0x140800eba: pop r15
	0x140800ebc: push rcx
	0x140800ebd: push rsp
	0x140800ebe: pop rcx
	0x140800ebf: add rcx, 8
	0x140800ec3: push rax
	0x140800ec4: movabs rax, 0x3dafab26
	0x140800ece: push rdi
	0x140800ecf: movabs rdi, 0x3dafab2e
	0x140800ed9: xor rax, rdi
	0x140800edc: pop rdi
	0x140800edd: add rcx, rax
	0x140800ee0: pop rax
	0x140800ee1: xchg qword ptr [rsp], rcx
	0x140800ee5: pop rsp
	0x140800ee6: add r14, rdi
	0x140800ee9: pop rdi
	0x140800eea: push 0x28dbaebe
	0x140800eef: push 0x78a8644c
	0x140800ef4: push rbx
	0x140800ef5: pop qword ptr [rsp]
	0x140800ef8: pop qword ptr [rsp]
	0x140800efb: push rbp
	0x140800efc: push r10
	0x140800efe: movabs r10, 0x7fbc6e0f
	0x140800f08: movabs rbp, 0x7fbc6e17
	0x140800f12: sub rbp, r10
	0x140800f15: pop r10
	0x140800f17: mov rbx, rbp
	0x140800f1a: push qword ptr [rsp]
	0x140800f1d: pop rbp
	0x140800f1e: add rsp, 8
	0x140800f22: sub rsp, 8
	0x140800f29: push rax
	0x140800f2a: pop qword ptr [rsp]
	0x140800f2d: mov rax, 0
	0x140800f34: sub rax, 0x66df1d55
	0x140800f3a: add rax, r14
	0x140800f3d: add rax, 0x66df1d55
Load [EBP+0x145](STATIC)
bytecode=0x140942185
	0x140800f43: add qword ptr [rax], rbx
	0x140800f46: push qword ptr [rsp]
	0x140800f49: mov rax, qword ptr [rsp]
	0x140800f4d: add rsp, 8
	0x140800f54: push rax
	0x140800f55: mov rax, rsp
	0x140800f58: add rax, 8
	0x140800f5c: add rax, 8
	0x140800f62: xchg qword ptr [rsp], rax
	0x140800f66: pop rsp
	0x140800f67: push qword ptr [rsp]
	0x140800f6e: add rsp, 8
	0x140800f72: add rsp, 8
	0x140800f8a: ret 0
handlers outputs:



	0x140822908: mov r15, rbp
	0x14082290b: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140822912: mov r15, qword ptr [r15]
	0x140822915: add r15, 0xa
	0x14082291c: movzx r11, word ptr [r15]
	0x140822920: add r11, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140822923: mov r11, qword ptr [r11]
	0x140822926: or r14, r11
	0x140822929: pushfq
	0x140822952: pop r14
	0x140822954: mov rcx, rbp
	0x140822965: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140822976: mov rcx, qword ptr [rcx]
	0x140822979: add rcx, 2
	0x140822987: mov rbx, rbp
	0x14082299f: movzx rcx, word ptr [rcx]
	0x1408229a3: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408229b1: mov rbx, qword ptr [rbx]
	0x1408229be: mov r13, rbp
	0x1408229c8: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408229cf: sub ecx, dword ptr [r13]
	0x1408229d3: sub ecx, 0x555969b0
	0x1408229d9: mov r13, rbp
	0x1408229ea: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408229f8: add dword ptr [r13], ecx
	0x140822a03: and rcx, 0xffff
	0x140822a0d: shl rcx, 3
	0x140822a18: add rbx, rcx
	0x140822a25: mov r14, qword ptr [rbx]
	0x140822a28: mov rsi, rbp
	0x140822a2b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140822a40: mov qword ptr [rsi], r14
	0x140822a51: mov rsi, rbp
	0x140822a5b: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140822a77: mov rsi, qword ptr [rsi]
	0x140822a81: add rsi, 8
	0x140822a88: movzx r14, word ptr [rsi]
	0x140822a92: mov r11, 0xd5
	0x140822a99: mov r12, rbp
	0x140822a9f: add r12, 0xbf
	0x140822aa6: mov rax, 0x12
	0x140822aad: mov rax, rax
Load [EBP+0xbf](STATIC)
	0x140822ab7: xor r14d, dword ptr [r12]
	0x140822abb: and r11, rsi
	0x140822abe: mov r15, rbp
	0x140822ac1: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x140822ace: sub r14d, dword ptr [r15]
	0x140822ad1: or r11, 0x10
	0x140822ad8: add r11, 0x40
	0x140822adf: mov rdi, rbp
	0x140822ae2: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140822ae9: and dword ptr [rdi], r14d
	0x140822af3: mov rcx, rbp
	0x140822b00: add rcx, 0xa7
	0x140822b07: sub rax, -0x80000000
	0x140822b10: mov r15, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822b17: or dword ptr [rcx], 0x610385bd
	0x140822b1d: mov rdx, rbp
	0x140822b20: xor r15, 0xffffffff80000000
	0x140822b27: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140822b35: mov sil, byte ptr [rdx]
	0x140822b38: cmp sil, 0x79
	0x140822b3c: jbe 0x140822b49
	0x140822b42: add r14d, 0x7efb1b59
	0x140822b49: mov rbx, rbp
	0x140822b4c: mov r10, rax
	0x140822b4f: add rbx, 0x16e
	0x140822b56: or rax, 4
	0x140822b63: add r10, r15
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140822b66: add word ptr [rbx], r14w
	0x140822b71: mov rsi, r11
	0x140822b74: mov rbx, 0
	0x140822b7b: and rax, 0x20
	0x140822b81: add rdi, 0x10
	0x140822b88: mov r12, rbp
	0x140822b8b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140822b92: mov r12, qword ptr [r12]
	0x140822b96: sub rdi, rsi
	0x140822b99: sub r10, rdi
	0x140822b9c: add r12, 4
	0x140822ba3: and r10, rax
	0x140822ba9: mov bx, word ptr [r12]
	0x140822bb5: mov r14, rbp
	0x140822bc6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140822bcd: xor ebx, dword ptr [r14]
	0x140822c11: mov rdi, 0x200
	0x140822c39: mov rdx, rbp
	0x140822c3c: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140822c4a: and dword ptr [rdx], 0x7a049989
	0x140822c61: mov r14, rbp
	0x140822c64: add r14, 0xd6
	0x140822c6b: sub rdi, -0x80000000
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140822c72: sub word ptr [r14], bx
	0x140822c76: mov r14, rbp
	0x140822c79: add r14, 0x145
	0x140822c80: mov r8, rbp
Load [EBP+0x145](STATIC)
	0x140822c83: mov r14, qword ptr [r14]
	0x140822c86: mov rsi, rbp
	0x140822c89: mov r9, rbp
	0x140822c8c: add rsi, 0xd6
	0x140822c93: add r14, 6
	0x140822c9a: movzx rdx, word ptr [r14]
	0x140822c9e: add r8, 0x16e
	0x140822ca5: add rdx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x140822ca8: mov rdx, qword ptr [rdx]
	0x140822cab: add r9, 0xbf
Load [EBP+0x16e](STATIC)
	0x140822cb5: movzx r8, word ptr [r8]
	0x140822cb9: xor r8w, 0xa1b8
	0x140822cbf: xor r14, rdx
	0x140822cc2: add r8, rbp
Load [EBP+0xd6](STATIC)
	0x140822cc8: movzx rsi, word ptr [rsi]
	0x140822cd2: sub si, 0xabd3
	0x140822cda: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140822cdd: mov rsi, qword ptr [rsi]
Store VM_REG [EBP+0x14d]
	0x140822ce3: mov qword ptr [r8], rsi
	0x140822ce6: and rbx, 4
	0x140822ced: or r14, 8
	0x140822cf4: and rbx, 0xffffffff80000000
	0x140822cfb: xor r14, 0x800
	0x140822d02: mov rsi, rbp
	0x140822d05: add rsi, 0xfd
	0x140822d0c: mov r13, rbx
	0x140822d0f: sub rbx, 0x3f
	0x140822d16: mov r15, 0x200
Load [EBP+0xfd](STATIC)
	0x140822d1d: mov rax, qword ptr [rsi]
	0x140822d20: add r15, 0x800
	0x140822d27: push 0xb2585b2
	0x140822d2c: push r8
	0x140822d2e: mov r8, rsp
	0x140822d31: add r8, 8
	0x140822d35: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x80000200
	0x140822d39: mov qword ptr [rsp], rdi
	0x140822d3d: movabs rdi, 0x43ff9525
	0x140822d47: add rdi, -1
	0x140822d4b: push rax
	0x140822d4c: push 0x2f56e406
	0x140822d51: push rax
	0x140822d52: mov rax, r14
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: t2961
	0x140822d55: mov qword ptr [rsp + 8], rax
	0x140822d5a: pop rax
	0x140822d5b: movabs r14, 0x777ffc00
	0x140822d65: push 0x6a139df5
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x777ffc00
	0x140822d6a: mov qword ptr [rsp], r14
	0x140822d6e: pop rax
	0x140822d73: add rsp, 8
	0x140822d7a: add rdi, rax
	0x140822d7d: pop rax
	0x140822d7e: shr rdi, 3
	0x140822d82: push r13
	0x140822d84: movabs r13, 0x2bf9427e
	0x140822d8e: and rdi, r13
	0x140822d95: add rsp, 8
	0x140822d9c: xor rdi, 0x369422c
	0x140822da3: sub r8, rdi
	0x140822da6: pop rdi
	0x140822da7: push r8
	0x140822da9: push qword ptr [rsp + 8]
	0x140822dad: pop r8
	0x140822daf: pop qword ptr [rsp]
	0x140822db2: mov rsp, qword ptr [rsp]
	0x140822db6: push rax
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822db7: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x140822dba: pop qword ptr [rsp]
	0x140822dbd: add r15, 0x7fffffff
	0x140822ddc: mov rdi, 0
	0x140822de3: xor rbx, 0x88
	0x140822dea: mov r11, 0x12
	0x140822df1: mov rsi, 0
	0x140822df8: or rsi, 0x7fffffff
	0x140822dff: mov r10b, 0xa8
	0x140822e02: or r11, 4
	0x140822e09: mov rdx, rbp
	0x140822e0c: mov rcx, 0
	0x140822e13: sub rcx, r11
	0x140822e16: add rdx, 0x130
	0x140822e1d: and rsi, rdi
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140822e27: sub byte ptr [rdx], r10b
	0x140822e31: and rsi, 0x88
	0x140822e3f: or rcx, rdx
	0x140822e42: push 0x6007ca45
	0x140822e47: push 0x62e3132b
	0x140822e4c: sub rsp, 8
	0x140822e50: push 0xdfa5e8b
	0x140822e55: sub rsp, 8
	0x140822e59: mov qword ptr [rsp], rbp
	0x140822e5d: pop qword ptr [rsp]
	0x140822e60: pop qword ptr [rsp]
	0x140822e63: pop qword ptr [rsp]
	0x140822e66: pop qword ptr [rsp]
	0x140822e69: push qword ptr [rsp]
	0x140822e6c: push qword ptr [rsp]
	0x140822e6f: mov rax, qword ptr [rsp]
	0x140822e73: push rcx
	0x140822e74: mov rcx, rsp
	0x140822e77: add rcx, 8
	0x140822e7b: push rax
	0x140822e7c: movabs rax, 0x4fbf44fe
	0x140822e86: xor rax, 0x4fbf44f6
	0x140822e8c: add rcx, rax
	0x140822e8f: push qword ptr [rsp]
	0x140822e92: pop rax
	0x140822e93: add rsp, 8
	0x140822e97: xchg qword ptr [rsp], rcx
	0x140822e9b: pop rsp
	0x140822e9c: add rsp, 8
	0x140822ea0: add rsp, 8
	0x140822ea4: push 0x3cbc84ee
	0x140822ea9: mov qword ptr [rsp], rbx
	0x140822ead: movabs rbx, 0x5fdbb41a
	0x140822eb7: dec rbx
	0x140822eba: not rbx
	0x140822ebd: sub rsp, 8
	0x140822ec1: mov qword ptr [rsp], r15
	0x140822ec5: movabs r15, 0xcfb97b32
	0x140822ecf: add rbx, r15
	0x140822ed2: mov r15, qword ptr [rsp]
	0x140822ed6: add rsp, 8
	0x140822edd: shr rbx, 4
	0x140822ee1: add rbx, 1
	0x140822ee5: sub rsp, 8
	0x140822ee9: mov qword ptr [rsp], r15
	0x140822eed: push rbx
	0x140822eee: movabs rbx, 0x7f12fffd
	0x140822ef8: push rbp
	0x140822ef9: sub rsp, 8
	0x140822f00: mov qword ptr [rsp], rcx
	0x140822f04: movabs rcx, 0x3f766f73
	0x140822f0e: push rcx
	0x140822f0f: movabs rcx, 0x13477efb
	0x140822f19: movabs rbp, 0x62b9fc34
	0x140822f23: sub rbp, rcx
	0x140822f26: pop rcx
	0x140822f27: sub rbp, rcx
	0x140822f2e: add rsp, 8
	0x140822f35: xor rbx, rbp
	0x140822f38: pop rbp
	0x140822f39: xor rbx, 0x7fb748a1
	0x140822f40: xor rbx, 0x7be7a9d0
	0x140822f47: movabs r15, 0xe47de04a
	0x140822f51: sub r15, 0xfe813a
	0x140822f58: sub r15, rbx
	0x140822f5b: add r15, 0xfe813a
	0x140822f62: pop rbx
	0x140822f63: push rbx
	0x140822f64: movabs rbx, 0x6dfef5d4
	0x140822f6e: push r10
	0x140822f70: movabs r10, 0x1684d516
	0x140822f7a: xor rbx, r10
	0x140822f7d: pop r10
	0x140822f7f: xor r15, rbx
	0x140822f82: pop rbx
	0x140822f83: sub r15, -1
	0x140822f87: not r15
	0x140822f8a: push rax
	0x140822f8b: mov rax, -0x1bc3cafb
	0x140822f92: sub r15, rax
	0x140822f95: pop rax
	0x140822f96: xor rbx, r15
	0x140822f99: pop r15
	0x140822f9b: add rax, 0x7fba2242
	0x140822fa1: add rax, rbx
	0x140822fa4: sub rax, 0x7fba2242
	0x140822faa: pop rbx
	0x140822fb2: sub rsi, 0x40
	0x140822fb9: mov r12, 0x400
	0x140822fc7: push r10
	0x140822fc9: push r12
	0x140822fcb: movabs r12, 0x77cb61bc
	0x140822fd5: movabs r10, 0xffffffffa4347b7a
	0x140822fdf: sub r10, 0x7f15500
	0x140822fe6: add r10, r12
	0x140822fe9: add r10, 0x7f15500
	0x140822ff0: pop r12
	0x140822ff2: push r12
	0x140822ff4: movabs r12, 0x79f744cd
	0x140822ffe: neg r12
	0x140823001: xor r12, 0x6ffb2a2f
	0x140823008: push 0x7fb6f165
	0x14082300d: mov qword ptr [rsp], rdx
	0x140823011: movabs rdx, 0xffffffff72fd1eaa
	0x14082301b: sub r12, rdx
	0x14082301e: pop rdx
	0x14082301f: sub r10, 0xd33376d
	0x140823026: sub r10, r12
	0x140823029: add r10, 0xd33376d
	0x140823030: push qword ptr [rsp]
	0x140823037: add rsp, 8
	0x14082303e: add rsp, 8
	0x140823042: push rsi
	0x140823043: push rbx
	0x140823044: movabs rbx, 0x7cfffe31
	0x14082304e: movabs rsi, 0xf7fe3d47
	0x140823058: add rsi, 0xfbd8757
	0x14082305f: sub rsi, rbx
	0x140823062: sub rsi, 0xfbd8757
	0x140823069: pop rbx
	0x14082306a: sub r10, rsi
	0x14082306d: pop rsi
	0x14082306e: sub rsp, 8
	0x140823075: mov qword ptr [rsp], r9
	0x140823079: movabs r9, 0x76f7eb06
	0x140823083: neg r9
	0x140823086: sub r9, 0x7fe5e032
	0x14082308d: not r9
	0x140823090: neg r9
	0x140823093: push rdi
	0x140823094: movabs rdi, 0xfffffffe8e73aada
	0x14082309e: sub r9, rdi
	0x1408230a5: add rsp, 8
	0x1408230a9: add r10, r9
	0x1408230ac: pop r9
	0x1408230ae: push rbx
	0x1408230af: mov rbx, -0x5b464a6f
	0x1408230b6: sub r10, 0xf73b33a
	0x1408230bd: sub r10, 0xef59911
	0x1408230c4: sub r10, rbx
	0x1408230c7: add r10, 0xef59911
	0x1408230ce: add r10, 0xf73b33a
	0x1408230d9: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0xe2a491af
	0x1408230e0: sub qword ptr [rax], 0x5def8fd6
Load [EBP+0x145](STATIC)
bytecode=0xe2a491bb
	0x1408230e7: add qword ptr [rax], r10
Load [EBP+0x145](STATIC)
bytecode=0x140942191
	0x1408230ea: add qword ptr [rax], 0x5def8fd6
	0x1408230f5: add rsp, 8
	0x14082311b: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094219f
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x140831887: mov rax, rbp
	0x14083188a: mov rcx, rbp
	0x14083188d: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x1408318a2: mov rcx, qword ptr [rcx]
	0x1408318a5: add rax, 0x145
	0x1408318b9: mov rsi, 0x200
Load [EBP+0x145](STATIC)
	0x1408318c0: mov rax, qword ptr [rax]
	0x1408318d4: add rax, 0
	0x1408318eb: movzx rax, word ptr [rax]
	0x1408318ef: mov r10, 0x400
	0x140831911: or rsi, 4
	0x140831918: add r10, r10
	0x14083191b: mov rbx, rbp
	0x140831925: xor rsi, 0x400
	0x14083192c: and rsi, 0xffffffff80000000
	0x140831933: add rbx, 0xbf
	0x140831948: or rsi, 0x3f
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14083194f: xor dword ptr [rbx], eax
	0x140831951: and rax, 0xffff
	0x140831957: sub rsi, r10
	0x14083195a: and rsi, rax
	0x140831964: shl rax, 3
	0x140831968: add rcx, rax
	0x140831975: mov rax, qword ptr [rcx]
	0x140831978: mov rbx, 0xd5
	0x14083197f: mov r12, rbp
	0x140831982: or rsi, 0x400
	0x140831989: add r12, 0xfd
Store [EBP+0xfd](STATIC)
	0x140831990: mov qword ptr [r12], rax
	0x14083199b: and rcx, r12
	0x14083199e: mov r10, rbp
	0x1408319a7: add r10, 0x145
	0x1408319ae: and r13, 1
	0x1408319b5: mov r14, r12
Load [EBP+0x145](STATIC)
	0x1408319b8: mov r10, qword ptr [r10]
	0x1408319c5: add r10, 4
	0x1408319d3: movzx r12, word ptr [r10]
	0x1408319d7: mov rdx, rbp
	0x1408319e1: and rcx, 0x20
	0x1408319ef: add rdx, 0xbf
	0x1408319f6: and rcx, 0x88
	0x1408319fd: mov rdi, 1
Load [EBP+0xbf](STATIC)
	0x140831a04: sub r12d, dword ptr [rdx]
	0x140831a07: sub r14, r14
	0x140831a0d: and r14, 4
	0x140831a1a: mov r10, rbp
	0x140831a1d: or r14, rsi
	0x140831a27: add r10, 0xbf
	0x140831a2e: and rdi, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831a31: add dword ptr [r10], r12d
	0x140831a34: sub rdi, 0x10
	0x140831a42: xor r14, 0x10
	0x140831a49: mov r11, rbp
	0x140831a5a: add r11, 0xa7
	0x140831a61: xor rbx, 4
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831a68: sub dword ptr [r11], 0x4636dc37
	0x140831a6f: and r14, 0x3f
	0x140831a76: sub rbx, 0xf0
	0x140831a7d: mov rdx, rbp
	0x140831a80: sub rdi, rdi
	0x140831a83: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x140831a8a: mov sil, byte ptr [rdx]
	0x140831a8d: cmp sil, 0x5a
	0x140831a91: jbe 0x140831a9e
	0x140831a97: add r12d, 0x3f95bd85
	0x140831aa1: mov rsi, rbp
	0x140831aab: add rsi, 0x16e
	0x140831ab9: sub rbx, rdi
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140831ac3: add word ptr [rsi], r12w
	0x140831ac7: mov r15, 0x255578db
	0x140831ace: mov r10, rbp
	0x140831ad1: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831ad8: sub dword ptr [r10], r15d
	0x140831adb: add rbx, r14
	0x140831ade: add rbx, 0x20
	0x140831ae5: mov rcx, 0
	0x140831af3: sub r13, 0x80
	0x140831afa: mov r10, rbp
	0x140831b07: mov r8, 0xd5
	0x140831b0e: add r10, 0x145
	0x140831b15: mov r9, 0x400
Load [EBP+0x145](STATIC)
	0x140831b1c: mov r10, qword ptr [r10]
	0x140831b1f: mov rsi, 0x200
	0x140831b26: or rbx, 1
	0x140831b2d: add rsi, 0x40
	0x140831b34: add r10, 2
	0x140831b3b: sub r14, 0x400
	0x140831b42: and rbx, 0x90
	0x140831b49: and rsi, 0x3f
	0x140831b50: mov cx, word ptr [r10]
	0x140831b54: and rbx, 0x80
	0x140831b5b: add r14, rsi
	0x140831b5e: xor r13, 0x3f
	0x140831b65: mov r10, rbp
	0x140831b68: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x140831b6f: xor ecx, dword ptr [r10]
	0x140831b72: mov rax, rbp
	0x140831b7c: and r9, 0x80
	0x140831b83: add rbx, rbx
	0x140831b86: add rax, 0x120
	0x140831b8c: sub r13, r9
Load [EBP+0x120](STATIC)
	0x140831b99: add ecx, dword ptr [rax]
	0x140831ba2: mov rdx, rbp
	0x140831ba5: xor r14, rbx
	0x140831ba8: and r14, 0x80
	0x140831baf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140831bcb: add dword ptr [rdx], ecx
	0x140831bcd: mov r12, rbp
	0x140831bd0: sub r13, 1
	0x140831bda: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140831be1: add dword ptr [r12], 0x707911f3
	0x140831be9: mov r9, rbp
	0x140831bec: add r9, 0xd6
	0x140831bf3: add r14, 0x88
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140831bfa: sub word ptr [r9], cx
	0x140831c01: or rdx, 0x20
	0x140831c08: xor r9, 8
	0x140831c0f: mov rax, rbp
	0x140831c12: and r11, 0xf0
	0x140831c19: or r11, 4
	0x140831c20: sub rdx, r11
	0x140831c23: mov rdi, rbp
	0x140831c26: or r13, 4
	0x140831c2d: add rcx, rax
	0x140831c30: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x140831c37: movzx rdi, word ptr [rdi]
	0x140831c42: sub rcx, 8
	0x140831c49: add rax, 0xd6
	0x140831c4f: mov r15, 0x12
	0x140831c56: xor di, 0x7573
Load [EBP+0xd6](STATIC)
	0x140831c5b: movzx rax, word ptr [rax]
	0x140831c5f: sub ax, 0x7451
	0x140831c63: add rax, rbp
	0x140831c66: xor r15, r9
	0x140831c70: mov r9, 0
Load [EBP+0x14d](VM_REGISTER)
	0x140831c77: mov rax, qword ptr [rax]
	0x140831c7a: add rdx, 0x88
	0x140831c81: sub r9, rcx
	0x140831c84: and r9, 0xf0
	0x140831c8b: add rdi, rbp
Deref(t2966,ds)
	0x140831c91: mov rax, qword ptr [rax]
Store VM_REG [EBP+0xce]
	0x140831c94: mov qword ptr [rdi], rax
	0x140831c97: xor rdx, 0x20
	0x140831c9e: add r15, 0xf0
	0x140831cac: mov rsi, 0xd5
	0x140831cb3: sub rdx, 4
	0x140831cba: and r15, 0x20
	0x140831cc1: xor rsi, r8
	0x140831cc7: mov r12, 0
	0x140831cce: mov rdi, 0x12
	0x140831cd5: or rsi, 4
	0x140831cdc: add r12, 0x20
	0x140831ce3: or rdi, 8
	0x140831cea: mov r11, 1
	0x140831cf1: and rsi, r12
	0x140831cf4: and rdx, 0xf0
	0x140831cfb: and rdx, 0x40
	0x140831d02: mov rbx, rbp
	0x140831d05: add rbx, 0xfd
	0x140831d0c: and rdx, r8
Load [EBP+0xfd](STATIC)
	0x140831d0f: mov r10, qword ptr [rbx]
	0x140831d12: add rdx, 0x80
	0x140831d19: mov r8, r13
	0x140831d1c: mov rcx, 0x400
	0x140831d23: add rcx, rcx
	0x140831d26: sub rsp, 8
	0x140831d2a: push rbp
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140831d2b: pop qword ptr [rsp]
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x7bfe7bec + context) & 0xffffffffffffffff)
	0x140831d2e: add qword ptr [rsp], 0x7bfe7bec
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831d36: mov r13, qword ptr [rsp]
	0x140831d3a: add rsp, 8
	0x140831d3e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1a
	0x140831d42: mov qword ptr [rsp], rdi
	0x140831d46: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x800
	0x140831d4a: mov qword ptr [rsp], rcx
	0x140831d4e: movabs rcx, 0x799ea5ff
	0x140831d58: shr rcx, 1
	0x140831d5c: push r15
	0x140831d5e: movabs r15, 0xb8b935b
	0x140831d68: and r15, 0x7eb7516c
	0x140831d6f: xor r15, 0x4db2385b
	0x140831d76: xor rcx, r15
	0x140831d7d: add rsp, 8
	0x140831d81: mov rdi, rcx
	0x140831d84: pop rcx
	0x140831d85: sub r13, 0xe2ffdbe
	0x140831d8c: sub r13, 0x7dfff37
	0x140831d93: sub r13, rdi
	0x140831d96: add r13, 0x7dfff37
	0x140831d9d: add r13, 0xe2ffdbe
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140831da4: mov rdi, qword ptr [rsp]
	0x140831da8: sub rsp, 8
	0x140831dac: push r8
	0x140831dae: mov r8, r9
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((0x0) << 4 | ((((0xffffffff2bffc905 + ((0xffffffffffffffff * context) & 0xffffffffffffffff)) & 0xffffffffffffffff) >> 4) & 0xf)) << 4 | 0x0)
	0x140831db1: mov qword ptr [rsp + 8], r8
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140831db6: push qword ptr [rsp]
	0x140831db9: pop r8
	0x140831dbb: add rsp, 8
	0x140831dbf: mov r9, rsp
	0x140831dc2: add r9, 8
	0x140831dc6: add r9, 8
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dcd: xor r9, qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x1000
	0x140831dd1: xor qword ptr [rsp], r9
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140831dd9: mov rsp, qword ptr [rsp]
	0x140831de4: mov r15, 0x400
	0x140831deb: sub rsp, 8
	0x140831df2: mov qword ptr [rsp], rdx
	0x140831df6: mov rdx, rsp
	0x140831df9: add rdx, 8
	0x140831dfd: push 0x2d221d5a
	0x140831e02: mov qword ptr [rsp], rdi
	0x140831e06: movabs rdi, 8
	0x140831e10: sub rdx, rdi
unknown read addr: ff0 0xff0
	0x140831e13: mov rdi, qword ptr [rsp]
	0x140831e17: add rsp, 8
unknown read addr: ff8 0xff8
	0x140831e1b: xchg qword ptr [rsp], rdx
unknown read addr: ff8 0xff8
	0x140831e1f: mov rsp, qword ptr [rsp]
	0x140831e23: push r14
unknown read addr: ff0 0xff0
	0x140831e25: pop qword ptr [rsp]
	0x140831e28: movabs r14, 0x7efde3b5
	0x140831e32: dec r14
	0x140831e35: xor r14, 0x14da5629
	0x140831e3c: sub r14, 1
	0x140831e40: xor r14, 0x6a27b4d9
	0x140831e47: sub r13, 0x5ece19cb
	0x140831e4e: add r13, r14
	0x140831e51: add r13, 0x5ece19cb
unknown read addr: ff8 0xff8
	0x140831e58: push qword ptr [rsp]
	0x140831e5f: add rsp, 8
	0x140831e63: push rsi
	0x140831e64: mov rsi, rsp
	0x140831e67: add rsi, 8
	0x140831e6b: push rdi
	0x140831e6c: movabs rdi, 0x65ffae00
	0x140831e76: not rdi
	0x140831e79: sub rdi, 0x5bf7bcdc
	0x140831e80: push r10
	0x140831e82: movabs r10, 0xc1f76ae5
	0x140831e8c: add rdi, r10
	0x140831e8f: pop r10
	0x140831e91: add rsi, rdi
	0x140831e94: pop rdi
	0x140831e95: sub rsp, 8
	0x140831e99: mov qword ptr [rsp], rsi
	0x140831e9d: push qword ptr [rsp + 8]
	0x140831ea1: mov rsi, qword ptr [rsp]
	0x140831ea5: add rsp, 8
	0x140831eac: pop qword ptr [rsp]
	0x140831eaf: pop rsp
	0x140831eb7: push 0x4708252a
	0x140831ebc: push rbx
	0x140831ebd: pop qword ptr [rsp]
	0x140831ec0: push r11
	0x140831ec2: sub rsp, 8
	0x140831ec6: mov qword ptr [rsp], rax
	0x140831eca: movabs rax, 0x7767c9b6
	0x140831ed4: movabs r11, 0xc8fbef9
	0x140831ede: xor r11, rax
	0x140831ee5: push rdi
	0x140831ee6: mov rdi, rsp
	0x140831ee9: add rdi, 8
	0x140831eed: add rdi, 8
	0x140831ef4: xchg qword ptr [rsp], rdi
	0x140831ef8: pop rsp
	0x140831ef9: mov rbx, r11
	0x140831f00: add rsp, 8
	0x140831f07: xchg rbx, r12
	0x140831f0a: push r12
	0x140831f0c: not qword ptr [rsp]
	0x140831f10: pop r12
	0x140831f12: xchg rbx, r12
	0x140831f15: shr rbx, 2
	0x140831f19: push r12
	0x140831f1b: movabs r12, 0x27df7d1e
	0x140831f25: and r12, 0x5e9f7e8c
	0x140831f2c: shl r12, 3
	0x140831f30: add r12, -1
	0x140831f34: and r12, 0x3effb6c6
	0x140831f3b: xor r12, 0xb8ee917
	0x140831f42: add rbx, r12
	0x140831f49: add rsp, 8
	0x140831f4d: sub rsp, 8
	0x140831f54: push r15
	0x140831f56: mov r15, rsi
	0x140831f59: push r15
	0x140831f5b: pop qword ptr [rsp + 8]
	0x140831f63: add rsp, 8
	0x140831f67: movabs rsi, 0xbfffffffdf84d489
	0x140831f71: add rbx, 0x77bf8510
	0x140831f78: add rbx, rsi
	0x140831f7b: sub rbx, 0x77bf8510
	0x140831f82: pop rsi
Load [EBP+0x145](STATIC)
bytecode=0x1409421a5
	0x140831f83: add qword ptr [r13], rbx
	0x140831f8b: add rsp, 8
	0x140831f8f: xor r10, 0x594d5d99
	0x140831f96: push r10
	0x140831ff5: pop r9
	0x140831ff7: xor r9, 0x594d5d99
	0x140831ffe: jmp r9
handlers outputs:



	0x1407ec587: mov r15, 0
	0x1407ec58e: mov r10, rbp
	0x1407ec591: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec598: mov r10, qword ptr [r10]
	0x1407ec59b: add r10, 0xa
	0x1407ec5a2: mov r15w, word ptr [r10]
	0x1407ec5a6: add r15, rbp
	0x1407ec5a9: mov r10, 0
	0x1407ec5b0: mov r13, rbp
	0x1407ec5b3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5ba: mov r13, qword ptr [r13]
	0x1407ec5be: add r13, 8
	0x1407ec5c5: mov r10w, word ptr [r13]
	0x1407ec5ca: add r10, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407ec5cd: push qword ptr [r15]
Load [EBP+0x5c](VM_REGISTER)
	0x1407ec5d0: push qword ptr [r10]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x1407ec5d3: pop qword ptr [r15]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x1407ec5d6: pop qword ptr [r10]
	0x1407ec5d9: mov r13, rbp
	0x1407ec5e3: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec5f4: mov r13, qword ptr [r13]
	0x1407ec605: add r13, 6
	0x1407ec60f: movzx r12, word ptr [r13]
	0x1407ec61b: mov r15, rbp
	0x1407ec628: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec62f: sub r12d, dword ptr [r15]
	0x1407ec63c: mov rax, rbp
	0x1407ec642: add rax, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407ec648: xor r12d, dword ptr [rax]
	0x1407ec655: mov r10, rbp
	0x1407ec666: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec66d: sub dword ptr [r10], r12d
	0x1407ec677: mov rax, rbp
	0x1407ec67a: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec68a: add dword ptr [rax], 0x34acd0d9
	0x1407ec690: mov rcx, rbp
	0x1407ec6a1: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x1407ec6af: mov r14b, byte ptr [rcx]
	0x1407ec6b2: cmp r14b, 0x31
	0x1407ec6b6: jbe 0x1407ec6d1
	0x1407ec6c3: sub r12d, 0x4faaff32
	0x1407ec6d1: mov rdx, rbp
	0x1407ec6db: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407ec6ec: xor word ptr [rdx], r12w
	0x1407ec6f0: mov r13, rbp
	0x1407ec6fa: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec704: mov r13, qword ptr [r13]
	0x1407ec712: add r13, 0
	0x1407ec720: mov r12d, dword ptr [r13]
	0x1407ec731: mov rax, rbp
	0x1407ec734: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec744: xor r12d, dword ptr [rax]
	0x1407ec781: mov rdx, rbp
	0x1407ec784: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec792: xor dword ptr [rdx], r12d
	0x1407ec798: mov rdi, rbp
	0x1407ec79b: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407ec7a5: or dword ptr [rdi], 0x56aa0b47
	0x1407ec7c0: mov r11, rbp
	0x1407ec7d1: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407ec7ed: add dword ptr [r11], r12d
	0x1407ec7f0: mov r14, rbp
	0x1407ec804: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407ec812: xor dword ptr [r14], r12d
	0x1407ec81c: mov rax, rbp
	0x1407ec81f: mov r10, 0
	0x1407ec82d: mov r14, rbp
	0x1407ec83e: add r14, 0xab
	0x1407ec845: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ec860: mov rax, qword ptr [rax]
	0x1407ec86a: add rax, 4
	0x1407ec885: movzx rax, word ptr [rax]
	0x1407ec889: mov r8, 0
Load [EBP+0xab](STATIC)
	0x1407ec890: mov r14, qword ptr [r14]
	0x1407ec893: mov rsi, rbp
	0x1407ec896: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407ec8a4: sub eax, dword ptr [rsi]
	0x1407ec8b4: xor r8, 4
	0x1407ec8bb: xor eax, 0x19b980fc
	0x1407ec8d1: mov rdx, rbp
	0x1407ec8d4: add rdx, 0xbf
	0x1407ec8db: xor r8, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407ec8e2: or dword ptr [rdx], eax
	0x1407ec8e4: mov r11, r10
	0x1407ec8ee: and rax, 0xffff
	0x1407ec8f4: sub r8, rax
	0x1407ec8f7: mov rcx, r10
	0x1407ec8fa: shl rax, 3
	0x1407ec8fe: xor r11, 8
	0x1407ec905: add r14, rax
	0x1407ec908: mov r10, qword ptr [r14]
	0x1407ec90b: mov rbx, rbp
	0x1407ec90e: add rbx, 0xfd
	0x1407ec91c: xor r11, 1
Store [EBP+0xfd](STATIC)
	0x1407ec923: mov qword ptr [rbx], r10
	0x1407ec926: mov r9, 0x200
	0x1407ec92d: xor rdx, rbx
	0x1407ec930: mov r14, rbp
	0x1407ec933: or r8, 0x20
	0x1407ec93a: xor r9, 0x7fffffff
	0x1407ec944: mov r15, rbp
	0x1407ec947: sub rdx, 0x40
	0x1407ec955: add r15, 0x58
	0x1407ec95c: xor r11, rcx
	0x1407ec962: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407ec972: movzx r14, word ptr [r14]
Load [EBP+0x58](STATIC)
	0x1407ec976: mov r15d, dword ptr [r15]
	0x1407ec979: sub r15d, 0x310f47f5
	0x1407ec983: mov rax, r15
	0x1407ec986: sub r14w, 0xfb81
	0x1407ec993: add r14, rbp
Store VM_REG [EBP+0x14d]
	0x1407ec9a4: mov qword ptr [r14], r15
	0x1407ec9ae: mov r10, 0x200
	0x1407ec9b5: xor r10, 0x40
	0x1407ec9d1: or r10, 8
	0x1407ec9db: mov rsi, 0x400
	0x1407eca05: mov rbx, 1
	0x1407eca0f: or rsi, 0xffff
	0x1407eca16: mov rdi, r10
	0x1407eca19: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x0
	0x1407eca1d: mov qword ptr [rsp], rcx
	0x1407eca21: push 0x23c39100
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x1407eca26: mov qword ptr [rsp], rbp
	0x1407eca2a: push rdi
	0x1407eca2b: movabs rdi, 0x4bef41e7
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x4bef41e7 + context) & 0xffffffffffffffff)
	0x1407eca35: add qword ptr [rsp + 8], rdi
	0x1407eca3a: pop rdi
	0x1407eca3b: pop rcx
	0x1407eca3c: sub rcx, 0x4bef41e7
	0x1407eca43: push 0x6d044fc2
	0x1407eca48: push r8
	0x1407eca4a: mov r8, rsp
	0x1407eca4d: add r8, 8
	0x1407eca51: push rcx
	0x1407eca52: movabs rcx, 0x4dfad9d6
	0x1407eca5c: not rcx
	0x1407eca5f: push r8
	0x1407eca61: mov r8, 0x4dfad9df
	0x1407eca68: add rcx, r8
	0x1407eca6b: pop r8
	0x1407eca6d: sub r8, rcx
	0x1407eca70: pop rcx
	0x1407eca71: xchg qword ptr [rsp], r8
	0x1407eca75: mov rsp, qword ptr [rsp]
	0x1407eca79: sub rsp, 8
	0x1407eca7d: push rbp
	0x1407eca7e: pop qword ptr [rsp]
	0x1407eca81: pop qword ptr [rsp]
	0x1407eca84: pop qword ptr [rsp]
	0x1407eca87: push rbx
	0x1407eca88: push rcx
	0x1407eca89: pop rbx
	0x1407eca8a: mov rbp, rbx
	0x1407eca8d: pop rbx
	0x1407eca8e: push rbp
	0x1407eca8f: sub qword ptr [rsp], 0x5f4dcc71
	0x1407eca97: mov r8, qword ptr [rsp]
	0x1407eca9b: add rsp, 8
	0x1407ecaa2: add r8, 0x5f4dcc71
	0x1407ecaa9: mov rbp, qword ptr [rsp]
	0x1407ecaad: add rsp, 8
	0x1407ecab1: pop rcx
	0x1407ecab2: sub rsi, 0x88
	0x1407ecab9: add rsi, 0x20
	0x1407ecac0: push r10
	0x1407ecac2: push rsi
	0x1407ecac3: push rbx
	0x1407ecac4: push rsp
	0x1407ecac5: pop rbx
	0x1407ecac6: add rbx, 8
	0x1407ecaca: sub rbx, 8
	0x1407ecad1: xchg qword ptr [rsp], rbx
	0x1407ecad5: pop rsp
	0x1407ecad6: mov qword ptr [rsp], rbx
	0x1407ecada: push 0x31b62587
	0x1407ecadf: mov qword ptr [rsp], r8
	0x1407ecae3: movabs r8, 0x77f9f5ee
	0x1407ecaed: sub rsp, 8
	0x1407ecaf1: mov qword ptr [rsp], r11
	0x1407ecaf5: movabs r11, 0x6ffb5392
	0x1407ecaff: shl r11, 7
	0x1407ecb03: and r11, 0x76f7a183
	0x1407ecb0a: dec r11
	0x1407ecb0d: push r9
	0x1407ecb0f: mov r9, 0x78e6b6ed
	0x1407ecb16: sub r11, r9
	0x1407ecb19: pop r9
	0x1407ecb1b: mov rbx, r11
	0x1407ecb1e: pop r11
	0x1407ecb20: add rbx, r8
	0x1407ecb23: pop r8
	0x1407ecb25: push rbx
	0x1407ecb26: pop rsi
	0x1407ecb27: push qword ptr [rsp]
	0x1407ecb2a: mov rbx, qword ptr [rsp]
	0x1407ecb2e: add rsp, 8
	0x1407ecb32: push rbx
	0x1407ecb33: mov rbx, rsp
	0x1407ecb36: add rbx, 8
	0x1407ecb3a: add rbx, 8
	0x1407ecb41: xchg qword ptr [rsp], rbx
	0x1407ecb45: pop rsp
	0x1407ecb46: movabs r10, 0xeba43340
	0x1407ecb50: sub r10, rsi
	0x1407ecb53: mov rsi, qword ptr [rsp]
	0x1407ecb57: add rsp, 8
	0x1407ecb5b: add r10, -1
	0x1407ecb5f: dec r10
	0x1407ecb62: inc r10
	0x1407ecb65: and r10, 0x76f6abf0
	0x1407ecb6c: shl r10, 3
	0x1407ecb70: push rcx
	0x1407ecb71: movabs rcx, 0x3b731183b
	0x1407ecb7b: sub r10, rcx
	0x1407ecb7e: pop rcx
	0x1407ecb7f: sub r8, 0x64bbea81
	0x1407ecb86: add r8, r10
	0x1407ecb89: add r8, 0x64bbea81
	0x1407ecb90: push qword ptr [rsp]
	0x1407ecb93: pop r10
	0x1407ecb95: add rsp, 8
	0x1407ecba0: add rdi, 0x7fffffff
	0x1407ecba7: and rsi, 0xf0
	0x1407ecbae: push rsi
	0x1407ecbaf: movabs rsi, 0x4ebf22cc
	0x1407ecbb9: not rsi
	0x1407ecbbc: push r15
	0x1407ecbbe: movabs r15, 0x5fea8592
	0x1407ecbc8: add rsi, r15
	0x1407ecbcb: pop r15
	0x1407ecbcd: xor rsi, 0x5ffb70e6
	0x1407ecbd4: push rax
	0x1407ecbd5: movabs rax, 0x776f28e0
	0x1407ecbdf: push rdx
	0x1407ecbe0: movabs rdx, 0x5db69e5a
	0x1407ecbea: add rax, rdx
	0x1407ecbed: pop rdx
	0x1407ecbee: add rax, 1
	0x1407ecbf2: neg rax
	0x1407ecbf5: shl rax, 7
	0x1407ecbf9: xor rax, 0x7f2dfa00
	0x1407ecbff: sub rsp, 8
	0x1407ecc03: mov qword ptr [rsp], rdi
	0x1407ecc07: movabs rdi, 0xffffff94c3618651
	0x1407ecc11: sub rax, rdi
	0x1407ecc14: pop rdi
	0x1407ecc15: xor rsi, rax
	0x1407ecc18: pop rax
	0x1407ecc19: sub rsp, 8
	0x1407ecc1d: mov qword ptr [rsp], r11
	0x1407ecc21: push rdx
	0x1407ecc22: push 0x7b5764e4
	0x1407ecc27: mov rdx, qword ptr [rsp]
	0x1407ecc2b: add rsp, 8
	0x1407ecc2f: not rdx
	0x1407ecc32: inc rdx
	0x1407ecc35: shl rdx, 2
	0x1407ecc39: add edx, 0xed5d9390
	0x1407ecc3f: push 0x32dacacd
	0x1407ecc44: push r8
	0x1407ecc46: pop qword ptr [rsp]
	0x1407ecc49: mov r8, rdx
	0x1407ecc4c: mov r11, r8
	0x1407ecc4f: mov r8, qword ptr [rsp]
	0x1407ecc53: sub rsp, 8
	0x1407ecc5a: mov qword ptr [rsp], rdx
	0x1407ecc5e: mov rdx, rsp
	0x1407ecc61: add rdx, 8
	0x1407ecc65: add rdx, 8
	0x1407ecc6c: xchg qword ptr [rsp], rdx
	0x1407ecc70: pop rsp
	0x1407ecc71: mov rdx, qword ptr [rsp]
	0x1407ecc75: push r9
	0x1407ecc77: mov r9, rsp
	0x1407ecc7a: add r9, 8
	0x1407ecc7e: add r9, 8
	0x1407ecc85: xchg qword ptr [rsp], r9
	0x1407ecc89: pop rsp
	0x1407ecc8a: add r11, r8
	0x1407ecc8d: push rdx
	0x1407ecc8e: mov rdx, 0
	0x1407ecc95: add rdx, r11
Load [EBP+0x145](STATIC)
bytecode=0x1409421b1
	0x1407ecc98: add qword ptr [rdx], rsi
	0x1407ecc9b: pop rdx
	0x1407ecc9c: pop r11
	0x1407ecc9e: pop rsi
	0x1407ecca6: mov r10, rbp
	0x1407eccb0: add r10, 0xfd
Load [EBP+0xfd](STATIC)
	0x1407eccc5: mov r15, qword ptr [r10]
	0x1407eccd9: sub r15, 0x5f3b81ea
	0x1407ecce7: push r15
	0x1407ecd07: pop rcx
	0x1407ecd08: add rcx, 0x5f3b81ea
	0x1407ecd0f: jmp rcx
handlers outputs:



	0x140774b02: mov r14, 0
	0x140774b09: mov rax, rbp
	0x140774b0c: mov r13, rbp
	0x140774b0f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774b16: sub dword ptr [r13], 0x52a82941
	0x140774b21: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140774b27: mov rax, qword ptr [rax]
	0x140774b31: add rax, 4
	0x140774b37: mov r14w, word ptr [rax]
	0x140774b3b: add r14, rbp
	0x140774b3e: mov r15, 0
	0x140774b45: mov rsi, rbp
	0x140774b48: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140774b4f: mov rsi, qword ptr [rsi]
	0x140774b52: add rsi, 8
	0x140774b59: mov r15w, word ptr [rsi]
	0x140774b5d: add r15, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140774b60: push qword ptr [r14]
Load [EBP+0x15d](VM_REGISTER)
	0x140774b63: push qword ptr [r15]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140774b66: pop qword ptr [r14]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140774b69: pop qword ptr [r15]
	0x140774b6c: mov r8, 0
	0x140774b73: mov r13, rbp
	0x140774b76: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140774b7d: mov r13, qword ptr [r13]
	0x140774b84: add r13, 6
	0x140774b8b: mov r8w, word ptr [r13]
	0x140774b90: add r8, rbp
	0x140774b99: mov r15, 0
	0x140774ba0: mov rdi, rbp
	0x140774ba3: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140774baa: mov rdi, qword ptr [rdi]
	0x140774bad: add rdi, 0xe
	0x140774bb4: mov r15w, word ptr [rdi]
	0x140774bb8: mov rax, rbp
	0x140774bbb: add r15, rbp
	0x140774bbe: add rax, 0xa7
Load [EBP+0xb7](VM_REGISTER)
	0x140774bc4: push qword ptr [r8]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774bc7: add dword ptr [rax], 0x60a0de21
Load [EBP+0x15d](VM_REGISTER)
	0x140774bcd: push qword ptr [r15]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140774bd0: pop qword ptr [r8]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140774bd3: pop qword ptr [r15]
	0x140774bdd: mov r10, rbp
	0x140774bec: mov r8, rbp
	0x140774bef: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140774bfd: mov r8, qword ptr [r8]
	0x140774c15: add r10, 0x145
	0x140774c26: add r8, 0xa
Load [EBP+0x145](STATIC)
	0x140774c42: mov r10, qword ptr [r10]
	0x140774c45: movzx rbx, word ptr [r8]
	0x140774c57: add r10, 2
	0x140774c5e: mov r14, rbp
	0x140774c64: movzx rax, word ptr [r10]
	0x140774c76: add rax, rbp
	0x140774c79: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774c80: add ebx, dword ptr [r14]
Load [EBP+0x64](VM_REGISTER)
	0x140774c98: mov rax, qword ptr [rax]
	0x140774c9b: or r9, rax
	0x140774c9e: pushfq
	0x140774cad: mov r8, rbp
	0x140774cc7: add r8, 0xf0
Load [EBP+0xf0](STATIC)
	0x140774cce: add ebx, dword ptr [r8]
	0x140774ce2: mov rax, rbp
	0x140774cf3: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774d11: add dword ptr [rax], ebx
	0x140774d3a: mov rax, rbp
	0x140774d44: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774d54: and dword ptr [rax], 0x105d0f2e
	0x140774d83: mov r13, rbp
	0x140774d8d: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x140774da9: mov dil, byte ptr [r13]
	0x140774dad: cmp dil, 0x29
	0x140774db1: jbe 0x140774dd6
	0x140774deb: mov r11, rbp
	0x140774df5: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140774dff: sub word ptr [r11], bx
	0x140774e18: pop r9
	0x140774e24: mov r10, rbp
	0x140774e35: mov rdx, rbp
	0x140774e38: add r10, 0x16e
	0x140774e3f: add rdx, 0xbf
Load [EBP+0x16e](STATIC)
	0x140774e49: movzx rsi, word ptr [r10]
	0x140774e4d: sub si, 0x47b2
	0x140774e52: add rsi, rbp
	0x140774e55: mov r8, rbp
	0x140774e5e: add r8, 0x18
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774e65: and dword ptr [rdx], 0x2327d8d0
	0x140774e6e: mov r10, rbp
Load [EBP+0x18](STATIC)
	0x140774e71: mov r14, qword ptr [r8]
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x140774e74: add qword ptr [rsi], r14
	0x140774e7e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140774e93: or dword ptr [r10], 0x3783020c
	0x140774ebc: mov dl, 0xd6
	0x140774ecc: mov r9, rbp
	0x140774ed2: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140774ee7: xor byte ptr [r9], dl
	0x140774efe: mov rcx, rbp
	0x140774f01: mov rdx, rbp
	0x140774f04: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140774f0e: mov rcx, qword ptr [rcx]
	0x140774f17: add rdx, 0xab
	0x140774f1e: add rcx, 0xc
	0x140774f32: movzx rcx, word ptr [rcx]
Load [EBP+0xab](STATIC)
	0x140774f36: mov rdx, qword ptr [rdx]
	0x140774f4e: mov r12, rbp
	0x140774f5e: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x140774f73: add ecx, dword ptr [r12]
	0x140774f81: xor ecx, 0x41f4abe6
	0x140774f87: mov rsi, rbp
	0x140774f8a: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140774f98: sub dword ptr [rsi], ecx
	0x140774fa1: and rcx, 0xffff
	0x140774fbc: shl rcx, 3
	0x140774fce: add rdx, rcx
	0x140774fd1: mov r9, qword ptr [rdx]
	0x140774fde: mov r12, rbp
	0x140774fe1: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421c1
	0x140774fe8: add qword ptr [r12], 0x10
	0x140774ff0: jmp r9
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421cf
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421d5
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421db
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421e5
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421eb
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421f1
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421f7
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409421fd
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x131](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942203
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942209
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094220f
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942217
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094221d
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942225
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094222d
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942235
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094223b
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x10](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942243
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094224b
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094226d
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942287
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942289
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



basic block ends with ret
	0x1407d43fc: mov r11, 0
	0x1407d4403: mov r13, rbp
	0x1407d4406: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407d440d: mov r13, qword ptr [r13]
	0x1407d4411: add r13, 6
	0x1407d4418: mov r11w, word ptr [r13]
	0x1407d441d: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1407d4420: mov r11, qword ptr [r11]
Deref(t3092,ds)
	0x1407d4423: mov r11, qword ptr [r11]
	0x1407d4426: mov rdx, 0
	0x1407d442d: mov rbx, rbp
	0x1407d4430: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407d4437: mov rbx, qword ptr [rbx]
	0x1407d443a: add rbx, 4
	0x1407d4441: mov dx, word ptr [rbx]
	0x1407d4444: add rdx, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: t3093
	0x1407d4447: mov qword ptr [rdx], r11
	0x1407d444a: add rdx, 8
	0x1407d4451: mov r15, 0
	0x1407d4458: mov r8, rbp
	0x1407d445b: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407d4462: mov r8, qword ptr [r8]
	0x1407d4465: add r8, 0
	0x1407d446c: mov r15d, dword ptr [r8]
	0x1407d446f: mov rsi, rbp
	0x1407d4472: add rsi, 0x18
Load [EBP+0x18](STATIC)
	0x1407d4479: add r15, qword ptr [rsi]
unknown store addr: 1088, lea_ast: ((0x88 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140942c82
	0x1407d447c: mov qword ptr [rdx], r15
	0x1407d447f: mov r12, rbp
	0x1407d4482: add r12, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x1407d4489: mov dword ptr [r12], 0
	0x1407d4491: pop r8
	0x1407d4493: pop r9
	0x1407d4495: pop r10
	0x1407d4497: pop r11
	0x1407d4499: pop r12
	0x1407d449b: pop r13
	0x1407d449d: pop r14
	0x1407d449f: pop r15
	0x1407d44a1: pop rdi
	0x1407d44a2: pop rsi
	0x1407d44a3: pop rbp
	0x1407d44a4: pop rbx
	0x1407d44a5: pop rdx
	0x1407d44a6: pop rcx
	0x1407d44a7: pop rax
	0x1407d44a8: popfq
	0x1407d44a9: ret 0
ret handler 0, 140942c82
handlers outputs:



basic block ends with indirect unconditional branch
lock cmpxchg
	rbp=0x14076562d
	0x14089dc6f: lock cmpxchg dword ptr [rbx + rbp], ecx
[0x14076564d]=0x0
[0x140765645]=0x140000000
[0x1407656cc]=0x0
[0x140765772]=0x13c4a0791
[0x140765772]=0x140942291
[rbp+0x18]=0x140000000 <- module base
[rbp+0x20]=0x0 <- lock
[rbp+0x9f]=0x0 <- module base
[rbp+0x145]=0x140942291 <- ByteCode
	0x1408775a6: mov rsi, rbp
	0x1408775a9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408775b0: mov rsi, qword ptr [rsi]
	0x1408775b3: add rsi, 0
	0x1408775ba: mov edx, dword ptr [rsi]
	0x1408775bc: mov rcx, rbp
	0x1408775bf: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408775c6: or dword ptr [rcx], edx
	0x1408775d6: mov r15, rbp
	0x1408775d9: add r15, 0xbf
Store [EBP+0xbf](STATIC)
	0x1408775e0: mov dword ptr [r15], 0
	0x1408775f8: mov rdi, rbp
	0x140877609: add rdi, 0x93
Store [EBP+0x93](STATIC)
	0x14087761a: mov dword ptr [rdi], 0
	0x140877620: mov r9, rbp
	0x140877626: add r9, 0x120
Store [EBP+0x120](STATIC)
	0x14087763b: mov dword ptr [r9], 0
	0x140877645: mov r13, rbp
	0x140877658: add r13, 0xf0
Store [EBP+0xf0](STATIC)
	0x14087765f: mov dword ptr [r13], 0
	0x14087767c: mov rdx, rbp
	0x140877689: add rdx, 0x24
Store [EBP+0x24](STATIC)
	0x1408776a5: mov word ptr [rdx], 0
	0x1408776b8: mov rax, rbp
	0x1408776c9: add rax, 0xa7
Store [EBP+0xa7](STATIC)
	0x1408776dd: mov dword ptr [rax], 0
	0x1408776f1: mov rcx, rbp
	0x1408776fb: add rcx, 0x16e
Store [EBP+0x16e](STATIC)
	0x140877702: mov word ptr [rcx], 0
	0x14087770e: mov rax, rbp
	0x140877711: add rax, 0x58
Store [EBP+0x58](STATIC)
	0x140877717: mov dword ptr [rax], 0
	0x14087772b: mov r10, rbp
	0x140877735: add r10, 0xb3
Store [EBP+0xb3](STATIC)
	0x14087773c: mov dword ptr [r10], 0
	0x140877751: mov rcx, rbp
	0x140877762: add rcx, 0xd6
Store [EBP+0xd6](STATIC)
	0x140877769: mov word ptr [rcx], 0
	0x14087776e: mov rbx, rbp
	0x140877771: add rbx, 0x130
Store [EBP+0x130](STATIC)
	0x14087777f: mov byte ptr [rbx], 0
	0x140877782: mov rbx, rbp
	0x140877785: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14087778c: sub dword ptr [rbx], 0x56b76a51
	0x140877792: mov rax, rbp
	0x140877795: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14087779b: xor dword ptr [rax], 0x698ce172
	0x1408777c4: mov r10, 0
	0x1408777ce: mov rdx, rbp
	0x1408777d4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408777db: mov rdx, qword ptr [rdx]
	0x1408777de: add rdx, 4
	0x1408777f2: mov r10w, word ptr [rdx]
	0x140877804: shl r10, 3
	0x140877815: mov r13, rbp
	0x140877818: add r13, 0xab
Load [EBP+0xab](STATIC)
	0x140877826: mov r14, qword ptr [r13]
	0x140877831: add r14, r10
	0x140877834: mov rsi, qword ptr [r14]
	0x14087783e: mov r14, rbp
	0x14087784f: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942297
	0x140877856: add qword ptr [r14], 6
	0x14087785d: jmp rsi
handlers outputs:



	0x1408437d8: mov r9, rbp
	0x1408437db: add r9, 0x120
	0x1408437f5: mov rdx, rbp
	0x140843808: add rdx, 0x145
	0x14084380f: add r14, 0x800
Load [EBP+0x145](STATIC)
	0x140843816: mov rdx, qword ptr [rdx]
	0x140843819: add rdx, 2
	0x140843820: or r14, r9
	0x14084382a: movzx r9, word ptr [rdx]
	0x14084382e: add r9, rbp
Store VM_REG [EBP+0x2e]
	0x140843831: mov qword ptr [r9], rsp
	0x140843834: mov r15, rbp
	0x140843837: mov r13, rbp
	0x14084383a: add r13, 0x145
	0x140843841: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140843848: mov r15, qword ptr [r15]
	0x14084384b: add r15, 4
Load [EBP+0x145](STATIC)
	0x140843852: mov r13, qword ptr [r13]
	0x140843856: add r13, 0xc
	0x14084385d: movzx r8, word ptr [r15]
	0x140843861: mov edi, dword ptr [r13]
	0x140843865: add r8, rbp
	0x140843868: mov r10, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14084386b: mov r8, qword ptr [r8]
	0x14084386e: add r10, 0xbf
	0x140843875: xor r14, r8
	0x140843878: pushfq
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140843880: and dword ptr [r10], edi
	0x1408438a5: pop r14
	0x1408438a7: mov r9, rbp
	0x1408438aa: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408438b1: mov r9, qword ptr [r9]
	0x1408438b4: add r9, 8
	0x1408438bb: mov ecx, dword ptr [r9]
	0x1408438be: mov r15, rbp
	0x1408438c1: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408438c8: sub dword ptr [r15], ecx
	0x1408438ce: mov r14, 0
	0x1408438d8: mov r15, rbp
	0x1408438de: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408438f3: mov r15, qword ptr [r15]
	0x14084390b: add r15, 0
	0x140843927: mov r14w, word ptr [r15]
	0x140843943: shl r14, 3
	0x14084394e: mov r12, rbp
	0x140843962: add r12, 0xab
Load [EBP+0xab](STATIC)
	0x140843970: mov rbx, qword ptr [r12]
	0x140843982: add rbx, r14
	0x140843985: mov rdx, qword ptr [rbx]
	0x140843988: mov r8, rbp
	0x1408439a0: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422a7
	0x1408439a7: add qword ptr [r8], 0x10
	0x1408439ae: jmp rdx
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x97]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422af
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xe0]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422bd
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0xc3]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422cb
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x105]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422d9
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422e1
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x5c]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422ef
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x7a]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409422fd
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x10d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942305
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x15d]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094230d
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xce]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942315
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x131]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942323
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x155]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942331
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0x155]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942339
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x1407f88c8: mov r15, rbp
	0x1407f88cb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407f88d9: mov r15, qword ptr [r15]
	0x1407f88e3: add r15, 2
	0x1407f88ed: movzx rbx, word ptr [r15]
	0x1407f88fe: mov r10, rbp
	0x1407f8908: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8923: xor ebx, dword ptr [r10]
	0x1407f892d: mov r9, rbp
	0x1407f8930: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407f8941: xor ebx, dword ptr [r9]
	0x1407f8985: mov rcx, rbp
	0x1407f8999: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407f89a9: xor dword ptr [rcx], 0xd4e9563
	0x1407f89b9: mov r13, rbp
	0x1407f89c5: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407f89da: mov r14b, byte ptr [r13]
	0x1407f89de: cmp r14b, 0xc2
	0x1407f89e2: jbe 0x1407f89ff
	0x1407f89ff: mov r13, rbp
	0x1407f8a0f: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407f8a19: sub word ptr [r13], bx
	0x1407f8a2b: mov rax, rbp
	0x1407f8a2e: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407f8a42: movzx rdx, word ptr [rax]
	0x1407f8a46: sub dx, 0x8b42
	0x1407f8a4b: add rdx, rbp
	0x1407f8a55: pop r13
Store VM_REG [EBP+0xb7]
	0x1407f8a57: mov qword ptr [rdx], r13
	0x1407f8a5a: mov r12, rdx
	0x1407f8a5d: mov r15, 0
	0x1407f8a64: mov rdx, rbp
	0x1407f8a67: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407f8a6e: mov rdx, qword ptr [rdx]
	0x1407f8a71: add rdx, 6
	0x1407f8a78: mov r15w, word ptr [rdx]
	0x1407f8a7c: add r15, rbp
	0x1407f8a7f: cmp r12, r15
	0x1407f8a82: je 0x1407f8a8f
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407f8a88: add qword ptr [r15], 8
	0x1407f8adf: mov r13, rbp
	0x1407f8ae9: add r13, 0x145
	0x1407f8b01: mov rdi, rbp
	0x1407f8b0b: add rdi, 0xab
Load [EBP+0x145](STATIC)
	0x1407f8b27: mov r13, qword ptr [r13]
	0x1407f8b32: add r13, 4
Load [EBP+0xab](STATIC)
	0x1407f8b39: mov rdi, qword ptr [rdi]
	0x1407f8b3c: movzx r13, word ptr [r13]
	0x1407f8b4f: mov rcx, rbp
	0x1407f8b52: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407f8b5c: sub r13d, dword ptr [rcx]
	0x1407f8b6c: add r13d, 0x6090ff21
	0x1407f8b73: mov rcx, rbp
	0x1407f8b8b: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407f8b9f: add dword ptr [rcx], r13d
	0x1407f8ba2: and r13, 0xffff
	0x1407f8bba: shl r13, 3
	0x1407f8bcb: add rdi, r13
	0x1407f8bd8: mov r10, qword ptr [rdi]
	0x1407f8be9: mov r8, rbp
	0x1407f8bf3: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942341
	0x1407f8bfa: add qword ptr [r8], 8
	0x1407f8c01: jmp r10
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x64]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094234f
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x140784d38: mov rcx, 0
	0x140784d3f: mov rsi, rbp
	0x140784d42: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d49: mov rsi, qword ptr [rsi]
	0x140784d4c: add rsi, 8
	0x140784d53: mov cx, word ptr [rsi]
	0x140784d56: add rcx, rbp
	0x140784d59: mov r12, 0
	0x140784d60: mov r13, rbp
	0x140784d63: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x140784d6a: mov r13, qword ptr [r13]
	0x140784d6e: add r13, 2
	0x140784d75: mov r12w, word ptr [r13]
	0x140784d7a: add r12, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x140784d7d: push qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
	0x140784d7f: push qword ptr [r12]
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x140784d83: pop qword ptr [rcx]
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x140784d85: pop qword ptr [r12]
	0x140784d89: mov rdi, rbp
	0x140784d8c: mov r12, rbp
	0x140784d8f: add r12, 0x145
	0x140784d96: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140784d9d: mov r12, qword ptr [r12]
Load [EBP+0x145](STATIC)
	0x140784da1: mov rdi, qword ptr [rdi]
	0x140784da4: add rdi, 6
	0x140784dab: movzx r8, word ptr [rdi]
	0x140784db2: add r12, 0
	0x140784db9: movzx r9, word ptr [r12]
	0x140784dc5: mov rdx, rbp
	0x140784dc8: add r9, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x140784dcb: mov r9, qword ptr [r9]
	0x140784dce: sub rbx, r9
	0x140784dd1: pushfq
	0x140784dd9: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x140784de7: xor r8d, dword ptr [rdx]
	0x140784dfe: mov rdx, rbp
	0x140784e01: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140784e13: xor dword ptr [rdx], 0x25a5dcfc
	0x140784e21: mov r14, rbp
	0x140784e24: add r14, 0x130
	0x140784e2b: pop rbx
Load [EBP+0x130](STATIC)
	0x140784e2c: mov r15b, byte ptr [r14]
	0x140784e2f: cmp r15b, 0x1a
	0x140784e33: jbe 0x140784e39
	0x140784e39: mov r11, rbp
	0x140784e3c: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140784e43: sub word ptr [r11], r8w
	0x140784e51: mov r10, rbp
	0x140784e5d: add r10, 0x16e
Load [EBP+0x16e](STATIC)
	0x140784e6e: movzx r13, word ptr [r10]
	0x140784e79: add r13w, 0x1d17
	0x140784e7f: add r13, rbp
	0x140784e82: pop r14
Store VM_REG [EBP+0x15d]
	0x140784e91: mov qword ptr [r13], r14
	0x140784e95: mov r8, r13
	0x140784ea6: mov rdx, 0
	0x140784ead: mov r9, rbp
	0x140784ebd: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140784ec4: mov r9, qword ptr [r9]
	0x140784ed5: add r9, 0xa
	0x140784eea: mov dx, word ptr [r9]
	0x140784ef8: add rdx, rbp
	0x140784efb: cmp r8, rdx
	0x140784efe: je 0x140784f2e
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140784f20: add qword ptr [rdx], 8
	0x140784f38: mov r15b, 0x20
	0x140784f3b: mov rsi, rbp
	0x140784f45: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140784f4c: and byte ptr [rsi], r15b
	0x140784f6a: mov r13, rbp
	0x140784f7d: mov r15, rbp
	0x140784f80: add r13, 0x145
	0x140784f8d: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140784fa5: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x140784fab: mov r13, qword ptr [r13]
	0x140784fbc: add r13, 4
	0x140784fca: movzx r13, word ptr [r13]
	0x140784fe4: mov rcx, rbp
	0x140784fe7: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140784ff1: xor r13d, dword ptr [rcx]
	0x140784ffd: add r13d, 0x6a14e413
	0x14078500a: mov rdi, rbp
	0x14078501e: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140785036: xor dword ptr [rdi], r13d
	0x140785040: and r13, 0xffff
	0x140785047: shl r13, 3
	0x140785052: add r15, r13
	0x140785066: mov rsi, qword ptr [r15]
	0x140785070: mov r8, rbp
	0x14078507d: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094235d
	0x140785084: add qword ptr [r8], 0xe
	0x14078508b: jmp rsi
handlers outputs:



	0x1408411f5: mov r9, rbp
	0x14084121a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140841232: mov r9, qword ptr [r9]
	0x140841238: add r9, 2
	0x140841250: mov r11, rbp
	0x140841273: movzx r9, word ptr [r9]
	0x140841281: add r9, rbp
	0x14084128e: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140841295: mov r11, qword ptr [r11]
Load [EBP+0x26](VM_REGISTER)
Store VM_REG [EBP+0x26]
	0x140841298: pop qword ptr [r9]
	0x14084129b: add r11, 4
	0x1408412a2: movzx r11, word ptr [r11]
	0x1408412ad: add r11, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408412b7: add qword ptr [r11], 8
	0x1408412c1: mov r15b, 0xff
	0x1408412c4: mov rsi, rbp
	0x1408412c7: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408412ce: and byte ptr [rsi], r15b
	0x1408412df: mov r8, rbp
	0x1408412e5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408412ec: mov r8, qword ptr [r8]
	0x1408412ef: mov r14, rbp
	0x1408412f2: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140841303: mov r14, qword ptr [r14]
	0x14084130c: add r14, 0
	0x14084131a: movzx r14, word ptr [r14]
	0x140841324: mov rsi, rbp
	0x140841331: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084133f: sub r14d, dword ptr [rsi]
	0x140841345: xor r14d, 0x72cd8ba8
	0x140841356: mov rbx, rbp
	0x140841363: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084136a: sub dword ptr [rbx], r14d
	0x14084136d: and r14, 0xffff
	0x140841374: shl r14, 3
	0x140841378: add r8, r14
	0x140841389: mov r12, qword ptr [r8]
	0x14084138c: mov r13, rbp
	0x14084139d: add r13, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942363
	0x1408413a4: add qword ptr [r13], 6
	0x1408413ac: jmp r12
handlers outputs:



	0x1408103a1: mov r13, rbp
	0x1408103a7: mov rcx, rbp
	0x1408103b7: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408103be: mov rcx, qword ptr [rcx]
	0x1408103c8: add rcx, 0xe
	0x1408103dd: movzx rcx, byte ptr [rcx]
	0x1408103f2: add rsp, rcx
	0x1408103f5: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408103fc: mov r13, qword ptr [r13]
	0x140810400: add r13, 6
	0x140810418: movzx r13, word ptr [r13]
	0x140810420: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x140810426: add qword ptr [r13], rcx
	0x140810434: mov r9, rbp
	0x14081043a: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140810441: mov r9, qword ptr [r9]
	0x140810452: add r9, 2
	0x140810459: mov r8d, dword ptr [r9]
	0x14081045f: mov r13, rbp
	0x140810462: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140810469: xor dword ptr [r13], r8d
	0x14081047a: mov r10, rbp
	0x14081047d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140810487: mov r10, qword ptr [r10]
	0x140810491: add r10, 8
	0x14081049c: mov r13d, dword ptr [r10]
	0x1408104a5: mov rdi, rbp
	0x1408104a8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408104b2: or dword ptr [rdi], r13d
	0x1408104bf: mov r12b, 0x13
	0x1408104c9: mov r10, rbp
	0x1408104cc: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408104da: and byte ptr [r10], r12b
	0x140810500: mov rcx, rbp
	0x140810503: mov r12, rbp
	0x140810506: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14081050d: mov rcx, qword ptr [rcx]
	0x140810517: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140810528: mov r12, qword ptr [r12]
	0x14081052c: add r12, 0
	0x140810533: movzx r12, word ptr [r12]
	0x140810538: mov rax, rbp
	0x140810545: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x140810559: sub r12d, dword ptr [rax]
	0x14081058b: and r12, 0xffff
	0x14081059c: shl r12, 3
	0x1408105ae: add rcx, r12
	0x1408105b1: mov rbx, qword ptr [rcx]
	0x1408105b4: mov rsi, rbp
	0x1408105cc: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942374
	0x1408105d3: add qword ptr [rsi], 0x11
	0x1408105da: jmp rbx
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2f9e: mov r12, rbp
	0x1407e2fa1: and rcx, 0x40
	0x1407e2faf: add r12, 0xa7
	0x1407e2fb6: or rax, 0x88
	0x1407e2fbc: mov r10, 0xd5
	0x1407e2fc3: and rax, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2fc9: add dword ptr [r12], 0x7e6102a5
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094237a
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14080fa89: mov rsi, rbp
	0x14080fa8c: mov r15, 0x5b15862d
	0x14080fa93: mov r14, rbp
	0x14080fa96: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fa9d: sub dword ptr [r14], r15d
	0x14080faa0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14080faa7: mov rsi, qword ptr [rsi]
	0x14080faaa: add rsi, 0
	0x14080fab1: movzx rax, word ptr [rsi]
	0x14080fab5: add rax, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14080fab8: mov rax, qword ptr [rax]
	0x14080fabb: and r14, rax
	0x14080fabe: pushfq
	0x14080fae7: pop r14
	0x14080fae9: mov r10, rbp
	0x14080faec: mov r9, 0x4ac1f8ec
	0x14080faf3: mov rdi, rbp
	0x14080faf6: add r10, 0x145
	0x14080fafd: mov rsi, rbp
	0x14080fb00: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14080fb07: or dword ptr [rsi], r9d
Load [EBP+0x145](STATIC)
	0x14080fb0a: mov r10, qword ptr [r10]
	0x14080fb0d: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14080fb14: mov rdi, qword ptr [rdi]
	0x14080fb17: add rdi, 8
	0x14080fb1e: movzx rdi, word ptr [rdi]
	0x14080fb22: add rdi, rbp
	0x14080fb25: add r10, 4
	0x14080fb2c: movzx r10, word ptr [r10]
	0x14080fb30: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x14080fb33: push qword ptr [r10]
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14080fb36: sub qword ptr [rdi], 8
	0x14080fb5f: mov rdi, rbp
	0x14080fb69: mov r8, rbp
	0x14080fb76: add rdi, 0x145
	0x14080fb87: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14080fb95: mov rdi, qword ptr [rdi]
Load [EBP+0xab](STATIC)
	0x14080fb9f: mov r8, qword ptr [r8]
	0x14080fba2: add rdi, 2
	0x14080fbb0: movzx rdi, word ptr [rdi]
	0x14080fbc1: xor edi, 0x18a04dd0
	0x14080fbc7: mov r10, rbp
	0x14080fbd1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14080fbdf: add dword ptr [r10], edi
	0x14080fbe2: and rdi, 0xffff
	0x14080fbf3: shl rdi, 3
	0x14080fbf7: add r8, rdi
	0x14080fbfd: mov rdi, qword ptr [r8]
	0x14080fc00: mov r9, rbp
	0x14080fc03: add r9, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942384
	0x14080fc0a: add qword ptr [r9], 0xa
	0x14080fc11: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094238a
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942390
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942396
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094239c
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892647: or r8, 0x7fffffff
	0x14089264e: xor r10d, 0x6e0180c
	0x140892655: xor rsi, r9
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x131](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423a2
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423a8
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423ae
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423b4
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423ba
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423c0
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423c6
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f0d: mov rsi, rbx
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423cc
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423d4
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x1407e2e04: and r13, 0x40
	0x1407e2e0b: sub r8, 0xf0
	0x1407e2e12: and r9, rdi
	0x1407e2e15: mov rax, rbp
	0x1407e2e18: add rax, 0x145
	0x1407e2e1e: and r8, r13
Load [EBP+0x145](STATIC)
	0x1407e2e28: mov rax, qword ptr [rax]
	0x1407e2e2b: sub r9, rax
	0x1407e2e2e: add rax, 0
	0x1407e2e37: movzx rdx, word ptr [rax]
	0x1407e2e3b: mov r13, rbp
	0x1407e2e3e: xor r8, rsi
	0x1407e2e48: and r9, 0x400
	0x1407e2e4f: add r13, 0xbf
	0x1407e2e56: and r8, 0x3f
Load [EBP+0xbf](STATIC)
	0x1407e2e5d: add edx, dword ptr [r13]
	0x1407e2e61: mov r10, rbp
	0x1407e2e64: mov rbx, 0
	0x1407e2e6b: add r10, 0xf0
	0x1407e2e72: add rsi, 0x20
	0x1407e2e79: add r9, r10
Load [EBP+0xf0](STATIC)
	0x1407e2e7c: xor edx, dword ptr [r10]
	0x1407e2e7f: add rbx, rdi
	0x1407e2e89: mov r15, rbp
	0x1407e2e93: or rbx, 4
	0x1407e2e9a: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e2ea8: xor dword ptr [r15], edx
	0x1407e2eab: mov rax, rbp
	0x1407e2ebc: xor r8, rdi
	0x1407e2ebf: add rax, 0xa7
	0x1407e2ec5: add rsi, 0x80
	0x1407e2ecc: mov rcx, 0
	0x1407e2ed3: add r8, 0x800
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e2eda: and dword ptr [rax], 0x2f14c84d
	0x1407e2ee0: mov r13, rbp
	0x1407e2ee3: xor rbx, 0x3f
	0x1407e2eea: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407e2eff: mov dil, byte ptr [r13]
	0x1407e2f03: cmp dil, 0xcd
	0x1407e2f07: jbe 0x1407e2f17
	0x1407e2f17: sub r8, 8
	0x1407e2f21: mov r11, rbp
	0x1407e2f2b: or r8, 0x88
	0x1407e2f32: or r8, 0x20
	0x1407e2f39: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e2f40: add word ptr [r11], dx
	0x1407e2f44: and rcx, r10
	0x1407e2f47: mov r12, rbp
	0x1407e2f4a: sub r10, 4
	0x1407e2f51: sub rsi, r12
	0x1407e2f54: add r12, 0xa7
	0x1407e2f5b: or rsi, 0x78
Load [EBP+0xa7](STATIC)
	0x1407e2f62: mov r14d, dword ptr [r12]
	0x1407e2f66: and rax, 0x10
	0x1407e2f6c: sub rsi, r10
	0x1407e2f6f: or rax, rsi
	0x1407e2f72: add r10, 1
	0x1407e2f79: or rcx, rax
	0x1407e2f83: xor rcx, 0x80
	0x1407e2f8a: and r14d, 1
	0x1407e2f91: cmp r14d, 0
	0x1407e2f98: je 0x1407e2fd1
	0x1407e2fd1: xor rcx, 0x90
	0x1407e2fd8: sub rax, 0xffff
	0x1407e2fde: mov r13, 1
	0x1407e2fe5: mov rbx, 0x12
	0x1407e2ff3: sub r13, 0x3f
	0x1407e2ffa: or rbx, 0x800
	0x1407e3001: xor r13, 0x800
	0x1407e3008: add rax, 0x90
	0x1407e300e: xor rax, r8
	0x1407e3011: sub rax, r14
	0x1407e301b: mov r8d, 0
	0x1407e3021: push r8
	0x1407e302a: xor r13, r14
	0x1407e302d: add rbx, 0x80
	0x1407e3034: mov r8d, 0xd5
	0x1407e303a: add rax, 0x80
	0x1407e3040: mov r11, r12
	0x1407e3043: and rbx, 0x7fffffff
	0x1407e304a: push r8
	0x1407e304c: sub r11, 1
	0x1407e3053: sub r11, 0x7fffffff
	0x1407e305a: mov rsi, 0
	0x1407e3061: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x1407e3074: pop r8
	0x1407e3091: add r8w, 0xe452
	0x1407e309a: add r8, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407e30ab: mov r8, qword ptr [r8]
	0x1407e30ae: push r8
	0x1407e30b0: mov r13, 0
	0x1407e30b7: mov r11, rbp
	0x1407e30ba: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e30ce: mov r11, qword ptr [r11]
	0x1407e30d8: add r11, 4
	0x1407e30df: mov r13w, word ptr [r11]
	0x1407e30f1: add r13, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e3102: sub qword ptr [r13], 8
	0x1407e3145: mov r12b, 0x75
	0x1407e3152: mov rbx, rbp
	0x1407e315c: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e3174: and byte ptr [rbx], r12b
	0x1407e3177: mov r10, rbp
	0x1407e3187: mov r8, rbp
	0x1407e3190: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407e31ab: mov r8, qword ptr [r8]
	0x1407e31b5: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e31d0: mov r10, qword ptr [r10]
	0x1407e31d3: add r10, 2
	0x1407e31e8: movzx r10, word ptr [r10]
	0x1407e31ef: mov rax, rbp
	0x1407e31f9: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e3206: add r10d, dword ptr [rax]
	0x1407e320c: xor r10d, 0x1297935b
	0x1407e3213: mov r14, rbp
	0x1407e3220: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e323c: or dword ptr [r14], r10d
	0x1407e324d: and r10, 0xffff
	0x1407e325d: shl r10, 3
	0x1407e326e: add r8, r10
	0x1407e3271: mov r10, qword ptr [r8]
	0x1407e327b: mov r11, rbp
	0x1407e327e: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423da
	0x1407e3285: add qword ptr [r11], 6
	0x1407e328c: jmp r10
handlers outputs:



	0x1407e6d26: mov r8, rbp
	0x1407e6d37: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6d44: mov r8, qword ptr [r8]
	0x1407e6d4e: add r8, 6
	0x1407e6d62: movzx rsi, word ptr [r8]
	0x1407e6d70: mov rax, rbp
	0x1407e6d7a: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e6d80: sub esi, dword ptr [rax]
	0x1407e6d89: mov r10, rbp
	0x1407e6d93: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407e6da1: add esi, dword ptr [r10]
	0x1407e6da4: mov r11, rbp
	0x1407e6dae: add r11, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e6dbc: xor dword ptr [r11], esi
	0x1407e6dc6: mov r10, rbp
	0x1407e6dd3: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e6deb: xor dword ptr [r10], 0x1da3efde
	0x1407e6dff: mov rbx, rbp
	0x1407e6e10: add rbx, 0x130
Load [EBP+0x130](STATIC)
	0x1407e6e1e: mov dl, byte ptr [rbx]
	0x1407e6e20: cmp dl, 0xb7
	0x1407e6e23: jbe 0x1407e6e3a
	0x1407e6e4f: mov r11, rbp
	0x1407e6e52: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407e6e6e: add word ptr [r11], si
	0x1407e6e7e: mov rdi, rbp
	0x1407e6e99: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407e6ed0: movzx rsi, word ptr [rdi]
	0x1407e6f52: add si, 0xc202
	0x1407e6f64: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x1407e6f71: mov rsi, qword ptr [rsi]
	0x1407e6f82: push rsi
	0x1407e6f8a: mov rcx, 0
	0x1407e6fa2: mov r9, rbp
	0x1407e6faf: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e6fc0: mov r9, qword ptr [r9]
	0x1407e6fca: add r9, 2
	0x1407e6fd8: mov cx, word ptr [r9]
	0x1407e6fe3: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e6ff4: sub qword ptr [rcx], 8
	0x1407e7009: mov r12b, 0xbb
	0x1407e7016: mov r11, rbp
	0x1407e7027: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e702e: sub byte ptr [r11], r12b
	0x1407e7031: mov r12, rbp
	0x1407e7042: mov rsi, rbp
	0x1407e7045: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407e705c: mov r12, qword ptr [r12]
	0x1407e7060: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407e706e: mov rsi, qword ptr [rsi]
	0x1407e707b: add r12, 4
	0x1407e7089: movzx r12, word ptr [r12]
	0x1407e709f: mov r10, rbp
	0x1407e70a2: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e70a9: sub r12d, dword ptr [r10]
	0x1407e70bd: mov r10, rbp
	0x1407e70c7: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e70db: and dword ptr [r10], r12d
	0x1407e70eb: and r12, 0xffff
	0x1407e70f2: shl r12, 3
	0x1407e7104: add rsi, r12
	0x1407e7117: mov r13, qword ptr [rsi]
	0x1407e7121: mov r10, rbp
	0x1407e7132: add r10, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409423e2
	0x1407e7139: add qword ptr [r10], 8
	0x1407e7140: jmp r13
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942404
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x14094241e
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407fd97f: mov r11, rbp
	0x1407fd982: mov rdi, rbp
	0x1407fd985: add rdi, 0x145
	0x1407fd98c: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x1407fd993: mov r11, qword ptr [r11]
Load [EBP+0x145](STATIC)
	0x1407fd996: mov rdi, qword ptr [rdi]
	0x1407fd999: add rdi, 0
	0x1407fd9a0: movzx rdi, word ptr [rdi]
	0x1407fd9a4: mov r12, rbp
	0x1407fd9a7: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407fd9ae: add edi, dword ptr [r12]
	0x1407fd9b2: add edi, 0x6a647374
	0x1407fd9b8: mov rdx, rbp
	0x1407fd9bb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407fd9c2: sub dword ptr [rdx], edi
	0x1407fd9c4: and rdi, 0xffff
	0x1407fd9cb: shl rdi, 3
	0x1407fd9cf: add r11, rdi
	0x1407fd9d2: mov rax, qword ptr [r11]
	0x1407fd9d5: mov r8, rbp
	0x1407fd9d8: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942420
	0x1407fd9df: add qword ptr [r8], 2
	0x1407fd9e6: jmp rax
handlers outputs:



basic block ends with ret
	0x140856a1d: mov rax, 0
	0x140856a24: mov rdi, rbp
	0x140856a27: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140856a2e: mov rdi, qword ptr [rdi]
	0x140856a31: add rdi, 0
	0x140856a38: mov eax, dword ptr [rdi]
	0x140856a3a: mov r8, rbp
	0x140856a3d: add r8, 0x18
Load [EBP+0x18](STATIC)
	0x140856a44: add rax, qword ptr [r8]
	0x140856a47: mov r11, 0
	0x140856a4e: mov r15, rbp
	0x140856a51: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140856a58: mov r15, qword ptr [r15]
	0x140856a5b: add r15, 4
	0x140856a62: mov r11w, word ptr [r15]
	0x140856a66: add r11, rsp
unknown store addr: 1080, lea_ast: ((0x80 + stack) & 0xffffffffffffffff), simplified_source_node: 0x140001e17
	0x140856a69: mov qword ptr [r11], rax
	0x140856a6c: mov rdi, rbp
	0x140856a6f: add rdi, 0x20
vm exit detected
Store [EBP+0x20](STATIC)
	0x140856a76: mov dword ptr [rdi], 0
	0x140856a7c: pop r8
	0x140856a7e: pop r9
	0x140856a80: pop r10
	0x140856a82: pop r11
	0x140856a84: pop r12
	0x140856a86: pop r13
	0x140856a88: pop r14
	0x140856a8a: pop r15
	0x140856a8c: pop rdi
	0x140856a8d: pop rsi
	0x140856a8e: pop rbp
	0x140856a8f: pop rbx
	0x140856a90: pop rdx
	0x140856a91: pop rcx
	0x140856a92: pop rax
	0x140856a93: popfq
	0x140856a94: ret 0
ret handler 140001e17, 0
handlers outputs:



	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x10](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940c46
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



	0x140893517: mov r12, 0x4d2bc795
	0x14089351e: mov rsi, rbp
	0x140893521: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140893528: or dword ptr [rsi], r12d
	0x14089352b: mov rdi, rbp
	0x140893531: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140893546: mov rdi, qword ptr [rdi]
	0x140893549: add rdi, 8
	0x140893550: mov eax, dword ptr [rdi]
	0x140893559: mov rcx, rbp
	0x14089355f: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x140893566: add eax, dword ptr [rcx]
	0x140893568: mov rdi, rbp
	0x14089356b: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14089357c: add eax, dword ptr [rdi]
	0x14089357e: mov r13, rbp
	0x14089358f: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140893596: and dword ptr [r13], eax
	0x14089359d: mov rcx, rbp
	0x1408935a0: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408935b5: xor dword ptr [rcx], 0x48fb6312
	0x1408935c2: mov r15, rbp
	0x1408935c5: add r15, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1408935cf: sub dword ptr [r15], eax
	0x1408935d9: mov r15, rbp
	0x1408935dc: add r15, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1408935e3: add dword ptr [r15], eax
	0x1408935e6: mov rsi, rbp
	0x1408935e9: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408935f7: mov rsi, qword ptr [rsi]
	0x1408935fa: add rsi, 0xf
	0x140893601: movzx r11, word ptr [rsi]
	0x140893620: mov r12, rbp
	0x14089362d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x140893634: sub r11d, dword ptr [r12]
	0x14089363f: mov r8, rbp
	0x140893642: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140893650: xor dword ptr [r8], r11d
	0x140893661: mov rdi, rbp
	0x140893664: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14089366b: or dword ptr [rdi], 0x6a7f3c6e
	0x140893674: mov r9, rbp
	0x14089367e: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14089368c: mov dl, byte ptr [r9]
	0x14089368f: cmp dl, 0x35
	0x140893692: jbe 0x1408936af
	0x1408936b9: mov rdi, rbp
	0x1408936c3: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1408936cd: sub word ptr [rdi], r11w
	0x1408936d1: mov rdi, rbp
	0x1408936d4: mov r15, rbp
	0x1408936fd: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14089370d: mov r15d, dword ptr [r15]
	0x14089371a: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
	0x14089376a: movzx rdi, word ptr [rdi]
	0x140893775: add r15d, 0x4a1907dc
	0x140893783: add di, 0xc5d2
	0x140893788: add rdi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14089378b: cmp dword ptr [rdi], r15d
	0x14089378e: pushfq
	0x14089378f: mov r9, 0
	0x140893796: mov r13, rbp
	0x140893799: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1408937a0: mov r13, qword ptr [r13]
	0x1408937a4: mov r12, rbp
	0x1408937a7: add r12, 0x145
	0x1408937ae: add r13, 4
Load [EBP+0x145](STATIC)
	0x1408937b5: mov r12, qword ptr [r12]
	0x1408937b9: add r12, 0xe
	0x1408937c0: mov ecx, dword ptr [r13]
	0x1408937c4: mov r13, rbp
	0x1408937c7: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408937ce: or dword ptr [r13], ecx
	0x1408937d2: mov r9b, byte ptr [r12]
	0x1408937d6: cmp r9b, 0
	0x1408937da: je 0x140893807
	0x1408937e0: mov r12, rbp
	0x1408937e3: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408937ea: mov r12, qword ptr [r12]
	0x1408937ee: add r12, 0xc
	0x1408937f5: mov r9w, word ptr [r12]
	0x1408937fa: add r9, rbp
	0x1408937fd: pop r11
Store VM_REG [EBP+0x26]
	0x1408937ff: mov qword ptr [r9], r11
	0x14089382b: mov r15, rbp
	0x140893835: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14089384a: mov r15, qword ptr [r15]
	0x14089384d: mov rcx, rbp
	0x140893850: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14089385e: mov rcx, qword ptr [rcx]
	0x14089386b: add rcx, 0
	0x140893875: movzx rcx, word ptr [rcx]
	0x140893880: mov r10, rbp
	0x140893883: add r10, 0xbf
Load [EBP+0xbf](STATIC)
	0x14089388a: xor ecx, dword ptr [r10]
	0x14089388d: add ecx, 0x78278576
	0x140893893: mov r13, rbp
	0x1408938a0: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408938a7: add dword ptr [r13], ecx
	0x1408938ab: and rcx, 0xffff
	0x1408938c0: shl rcx, 3
	0x1408938c4: add r15, rcx
	0x1408938ca: mov r9, qword ptr [r15]
	0x1408938db: mov r11, rbp
	0x1408938de: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940c57
	0x1408938e5: add qword ptr [r11], 0x11
	0x1408938ec: jmp r9
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940c79
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940c93
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca36a: and r10d, 1
	0x1407ca371: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407ca9cb: cmp r10d, 0
	0x1407ca9d2: je 0x1407caa28
	0x1407caa32: mov rdi, rbp
	0x1407caa3c: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940dd0
	0x1407caa43: add qword ptr [rdi], r13
	0x1407caa46: jmp rsi
handlers outputs:



	0x1407ca176: mov r15, rbp
	0x1407ca179: add r15, 0xcb
Store [EBP+0xcb](STATIC)
	0x1407ca18a: mov byte ptr [r15], 0
	0x1407ca19f: mov r10, 0
	0x1407ca1bb: mov r12, rbp
	0x1407ca1cb: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca1d9: mov r12, qword ptr [r12]
	0x1407ca1dd: add r12, 8
	0x1407ca1f9: mov r10w, word ptr [r12]
	0x1407ca20c: add r10, rbp
Load [EBP+0x26](VM_REGISTER)
	0x1407ca20f: mov r10d, dword ptr [r10]
	0x1407ca219: mov rax, rbp
	0x1407ca223: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca237: mov rax, qword ptr [rax]
	0x1407ca241: add rax, 0xa
	0x1407ca247: mov dl, byte ptr [rax]
	0x1407ca249: cmp dl, 2
	0x1407ca24c: je 0x1407ca26e
	0x1407ca252: cmp dl, 0xa3
	0x1407ca255: je 0x1407ca26e
	0x1407ca2b8: cmp dl, 0x1a
	0x1407ca2bb: jne 0x1407ca2ee
	0x1407ca2ee: cmp dl, 0x76
	0x1407ca2f1: jne 0x1407ca361
	0x1407ca361: cmp dl, 0x6e
	0x1407ca364: jne 0x1407ca383
	0x1407ca36a: and r10d, 1
	0x1407ca371: jne 0x1407ca383
	0x1407ca383: cmp dl, 0x25
	0x1407ca386: jne 0x1407ca3c2
	0x1407ca3c2: cmp dl, 0x7a
	0x1407ca3c5: jne 0x1407ca465
	0x1407ca465: cmp dl, 0xab
	0x1407ca468: jne 0x1407ca526
	0x1407ca526: cmp dl, 0xb8
	0x1407ca529: jne 0x1407ca5b0
	0x1407ca5b0: cmp dl, 0xcf
	0x1407ca5b3: jne 0x1407ca628
	0x1407ca628: cmp dl, 0xa3
	0x1407ca62b: jne 0x1407ca6c6
	0x1407ca6c6: cmp dl, 0xd1
	0x1407ca6c9: jne 0x1407ca726
	0x1407ca726: cmp dl, 0x42
	0x1407ca729: jne 0x1407ca76d
	0x1407ca76d: cmp dl, 0xd3
	0x1407ca770: jne 0x1407ca7ad
	0x1407ca7ad: cmp dl, 0xb6
	0x1407ca7b0: jne 0x1407ca7ee
	0x1407ca7ee: cmp dl, 0x3c
	0x1407ca7f1: jne 0x1407ca84a
	0x1407ca84a: cmp dl, 0x8a
	0x1407ca84d: jne 0x1407ca8a3
	0x1407ca8b8: mov rcx, 0
	0x1407ca8c6: mov rsi, rbp
	0x1407ca8d0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca8de: mov rsi, qword ptr [rsi]
	0x1407ca8e1: add rsi, 0
	0x1407ca8ee: mov cx, word ptr [rsi]
	0x1407ca8f1: shl rcx, 3
	0x1407ca901: mov r14, rbp
	0x1407ca918: add r14, 0xab
Load [EBP+0xab](STATIC)
	0x1407ca91f: mov r8, qword ptr [r14]
	0x1407ca922: add r8, rcx
	0x1407ca92c: mov rsi, qword ptr [r8]
	0x1407ca93d: mov r10, 0
	0x1407ca94b: mov r13, rbp
	0x1407ca94e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407ca955: mov r13, qword ptr [r13]
	0x1407ca95f: add r13, 4
	0x1407ca966: mov r10d, dword ptr [r13]
	0x1407ca96a: mov r13, r10
	0x1407ca97e: and r10d, 0x80000000
	0x1407ca993: mov rdi, rbp
	0x1407ca9a7: add rdi, 0xcb
Load [EBP+0xcb](STATIC)
	0x1407ca9be: mov r8b, byte ptr [rdi]
	0x1407ca9c1: cmp r8b, 0
	0x1407ca9c5: je 0x1407caa4e
	0x1407caa69: mov dil, 0xb1
	0x1407caa7a: mov r9, rbp
	0x1407caa8a: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407caa97: or byte ptr [r9], dil
	0x1407caaa1: mov r8, rbp
	0x1407caaaa: mov rcx, rbp
	0x1407caab0: add rcx, 0x145
	0x1407caac5: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407caacc: mov r8, qword ptr [r8]
Load [EBP+0x145](STATIC)
	0x1407caad2: mov rcx, qword ptr [rcx]
	0x1407caad8: add rcx, 0xb
	0x1407caae6: movzx rcx, word ptr [rcx]
	0x1407caaea: mov rax, rbp
	0x1407caaf4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cab04: sub ecx, dword ptr [rax]
	0x1407cab1a: mov rdi, rbp
	0x1407cab32: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cab3c: sub dword ptr [rdi], ecx
	0x1407cab3e: and rcx, 0xffff
	0x1407cab5d: shl rcx, 3
	0x1407cab68: add r8, rcx
	0x1407cab7c: mov r15, qword ptr [r8]
	0x1407cab8d: mov rax, rbp
	0x1407cab90: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ca0
	0x1407cab96: add qword ptr [rax], 0xd
	0x1407cab9d: jmp r15
handlers outputs:



	0x1407e1334: mov r14, rbp
	0x1407e1337: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e133e: xor dword ptr [r14], 0x3477f352
	0x1407e1345: mov r11, rbp
	0x1407e1348: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e134f: or dword ptr [r11], 0x7e323802
	0x1407e1356: mov r15, rbp
	0x1407e136e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e137c: mov r15, qword ptr [r15]
	0x1407e137f: add r15, 4
	0x1407e1393: mov esi, dword ptr [r15]
	0x1407e13a3: mov r14, rbp
	0x1407e13a6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e13bb: sub esi, dword ptr [r14]
	0x1407e13c1: mov r13, rbp
	0x1407e13d1: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407e13df: xor esi, dword ptr [r13]
	0x1407e140f: mov r12, rbp
	0x1407e141f: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1426: xor dword ptr [r12], 0x5cfc2cec
	0x1407e1438: mov rcx, rbp
	0x1407e144c: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407e1453: add dword ptr [rcx], esi
	0x1407e1455: mov r13, 0x12
	0x1407e145f: mov rax, rbp
	0x1407e1477: add rax, 0x120
	0x1407e147d: and r13, 0x20
	0x1407e1484: sub r13, 0x40
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407e148b: add dword ptr [rax], esi
	0x1407e1493: mov r9, rbp
	0x1407e14aa: add r9, 0x58
Load [EBP+0x58](STATIC)
	0x1407e14bb: mov r13d, dword ptr [r9]
	0x1407e14c5: xor r13d, 0x2bbdd85c
	0x1407e14dd: push r13
	0x1407e14ed: mov r10, 0
	0x1407e1502: mov rsi, rbp
	0x1407e150f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1524: mov rsi, qword ptr [rsi]
	0x1407e1527: add rsi, 2
	0x1407e152e: mov r10w, word ptr [rsi]
	0x1407e1532: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e153b: sub qword ptr [r10], 8
	0x1407e1591: mov r8, rbp
	0x1407e159b: add r8, 0x145
	0x1407e15b3: mov r10, rbp
	0x1407e15b6: add r10, 0xab
Load [EBP+0x145](STATIC)
	0x1407e15c3: mov r8, qword ptr [r8]
	0x1407e15cd: add r8, 0
Load [EBP+0xab](STATIC)
	0x1407e15d4: mov r10, qword ptr [r10]
	0x1407e15da: movzx r8, word ptr [r8]
	0x1407e15e5: mov rax, rbp
	0x1407e15ef: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1606: xor r8d, dword ptr [rax]
	0x1407e161a: xor r8d, 0x3e3fae90
	0x1407e1632: mov rdx, rbp
	0x1407e1635: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e163f: xor dword ptr [rdx], r8d
	0x1407e1653: and r8, 0xffff
	0x1407e1664: shl r8, 3
	0x1407e166b: add r10, r8
	0x1407e1678: mov rax, qword ptr [r10]
	0x1407e168c: mov rsi, rbp
	0x1407e169c: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ca8
	0x1407e16a3: add qword ptr [rsi], 8
	0x1407e16aa: jmp rax
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408865da: mov r12, 0
	0x1408865e1: mov rsi, rbp
	0x1408865e4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408865eb: mov rsi, qword ptr [rsi]
	0x1408865f7: add rsi, 8
	0x14088660d: mov r12w, word ptr [rsi]
	0x140886611: add r12, rbp
	0x140886614: mov rdx, 0
	0x14088661b: mov rax, rbp
	0x14088661e: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140886624: mov rax, qword ptr [rax]
	0x140886627: add rax, 0
	0x14088662d: mov dx, word ptr [rax]
	0x140886630: add rdx, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140886633: push qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
	0x140886637: push qword ptr [rdx]
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140886639: pop qword ptr [r12]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14088663d: pop qword ptr [rdx]
	0x140886649: mov r11, rbp
	0x14088665d: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14088666b: mov r11, qword ptr [r11]
	0x14088667c: add r11, 4
	0x140886686: movzx r8, word ptr [r11]
	0x1408866b9: mov rbx, rbp
	0x1408866c3: add rbx, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408866db: add r8d, dword ptr [rbx]
	0x1408866de: mov r10, rbp
	0x1408866e1: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408866ef: and dword ptr [r10], r8d
	0x1408866f2: mov rbx, rbp
	0x1408866f5: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140886705: sub dword ptr [rbx], 0xc32f799
	0x140886715: mov r9, rbp
	0x140886729: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x140886730: mov sil, byte ptr [r9]
	0x140886733: cmp sil, 0xf1
	0x140886737: jbe 0x14088674b
	0x14088674b: mov r14, rbp
	0x14088674e: mov r9, 0
	0x140886755: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140886771: xor word ptr [r14], r8w
	0x140886775: mov r13, rbp
	0x140886782: mov r8, rbp
	0x140886793: add r13, 0xab
	0x1408867a1: mov rsi, 0
	0x1408867a8: add r8, 0x145
	0x1408867af: or rsi, 8
Load [EBP+0xab](STATIC)
	0x1408867b6: mov r13, qword ptr [r13]
Load [EBP+0x145](STATIC)
	0x1408867ba: mov r8, qword ptr [r8]
	0x1408867c4: mov rsi, rsi
	0x1408867c7: add r8, 2
	0x1408867d5: movzx r8, word ptr [r8]
	0x1408867d9: and rsi, 0xffffffff80000000
	0x1408867e0: mov rbx, rbp
	0x1408867f8: add rbx, 0xbf
	0x140886806: and rsi, 0x7fffffff
Load [EBP+0xbf](STATIC)
	0x140886814: xor r8d, dword ptr [rbx]
	0x140886821: xor r8d, 0x6b6b37e1
	0x140886836: mov rdx, 1
	0x14088683d: mov rax, rbp
	0x140886851: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140886864: sub dword ptr [rax], r8d
	0x140886867: and r8, 0xffff
	0x140886878: shl r8, 3
	0x140886891: add r13, r8
	0x1408868a9: mov r15, qword ptr [r13]
	0x1408868b0: mov rcx, rbp
	0x1408868b3: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x1408868cb: mov qword ptr [rcx], r15
	0x1408868ce: mov r8, 0
	0x1408868d5: mov rdi, 0
	0x1408868dc: xor rdi, 4
	0x1408868e3: mov r15, rbp
	0x1408868e6: sub rdx, 0x10
	0x1408868ed: add r15, 0x145
	0x1408868f4: and rdx, rdi
Load [EBP+0x145](STATIC)
	0x1408868f7: mov r15, qword ptr [r15]
	0x1408868fa: add r15, 6
	0x140886901: mov r8w, word ptr [r15]
	0x140886908: mov r11, rbp
	0x140886915: add r11, 0xbf
	0x140886923: mov r12, r11
	0x140886926: sub rdx, 0x7fffffff
Load [EBP+0xbf](STATIC)
	0x14088692d: xor r8d, dword ptr [r11]
	0x140886930: mov r10, rbp
	0x14088693d: add r10, 0x120
	0x140886944: add rsi, 0x10
Load [EBP+0x120](STATIC)
	0x14088694e: xor r8d, dword ptr [r10]
	0x140886958: mov r15, rbp
	0x14088695e: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140886965: or dword ptr [r15], r8d
	0x140886968: add r12, 0x80
	0x140886976: mov rcx, rbp
	0x140886979: add rcx, 0xa7
	0x140886980: and rsi, 0x400
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088698e: sub dword ptr [rcx], 0x5dcaf6a1
	0x140886994: mov r15, rbp
	0x140886997: add r15, 0xd6
	0x1408869a1: add r12, 1
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408869af: add word ptr [r15], r8w
	0x1408869b6: xor r9, r9
	0x1408869b9: mov r11, rbp
	0x1408869c3: and r9, 0x78
	0x1408869ca: mov rdi, rbp
	0x1408869cd: mov rax, 0x200
	0x1408869d4: xor rdx, 0x80
	0x1408869de: add r11, 0x16e
	0x1408869e5: and r9, r11
	0x1408869eb: add rdi, 0xd6
	0x1408869f2: add rax, 8
Load [EBP+0x16e](STATIC)
	0x1408869fe: movzx r11, word ptr [r11]
	0x140886a02: mov r8, 1
Load [EBP+0xd6](STATIC)
	0x140886a10: movzx rdi, word ptr [rdi]
	0x140886a17: xor r9, r11
	0x140886a21: add rdi, rbp
	0x140886a24: or rdx, 0x90
	0x140886a2b: add r11, rbp
	0x140886a2e: mov r13, r11
	0x140886a31: or r8, 0xf0
Load [EBP+0xb7](VM_REGISTER)
	0x140886a38: mov rdi, qword ptr [rdi]
	0x140886a3b: or r13, 0x800
Load [EBP+0x2e](VM_REGISTER)
	0x140886a42: mov r11, qword ptr [r11]
	0x140886a45: mov qword ptr [r11], rdi
	0x140886a4b: and rsi, 0x10
	0x140886a52: and r13, 4
	0x140886a67: mov r15, 0
	0x140886a6e: xor r15, 4
	0x140886a75: xor rdi, 0x3f
	0x140886a7c: mov rbx, 1
	0x140886a83: and rbx, 0xffffffff80000000
	0x140886a8a: add r15, 0x88
	0x140886a91: sub rsi, 0x78
	0x140886a9f: push 0x6b6cab40
	0x140886aa4: push rax
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x208
	0x140886aa5: pop qword ptr [rsp]
	0x140886aa8: push rbp
	0x140886aa9: pop rax
	0x140886aaa: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140886aae: mov qword ptr [rsp], rax
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffff8040b512 + context) & 0xffffffffffffffff)
	0x140886ab2: sub qword ptr [rsp], 0x7fbf4aee
	0x140886aba: pop r11
	0x140886abc: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x8c
	0x140886ac3: mov qword ptr [rsp], r15
	0x140886ac7: movabs r15, 0x7dbb4541
	0x140886ad1: xor r15, 0x3dd59ae0
	0x140886ad8: or r15, 0x73cd0a4a
	0x140886adf: add r15, 0x74bee357
	0x140886ae6: shr r15, 5
	0x140886aea: xor r15, 0x56dd58f7
	0x140886af1: xor r15, 0x2e276403
	0x140886af8: add r11, r15
	0x140886afb: pop r15
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140886afd: push qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x140886b00: push qword ptr [rsp]
	0x140886b03: mov rax, qword ptr [rsp]
	0x140886b07: add rsp, 8
	0x140886b0e: push 0x9a1c16a
	0x140886b13: mov qword ptr [rsp], rsi
	0x140886b17: sub rsp, 8
	0x140886b1b: mov qword ptr [rsp], rsp
	0x140886b1f: add qword ptr [rsp], 8
	0x140886b24: mov rsi, qword ptr [rsp]
	0x140886b28: add rsp, 8
	0x140886b2f: add rsi, 8
	0x140886b33: push r8
	0x140886b35: movabs r8, 0x7fbf42b8
	0x140886b3f: xor r8, 0x7fbf42b0
	0x140886b46: add rsi, r8
	0x140886b49: pop r8
	0x140886b4b: xchg qword ptr [rsp], rsi
	0x140886b4f: mov rsp, qword ptr [rsp]
	0x140886b53: add rsp, 8
	0x140886b61: or rsi, 4
	0x140886b6f: push 0x580de192
	0x140886b74: push 0x56abf68e
	0x140886b79: push rdx
	0x140886b7a: pop qword ptr [rsp]
	0x140886b7d: pop qword ptr [rsp]
	0x140886b80: push r9
	0x140886b82: movabs r9, 0x7b7b2a00
	0x140886b8c: dec r9
	0x140886b8f: xor r9, 0x520d6ff
	0x140886b96: mov rdx, r9
	0x140886b99: pop r9
	0x140886b9b: not rdx
	0x140886b9e: push r13
	0x140886ba0: movabs r13, 0x6fff5469
	0x140886baa: or rdx, r13
	0x140886bad: pop r13
	0x140886baf: push rdi
	0x140886bb0: push rdx
	0x140886bb1: movabs rdx, 0x77eff000
	0x140886bbb: not rdx
	0x140886bbe: xor rdx, 0x3dfef14a
	0x140886bc5: or rdx, 0x5ef7fca1
	0x140886bcc: not rdx
	0x140886bcf: not rdx
	0x140886bd2: push r15
	0x140886bd4: mov r15, -0x50af2e83
	0x140886bdb: sub rdx, r15
	0x140886bde: pop r15
	0x140886be0: movabs rdi, 0xa3ff26e
	0x140886bea: add rdi, rdx
	0x140886bed: mov rdx, qword ptr [rsp]
	0x140886bf1: add rsp, 8
	0x140886bf5: or rdx, rdi
	0x140886bf8: pop rdi
	0x140886bf9: push r13
	0x140886bfb: mov r13, -0xa146
	0x140886c02: add rdx, 0x9ae95dc
	0x140886c09: sub rdx, r13
	0x140886c0c: sub rdx, 0x9ae95dc
	0x140886c13: push qword ptr [rsp]
	0x140886c16: pop r13
	0x140886c18: push rbx
	0x140886c19: mov rbx, rsp
	0x140886c1c: add rbx, 8
	0x140886c20: add rbx, 8
	0x140886c27: xchg qword ptr [rsp], rbx
	0x140886c2b: pop rsp
	0x140886c2c: add r11, 0x7ff7080a
	0x140886c33: add r11, 0x7fcf5aa1
	0x140886c3a: add r11, 0x2afb8b2a
	0x140886c41: add r11, rdx
	0x140886c44: sub r11, 0x2afb8b2a
	0x140886c4b: sub r11, 0x7fcf5aa1
	0x140886c52: sub r11, 0x7ff7080a
	0x140886c59: pop rdx
	0x140886c5d: mov r13, rbp
	0x140886c60: add r13, 0xfd
	0x140886c67: sub rbx, 0x78
	0x140886c6e: add rsi, 0x20
	0x140886c75: push 0x72ff3ccf
	0x140886c7a: push 0x48f5f258
	0x140886c7f: mov qword ptr [rsp], r12
	0x140886c83: pop qword ptr [rsp]
	0x140886c86: movabs r12, 0x7bf264bb
	0x140886c90: shr r12, 4
	0x140886c94: xor r12, rbx
	0x140886c97: xor rbx, r12
	0x140886c9a: xor r12, rbx
	0x140886c9d: xor rbx, rdx
	0x140886ca0: xor rdx, rbx
	0x140886ca3: xor rbx, rdx
	0x140886ca6: xchg rdx, rcx
	0x140886ca9: not rcx
	0x140886cac: xchg rdx, rcx
	0x140886caf: xchg rbx, rdx
	0x140886cb2: xchg r12, rbx
	0x140886cb5: push rsi
	0x140886cb6: mov rsi, rsp
	0x140886cb9: add rsi, 8
	0x140886cbd: sub rsi, 8
	0x140886cc4: xchg qword ptr [rsp], rsi
	0x140886cc8: pop rsp
	0x140886cc9: mov qword ptr [rsp], rcx
	0x140886ccd: mov rcx, -0x7bf2656
	0x140886cd4: sub r12, 0xa237401
	0x140886cdb: sub r12, 0xfd368e0
	0x140886ce2: sub r12, 0xb8f5f3b
	0x140886ce9: sub r12, rcx
	0x140886cec: add r12, 0xb8f5f3b
	0x140886cf3: add r12, 0xfd368e0
	0x140886cfa: add r12, 0xa237401
	0x140886d01: pop rcx
Load [EBP+0x145](STATIC)
bytecode=0xd1e831a2
	0x140886d02: sub qword ptr [r11], 0x6eabdb06
Load [EBP+0x145](STATIC)
bytecode=0x55ead8e1
	0x140886d09: sub qword ptr [r11], 0x7bfd58c1
Load [EBP+0x145](STATIC)
bytecode=0x55ead8eb
	0x140886d10: add qword ptr [r11], r12
Load [EBP+0x145](STATIC)
bytecode=0xd1e831ac
	0x140886d13: add qword ptr [r11], 0x7bfd58c1
Load [EBP+0x145](STATIC)
bytecode=0x140940cb2
	0x140886d1a: add qword ptr [r11], 0x6eabdb06
	0x140886d21: push qword ptr [rsp]
	0x140886d24: pop r12
	0x140886d26: push rax
	0x140886d27: mov rax, rsp
	0x140886d2a: add rax, 8
	0x140886d2e: add rax, 8
	0x140886d34: xchg qword ptr [rsp], rax
	0x140886d38: pop rsp
Load [EBP+0xfd](STATIC)
	0x140886d46: mov r9, qword ptr [r13]
	0x140886d4a: add r9, 0x33656937
	0x140886d58: push r9
	0x140886da7: pop rdi
	0x140886da8: sub rdi, 0x33656937
	0x140886daf: jmp rdi
handlers outputs:



	0x14087ff3e: mov rbx, rbp
	0x14087ff41: add rdi, rdx
	0x14087ff44: add rdi, 4
	0x14087ff4b: add rbx, 0xab
	0x14087ff5c: mov r12, rbp
	0x14087ff62: mov r9, rdi
Load [EBP+0xab](STATIC)
	0x14087ff65: mov rbx, qword ptr [rbx]
	0x14087ff68: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14087ff6f: mov r12, qword ptr [r12]
	0x14087ff7a: add r12, 0
	0x14087ff88: movzx r12, word ptr [r12]
	0x14087ffcb: add r12d, 0x7eb1668
	0x14087ffe0: mov rsi, rbp
	0x14087fff1: add rsi, 0xbf
	0x14087fff8: mov rax, 0
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880006: or dword ptr [rsi], r12d
	0x140880017: and r12, 0xffff
	0x14088002f: shl r12, 3
	0x140880033: add rbx, r12
	0x140880036: sub r9, 0x78
	0x140880044: mov r8, qword ptr [rbx]
	0x140880047: mov rdx, 0x12
	0x14088004e: mov rsi, rbp
	0x140880051: and rdx, rax
	0x140880054: sub rdx, r9
	0x140880057: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140880068: mov qword ptr [rsi], r8
	0x140880080: mov r11, rbp
	0x140880083: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14088008a: mov r11, qword ptr [r11]
	0x140880094: add r11, 6
	0x1408800a5: mov r12d, dword ptr [r11]
	0x1408800a8: mov rdi, rbp
	0x1408800ae: sub rdx, 0xffff
	0x1408800b8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408800c6: add r12d, dword ptr [rdi]
	0x1408800de: mov r8, rbp
	0x1408800eb: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x140880100: add r12d, dword ptr [r8]
	0x140880103: mov rdi, 0x400
	0x140880111: mov rax, rbp
	0x14088011b: xor rdi, 8
	0x140880125: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880140: or dword ptr [rax], r12d
	0x140880143: xor rdi, rax
	0x14088014d: sub rdx, rdx
	0x140880150: mov r8, rbp
	0x140880153: sub rdx, r12
	0x14088015d: add r8, 0xa7
	0x140880164: or rdx, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088016b: or dword ptr [r8], 0x6cddcd8d
	0x140880179: add rdi, 0x7fffffff
	0x140880180: mov r8, rbp
	0x140880183: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140880191: add dword ptr [r8], r12d
	0x140880194: mov rbx, 0x12
	0x1408801a5: and rdi, 0x400
	0x1408801b3: add rdx, 0x7fffffff
	0x1408801cf: mov r13, 0
	0x1408801d6: or rdi, 0x40
	0x1408801dd: mov r9, rbp
	0x1408801e0: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408801e7: mov r9, qword ptr [r9]
	0x1408801ea: add rdx, r13
	0x1408801ed: add r9, 2
	0x1408801f4: add rdi, 0x7fffffff
	0x1408801fb: sub rdx, 0x800
	0x140880209: movzx r13, word ptr [r9]
	0x140880210: or rbx, rbx
	0x14088021a: sub rdx, 8
	0x14088022d: sub rdx, rbx
	0x14088023e: sub rdi, -0x80000000
	0x140880245: mov rax, 0
	0x14088024c: or rax, 0xf0
	0x140880252: mov r11, rbp
	0x14088025c: xor rdx, r11
	0x14088025f: or rax, 0x20
	0x140880265: add r11, 0xbf
	0x14088026c: or rdx, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088027a: add dword ptr [r11], r13d
	0x14088027d: sub rax, 4
	0x140880283: sub rdx, r12
	0x140880289: and rax, 4
	0x14088028f: mov r8, 0
	0x1408802a0: xor rax, r8
	0x1408802aa: add rax, 0x20
	0x1408802b0: mov r9, rbp
	0x1408802b3: mov r15, 0xd5
	0x1408802ba: add r9, 0x130
	0x1408802c1: or rax, 0xffffffff80000000
	0x1408802ce: add rdx, 0x7fffffff
Load [EBP+0x130](STATIC)
	0x1408802d5: mov r12b, byte ptr [r9]
	0x1408802d8: cmp r12b, 0x6b
	0x1408802dc: jbe 0x1408802ef
	0x1408802e2: sub rax, 4
	0x1408802e8: sub r13d, 0x4deb4079
	0x1408802f6: mov r9, rbp
	0x1408802f9: and rdi, 0x40
	0x140880303: add r9, 0x16e
	0x14088030a: sub rdx, 0xf0
	0x140880311: and rax, 0x20
	0x140880317: and r15, 0xf0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088031e: sub word ptr [r9], r13w
	0x140880322: mov r12, rbp
	0x14088032c: mov rsi, rbp
	0x14088032f: add rsi, 0x58
Load [EBP+0x58](STATIC)
	0x14088033d: mov esi, dword ptr [rsi]
	0x14088033f: xor esi, 0x21172332
	0x140880345: add r12, 0x16e
	0x14088034c: sub rax, 0x80
Load [EBP+0x16e](STATIC)
	0x140880352: movzx r12, word ptr [r12]
	0x14088035e: add r12w, 0xba5
	0x14088036b: add rdi, 0xf0
	0x140880372: add r12, rbp
	0x140880375: sub rdi, -0x80000000
Store VM_REG [EBP+0xb7]
	0x14088037f: mov dword ptr [r12], esi
	0x140880383: add r12, 4
	0x140880391: and rdi, 0x80
Store VM_REG [EBP+0xbb]
	0x140880398: mov dword ptr [r12], 0
	0x1408803a0: mov r8, rbp
	0x1408803a3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1408803aa: mov r8, qword ptr [r8]
	0x1408803ad: add r8, 0xa
	0x1408803b4: movzx rsi, word ptr [r8]
	0x1408803b8: add rsi, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1408803bb: mov rsi, qword ptr [rsi]
	0x1408803be: or rdx, rsi
	0x1408803c1: pushfq
	0x1408803eb: pop rdx
	0x1408803ec: mov rsi, rbp
	0x1408803ef: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408803f6: mov rsi, qword ptr [rsi]
	0x1408803f9: add rsi, 0xe
	0x140880400: movzx r14, word ptr [rsi]
	0x140880404: add r14, rbp
Load [EBP+0x97](VM_REGISTER)
	0x140880407: mov r14, qword ptr [r14]
	0x14088040a: xor rdx, r14
	0x14088040d: pushfq
	0x14088041c: mov r9, rbp
	0x14088041f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140880426: mov r9, qword ptr [r9]
	0x140880429: add r9, 0xc
	0x140880437: pop rdx
	0x14088044d: add r15, 0x40
	0x14088046f: or r12, r15
	0x140880472: and r12, 0x88
	0x140880480: add r12, 0x80
	0x140880487: sub r12, 0x10
	0x14088048e: push r9
	0x140880490: mov r9, rsp
	0x140880493: add r9, 8
	0x140880497: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14088049e: xchg qword ptr [rsp], r9
	0x1408804a2: pop rsp
	0x1408804a3: push r12
	0x1408804a5: push r8
	0x1408804a7: pop r12
	0x1408804a9: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804ad: mov qword ptr [rsp], r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804b1: pop qword ptr [rsp + 8]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1408804b5: mov r12, qword ptr [rsp]
	0x1408804b9: add rsp, 8
	0x1408804bd: push 0x73335fd3
	0x1408804c2: mov qword ptr [rsp], r9
	0x1408804c6: push 0x3372c5dd
	0x1408804cb: mov qword ptr [rsp], rdx
	0x1408804cf: push 0x17a1c693
	0x1408804d4: mov qword ptr [rsp], rbp
	0x1408804d8: xor qword ptr [rsp], 0x7f452399
	0x1408804e0: mov rdx, qword ptr [rsp]
	0x1408804e4: add rsp, 8
	0x1408804e8: xor rdx, 0x7f452399
	0x1408804ef: mov r9, rdx
	0x1408804f2: pop rdx
	0x1408804f3: push r9
	0x1408804f5: sub qword ptr [rsp], 0x6f77dcf4
	0x1408804fd: mov r8, qword ptr [rsp]
	0x140880501: add rsp, 8
	0x140880505: push r15
	0x140880507: movabs r15, 0x6f77dcf4
	0x140880511: add r8, r15
	0x140880514: mov r15, qword ptr [rsp]
	0x140880518: add rsp, 8
	0x140880523: add rsp, 8
	0x14088052a: mov r14, r8
	0x14088052d: pop r8
	0x14088052f: add r15, 0x400
	0x14088053d: push 0x27568fe9
	0x140880542: push 0x7b3f4c47
	0x140880547: push rax
	0x140880548: pop qword ptr [rsp]
	0x14088054b: pop qword ptr [rsp]
	0x14088054e: movabs rax, 0x7c366d33
	0x140880558: xor rax, rsi
	0x14088055b: xor rsi, rax
	0x14088055e: xor rax, rsi
	0x140880561: xor rsi, rax
	0x140880564: xor rax, rsi
	0x140880567: xor rsi, rax
	0x14088056a: dec rax
	0x14088056d: xor rsi, rax
	0x140880570: xor rax, rsi
	0x140880573: xor rsi, rax
	0x140880576: xor rax, rsi
	0x140880579: xor rsi, rax
	0x14088057c: xor rax, rsi
	0x14088057f: push rdx
	0x140880580: movabs rdx, 0x476f1c8b
	0x14088058a: add rax, rdx
	0x14088058d: pop rdx
	0x14088058e: add rax, 0x6d3a5a68
	0x140880594: push r15
	0x140880596: movabs r15, 0x7f5f222a
	0x1408805a0: add rax, r15
	0x1408805a3: pop r15
	0x1408805a5: push rdi
	0x1408805a6: movabs rdi, 0x1b03f050a
	0x1408805b0: add rax, 0xf5acb00
	0x1408805b6: add rax, 0xeff42bf
	0x1408805bc: sub rax, 0xb779cd7
	0x1408805c2: sub rax, 0x65efea0
	0x1408805c8: sub rax, rdi
	0x1408805cb: add rax, 0x65efea0
	0x1408805d1: add rax, 0xb779cd7
	0x1408805d7: sub rax, 0xeff42bf
	0x1408805dd: sub rax, 0xf5acb00
	0x1408805e7: add rsp, 8
	0x1408805ee: sub r14, 0x797e8b43
	0x1408805f5: add r14, rax
	0x1408805f8: add r14, 0x797e8b43
	0x140880603: add rsp, 8
	0x14088060a: mov r10, rbp
	0x14088060d: add r10, 0xfd
	0x140880614: add r15, 0x78
	0x140880622: push 0xedcb0bf
	0x140880627: mov qword ptr [rsp], rbp
	0x14088062b: movabs rbp, 0x7ffef3cd
	0x140880635: and rbp, 0x7c9ca564
	0x14088063c: sub rbp, 0x7cedf3c4
	0x140880643: push rbp
	0x140880644: inc qword ptr [rsp]
	0x140880648: pop rbp
	0x140880649: add rbp, 0x7b7f38c1
	0x140880650: xchg rbp, r15
	0x140880653: not r15
	0x140880656: push rbp
	0x140880657: push r15
	0x140880659: pop rbp
	0x14088065a: pop r15
	0x14088065c: push r12
	0x14088065e: movabs r12, 0xb89d0ca6
	0x140880668: add rbp, r12
	0x14088066b: pop r12
	0x14088066d: neg rbp
	0x140880670: neg rbp
	0x140880673: push r8
	0x140880675: movabs r8, 0x73573402
	0x14088067f: add r8, 0x5fff713e
	0x140880686: and r8, 0x7ffd9621
	0x14088068d: push 0x41f5fa33
	0x140880692: mov qword ptr [rsp], r12
	0x140880696: movabs r12, 0x2cbf66f2
	0x1408806a0: xor r8, r12
	0x1408806a3: pop r12
	0x1408806a5: and rbp, r8
	0x1408806a8: push qword ptr [rsp]
	0x1408806ab: pop r8
	0x1408806ad: add rsp, 8
	0x1408806b1: not rbp
	0x1408806b4: inc rbp
	0x1408806b7: sub rsp, 8
	0x1408806bb: push r14
	0x1408806bd: mov r14, r12
	0x1408806c0: mov qword ptr [rsp + 8], r14
	0x1408806c5: mov r14, qword ptr [rsp]
	0x1408806c9: add rsp, 8
	0x1408806cd: mov r12, 0x3d6b2272
	0x1408806d4: add rbp, 0x6ff762aa
	0x1408806db: add rbp, 0x2dfda244
	0x1408806e2: add rbp, r12
	0x1408806e5: sub rbp, 0x2dfda244
	0x1408806ec: sub rbp, 0x6ff762aa
	0x1408806f3: push qword ptr [rsp]
	0x1408806f6: pop r12
	0x1408806f8: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140940cc2
	0x1408806fc: add qword ptr [r14], rbp
	0x1408806ff: mov rbp, qword ptr [rsp]
	0x140880703: add rsp, 8
Load [EBP+0xfd](STATIC)
	0x14088071f: mov rcx, qword ptr [r10]
	0x14088072c: add rcx, 0x18c7c6b
	0x140880748: push rcx
	0x140880749: mov r11, 0xf93ff14
	0x140880750: mov r13, rbp
	0x140880753: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088075a: and dword ptr [r13], r11d
	0x14088078e: pop rdi
	0x14088078f: sub rdi, 0x18c7c6b
	0x140880796: jmp rdi
handlers outputs:



basic block ends with indirect unconditional branch
	0x1408110ba: mov r15, 0
	0x1408110c1: mov r14, rbp
	0x1408110c4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408110cb: mov r14, qword ptr [r14]
	0x1408110d5: add r14, 7
	0x1408110dc: mov r15w, word ptr [r14]
	0x1408110e0: mov r14, rbp
	0x1408110ea: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408110f1: xor r15d, dword ptr [r14]
	0x1408110fb: mov r14, rbp
	0x14081110c: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x14081111d: sub r15d, dword ptr [r14]
	0x140811127: mov r9, rbp
	0x140811138: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140811154: or dword ptr [r9], r15d
	0x14081116c: mov rsi, rbp
	0x140811179: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140811191: sub dword ptr [rsi], 0x519ec65b
	0x14081119e: mov rsi, rbp
	0x1408111b2: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x1408111c7: xor word ptr [rsi], r15w
	0x1408111d9: mov r14, rbp
	0x1408111f1: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1408111f8: mov r14, qword ptr [r14]
	0x140811205: add r14, 5
	0x140811216: movzx r13, word ptr [r14]
	0x140811228: mov rdi, rbp
	0x140811239: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081124e: sub r13d, dword ptr [rdi]
	0x140811261: mov r9, rbp
	0x140811272: add r9, 0xf0
Load [EBP+0xf0](STATIC)
	0x140811279: sub r13d, dword ptr [r9]
	0x14081128a: mov rdi, rbp
	0x140811294: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408112a9: add dword ptr [rdi], r13d
	0x1408112ac: mov r9, rbp
	0x1408112af: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1408112b9: sub dword ptr [r9], 0x18a41b0c
	0x1408112c0: mov r9, rbp
	0x1408112d8: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x1408112f4: mov r14b, byte ptr [r9]
	0x1408112f7: cmp r14b, 0x16
	0x1408112fb: jbe 0x140811316
	0x140811320: mov r14, rbp
	0x140811323: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081132a: xor word ptr [r14], r13w
	0x14081132e: mov rax, rbp
	0x140811331: mov rsi, rbp
	0x14081133e: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
	0x140811355: movzx rsi, word ptr [rsi]
	0x140811363: add si, 0x61aa
	0x140811368: add rax, 0x16e
	0x14081136e: add rsi, rbp
Load [EBP+0x16e](STATIC)
	0x140811374: movzx rax, word ptr [rax]
	0x140811378: sub ax, 0x5ebb
Load [EBP+0xb7](VM_REGISTER)
	0x14081137c: mov rsi, qword ptr [rsi]
	0x14081137f: add rax, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140811382: add dword ptr [rax], esi
	0x140811384: pushfq
	0x140811385: add rax, 4
Store VM_REG [EBP+0x159]
	0x14081138b: mov dword ptr [rax], 0
	0x140811391: mov rcx, 0
	0x14081139f: mov rdx, rbp
	0x1408113b7: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408113c4: mov rdx, qword ptr [rdx]
	0x1408113ce: add rdx, 4
	0x1408113d5: mov cl, byte ptr [rdx]
	0x1408113d7: cmp cl, 0
	0x1408113da: je 0x140811442
	0x1408113e0: mov rdx, rbp
	0x1408113f4: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x140811409: mov rdx, qword ptr [rdx]
	0x14081141a: add rdx, 0
	0x140811421: mov cx, word ptr [rdx]
	0x14081142b: add rcx, rbp
	0x140811438: pop r11
Store VM_REG [EBP+0x26]
	0x14081143a: mov qword ptr [rcx], r11
	0x14081144e: mov r10b, 0xc5
	0x140811457: mov rsi, rbp
	0x14081146b: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140811480: xor byte ptr [rsi], r10b
	0x14081148a: mov rcx, rbp
	0x14081149a: mov r15, rbp
	0x14081149d: add r15, 0xab
	0x1408114ab: add rcx, 0x145
Load [EBP+0xab](STATIC)
	0x1408114bb: mov r15, qword ptr [r15]
Load [EBP+0x145](STATIC)
	0x1408114cc: mov rcx, qword ptr [rcx]
	0x1408114e0: add rcx, 2
	0x1408114ee: movzx rcx, word ptr [rcx]
	0x140811514: xor ecx, 0x6fbb25d4
	0x140811545: and rcx, 0xffff
	0x140811560: shl rcx, 3
	0x140811575: add r15, rcx
	0x140811578: mov r13, qword ptr [r15]
	0x140811582: mov rsi, rbp
	0x140811585: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ccb
	0x14081158c: add qword ptr [rsi], 9
	0x140811593: jmp r13
handlers outputs:



	0x140767a58: mov r11, 0
	0x140767a66: mov r9, rbp
	0x140767a69: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140767a85: mov r9, qword ptr [r9]
	0x140767a88: add r9, 4
	0x140767a9c: mov r11w, word ptr [r9]
	0x140767ad3: mov r14, rbp
	0x140767ae4: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x140767af2: xor r11d, dword ptr [r14]
	0x140767afc: mov rdi, rbp
	0x140767b09: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767b17: or dword ptr [rdi], r11d
	0x140767b21: mov rdx, rbp
	0x140767b35: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767b3f: or dword ptr [rdx], 0xe0e0af6
	0x140767b45: mov rsi, rbp
	0x140767b5d: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140767b72: sub word ptr [rsi], r11w
	0x140767b8b: mov r10, rbp
	0x140767b95: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x140767ba3: mov r10, qword ptr [r10]
	0x140767bb7: mov r8, rbp
	0x140767bcb: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767bd9: mov r8, qword ptr [r8]
	0x140767be9: add r8, 8
	0x140767bf0: movzx r8, word ptr [r8]
	0x140767c02: mov r15, rbp
	0x140767c13: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140767c1a: xor r8d, dword ptr [r15]
	0x140767c24: add r8d, 0x724b433
	0x140767c57: and r8, 0xffff
	0x140767c73: shl r8, 3
	0x140767c7a: add r10, r8
	0x140767c7d: mov rdi, qword ptr [r10]
	0x140767c8a: mov rsi, rbp
	0x140767c9b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140767cb3: mov qword ptr [rsi], rdi
	0x140767cc4: mov r8, rbp
	0x140767cd8: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767ce6: mov r8, qword ptr [r8]
	0x140767ce9: add r8, 6
	0x140767cf0: movzx r9, word ptr [r8]
	0x140767d02: mov r8, rbp
	0x140767d05: add r8, 0xbf
	0x140767d13: mov r15, 0xd5
Load [EBP+0xbf](STATIC)
	0x140767d20: xor r9d, dword ptr [r8]
	0x140767d23: and r15, 0x20
	0x140767d2a: mov rbx, rbp
	0x140767d2d: add rbx, 0xf0
	0x140767d34: mov rdx, 0
Load [EBP+0xf0](STATIC)
	0x140767d42: add r9d, dword ptr [rbx]
	0x140767d45: and r15, 0x10
	0x140767d53: mov r12, rbp
	0x140767d56: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767d64: add dword ptr [r12], r9d
	0x140767d76: mov rax, rbp
	0x140767d80: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767d89: or dword ptr [rax], 0x67d1c4a3
	0x140767d96: mov r14, rbp
	0x140767d99: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x140767da0: mov r12b, byte ptr [r14]
	0x140767da3: cmp r12b, 0xb2
	0x140767da7: jbe 0x140767dd3
	0x140767dd3: mov r14, rbp
	0x140767de4: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140767deb: sub word ptr [r14], r9w
	0x140767def: mov rcx, rbp
	0x140767df2: mov r10, rbp
	0x140767df5: add r10, 0x145
	0x140767dfc: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140767e03: mov rcx, qword ptr [rcx]
Load [EBP+0x145](STATIC)
	0x140767e06: mov r10, qword ptr [r10]
	0x140767e09: add rcx, 0xc
	0x140767e10: add r10, 4
	0x140767e17: movzx rbx, word ptr [rcx]
	0x140767e1f: add rbx, rbp
	0x140767e22: mov rdi, rbp
	0x140767e25: add rdi, 0xbf
Load [EBP+0xe8](VM_REGISTER)
	0x140767e2c: mov rbx, qword ptr [rbx]
	0x140767e2f: sub rdi, rbx
	0x140767e32: pushfq
	0x140767e57: pop rdi
	0x140767e5f: mov rbx, rbp
	0x140767e73: mov r8, rbp
	0x140767e76: add rbx, 0x145
	0x140767e84: add r8, 0x16e
	0x140767e99: mov r9, rbp
	0x140767ea3: add r9, 0xd6
Load [EBP+0x145](STATIC)
	0x140767eb4: mov rbx, qword ptr [rbx]
	0x140767ec4: add rbx, 0
Load [EBP+0xd6](STATIC)
	0x140767edc: movzx r9, word ptr [r9]
	0x140767eee: mov r15d, dword ptr [rbx]
	0x140767ef8: add r9, rbp
	0x140767f0c: mov rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140767f20: mov r9, qword ptr [r9]
Deref(t3377,ds)
	0x140767f30: mov r9, qword ptr [r9]
Load [EBP+0x16e](STATIC)
	0x140767f33: movzx r8, word ptr [r8]
	0x140767f3e: sub r8w, 0xc1e2
	0x140767f4a: add r8, rbp
	0x140767f50: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767f5a: and dword ptr [rsi], r15d
Store VM_REG [EBP+0xb7]
	0x140767f64: mov qword ptr [r8], r9
	0x140767f8e: mov r11, 0
	0x140767f9c: mov r13, 0x400
	0x140767fa3: or r11, 0x78
	0x140767faa: mov rdi, 0xd5
	0x140767fb8: and r11, 0x80
	0x140767fbf: mov rax, 0
	0x140767fc6: add r11, rdi
	0x140767fc9: and rax, r8
	0x140767fcc: sub rax, 4
	0x140767fd2: xor r11, rdx
	0x140767fd8: push 0x2a02c743
	0x140767fdd: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x2c32f9f5
	0x140767fe1: mov qword ptr [rsp], r15
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x2c32f9f5
	0x140767fe5: pop qword ptr [rsp]
	0x140767fe8: push 0x7d00de51
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140767fed: mov qword ptr [rsp], rbp
	0x140767ff1: pop r15
	0x140767ff3: push 0x5c32610a
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x400
	0x140767ff8: mov qword ptr [rsp], r13
	0x140767ffc: push 0x76159375
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xb7 + context) & 0xffffffffffffffff)
	0x140768001: mov qword ptr [rsp], r8
	0x140768005: push 0x3181c26a
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14076800a: mov qword ptr [rsp], r15
	0x14076800e: pop r8
	0x140768010: push r8
	0x140768012: pop r13
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140768014: push qword ptr [rsp]
	0x14076801b: add rsp, 8
	0x140768022: add rsp, 8
	0x140768026: push rax
	0x140768027: push r10
	0x140768029: mov r10, r13
	0x14076802c: mov rax, r10
	0x14076802f: mov r10, qword ptr [rsp]
	0x140768033: add rsp, 8
	0x14076803a: mov r12, rax
	0x14076803d: mov rax, qword ptr [rsp]
	0x140768041: add rsp, 8
	0x140768045: pop r13
	0x140768047: pop r15
	0x140768049: add r13, 8
	0x140768057: mov r8, rbp
	0x14076805a: xor rax, 0x80
	0x140768060: add r8, 0xfd
Load [EBP+0xfd](STATIC)
	0x140768067: mov rsi, qword ptr [r8]
	0x140768078: xor rsi, 0x1c50de46
	0x14076807f: push rsi
	0x140768087: or rax, 8
	0x14076808d: sub r13, 0x80
	0x140768094: push 0x2ff3da44
	0x140768099: sub rsp, 8
	0x14076809d: sub rsp, 8
	0x1407680a1: mov qword ptr [rsp], rbp
	0x1407680a5: pop qword ptr [rsp]
	0x1407680a8: pop qword ptr [rsp]
	0x1407680ab: push r11
	0x1407680ad: movabs r11, 0x39fe759
	0x1407680b7: mov rbp, r11
	0x1407680ba: pop r11
	0x1407680bc: push 0x5f6e2247
	0x1407680c1: push 0x579e8292
	0x1407680c6: mov qword ptr [rsp], rax
	0x1407680ca: pop qword ptr [rsp]
	0x1407680cd: movabs rax, 0x39fe61c
	0x1407680d7: xor rbp, rax
	0x1407680de: add rsp, 8
	0x1407680e2: sub r12, 0x6ff65921
	0x1407680e9: add r12, 0x7beebae4
	0x1407680f0: sub r12, 0x3f777f7f
	0x1407680f7: sub r12, 0x6930edb6
	0x1407680fe: sub r12, 0x77ebfdd9
	0x140768105: add r12, rbp
	0x140768108: add r12, 0x77ebfdd9
	0x14076810f: add r12, 0x6930edb6
	0x140768116: add r12, 0x3f777f7f
	0x14076811d: sub r12, 0x7beebae4
	0x140768124: add r12, 0x6ff65921
	0x14076812b: push qword ptr [rsp]
	0x14076812e: pop rbp
	0x14076812f: add rsp, 8
	0x14076813a: mov rdx, 0x200
	0x140768141: mov rcx, 0
	0x140768156: push 0x1e01f800
	0x14076815b: mov qword ptr [rsp], r11
	0x14076815f: movabs r11, 0xe
	0x140768169: sub rsp, 8
	0x14076816d: push r10
	0x14076816f: pop qword ptr [rsp]
	0x140768172: mov r10, 0
	0x140768179: sub r10, 0x5a778f12
	0x140768180: add r10, r12
	0x140768183: add r10, 0x5a778f12
	0x14076818a: push 0x32901bb1
	0x14076818f: push r8
	0x140768191: push rcx
	0x140768192: push rdx
	0x140768193: add qword ptr [rsp], 0x476fea9c
	0x14076819b: pop rcx
	0x14076819c: sub rcx, 0x476fea9c
	0x1407681a3: push r15
	0x1407681a5: mov r15, rcx
	0x1407681a8: mov r8, r15
	0x1407681ab: pop r15
	0x1407681b1: push r13
	0x1407681b3: mov r13, rsp
	0x1407681b6: add r13, 8
	0x1407681ba: add r13, 8
	0x1407681c1: xchg qword ptr [rsp], r13
	0x1407681c5: pop rsp
	0x1407681c6: mov qword ptr [rsp + 8], r8
	0x1407681cf: add rsp, 8
	0x1407681d6: mov rdx, 0
	0x1407681dd: sub rdx, 0x3ffbad30
	0x1407681e4: add rdx, r10
	0x1407681e7: add rdx, 0x3ffbad30
	0x1407681ee: add qword ptr [rdx], r11
	0x1407681f5: add rsp, 8
	0x1407681fc: pop r10
	0x1407681fe: push qword ptr [rsp]
	0x140768205: add rsp, 8
	0x14076820c: add rsp, 8
	0x140768248: pop rbx
	0x140768249: xor rbx, 0x1c50de46
	0x140768250: jmp rbx
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940ce4
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f095: mov r9, rbp
	0x14081f098: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f09f: xor dword ptr [r9], 0x16359d86
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940cf4
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



	0x14089253f: mov r11, rbp
	0x140892545: add rsi, 0x800
	0x140892553: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140892561: mov r11, qword ptr [r11]
	0x14089256b: mov r9, rsi
	0x140892575: add r11, 0
	0x14089257c: or rdi, 0x800
	0x140892583: movzx r10, word ptr [r11]
	0x14089258e: or r9, 0x20
	0x140892595: mov r12, rbp
	0x140892598: mov r11, 0x200
	0x14089259f: mov r14, 0xd5
	0x1408925a6: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408925bb: xor r10d, dword ptr [r12]
	0x1408925bf: add rdi, r14
	0x1408925c9: mov rcx, rbp
	0x1408925cc: or r14, 0x90
	0x1408925d6: add rcx, 0xf0
	0x1408925dd: and r9, rdi
Load [EBP+0xf0](STATIC)
	0x1408925e0: sub r10d, dword ptr [rcx]
	0x1408925e3: mov r8, 0x12
	0x1408925ea: mov rcx, rbp
	0x1408925ed: add rcx, 0xbf
	0x1408925f4: sub r14, rcx
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408925f7: or dword ptr [rcx], r10d
	0x1408925fa: mov rbx, rbp
	0x1408925fd: add r8, 0xffff
	0x140892604: or r11, 0x40
	0x14089260b: add rbx, 0xa7
	0x140892612: and r9, 0x10
	0x140892619: mov rsi, r10
	0x14089261c: xor r9, 0x80
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140892623: and dword ptr [rbx], 0x3bab6404
	0x140892629: or r11, 8
	0x140892630: mov rdx, rbp
	0x140892633: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x14089263a: mov r15b, byte ptr [rdx]
	0x14089263d: cmp r15b, 0xa6
	0x140892641: jbe 0x140892658
	0x140892658: and r11, 0x7fffffff
	0x140892666: mov r13, 1
	0x14089266d: mov rax, rbp
	0x140892670: add rax, 0x16e
	0x140892676: add r13, r15
	0x140892679: xor r11, 4
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140892680: xor word ptr [rax], r10w
	0x140892684: or r14, 0x3f
	0x14089268b: xor rcx, 0x80
	0x140892692: and rcx, 0x80
	0x140892699: or r14, r15
	0x14089269f: or r14, 0x80
	0x1408926ad: mov r12, 0x200
	0x1408926b4: mov rax, 0
	0x1408926c2: sub rax, 0x80
	0x1408926c8: mov rdi, 0
	0x1408926cf: mov r15d, 0
	0x1408926d5: xor rax, 8
	0x1408926db: mov r10, 1
	0x1408926e2: push r15
	0x1408926e4: add rcx, rsi
	0x1408926e7: or r10, 0x3f
	0x1408926ee: mov r15d, 0xd5
	0x1408926f4: push r15
	0x1408926f6: xor r10, 0x7fffffff
	0x1408926fd: xor rcx, 4
	0x140892704: call 0x1407c1158
	0x1407c1158: push rax
	0x1407c1159: push rcx
	0x1407c115a: push rdx
	0x1407c115b: push rbx
	0x1407c115c: push rbp
	0x1407c115d: push rsi
	0x1407c115e: push rdi
	0x1407c115f: push r15
	0x1407c1161: push r14
	0x1407c1163: push r13
	0x1407c1165: push r12
	0x1407c1167: push r11
	0x1407c1169: push r10
	0x1407c116b: push r9
	0x1407c116d: push r8
	0x1407c116f: mov r8, 0x6d85ec7a
	0x1407c1176: mov r10, rbp
	0x1407c1179: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1180: and dword ptr [r10], r8d
	0x1407c1183: mov r8, 0x6d2ae626
	0x1407c118a: mov r10, rbp
	0x1407c118d: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407c1194: sub dword ptr [r10], r8d
	0x1407c11ae: mov r12, rsp
	0x1407c11b8: add r12, 0x80
	0x1407c11d4: mov r13, qword ptr [r12]
	0x1407c11d8: cmp r13b, 0xd5
	0x1407c11dc: jne 0x1407c1221
	0x1407c11ec: mov r12, rbp
	0x1407c1204: add r12, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407c1212: movzx rdx, word ptr [r12]
	0x1407c1221: cmp r13b, 0x24
	0x1407c1225: jne 0x1407c124d
	0x1407c124d: cmp r13b, 0
	0x1407c1251: jne 0x1407c1276
	0x1407c12a1: mov rdi, rsp
	0x1407c12b2: add rdi, 0x88
	0x1407c12b9: mov qword ptr [rdi], rdx
	0x1407c12da: pop r8
	0x1407c12dc: pop r9
	0x1407c12de: pop r10
	0x1407c12e0: pop r11
	0x1407c12e2: pop r12
	0x1407c12e4: pop r13
	0x1407c12e6: pop r14
	0x1407c12e8: pop r15
	0x1407c12ea: pop rdi
	0x1407c12eb: pop rsi
	0x1407c12ec: pop rbp
	0x1407c12ed: pop rbx
	0x1407c12ee: pop rdx
	0x1407c12ef: pop rcx
	0x1407c12f0: pop rax
	0x1407c12f1: ret 8
basic block ends with indirect unconditional branch
	0x140892710: pop r15
	0x14089272a: sub r15w, 0x4591
	0x14089273a: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14089273d: mov r15, qword ptr [r15]
	0x140892755: push r15
	0x140892768: mov rcx, 0
	0x140892784: mov r15, rbp
	0x14089278e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140892798: mov r15, qword ptr [r15]
	0x1408927b0: add r15, 2
	0x1408927be: mov cx, word ptr [r15]
	0x1408927c2: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1408927d6: sub qword ptr [rcx], 8
	0x1408927dd: mov rdx, 0x7022856d
	0x1408927e4: mov r11, rbp
	0x1408927e7: mov rbx, rbp
	0x1408927ea: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408927f1: add dword ptr [rbx], edx
	0x1408927f3: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1408927fa: mov r8d, dword ptr [r11]
	0x1408927fd: and r8d, 1
	0x140892804: cmp r8d, 0
	0x14089280b: je 0x140892822
	0x140892830: mov r15b, 0x91
	0x14089283a: mov r12, rbp
	0x140892847: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140892855: sub byte ptr [r12], r15b
	0x14089286a: mov r8, rbp
	0x140892882: add r8, 0x145
	0x14089289e: mov rsi, rbp
Load [EBP+0x145](STATIC)
	0x1408928b6: mov r8, qword ptr [r8]
	0x1408928b9: add r8, 4
	0x1408928c0: movzx r8, word ptr [r8]
	0x1408928c4: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1408928e0: mov rsi, qword ptr [rsi]
	0x140892910: mov rcx, rbp
	0x140892921: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140892939: sub dword ptr [rcx], r8d
	0x14089293c: and r8, 0xffff
	0x14089295b: shl r8, 3
	0x14089296d: add rsi, r8
	0x140892970: mov rdi, qword ptr [rsi]
	0x140892976: mov rax, rbp
	0x140892979: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940cfa
	0x14089297f: add qword ptr [rax], 6
	0x140892986: jmp rdi
handlers outputs:



	0x14087ff3e: mov rbx, rbp
	0x14087ff41: add rdi, rdx
	0x14087ff44: add rdi, 4
	0x14087ff4b: add rbx, 0xab
	0x14087ff5c: mov r12, rbp
	0x14087ff62: mov r9, rdi
Load [EBP+0xab](STATIC)
	0x14087ff65: mov rbx, qword ptr [rbx]
	0x14087ff68: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14087ff6f: mov r12, qword ptr [r12]
	0x14087ff7a: add r12, 0
	0x14087ff88: movzx r12, word ptr [r12]
	0x14087ffcb: add r12d, 0x7eb1668
	0x14087ffe0: mov rsi, rbp
	0x14087fff1: add rsi, 0xbf
	0x14087fff8: mov rax, 0
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880006: or dword ptr [rsi], r12d
	0x140880017: and r12, 0xffff
	0x14088002f: shl r12, 3
	0x140880033: add rbx, r12
	0x140880036: sub r9, 0x78
	0x140880044: mov r8, qword ptr [rbx]
	0x140880047: mov rdx, 0x12
	0x14088004e: mov rsi, rbp
	0x140880051: and rdx, rax
	0x140880054: sub rdx, r9
	0x140880057: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140880068: mov qword ptr [rsi], r8
	0x140880080: mov r11, rbp
	0x140880083: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14088008a: mov r11, qword ptr [r11]
	0x140880094: add r11, 6
	0x1408800a5: mov r12d, dword ptr [r11]
	0x1408800a8: mov rdi, rbp
	0x1408800ae: sub rdx, 0xffff
	0x1408800b8: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408800c6: add r12d, dword ptr [rdi]
	0x1408800de: mov r8, rbp
	0x1408800eb: add r8, 0xa7
Load [EBP+0xa7](STATIC)
	0x140880100: add r12d, dword ptr [r8]
	0x140880103: mov rdi, 0x400
	0x140880111: mov rax, rbp
	0x14088011b: xor rdi, 8
	0x140880125: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140880140: or dword ptr [rax], r12d
	0x140880143: xor rdi, rax
	0x14088014d: sub rdx, rdx
	0x140880150: mov r8, rbp
	0x140880153: sub rdx, r12
	0x14088015d: add r8, 0xa7
	0x140880164: or rdx, 1
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088016b: or dword ptr [r8], 0x6cddcd8d
	0x140880179: add rdi, 0x7fffffff
	0x140880180: mov r8, rbp
	0x140880183: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140880191: add dword ptr [r8], r12d
	0x140880194: mov rbx, 0x12
	0x1408801a5: and rdi, 0x400
	0x1408801b3: add rdx, 0x7fffffff
	0x1408801cf: mov r13, 0
	0x1408801d6: or rdi, 0x40
	0x1408801dd: mov r9, rbp
	0x1408801e0: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1408801e7: mov r9, qword ptr [r9]
	0x1408801ea: add rdx, r13
	0x1408801ed: add r9, 2
	0x1408801f4: add rdi, 0x7fffffff
	0x1408801fb: sub rdx, 0x800
	0x140880209: movzx r13, word ptr [r9]
	0x140880210: or rbx, rbx
	0x14088021a: sub rdx, 8
	0x14088022d: sub rdx, rbx
	0x14088023e: sub rdi, -0x80000000
	0x140880245: mov rax, 0
	0x14088024c: or rax, 0xf0
	0x140880252: mov r11, rbp
	0x14088025c: xor rdx, r11
	0x14088025f: or rax, 0x20
	0x140880265: add r11, 0xbf
	0x14088026c: or rdx, 0x80
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088027a: add dword ptr [r11], r13d
	0x14088027d: sub rax, 4
	0x140880283: sub rdx, r12
	0x140880289: and rax, 4
	0x14088028f: mov r8, 0
	0x1408802a0: xor rax, r8
	0x1408802aa: add rax, 0x20
	0x1408802b0: mov r9, rbp
	0x1408802b3: mov r15, 0xd5
	0x1408802ba: add r9, 0x130
	0x1408802c1: or rax, 0xffffffff80000000
	0x1408802ce: add rdx, 0x7fffffff
Load [EBP+0x130](STATIC)
	0x1408802d5: mov r12b, byte ptr [r9]
	0x1408802d8: cmp r12b, 0x6b
	0x1408802dc: jbe 0x1408802ef
	0x1408802e2: sub rax, 4
	0x1408802e8: sub r13d, 0x4deb4079
	0x1408802f6: mov r9, rbp
	0x1408802f9: and rdi, 0x40
	0x140880303: add r9, 0x16e
	0x14088030a: sub rdx, 0xf0
	0x140880311: and rax, 0x20
	0x140880317: and r15, 0xf0
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088031e: sub word ptr [r9], r13w
	0x140880322: mov r12, rbp
	0x14088032c: mov rsi, rbp
	0x14088032f: add rsi, 0x58
Load [EBP+0x58](STATIC)
	0x14088033d: mov esi, dword ptr [rsi]
	0x14088033f: xor esi, 0x21172332
	0x140880345: add r12, 0x16e
	0x14088034c: sub rax, 0x80
Load [EBP+0x16e](STATIC)
	0x140880352: movzx r12, word ptr [r12]
	0x14088035e: add r12w, 0xba5
	0x14088036b: add rdi, 0xf0
	0x140880372: add r12, rbp
	0x140880375: sub rdi, -0x80000000
Store VM_REG [EBP+0x15d]
	0x14088037f: mov dword ptr [r12], esi
	0x140880383: add r12, 4
	0x140880391: and rdi, 0x80
Store VM_REG [EBP+0x161]
	0x140880398: mov dword ptr [r12], 0
	0x1408803a0: mov r8, rbp
	0x1408803a3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1408803aa: mov r8, qword ptr [r8]
	0x1408803ad: add r8, 0xa
	0x1408803b4: movzx rsi, word ptr [r8]
	0x1408803b8: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1408803bb: mov rsi, qword ptr [rsi]
	0x1408803be: or rdx, rsi
	0x1408803c1: pushfq
	0x1408803eb: pop rdx
	0x1408803ec: mov rsi, rbp
	0x1408803ef: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1408803f6: mov rsi, qword ptr [rsi]
	0x1408803f9: add rsi, 0xe
	0x140880400: movzx r14, word ptr [rsi]
	0x140880404: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140880407: mov r14, qword ptr [r14]
	0x14088040a: xor rdx, r14
	0x14088040d: pushfq
	0x14088041c: mov r9, rbp
	0x14088041f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140880426: mov r9, qword ptr [r9]
	0x140880429: add r9, 0xc
	0x140880437: pop rdx
	0x14088044d: add r15, 0x40
	0x14088046f: or r12, r15
	0x140880472: and r12, 0x88
	0x140880480: add r12, 0x80
	0x140880487: sub r12, 0x10
	0x14088048e: push r9
	0x140880490: mov r9, rsp
	0x140880493: add r9, 8
	0x140880497: sub r9, 8
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x14088049e: xchg qword ptr [rsp], r9
	0x1408804a2: pop rsp
	0x1408804a3: push r12
	0x1408804a5: push r8
	0x1408804a7: pop r12
	0x1408804a9: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804ad: mov qword ptr [rsp], r12
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xa + bytecode) & 0xffffffffffffffff)
	0x1408804b1: pop qword ptr [rsp + 8]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
	0x1408804b5: mov r12, qword ptr [rsp]
	0x1408804b9: add rsp, 8
	0x1408804bd: push 0x73335fd3
	0x1408804c2: mov qword ptr [rsp], r9
	0x1408804c6: push 0x3372c5dd
	0x1408804cb: mov qword ptr [rsp], rdx
	0x1408804cf: push 0x17a1c693
	0x1408804d4: mov qword ptr [rsp], rbp
	0x1408804d8: xor qword ptr [rsp], 0x7f452399
	0x1408804e0: mov rdx, qword ptr [rsp]
	0x1408804e4: add rsp, 8
	0x1408804e8: xor rdx, 0x7f452399
	0x1408804ef: mov r9, rdx
	0x1408804f2: pop rdx
	0x1408804f3: push r9
	0x1408804f5: sub qword ptr [rsp], 0x6f77dcf4
	0x1408804fd: mov r8, qword ptr [rsp]
	0x140880501: add rsp, 8
	0x140880505: push r15
	0x140880507: movabs r15, 0x6f77dcf4
	0x140880511: add r8, r15
	0x140880514: mov r15, qword ptr [rsp]
	0x140880518: add rsp, 8
	0x140880523: add rsp, 8
	0x14088052a: mov r14, r8
	0x14088052d: pop r8
	0x14088052f: add r15, 0x400
	0x14088053d: push 0x27568fe9
	0x140880542: push 0x7b3f4c47
	0x140880547: push rax
	0x140880548: pop qword ptr [rsp]
	0x14088054b: pop qword ptr [rsp]
	0x14088054e: movabs rax, 0x7c366d33
	0x140880558: xor rax, rsi
	0x14088055b: xor rsi, rax
	0x14088055e: xor rax, rsi
	0x140880561: xor rsi, rax
	0x140880564: xor rax, rsi
	0x140880567: xor rsi, rax
	0x14088056a: dec rax
	0x14088056d: xor rsi, rax
	0x140880570: xor rax, rsi
	0x140880573: xor rsi, rax
	0x140880576: xor rax, rsi
	0x140880579: xor rsi, rax
	0x14088057c: xor rax, rsi
	0x14088057f: push rdx
	0x140880580: movabs rdx, 0x476f1c8b
	0x14088058a: add rax, rdx
	0x14088058d: pop rdx
	0x14088058e: add rax, 0x6d3a5a68
	0x140880594: push r15
	0x140880596: movabs r15, 0x7f5f222a
	0x1408805a0: add rax, r15
	0x1408805a3: pop r15
	0x1408805a5: push rdi
	0x1408805a6: movabs rdi, 0x1b03f050a
	0x1408805b0: add rax, 0xf5acb00
	0x1408805b6: add rax, 0xeff42bf
	0x1408805bc: sub rax, 0xb779cd7
	0x1408805c2: sub rax, 0x65efea0
	0x1408805c8: sub rax, rdi
	0x1408805cb: add rax, 0x65efea0
	0x1408805d1: add rax, 0xb779cd7
	0x1408805d7: sub rax, 0xeff42bf
	0x1408805dd: sub rax, 0xf5acb00
	0x1408805e7: add rsp, 8
	0x1408805ee: sub r14, 0x797e8b43
	0x1408805f5: add r14, rax
	0x1408805f8: add r14, 0x797e8b43
	0x140880603: add rsp, 8
	0x14088060a: mov r10, rbp
	0x14088060d: add r10, 0xfd
	0x140880614: add r15, 0x78
	0x140880622: push 0xedcb0bf
	0x140880627: mov qword ptr [rsp], rbp
	0x14088062b: movabs rbp, 0x7ffef3cd
	0x140880635: and rbp, 0x7c9ca564
	0x14088063c: sub rbp, 0x7cedf3c4
	0x140880643: push rbp
	0x140880644: inc qword ptr [rsp]
	0x140880648: pop rbp
	0x140880649: add rbp, 0x7b7f38c1
	0x140880650: xchg rbp, r15
	0x140880653: not r15
	0x140880656: push rbp
	0x140880657: push r15
	0x140880659: pop rbp
	0x14088065a: pop r15
	0x14088065c: push r12
	0x14088065e: movabs r12, 0xb89d0ca6
	0x140880668: add rbp, r12
	0x14088066b: pop r12
	0x14088066d: neg rbp
	0x140880670: neg rbp
	0x140880673: push r8
	0x140880675: movabs r8, 0x73573402
	0x14088067f: add r8, 0x5fff713e
	0x140880686: and r8, 0x7ffd9621
	0x14088068d: push 0x41f5fa33
	0x140880692: mov qword ptr [rsp], r12
	0x140880696: movabs r12, 0x2cbf66f2
	0x1408806a0: xor r8, r12
	0x1408806a3: pop r12
	0x1408806a5: and rbp, r8
	0x1408806a8: push qword ptr [rsp]
	0x1408806ab: pop r8
	0x1408806ad: add rsp, 8
	0x1408806b1: not rbp
	0x1408806b4: inc rbp
	0x1408806b7: sub rsp, 8
	0x1408806bb: push r14
	0x1408806bd: mov r14, r12
	0x1408806c0: mov qword ptr [rsp + 8], r14
	0x1408806c5: mov r14, qword ptr [rsp]
	0x1408806c9: add rsp, 8
	0x1408806cd: mov r12, 0x3d6b2272
	0x1408806d4: add rbp, 0x6ff762aa
	0x1408806db: add rbp, 0x2dfda244
	0x1408806e2: add rbp, r12
	0x1408806e5: sub rbp, 0x2dfda244
	0x1408806ec: sub rbp, 0x6ff762aa
	0x1408806f3: push qword ptr [rsp]
	0x1408806f6: pop r12
	0x1408806f8: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140940d0a
	0x1408806fc: add qword ptr [r14], rbp
	0x1408806ff: mov rbp, qword ptr [rsp]
	0x140880703: add rsp, 8
Load [EBP+0xfd](STATIC)
	0x14088071f: mov rcx, qword ptr [r10]
	0x14088072c: add rcx, 0x18c7c6b
	0x140880748: push rcx
	0x140880749: mov r11, 0xf93ff14
	0x140880750: mov r13, rbp
	0x140880753: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088075a: and dword ptr [r13], r11d
	0x14088078e: pop rdi
	0x14088078f: sub rdi, 0x18c7c6b
	0x140880796: jmp rdi
handlers outputs:



	0x1407cd087: mov r10, rbp
	0x1407cd091: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd0a2: mov r10, qword ptr [r10]
	0x1407cd0a5: add r10, 2
	0x1407cd0b3: mov r8d, dword ptr [r10]
	0x1407cd0cb: mov rdi, rbp
	0x1407cd0dc: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd0f1: xor r8d, dword ptr [rdi]
	0x1407cd12f: mov rdx, rbp
	0x1407cd139: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cd153: or dword ptr [rdx], r8d
	0x1407cd15d: mov r14, rbp
	0x1407cd160: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407cd175: add dword ptr [r14], 0x5af029b3
	0x1407cd183: mov r11, rbp
	0x1407cd194: add r11, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407cd1ab: add dword ptr [r11], r8d
	0x1407cd1bf: mov r14, rbp
	0x1407cd1c2: add r14, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407cd1d7: add dword ptr [r14], r8d
	0x1407cd1e4: mov rdi, rbp
	0x1407cd1ee: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd20a: mov rdi, qword ptr [rdi]
	0x1407cd21a: add rdi, 0
	0x1407cd228: movzx r11, word ptr [rdi]
	0x1407cd23d: mov r15, rbp
	0x1407cd24e: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd263: sub r11d, dword ptr [r15]
	0x1407cd272: mov rbx, rbp
	0x1407cd275: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407cd27c: and dword ptr [rbx], r11d
	0x1407cd289: mov r13, rbp
	0x1407cd28c: add r13, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407cd293: and dword ptr [r13], 0x738865b
	0x1407cd29e: mov r13, rbp
	0x1407cd2a1: add r13, 0x130
Load [EBP+0x130](STATIC)
	0x1407cd2a8: mov bl, byte ptr [r13]
	0x1407cd2ac: cmp bl, 0x4b
	0x1407cd2af: jbe 0x1407cd2d1
	0x1407cd2d4: mov rsi, rbp
	0x1407cd2de: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407cd2f6: xor word ptr [rsi], r11w
	0x1407cd2fa: mov r12, rbp
	0x1407cd304: add r12, 0x16e
	0x1407cd30e: mov rax, rbp
	0x1407cd311: add rax, 0x58
Load [EBP+0x16e](STATIC)
	0x1407cd317: movzx r12, word ptr [r12]
Load [EBP+0x58](STATIC)
	0x1407cd323: mov eax, dword ptr [rax]
	0x1407cd325: add r12w, 0xc02
	0x1407cd32b: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407cd32e: sub dword ptr [r12], eax
	0x1407cd332: add r12, 4
Store VM_REG [EBP+0x159]
	0x1407cd339: mov dword ptr [r12], 0
	0x1407cd385: mov r15, rbp
	0x1407cd39d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407cd3b5: mov r15, qword ptr [r15]
	0x1407cd3c6: add r15, 6
	0x1407cd3cd: movzx r15, word ptr [r15]
	0x1407cd3d1: mov rsi, rbp
	0x1407cd3e5: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x1407cd3ef: mov rsi, qword ptr [rsi]
	0x1407cd403: mov rcx, rbp
	0x1407cd40d: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407cd429: add r15d, dword ptr [rcx]
	0x1407cd462: and r15, 0xffff
	0x1407cd485: shl r15, 3
	0x1407cd490: add rsi, r15
	0x1407cd49a: mov rax, qword ptr [rsi]
	0x1407cd4ae: mov rbx, rbp
	0x1407cd4b1: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d12
	0x1407cd4b8: add qword ptr [rbx], 8
	0x1407cd4bf: jmp rax
handlers outputs:



basic block ends with indirect unconditional branch
	0x14084da8c: mov rsi, 0
	0x14084daa0: mov r9, rbp
	0x14084daa3: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14084dab0: mov r9, qword ptr [r9]
	0x14084dabd: add r9, 0
	0x14084dac4: mov si, word ptr [r9]
	0x14084dacb: mov r15, rbp
	0x14084dad5: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084dadc: sub esi, dword ptr [r15]
	0x14084dadf: mov r9, rbp
	0x14084dae2: add r9, 0x120
Load [EBP+0x120](STATIC)
	0x14084daec: add esi, dword ptr [r9]
	0x14084daef: mov rcx, rbp
	0x14084db07: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084db18: xor dword ptr [rcx], esi
	0x14084db21: mov r9, rbp
	0x14084db31: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084db3b: sub dword ptr [r9], 0x2dc0ce6b
	0x14084db42: mov r14, rbp
	0x14084db48: add r14, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14084db55: add word ptr [r14], si
	0x14084db59: mov rax, rbp
	0x14084db5f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14084db72: mov rax, qword ptr [rax]
	0x14084db7f: add rax, 4
	0x14084db8f: movzx r9, word ptr [rax]
	0x14084db93: mov rdi, rbp
	0x14084dba0: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084dbae: sub r9d, dword ptr [rdi]
	0x14084dbb8: mov r14, rbp
	0x14084dbbb: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x14084dbc9: sub r9d, dword ptr [r14]
	0x14084dbd3: mov rdi, rbp
	0x14084dbe4: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084dbf5: or dword ptr [rdi], r9d
	0x14084dc0d: mov rax, rbp
	0x14084dc21: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084dc27: xor dword ptr [rax], 0x4afd550c
	0x14084dc30: mov r8, rbp
	0x14084dc36: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x14084dc3d: mov r11b, byte ptr [r8]
	0x14084dc40: cmp r11b, 1
	0x14084dc44: jbe 0x14084dc6d
	0x14084dc51: sub r9d, 0x2300dde1
	0x14084dc6d: mov r14, rbp
	0x14084dc7e: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14084dc85: add word ptr [r14], r9w
	0x14084dc89: mov rax, rbp
	0x14084dcbc: mov rcx, rbp
	0x14084dcc6: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14084dcd0: movzx rcx, word ptr [rcx]
	0x14084dcec: sub cx, 0x5219
	0x14084dd06: add rax, 0xd6
	0x14084dd13: add rcx, rbp
Load [EBP+0xd6](STATIC)
	0x14084dd20: movzx rax, word ptr [rax]
	0x14084dd2b: add ax, 0xa46b
	0x14084dd36: add rax, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14084dd47: mov rax, qword ptr [rax]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x14084dd57: sub dword ptr [rcx], eax
	0x14084dd66: add rcx, 4
Store VM_REG [EBP+0x159]
	0x14084dd74: mov dword ptr [rcx], 0
	0x14084dda2: mov r14, rbp
	0x14084ddb3: mov r12, rbp
	0x14084ddc4: add r14, 0xab
	0x14084ddd2: add r12, 0x145
Load [EBP+0xab](STATIC)
	0x14084ddd9: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14084dddc: mov r12, qword ptr [r12]
	0x14084dde0: add r12, 2
	0x14084ddf8: movzx r12, word ptr [r12]
	0x14084de37: sub r12d, 0x68a910ea
	0x14084de3e: mov r10, rbp
	0x14084de41: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084de48: add dword ptr [r10], r12d
	0x14084de59: and r12, 0xffff
	0x14084de60: shl r12, 3
	0x14084de72: add r14, r12
	0x14084de83: mov rdx, qword ptr [r14]
	0x14084de8d: mov rbx, rbp
	0x14084dea5: add rbx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d18
	0x14084deac: add qword ptr [rbx], 6
	0x14084deb3: jmp rdx
handlers outputs:



	0x1407b23a4: mov r15, rbp
	0x1407b23a7: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407b23ae: mov r15, qword ptr [r15]
	0x1407b23b9: add r15, 0xa
	0x1407b23c6: movzx r12, word ptr [r15]
	0x1407b23d4: mov r10, rbp
	0x1407b23d7: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407b23de: add r12d, dword ptr [r10]
	0x1407b23e1: mov r9, rbp
	0x1407b23e4: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b23eb: add dword ptr [r9], r12d
	0x1407b23ee: mov rdx, rbp
	0x1407b23f1: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b23f8: or dword ptr [rdx], 0x1f973947
	0x1407b23fe: mov r9, rbp
	0x1407b2401: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x1407b2408: mov r13b, byte ptr [r9]
	0x1407b240b: cmp r13b, 0xb1
	0x1407b240f: jbe 0x1407b2415
	0x1407b2415: mov rdx, rbp
	0x1407b2418: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407b241f: xor word ptr [rdx], r12w
	0x1407b243b: mov r12, rbp
	0x1407b244c: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2456: mov r12, qword ptr [r12]
	0x1407b2464: add r12, 0
	0x1407b2483: mov r11d, dword ptr [r12]
	0x1407b248e: mov rdx, rbp
	0x1407b2498: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b24b4: add r11d, dword ptr [rdx]
	0x1407b24eb: mov r15, rbp
	0x1407b24fc: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2506: xor dword ptr [r15], r11d
	0x1407b251e: mov rdx, rbp
	0x1407b2532: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b2546: or dword ptr [rdx], 0x386105fc
	0x1407b255d: mov r10, rbp
	0x1407b2563: add r10, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407b257b: add dword ptr [r10], r11d
	0x1407b258f: mov r12, rbp
	0x1407b2592: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407b25a0: or dword ptr [r12], r11d
	0x1407b25ae: mov rcx, rbp
	0x1407b25b1: mov r10, rbp
	0x1407b25b4: add rcx, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407b25c9: movzx rcx, word ptr [rcx]
	0x1407b25d7: add cx, 0xa7ef
	0x1407b25dc: add rcx, rbp
	0x1407b25df: add r10, 0x58
Load [EBP+0x58](STATIC)
	0x1407b25e6: mov r10d, dword ptr [r10]
	0x1407b25e9: xor r10d, 0x2a47101
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407b25f0: add dword ptr [rcx], r10d
	0x1407b25f3: pushfq
	0x1407b25f4: add rcx, 4
Store VM_REG [EBP+0x159]
	0x1407b25fb: mov dword ptr [rcx], 0
	0x1407b2608: mov r11, 0
	0x1407b261c: mov rdx, rbp
	0x1407b261f: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2633: mov rdx, qword ptr [rdx]
	0x1407b2647: add rdx, 0xc
	0x1407b265c: mov r11b, byte ptr [rdx]
	0x1407b265f: cmp r11b, 0
	0x1407b2663: je 0x1407b26cc
	0x1407b266c: mov rdx, rbp
	0x1407b267c: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2689: mov rdx, qword ptr [rdx]
	0x1407b268c: add rdx, 8
	0x1407b2693: mov r11w, word ptr [rdx]
	0x1407b26a4: add r11, rbp
	0x1407b26b5: pop r14
Store VM_REG [EBP+0x26]
	0x1407b26b7: mov qword ptr [r11], r14
	0x1407b26ec: mov cl, 0x81
	0x1407b26fc: mov r9, rbp
	0x1407b2714: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407b2729: xor byte ptr [r9], cl
	0x1407b2748: mov rdi, rbp
	0x1407b2755: mov r13, rbp
	0x1407b2765: add r13, 0xab
	0x1407b2780: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x1407b2787: mov rdi, qword ptr [rdi]
	0x1407b279b: add rdi, 4
	0x1407b27a9: movzx rdi, word ptr [rdi]
Load [EBP+0xab](STATIC)
	0x1407b27b4: mov r13, qword ptr [r13]
	0x1407b27f2: mov r12, rbp
	0x1407b2803: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b2814: or dword ptr [r12], edi
	0x1407b281f: and rdi, 0xffff
	0x1407b2834: shl rdi, 3
	0x1407b2838: add r13, rdi
	0x1407b2842: mov r10, qword ptr [r13]
	0x1407b284d: mov r12, rbp
	0x1407b2865: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d27
	0x1407b286c: add qword ptr [r12], 0xf
	0x1407b2874: jmp r10
handlers outputs:



	0x140767a58: mov r11, 0
	0x140767a66: mov r9, rbp
	0x140767a69: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140767a85: mov r9, qword ptr [r9]
	0x140767a88: add r9, 4
	0x140767a9c: mov r11w, word ptr [r9]
	0x140767ad3: mov r14, rbp
	0x140767ae4: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x140767af2: xor r11d, dword ptr [r14]
	0x140767afc: mov rdi, rbp
	0x140767b09: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767b17: or dword ptr [rdi], r11d
	0x140767b21: mov rdx, rbp
	0x140767b35: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767b3f: or dword ptr [rdx], 0xe0e0af6
	0x140767b45: mov rsi, rbp
	0x140767b5d: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140767b72: sub word ptr [rsi], r11w
	0x140767b8b: mov r10, rbp
	0x140767b95: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x140767ba3: mov r10, qword ptr [r10]
	0x140767bb7: mov r8, rbp
	0x140767bcb: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767bd9: mov r8, qword ptr [r8]
	0x140767be9: add r8, 8
	0x140767bf0: movzx r8, word ptr [r8]
	0x140767c02: mov r15, rbp
	0x140767c13: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140767c1a: xor r8d, dword ptr [r15]
	0x140767c24: add r8d, 0x724b433
	0x140767c57: and r8, 0xffff
	0x140767c73: shl r8, 3
	0x140767c7a: add r10, r8
	0x140767c7d: mov rdi, qword ptr [r10]
	0x140767c8a: mov rsi, rbp
	0x140767c9b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140767cb3: mov qword ptr [rsi], rdi
	0x140767cc4: mov r8, rbp
	0x140767cd8: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767ce6: mov r8, qword ptr [r8]
	0x140767ce9: add r8, 6
	0x140767cf0: movzx r9, word ptr [r8]
	0x140767d02: mov r8, rbp
	0x140767d05: add r8, 0xbf
	0x140767d13: mov r15, 0xd5
Load [EBP+0xbf](STATIC)
	0x140767d20: xor r9d, dword ptr [r8]
	0x140767d23: and r15, 0x20
	0x140767d2a: mov rbx, rbp
	0x140767d2d: add rbx, 0xf0
	0x140767d34: mov rdx, 0
Load [EBP+0xf0](STATIC)
	0x140767d42: add r9d, dword ptr [rbx]
	0x140767d45: and r15, 0x10
	0x140767d53: mov r12, rbp
	0x140767d56: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767d64: add dword ptr [r12], r9d
	0x140767d76: mov rax, rbp
	0x140767d80: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767d89: or dword ptr [rax], 0x67d1c4a3
	0x140767d96: mov r14, rbp
	0x140767d99: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x140767da0: mov r12b, byte ptr [r14]
	0x140767da3: cmp r12b, 0xb2
	0x140767da7: jbe 0x140767dd3
	0x140767dd3: mov r14, rbp
	0x140767de4: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140767deb: sub word ptr [r14], r9w
	0x140767def: mov rcx, rbp
	0x140767df2: mov r10, rbp
	0x140767df5: add r10, 0x145
	0x140767dfc: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140767e03: mov rcx, qword ptr [rcx]
Load [EBP+0x145](STATIC)
	0x140767e06: mov r10, qword ptr [r10]
	0x140767e09: add rcx, 0xc
	0x140767e10: add r10, 4
	0x140767e17: movzx rbx, word ptr [rcx]
	0x140767e1f: add rbx, rbp
	0x140767e22: mov rdi, rbp
	0x140767e25: add rdi, 0xbf
Load [EBP+0xce](VM_REGISTER)
	0x140767e2c: mov rbx, qword ptr [rbx]
	0x140767e2f: sub rdi, rbx
	0x140767e32: pushfq
	0x140767e57: pop rdi
	0x140767e5f: mov rbx, rbp
	0x140767e73: mov r8, rbp
	0x140767e76: add rbx, 0x145
	0x140767e84: add r8, 0x16e
	0x140767e99: mov r9, rbp
	0x140767ea3: add r9, 0xd6
Load [EBP+0x145](STATIC)
	0x140767eb4: mov rbx, qword ptr [rbx]
	0x140767ec4: add rbx, 0
Load [EBP+0xd6](STATIC)
	0x140767edc: movzx r9, word ptr [r9]
	0x140767eee: mov r15d, dword ptr [rbx]
	0x140767ef8: add r9, rbp
	0x140767f0c: mov rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140767f20: mov r9, qword ptr [r9]
Deref(t3415,ds)
	0x140767f30: mov r9, qword ptr [r9]
Load [EBP+0x16e](STATIC)
	0x140767f33: movzx r8, word ptr [r8]
	0x140767f3e: sub r8w, 0xc1e2
	0x140767f4a: add r8, rbp
	0x140767f50: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767f5a: and dword ptr [rsi], r15d
Store VM_REG [EBP+0x15d]
	0x140767f64: mov qword ptr [r8], r9
	0x140767f8e: mov r11, 0
	0x140767f9c: mov r13, 0x400
	0x140767fa3: or r11, 0x78
	0x140767faa: mov rdi, 0xd5
	0x140767fb8: and r11, 0x80
	0x140767fbf: mov rax, 0
	0x140767fc6: add r11, rdi
	0x140767fc9: and rax, r8
	0x140767fcc: sub rax, 4
	0x140767fd2: xor r11, rdx
	0x140767fd8: push 0x2a02c743
	0x140767fdd: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x6b48c25a
	0x140767fe1: mov qword ptr [rsp], r15
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x6b48c25a
	0x140767fe5: pop qword ptr [rsp]
	0x140767fe8: push 0x7d00de51
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140767fed: mov qword ptr [rsp], rbp
	0x140767ff1: pop r15
	0x140767ff3: push 0x5c32610a
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x400
	0x140767ff8: mov qword ptr [rsp], r13
	0x140767ffc: push 0x76159375
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x15d + context) & 0xffffffffffffffff)
	0x140768001: mov qword ptr [rsp], r8
	0x140768005: push 0x3181c26a
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14076800a: mov qword ptr [rsp], r15
	0x14076800e: pop r8
	0x140768010: push r8
	0x140768012: pop r13
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140768014: push qword ptr [rsp]
	0x14076801b: add rsp, 8
	0x140768022: add rsp, 8
	0x140768026: push rax
	0x140768027: push r10
	0x140768029: mov r10, r13
	0x14076802c: mov rax, r10
	0x14076802f: mov r10, qword ptr [rsp]
	0x140768033: add rsp, 8
	0x14076803a: mov r12, rax
	0x14076803d: mov rax, qword ptr [rsp]
	0x140768041: add rsp, 8
	0x140768045: pop r13
	0x140768047: pop r15
	0x140768049: add r13, 8
	0x140768057: mov r8, rbp
	0x14076805a: xor rax, 0x80
	0x140768060: add r8, 0xfd
Load [EBP+0xfd](STATIC)
	0x140768067: mov rsi, qword ptr [r8]
	0x140768078: xor rsi, 0x1c50de46
	0x14076807f: push rsi
	0x140768087: or rax, 8
	0x14076808d: sub r13, 0x80
	0x140768094: push 0x2ff3da44
	0x140768099: sub rsp, 8
	0x14076809d: sub rsp, 8
	0x1407680a1: mov qword ptr [rsp], rbp
	0x1407680a5: pop qword ptr [rsp]
	0x1407680a8: pop qword ptr [rsp]
	0x1407680ab: push r11
	0x1407680ad: movabs r11, 0x39fe759
	0x1407680b7: mov rbp, r11
	0x1407680ba: pop r11
	0x1407680bc: push 0x5f6e2247
	0x1407680c1: push 0x579e8292
	0x1407680c6: mov qword ptr [rsp], rax
	0x1407680ca: pop qword ptr [rsp]
	0x1407680cd: movabs rax, 0x39fe61c
	0x1407680d7: xor rbp, rax
	0x1407680de: add rsp, 8
	0x1407680e2: sub r12, 0x6ff65921
	0x1407680e9: add r12, 0x7beebae4
	0x1407680f0: sub r12, 0x3f777f7f
	0x1407680f7: sub r12, 0x6930edb6
	0x1407680fe: sub r12, 0x77ebfdd9
	0x140768105: add r12, rbp
	0x140768108: add r12, 0x77ebfdd9
	0x14076810f: add r12, 0x6930edb6
	0x140768116: add r12, 0x3f777f7f
	0x14076811d: sub r12, 0x7beebae4
	0x140768124: add r12, 0x6ff65921
	0x14076812b: push qword ptr [rsp]
	0x14076812e: pop rbp
	0x14076812f: add rsp, 8
	0x14076813a: mov rdx, 0x200
	0x140768141: mov rcx, 0
	0x140768156: push 0x1e01f800
	0x14076815b: mov qword ptr [rsp], r11
	0x14076815f: movabs r11, 0xe
	0x140768169: sub rsp, 8
	0x14076816d: push r10
	0x14076816f: pop qword ptr [rsp]
	0x140768172: mov r10, 0
	0x140768179: sub r10, 0x5a778f12
	0x140768180: add r10, r12
	0x140768183: add r10, 0x5a778f12
	0x14076818a: push 0x32901bb1
	0x14076818f: push r8
	0x140768191: push rcx
	0x140768192: push rdx
	0x140768193: add qword ptr [rsp], 0x476fea9c
	0x14076819b: pop rcx
	0x14076819c: sub rcx, 0x476fea9c
	0x1407681a3: push r15
	0x1407681a5: mov r15, rcx
	0x1407681a8: mov r8, r15
	0x1407681ab: pop r15
	0x1407681b1: push r13
	0x1407681b3: mov r13, rsp
	0x1407681b6: add r13, 8
	0x1407681ba: add r13, 8
	0x1407681c1: xchg qword ptr [rsp], r13
	0x1407681c5: pop rsp
	0x1407681c6: mov qword ptr [rsp + 8], r8
	0x1407681cf: add rsp, 8
	0x1407681d6: mov rdx, 0
	0x1407681dd: sub rdx, 0x3ffbad30
	0x1407681e4: add rdx, r10
	0x1407681e7: add rdx, 0x3ffbad30
	0x1407681ee: add qword ptr [rdx], r11
	0x1407681f5: add rsp, 8
	0x1407681fc: pop r10
	0x1407681fe: push qword ptr [rsp]
	0x140768205: add rsp, 8
	0x14076820c: add rsp, 8
	0x140768248: pop rbx
	0x140768249: xor rbx, 0x1c50de46
	0x140768250: jmp rbx
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d40
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f095: mov r9, rbp
	0x14081f098: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f09f: xor dword ptr [r9], 0x16359d86
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d50
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d72
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140820d66: mov r12, 0
	0x140820d7d: mov rdi, rbp
	0x140820d95: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140820da3: mov rdi, qword ptr [rdi]
	0x140820db7: add rdi, 0
	0x140820dc8: mov r12w, word ptr [rdi]
	0x140820dd3: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140820dd6: push qword ptr [r12]
	0x140820df2: mov rsi, 0
	0x140820e06: mov r12, rbp
	0x140820e13: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140820e32: mov r12, qword ptr [r12]
	0x140820e51: add r12, 0xe
	0x140820e6f: mov si, word ptr [r12]
	0x140820e8f: add rsi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140820eaa: push qword ptr [rsi]
	0x140820ec3: mov rcx, 0
	0x140820eca: mov rsi, rbp
	0x140820ed4: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140820ee7: mov rsi, qword ptr [rsi]
	0x140820ef8: add rsi, 0xa
	0x140820f14: mov cx, word ptr [rsi]
	0x140820f2c: add rcx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140820f36: push qword ptr [rcx]
	0x140820f4d: mov rdi, 0
	0x140820f65: mov r11, rbp
	0x140820f7c: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140820f9f: mov r11, qword ptr [r11]
	0x140820fa2: add r11, 0x14
	0x140820fbc: mov di, word ptr [r11]
	0x140820fc0: add rdi, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140820fc3: push qword ptr [rdi]
	0x140820fcc: mov rdi, 0
	0x140820fe3: mov r14, rbp
	0x140820ff4: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x140821016: mov r14, qword ptr [r14]
	0x140821034: add r14, 2
	0x14082104f: mov di, word ptr [r14]
	0x140821053: add rdi, rbp
Load [EBP+0x64](VM_REGISTER)
	0x14082106e: push qword ptr [rdi]
	0x140821087: mov r14, 0
	0x140821094: mov rdx, rbp
	0x1408210b6: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1408210cb: mov rdx, qword ptr [rdx]
	0x1408210ce: add rdx, 8
	0x1408210ed: mov r14w, word ptr [rdx]
	0x1408210f7: add r14, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140821118: push qword ptr [r14]
	0x140821129: mov r11, 0
	0x140821148: mov rbx, rbp
	0x140821163: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14082116a: mov rbx, qword ptr [rbx]
	0x140821181: add rbx, 6
	0x14082119d: mov r11w, word ptr [rbx]
	0x1408211a8: add r11, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1408211b2: pop qword ptr [r11]
	0x1408211b8: mov r12, 0
	0x1408211c6: mov rcx, rbp
	0x1408211da: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1408211e1: mov rcx, qword ptr [rcx]
	0x1408211eb: add rcx, 0x18
	0x14082120e: mov r12w, word ptr [rcx]
	0x140821212: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x14082121c: pop qword ptr [r12]
	0x14082122e: mov rdi, 0
	0x14082124a: mov r11, rbp
	0x140821259: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140821278: mov r11, qword ptr [r11]
	0x140821288: add r11, 4
	0x1408212a3: mov di, word ptr [r11]
	0x1408212ae: add rdi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1408212b1: pop qword ptr [rdi]
	0x1408212c8: mov rdx, 0
	0x1408212d6: mov rsi, rbp
	0x1408212ed: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140821305: mov rsi, qword ptr [rsi]
	0x140821308: add rsi, 0x10
	0x140821319: mov dx, word ptr [rsi]
	0x140821331: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140821350: pop qword ptr [rdx]
	0x140821367: mov r15, 0
	0x14082137f: mov r11, rbp
	0x140821389: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14082139a: mov r11, qword ptr [r11]
	0x1408213a7: add r11, 0x16
	0x1408213c6: mov r15w, word ptr [r11]
	0x1408213d1: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1408213f0: pop qword ptr [r15]
	0x140821401: mov rax, 0
	0x140821412: mov r12, rbp
	0x14082142a: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x140821445: mov r12, qword ptr [r12]
	0x140821464: add r12, 0x12
	0x140821472: mov ax, word ptr [r12]
	0x140821477: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x14082147a: pop qword ptr [rax]
	0x14082148d: mov r11b, 0xd4
	0x14082149a: mov r10, rbp
	0x1408214a7: add r10, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1408214bf: add byte ptr [r10], r11b
	0x1408214d3: mov r15, rbp
	0x1408214ee: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1408214fc: mov r15, qword ptr [r15]
	0x140821516: add r15, 0xc
	0x140821532: movzx r15, word ptr [r15]
	0x140821555: mov rsi, rbp
	0x140821562: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140821570: mov rsi, qword ptr [rsi]
	0x140821576: mov rax, rbp
	0x14082157c: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14082158f: xor r15d, dword ptr [rax]
	0x1408215b4: mov r8, rbp
	0x1408215da: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408215fd: xor dword ptr [r8], r15d
	0x140821606: and r15, 0xffff
	0x140821635: shl r15, 3
	0x140821640: add rsi, r15
	0x140821651: mov r11, qword ptr [rsi]
	0x140821677: mov r8, rbp
	0x140821681: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940d8c
	0x140821688: add qword ptr [r8], 0x1a
	0x14082168f: jmp r11
handlers outputs:



	0x14085606a: mov r15, 0
	0x140856071: mov rsi, rbp
	0x140856074: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140856082: mov rsi, qword ptr [rsi]
	0x140856088: add rsi, 0
	0x14085609c: mov r15w, word ptr [rsi]
	0x1408560b1: shl r15, 3
	0x1408560ca: mov rbx, rbp
	0x1408560d0: add rbx, 0xab
Load [EBP+0xab](STATIC)
	0x1408560e1: mov r13, qword ptr [rbx]
	0x1408560f1: add r13, r15
	0x140856102: mov r15, qword ptr [r13]
	0x140856106: mov r10, 0
	0x14085610d: mov rax, rbp
	0x140856125: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140856135: mov rax, qword ptr [rax]
	0x14085614d: add rax, 4
	0x14085615a: mov r10d, dword ptr [rax]
	0x14085615d: mov r11, r10
	0x140856167: and r10d, 0x80000000
	0x14085616e: cmp r10d, 0
	0x140856175: je 0x1408561aa
	0x1408561bb: mov rax, rbp
	0x1408561c5: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940eac
	0x1408561d2: add qword ptr [rax], r11
	0x1408561d5: jmp r15
handlers outputs:



	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0x5c](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409420ad
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



	0x1408827cb: mov rsi, 0
	0x1408827d2: mov rcx, rbp
	0x1408827d5: mov rbx, rbp
	0x1408827d8: add rcx, 0xa7
	0x1408827df: add rbx, 0x145
Load [EBP+0xa7](STATIC)
	0x1408827e6: mov r14d, dword ptr [rcx]
	0x1408827e9: and r14d, 1
Load [EBP+0x145](STATIC)
	0x1408827f0: mov rbx, qword ptr [rbx]
	0x1408827f3: add rbx, 2
	0x1408827fa: mov si, word ptr [rbx]
	0x1408827fd: add rsi, rbp
	0x140882800: cmp r14d, 0
	0x140882807: je 0x14088281d
	0x14088281d: mov rax, 0
	0x140882824: mov r12, rbp
	0x140882827: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14088282e: mov r12, qword ptr [r12]
	0x140882832: add r12, 0
	0x140882839: mov ax, word ptr [r12]
	0x14088283e: add rax, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140882841: push qword ptr [rsi]
Load [EBP+0x15d](VM_REGISTER)
	0x140882843: push qword ptr [rax]
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x140882845: pop qword ptr [rsi]
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140882847: pop qword ptr [rax]
	0x140882857: mov rdi, rbp
	0x14088286f: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140882880: mov rdi, qword ptr [rdi]
	0x140882891: add rdi, 8
	0x140882898: movzx r11, word ptr [rdi]
	0x14088289c: mov rsi, rbp
	0x1408828a2: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408828a9: xor r11d, dword ptr [rsi]
	0x1408828bd: mov r15, rbp
	0x1408828c0: add r15, 0xf0
Load [EBP+0xf0](STATIC)
	0x1408828d1: xor r11d, dword ptr [r15]
	0x1408828e1: mov r10, rbp
	0x1408828eb: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1408828f8: add dword ptr [r10], r11d
	0x1408828fb: mov r9, rbp
	0x140882913: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140882920: sub dword ptr [r9], 0x4355fe7b
	0x140882927: mov r8, rbp
	0x140882938: add r8, 0x130
Load [EBP+0x130](STATIC)
	0x140882954: mov r14b, byte ptr [r8]
	0x140882957: cmp r14b, 0x3a
	0x14088295b: jbe 0x140882968
	0x140882968: mov r15, rbp
	0x140882971: add r15, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140882978: add word ptr [r15], r11w
	0x140882986: mov r12, rbp
	0x140882997: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1408829ab: mov r12, qword ptr [r12]
	0x1408829b9: add r12, 4
	0x1408829ce: mov r15d, dword ptr [r12]
	0x1408829e3: mov r13, rbp
	0x1408829ec: add r13, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408829f3: xor r15d, dword ptr [r13]
	0x1408829fe: mov r9, rbp
	0x140882a08: add r9, 0xa7
Load [EBP+0xa7](STATIC)
	0x140882a20: sub r15d, dword ptr [r9]
	0x140882a23: mov r8, rbp
	0x140882a36: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882a51: and dword ptr [r8], r15d
	0x140882a7d: mov rdx, rbp
	0x140882a95: add rdx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x140882aa3: xor dword ptr [rdx], r15d
	0x140882aa6: mov rsi, rbp
	0x140882ab7: add rsi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140882ac5: sub dword ptr [rsi], r15d
	0x140882ad9: mov rsi, rbp
	0x140882aed: mov r9, rbp
	0x140882af0: add r9, 0x145
	0x140882b08: add rsi, 0xab
Load [EBP+0xab](STATIC)
	0x140882b1d: mov rsi, qword ptr [rsi]
Load [EBP+0x145](STATIC)
	0x140882b35: mov r9, qword ptr [r9]
	0x140882b38: add r9, 0xa
	0x140882b3f: mov r12, 1
	0x140882b4d: movzx r9, word ptr [r9]
	0x140882b51: mov r14, 0
	0x140882b5f: mov r15, rbp
	0x140882b62: or r14, 0x78
	0x140882b69: and r14, 1
	0x140882b77: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140882b93: sub r9d, dword ptr [r15]
	0x140882ba0: sub r9d, 0x2657a55
	0x140882ba7: mov r13, rbp
	0x140882bb4: add r12, 1
	0x140882bbb: add r13, 0xbf
	0x140882bc2: sub r14, rsi
	0x140882bc5: sub r12, -0x80000000
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140882bcf: add dword ptr [r13], r9d
	0x140882bd3: and r9, 0xffff
	0x140882bef: add r14, 8
	0x140882bf6: shl r9, 3
	0x140882bfa: add rsi, r9
	0x140882bfd: xor r14, r13
	0x140882c0e: mov r9, qword ptr [rsi]
	0x140882c18: mov rdi, rbp
	0x140882c1b: mov r11, 0x12
	0x140882c25: or r12, 0xffffffff80000000
	0x140882c2c: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140882c3a: mov qword ptr [rdi], r9
	0x140882c3d: mov rsi, r15
	0x140882c43: mov r10, rbp
	0x140882c46: add r12, 0xffff
	0x140882c4d: add r14, 0xf0
	0x140882c5b: add r10, 0x16e
	0x140882c62: sub r15, 0x20
	0x140882c69: mov rcx, rbp
	0x140882c6c: or r14, 0x80
Load [EBP+0x16e](STATIC)
	0x140882c73: movzx r10, word ptr [r10]
	0x140882c77: mov rdx, r15
	0x140882c7a: add r10w, 0x238
	0x140882c80: or rdx, 8
	0x140882c87: sub r14, 8
	0x140882c8e: add r14, 0x88
	0x140882c95: add r10, rbp
	0x140882c98: or rsi, r12
	0x140882c9b: add rcx, 0x58
Load [EBP+0x58](STATIC)
	0x140882ca2: mov ecx, dword ptr [rcx]
	0x140882ca4: mov rdi, 0
	0x140882cab: add ecx, 0x64106b77
	0x140882cb1: and rdi, 0x10
Store VM_REG [EBP+0x14d]
	0x140882cc5: mov qword ptr [r10], rcx
	0x140882cdd: xor r11, rdx
	0x140882ce0: add r11, 0x3f
	0x140882cee: mov rdx, rbp
	0x140882cf1: add r11, 4
	0x140882cf8: mov r8, 0
	0x140882cff: add rdx, 0xfd
Load [EBP+0xfd](STATIC)
	0x140882d06: mov r13, qword ptr [rdx]
	0x140882d09: mov r12, 0xd5
	0x140882d10: or r8, 0x80
	0x140882d17: xor r11, 0x20
	0x140882d1e: sub rsp, 8
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 6) & 0x3ffffffffffffff)) << 1 | (~(((((0x43 + ((((((((((0x9f + context) & 0xffffffffffffffff) >> 5) & 0x7ffffffffffffff)) << 1 | (~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0xffffffffffffffff) >> 5) & 0x1)) & 0x1)) << 5 | ((0x3 + ((((((~(((((0x9f + context) & 0xffffffffffffffff) >> 4) & 0x1)) & 0x1)) << 1 | 0x1) << 1 | ((((0x7 + (context & 0x7)) & 0x7) >> 2) & 0x1)) << 1 | (~(((((0x7 + (context & 0x7)) & 0x7) >> 1) & 0x1)) & 0x1)) << 1 | ((0x1 + (context & 0x1)) & 0x1))) & 0x1f))
	0x140882d25: mov qword ptr [rsp], r11
	0x140882d29: mov r11, rsp
	0x140882d2c: add r11, 8
	0x140882d30: push rdx
	0x140882d31: push r10
	0x140882d33: movabs r10, 8
	0x140882d3d: mov rdx, r10
	0x140882d40: pop r10
	0x140882d42: sub r11, rdx
	0x140882d45: pop rdx
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d46: xchg qword ptr [rsp], r11
	0x140882d4a: pop rsp
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140882d4b: mov qword ptr [rsp], rbp
unknown read addr: ff8 ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff)
	0x140882d4f: push qword ptr [rsp]
	0x140882d52: pop r9
	0x140882d54: push 0xd1cde00
	0x140882d59: push r15
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x9f + context) & 0xffffffffffffffff)
	0x140882d5b: pop qword ptr [rsp]
	0x140882d5e: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xfe8
	0x140882d62: mov qword ptr [rsp], rsp
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0xff0
	0x140882d66: add qword ptr [rsp], 8
	0x140882d6b: pop r15
	0x140882d6d: add r15, 8
	0x140882d71: push 0x2c9cd00f
	0x140882d76: mov qword ptr [rsp], rsi
	0x140882d7a: push rdi
	0x140882d7b: movabs rdi, 0x5ff74b71
	0x140882d85: push r13
	0x140882d87: mov r13, rdi
	0x140882d8a: mov rsi, r13
	0x140882d8d: pop r13
	0x140882d8f: pop rdi
	0x140882d90: dec rsi
	0x140882d93: xor rsi, 0x57effeb0
	0x140882d9a: push rbp
	0x140882d9b: movabs rbp, 0x6dbf7c51
	0x140882da5: or rbp, 0x7f1af610
	0x140882dac: xor rbp, 0x1b7c19b2
	0x140882db3: xor rbp, 0x6cdb522b
	0x140882dba: xor rsi, rbp
	0x140882dbd: pop rbp
	0x140882dbe: sub r15, 0x7fef7feb
	0x140882dc5: add r15, rsi
	0x140882dc8: add r15, 0x7fef7feb
	0x140882dcf: pop rsi
	0x140882dd0: xchg qword ptr [rsp], r15
	0x140882dd4: mov rsp, qword ptr [rsp]
	0x140882ddf: push rdi
	0x140882de0: mov rdi, rsp
	0x140882de3: add rdi, 8
	0x140882de7: push rbp
	0x140882de8: movabs rbp, 0x1c0bd100
	0x140882df2: push 0
	0x140882df4: sub qword ptr [rsp], rbp
	0x140882df8: pop rbp
	0x140882df9: neg rbp
	0x140882dfc: shl rbp, 6
	0x140882e00: push r15
	0x140882e02: movabs r15, 0xfffffff8fd0bc008
	0x140882e0c: add rbp, r15
	0x140882e0f: mov r15, qword ptr [rsp]
	0x140882e13: add rsp, 8
	0x140882e1a: sub rdi, rbp
	0x140882e1d: pop rbp
	0x140882e1e: xchg qword ptr [rsp], rdi
	0x140882e22: pop rsp
	0x140882e23: mov qword ptr [rsp], rdi
	0x140882e27: push rsi
	0x140882e28: sub rsp, 8
	0x140882e2c: push rcx
	0x140882e2d: pop qword ptr [rsp]
	0x140882e30: movabs rcx, 0x68ffb2ff
	0x140882e3a: movabs rsi, 0x9cfce571
	0x140882e44: sub rsi, rcx
	0x140882e47: mov rcx, qword ptr [rsp]
	0x140882e4b: add rsp, 8
	0x140882e4f: mov rdi, rsi
	0x140882e52: pop rsi
	0x140882e53: push rcx
	0x140882e54: movabs rcx, 0x7bff58f9
	0x140882e5e: add rdi, 0xffb7188
	0x140882e65: sub rdi, rcx
	0x140882e68: sub rdi, 0xffb7188
	0x140882e6f: mov rcx, qword ptr [rsp]
	0x140882e73: add rsp, 8
	0x140882e7a: push 0x3e198c
	0x140882e7f: push r14
	0x140882e81: pop qword ptr [rsp]
	0x140882e84: mov r14, -0x480227cc
	0x140882e8b: add rdi, 0x771550d
	0x140882e92: sub rdi, r14
	0x140882e95: sub rdi, 0x771550d
	0x140882ea0: add rsp, 8
	0x140882ea4: sub r9, 0x79796164
	0x140882eab: add r9, rdi
	0x140882eae: add r9, 0x79796164
	0x140882eb9: add rsp, 8
	0x140882ebd: push 0x402e0970
	0x140882ec2: sub rsp, 8
	0x140882ec6: sub rsp, 8
	0x140882eca: push 0x3f7ea06b
	0x140882ecf: sub rsp, 8
	0x140882ed3: sub rsp, 8
	0x140882ed7: mov qword ptr [rsp], rsi
	0x140882edb: sub rsp, 8
	0x140882ee2: mov qword ptr [rsp], r8
	0x140882ee6: push r15
	0x140882ee8: mov r15, r13
	0x140882eeb: push r15
	0x140882eed: sub qword ptr [rsp], 0x5b7b1a29
	0x140882ef5: pop r8
	0x140882ef7: add r8, 0x5b7b1a29
	0x140882efe: pop r15
	0x140882f00: push r13
	0x140882f02: mov r13, r8
	0x140882f05: mov rsi, r13
	0x140882f08: pop r13
	0x140882f0e: add rsp, 8
	0x140882f15: push rsi
	0x140882f16: pop qword ptr [rsp + 8]
	0x140882f1a: pop rsi
	0x140882f1b: pop qword ptr [rsp]
	0x140882f1e: pop qword ptr [rsp]
	0x140882f21: pop qword ptr [rsp]
	0x140882f24: pop qword ptr [rsp]
	0x140882f27: mov r10, 0x200
	0x140882f2e: push 0x43749c6
	0x140882f33: mov qword ptr [rsp], r10
	0x140882f37: push 0x658bcc8b
	0x140882f3c: mov qword ptr [rsp], rcx
	0x140882f40: movabs rcx, 0xc
	0x140882f4a: mov r10, rcx
	0x140882f4d: push qword ptr [rsp]
	0x140882f50: pop rcx
	0x140882f51: add rsp, 8
	0x140882f58: sub rsp, 8
	0x140882f5c: mov qword ptr [rsp], r12
	0x140882f60: sub rsp, 8
	0x140882f64: mov qword ptr [rsp], r9
	0x140882f68: push r9
	0x140882f6a: mov r9, qword ptr [rsp]
	0x140882f6e: add rsp, 8
	0x140882f75: push 0x32a53d72
	0x140882f7a: mov qword ptr [rsp], r13
	0x140882f7e: push rcx
	0x140882f7f: movabs rcx, 0
	0x140882f89: mov r13, rcx
	0x140882f8c: pop rcx
	0x140882f8d: mov qword ptr [rsp + 8], r13
	0x140882f96: add rsp, 8
	0x140882f9d: pop r12
	0x140882f9f: add r12, 0x5c366276
	0x140882fa6: sub r12, 0x4f9b1bc2
	0x140882fad: sub r12, 0x786f2056
	0x140882fb4: add r12, r9
	0x140882fb7: add r12, 0x786f2056
	0x140882fbe: add r12, 0x4f9b1bc2
	0x140882fc5: sub r12, 0x5c366276
Load [EBP+0x145](STATIC)
bytecode=0x1409420b9
	0x140882fcc: add qword ptr [r12], r10
	0x140882fd0: pop r12
	0x140882fd2: pop r10
	0x14088301a: ret 0
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407b9503: mov r13, rbp
	0x1407b9506: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407b950d: mov r13, qword ptr [r13]
	0x1407b9511: add r13, 6
	0x1407b9518: mov r12, rbp
	0x1407b951b: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407b9522: mov r12, qword ptr [r12]
	0x1407b9526: movzx rsi, word ptr [r13]
	0x1407b952b: add r12, 2
	0x1407b9532: movzx r10, word ptr [r12]
	0x1407b9537: add r10, rbp
Load [EBP+0x105](VM_REGISTER)
	0x1407b953a: mov r10, qword ptr [r10]
	0x1407b953d: or rdi, r10
	0x1407b9540: pushfq
	0x1407b9548: mov rcx, rbp
	0x1407b9552: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b955c: sub esi, dword ptr [rcx]
	0x1407b957e: mov r15, rbp
	0x1407b9581: add r15, 0xbf
	0x1407b9588: pop rdi
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b9589: or dword ptr [r15], esi
	0x1407b958c: mov r10, rbp
	0x1407b958f: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b9596: and dword ptr [r10], 0x5cb30401
	0x1407b959d: mov rdx, rbp
	0x1407b95a0: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407b95a7: mov r11b, byte ptr [rdx]
	0x1407b95aa: cmp r11b, 0x36
	0x1407b95ae: jbe 0x1407b95b4
	0x1407b95b4: mov r10, rbp
	0x1407b95b7: add r10, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407b95be: add word ptr [r10], si
	0x1407b95c2: mov rdi, rbp
	0x1407b95c5: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b95cc: sub dword ptr [rdi], 0x64570f81
	0x1407b95d2: mov r12, rbp
	0x1407b95d5: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b95dc: xor dword ptr [r12], 0x424512fa
	0x1407b95e4: mov rax, rbp
	0x1407b95e7: mov r14, rbp
	0x1407b95ea: add r14, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407b95f1: mov r10d, dword ptr [r14]
	0x1407b95f4: and r10d, 1
	0x1407b95fb: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407b9601: mov rax, qword ptr [rax]
	0x1407b9604: add rax, 0xc
	0x1407b960a: cmp r10d, 0
	0x1407b9611: je 0x1407b9628
	0x1407b9617: mov r14, rbp
	0x1407b961a: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407b9621: xor dword ptr [r14], 0x4dc94c5f
	0x1407b9628: mov r13d, dword ptr [rax]
	0x1407b962b: mov rdx, rbp
	0x1407b962e: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b9635: sub dword ptr [rdx], r13d
	0x1407b963f: mov rax, rbp
	0x1407b9642: add rax, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407b9648: movzx r10, word ptr [rax]
	0x1407b9653: sub r10w, 0x989c
	0x1407b9660: mov r14, rbp
	0x1407b966a: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x1407b9682: mov r14, qword ptr [r14]
	0x1407b968c: add r14, 8
	0x1407b96a1: add r10, rbp
	0x1407b96a4: mov r8, rbp
	0x1407b96b1: add r8, 0x18
Load [EBP+0x18](STATIC)
	0x1407b96bf: mov rdx, qword ptr [r8]
	0x1407b96cf: mov r9d, dword ptr [r14]
	0x1407b96d2: mov rdi, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x1407b96ea: add qword ptr [r10], rdx
	0x1407b96f4: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b9708: and dword ptr [rdi], r9d
	0x1407b9744: mov r11, rbp
	0x1407b975c: add r11, 0xab
	0x1407b9763: mov r12, rbp
Load [EBP+0xab](STATIC)
	0x1407b9766: mov r11, qword ptr [r11]
	0x1407b9770: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407b9785: mov r12, qword ptr [r12]
	0x1407b9789: add r12, 4
	0x1407b9790: movzx r12, word ptr [r12]
	0x1407b97a3: mov rax, rbp
	0x1407b97b4: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407b97cf: sub r12d, dword ptr [rax]
	0x1407b97e3: mov r9, rbp
	0x1407b97ed: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407b97f4: xor dword ptr [r9], r12d
	0x1407b97f7: and r12, 0xffff
	0x1407b980b: shl r12, 3
	0x1407b9824: add r11, r12
	0x1407b982a: mov rcx, qword ptr [r11]
	0x1407b9834: mov r8, rbp
	0x1407b9837: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409420c9
	0x1407b983e: add qword ptr [r8], 0x10
	0x1407b9845: jmp rcx
handlers outputs:



	0x14078a88c: mov r9, rbp
	0x14078a88f: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14078a8a4: mov r9, qword ptr [r9]
	0x14078a8a7: add r9, 4
	0x14078a8ae: movzx r11, word ptr [r9]
	0x14078a8db: mov rdi, rbp
	0x14078a8e5: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14078a8f3: sub r11d, dword ptr [rdi]
	0x14078a8fd: mov r12, rbp
	0x14078a900: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a907: add dword ptr [r12], r11d
	0x14078a90b: mov r10, rbp
	0x14078a90e: add r10, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078a915: and dword ptr [r10], 0x88a6598
	0x14078a931: mov r15, rbp
	0x14078a942: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14078a95a: mov r14b, byte ptr [r15]
	0x14078a95d: cmp r14b, 0x27
	0x14078a961: jbe 0x14078a96e
	0x14078a975: mov r14, rbp
	0x14078a982: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14078a98c: xor word ptr [r14], r11w
	0x14078a990: mov rcx, rbp
	0x14078a993: mov rdi, 0x625b96fc
	0x14078a99a: mov rdx, rbp
	0x14078a99d: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078a9a4: mov r15d, dword ptr [rcx]
	0x14078a9a7: and r15d, 1
	0x14078a9ae: cmp r15d, 0
	0x14078a9b5: je 0x14078a9cb
	0x14078a9cb: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14078a9d2: xor dword ptr [rdx], edi
	0x14078a9db: mov r13, rbp
	0x14078a9eb: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14078aa00: mov r13, qword ptr [r13]
	0x14078aa0b: add r13, 0
	0x14078aa20: mov ecx, dword ptr [r13]
	0x14078aa24: mov r9, rbp
	0x14078aa35: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078aa42: sub ecx, dword ptr [r9]
	0x14078aa53: mov rdi, rbp
	0x14078aa63: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14078aa78: add ecx, dword ptr [rdi]
	0x14078aaa8: mov r12, rbp
	0x14078aabc: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14078aad0: and dword ptr [r12], 0x4936e907
	0x14078aae4: mov rbx, rbp
	0x14078aae7: add rbx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14078aaf8: xor dword ptr [rbx], ecx
	0x14078ab00: mov rdi, rbp
	0x14078ab09: add rdi, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14078ab17: or dword ptr [rdi], ecx
	0x14078ab1c: mov r10, rbp
	0x14078ab26: add r10, 0x16e
	0x14078ab3e: mov r15, rbp
Load [EBP+0x16e](STATIC)
	0x14078ab41: movzx r10, word ptr [r10]
	0x14078ab4e: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14078ab55: mov r15d, dword ptr [r15]
	0x14078ab58: sub r15d, 0x7cbe154e
	0x14078ab5f: xor r10w, 0xaad6
	0x14078ab65: add r10, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14078ab68: add qword ptr [r10], r15
	0x14078abc7: mov r10, rbp
	0x14078abd8: add r10, 0x145
	0x14078abec: mov rcx, rbp
Load [EBP+0x145](STATIC)
	0x14078abf2: mov r10, qword ptr [r10]
	0x14078abfc: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14078ac18: mov rcx, qword ptr [rcx]
	0x14078ac2f: add r10, 6
	0x14078ac3d: movzx r10, word ptr [r10]
	0x14078ac4a: mov rdx, rbp
	0x14078ac4d: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14078ac62: sub r10d, dword ptr [rdx]
	0x14078ac72: add r10d, 0x279ea9a
	0x14078ac94: and r10, 0xffff
	0x14078aca9: shl r10, 3
	0x14078acb7: add rcx, r10
	0x14078acba: mov r15, qword ptr [rcx]
	0x14078acd1: mov r12, rbp
	0x14078ace2: add r12, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409420d1
	0x14078ace9: add qword ptr [r12], 8
	0x14078acf1: jmp r15
handlers outputs:



	0x14077cb04: mov r14, rbp
	0x14077cb0e: mov rdx, rbp
	0x14077cb1f: add r14, 0xab
	0x14077cb26: add rdx, 0x145
Load [EBP+0xab](STATIC)
	0x14077cb30: mov r14, qword ptr [r14]
Load [EBP+0x145](STATIC)
	0x14077cb44: mov rdx, qword ptr [rdx]
	0x14077cb58: add rdx, 2
	0x14077cb5f: movzx rdx, word ptr [rdx]
	0x14077cb8e: add edx, 0xc7b44e3
	0x14077cb94: mov rbx, rbp
	0x14077cb9a: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cbb6: and dword ptr [rbx], edx
	0x14077cbb8: and rdx, 0xffff
	0x14077cbd4: shl rdx, 3
	0x14077cbe6: add r14, rdx
	0x14077cbe9: mov r15, qword ptr [r14]
	0x14077cbec: mov rcx, rbp
	0x14077cbf2: add rcx, 0xfd
Store [EBP+0xfd](STATIC)
	0x14077cbf9: mov qword ptr [rcx], r15
	0x14077cc09: mov rcx, rbp
	0x14077cc16: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14077cc27: mov rcx, qword ptr [rcx]
	0x14077cc2d: add rcx, 6
	0x14077cc34: movzx r13, word ptr [rcx]
	0x14077cc38: mov rdx, rbp
	0x14077cc3b: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cc50: xor r13d, dword ptr [rdx]
	0x14077cc5a: mov r12, rbp
	0x14077cc5d: add r12, 0xf0
Load [EBP+0xf0](STATIC)
	0x14077cc74: add r13d, dword ptr [r12]
	0x14077cc7f: mov r15, rbp
	0x14077cc97: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077cca8: add dword ptr [r15], r13d
	0x14077ccb2: mov rdx, rbp
	0x14077ccb5: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ccc6: xor dword ptr [rdx], 0x1eb285fe
	0x14077cce1: mov r15, rbp
	0x14077cceb: add r15, 0x130
Load [EBP+0x130](STATIC)
	0x14077cd07: mov dil, byte ptr [r15]
	0x14077cd0a: cmp dil, 0xa7
	0x14077cd0e: jbe 0x14077cd35
	0x14077cd42: mov r11, rbp
	0x14077cd53: add r11, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14077cd5a: add word ptr [r11], r13w
	0x14077cd93: mov rdi, 0
	0x14077cda8: mov r9, rbp
	0x14077cdab: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14077cdb2: mov r9, qword ptr [r9]
	0x14077cdb5: add r9, 0xa
	0x14077cdbc: mov di, word ptr [r9]
	0x14077cdc0: mov rdx, 0xd5
	0x14077cdc7: sub rdx, 0x3f
	0x14077cdce: mov r15, rbp
	0x14077cdd1: mov r8, 0x200
	0x14077cddb: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x14077cde9: xor edi, dword ptr [r15]
	0x14077cdf9: mov r15, 0x200
	0x14077ce03: xor r8, r15
	0x14077ce06: sub r8, rdi
	0x14077ce10: or r8, rdx
	0x14077ce2d: mov r9, rbp
	0x14077ce37: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077ce4c: add dword ptr [r9], edi
	0x14077ce4f: mov r9, rbp
	0x14077ce5c: mov r13, 0x200
	0x14077ce63: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14077ce6a: xor dword ptr [r9], 0x4c10bde9
	0x14077ce78: mov rbx, rbp
	0x14077ce8b: add rbx, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14077ce99: sub word ptr [rbx], di
	0x14077cea6: and rbx, r8
	0x14077cea9: mov rcx, rbp
	0x14077ceac: mov rdi, rbx
	0x14077ceaf: add rcx, 0xd6
	0x14077cebd: sub r13, 4
Load [EBP+0xd6](STATIC)
	0x14077cec4: movzx rcx, word ptr [rcx]
	0x14077cec8: add cx, 0x25b3
	0x14077ceda: mov r14, rbp
	0x14077cedd: xor r13, 0x400
	0x14077cee4: add rcx, rbp
	0x14077cee7: and r13, 0x7fffffff
Load [EBP+0x14d](VM_REGISTER)
	0x14077ceee: mov rcx, qword ptr [rcx]
	0x14077cef1: add r14, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077cef8: movzx r14, word ptr [r14]
	0x14077cefc: mov r12, 0x200
	0x14077cf03: and r13, rdi
	0x14077cf06: or r12, 0x7fffffff
	0x14077cf0d: add r14w, 0x2ca3
	0x14077cf1a: add r14, rbp
	0x14077cf24: add rdi, r13
Store VM_REG [EBP+0xb7]
	0x14077cf27: mov qword ptr [r14], rcx
	0x14077cf2a: mov rax, rbp
	0x14077cf2d: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14077cf33: mov rax, qword ptr [rax]
	0x14077cf36: add rax, 0
	0x14077cf3c: movzx r10, word ptr [rax]
	0x14077cf40: add r10, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x14077cf43: mov r10, qword ptr [r10]
	0x14077cf46: sub r12, r10
	0x14077cf49: pushfq
	0x14077cf6c: pop r12
	0x14077cf6e: mov rcx, 1
	0x14077cf75: and rax, 0x7fffffff
	0x14077cf7b: mov r8, 1
	0x14077cf82: mov rsi, rbp
	0x14077cf8c: sub rax, 0x400
	0x14077cf92: or r8, 0x20
	0x14077cf9c: add rsi, 0xfd
	0x14077cfa3: add rax, 4
	0x14077cfa9: add rax, 0x90
	0x14077cfaf: mov r10, 0x200
	0x14077cfb6: xor rax, 0x90
Load [EBP+0xfd](STATIC)
	0x14077cfbc: mov r9, qword ptr [rsi]
	0x14077cfc6: sub rsp, 8
	0x14077cfca: push 0x7d064b6
	0x14077cfcf: push 0x788731a4
	0x14077cfd4: push rdx
	0x14077cfd5: push rcx
	0x14077cfd6: mov rcx, r13
	0x14077cfd9: push r10
	0x14077cfdb: mov r10, rcx
	0x14077cfde: mov rdx, r10
	0x14077cfe1: pop r10
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
	0x14077cfe3: mov rcx, qword ptr [rsp]
	0x14077cfe7: add rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cfeb: mov qword ptr [rsp + 8], rdx
	0x14077cff0: pop rdx
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: (((((0x0) << 2 | ((((0xd6 + context) & 0xffffffffffffffff) >> 7) & 0x3)) << 2 | 0x0) << 3 | ((((0xd6 + context) & 0xffffffffffffffff) >> 2) & 0x7)) << 2 | 0x0)
	0x14077cff1: pop qword ptr [rsp]
	0x14077cff4: push rsp
	0x14077cff5: pop r13
	0x14077cff7: add r13, 8
	0x14077cffb: push rbp
	0x14077cffc: push 0x5a2fc94d
	0x14077d001: mov qword ptr [rsp], r13
	0x14077d005: movabs r13, 8
	0x14077d00f: mov rbp, r13
	0x14077d012: pop r13
	0x14077d014: sub r13, rbp
	0x14077d017: pop rbp
	0x14077d018: xor r13, qword ptr [rsp]
	0x14077d01c: push 0x31109b0c
	0x14077d021: mov qword ptr [rsp], rcx
	0x14077d025: mov rcx, r13
	0x14077d028: push rbp
	0x14077d029: mov rbp, rcx
	0x14077d02c: xor qword ptr [rsp + 0x10], rbp
	0x14077d031: pop rbp
	0x14077d032: pop rcx
	0x14077d033: xor r13, qword ptr [rsp]
	0x14077d037: mov rsp, qword ptr [rsp]
	0x14077d03b: mov qword ptr [rsp], r9
unknown read addr: ff0 0xff0
	0x14077d03f: pop qword ptr [rsp]
	0x14077d049: mov r14, 0x200
	0x14077d050: push 0x4b97a994
	0x14077d055: push r10
unknown read addr: fe8 0xfe8
	0x14077d057: pop qword ptr [rsp]
	0x14077d05a: push 0x408926b3
	0x14077d05f: mov qword ptr [rsp], r13
	0x14077d063: push 0x7fb26c00
	0x14077d068: mov qword ptr [rsp], rbp
	0x14077d06c: pop r13
	0x14077d06e: push rcx
	0x14077d06f: push r13
	0x14077d071: add qword ptr [rsp], 0x7ffd3044
	0x14077d079: mov rcx, qword ptr [rsp]
	0x14077d07d: add rsp, 8
	0x14077d084: push rax
	0x14077d085: movabs rax, 0x7ffd3044
	0x14077d08f: sub rcx, rax
	0x14077d092: pop rax
	0x14077d093: mov r10, rcx
	0x14077d096: mov rcx, qword ptr [rsp]
	0x14077d09a: add rsp, 8
	0x14077d09e: push qword ptr [rsp]
	0x14077d0a1: pop r13
	0x14077d0a3: push r10
	0x14077d0a5: mov r10, rsp
	0x14077d0a8: add r10, 8
	0x14077d0ac: sub r10, 8
	0x14077d0b3: xchg qword ptr [rsp], r10
	0x14077d0b7: pop rsp
	0x14077d0b8: mov qword ptr [rsp], rdi
	0x14077d0bc: mov rdi, rsp
	0x14077d0bf: add rdi, 8
	0x14077d0c3: add rdi, 8
	0x14077d0ca: xchg qword ptr [rsp], rdi
	0x14077d0ce: pop rsp
	0x14077d0cf: push rcx
	0x14077d0d0: mov rcx, r10
	0x14077d0d3: mov r15, rcx
	0x14077d0d6: pop rcx
	0x14077d0d7: push qword ptr [rsp]
	0x14077d0da: pop r10
	0x14077d0dc: add rsp, 8
	0x14077d0e0: sub rsp, 8
	0x14077d0e4: push r8
	0x14077d0e6: push r9
	0x14077d0e8: pop r8
	0x14077d0ea: push r8
	0x14077d0ec: pop qword ptr [rsp + 8]
	0x14077d0f0: push qword ptr [rsp]
	0x14077d0f3: pop r8
	0x14077d0f5: push 0x2f07432d
	0x14077d0fa: mov qword ptr [rsp], r14
	0x14077d0fe: push rsp
	0x14077d0ff: pop r14
	0x14077d101: add r14, 8
	0x14077d105: add r14, 8
	0x14077d10c: xor r14, qword ptr [rsp]
	0x14077d110: xor qword ptr [rsp], r14
	0x14077d118: pop rsp
	0x14077d119: movabs r9, 0x6f500679
	0x14077d123: shl r9, 8
	0x14077d127: add r9, 0x57b31fb0
	0x14077d12e: push 0x402b0800
	0x14077d133: mov qword ptr [rsp], rax
	0x14077d137: movabs rax, 0x6fa7b9976b
	0x14077d141: sub r9, rax
	0x14077d144: push qword ptr [rsp]
	0x14077d147: pop rax
	0x14077d148: add rsp, 8
	0x14077d14c: sub r15, 0x73be2dd1
	0x14077d153: add r15, 0x7bbdd771
	0x14077d15a: add r15, 0x3ff5dd64
	0x14077d161: add r15, r9
	0x14077d164: sub r15, 0x3ff5dd64
	0x14077d16b: sub r15, 0x7bbdd771
	0x14077d172: add r15, 0x73be2dd1
	0x14077d179: push qword ptr [rsp]
	0x14077d17c: pop r9
	0x14077d17e: add rsp, 8
	0x14077d182: or rax, r15
	0x14077d193: add rax, 4
	0x14077d1a7: push 0x3a4c54c4
	0x14077d1ac: push r9
	0x14077d1ae: pop qword ptr [rsp]
	0x14077d1b1: push rsi
	0x14077d1b2: movabs rsi, 0x7fff6bf6
	0x14077d1bc: push rsi
	0x14077d1bd: sub qword ptr [rsp], 0x7e7ace56
	0x14077d1c5: mov r9, qword ptr [rsp]
	0x14077d1c9: add rsp, 8
	0x14077d1cd: add r9, 0x7e7ace56
	0x14077d1d4: pop rsi
	0x14077d1d5: sub rsp, 8
	0x14077d1d9: push r13
	0x14077d1db: pop qword ptr [rsp]
	0x14077d1de: movabs r13, 0x7c66bed4
	0x14077d1e8: and r9, r13
	0x14077d1eb: pop r13
	0x14077d1ed: sub r9, 1
	0x14077d1f1: shl r9, 7
	0x14077d1f5: add r9, 1
	0x14077d1f9: shl r9, 7
	0x14077d1fd: sub rsp, 8
	0x14077d201: mov qword ptr [rsp], rsi
	0x14077d205: movabs rsi, 0x1f198ab4c074
	0x14077d20f: sub r9, rsi
	0x14077d216: push r8
	0x14077d218: push rsp
	0x14077d219: pop r8
	0x14077d21b: add r8, 8
	0x14077d21f: add r8, 8
	0x14077d226: xchg qword ptr [rsp], r8
	0x14077d22a: pop rsp
	0x14077d22b: push rax
	0x14077d22c: mov rax, 0
	0x14077d233: add rax, r15
Load [EBP+0x145](STATIC)
bytecode=0x1409420dd
	0x14077d236: add qword ptr [rax], r9
	0x14077d239: pop rax
	0x14077d23a: push qword ptr [rsp]
	0x14077d23d: pop r9
	0x14077d23f: push r9
	0x14077d241: mov r9, rsp
	0x14077d244: add r9, 8
	0x14077d248: add r9, 8
	0x14077d24f: xor r9, qword ptr [rsp]
	0x14077d253: xor qword ptr [rsp], r9
	0x14077d25b: pop rsp
	0x14077d277: ret 0
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x1409420ff
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x140862a57: mov r10, 0
	0x140862a65: mov r9, rbp
	0x140862a79: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862a80: mov r9, qword ptr [r9]
	0x140862a86: add r9, 4
	0x140862ab0: mov r10w, word ptr [r9]
	0x140862ac5: add r10, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x140862ac8: push qword ptr [r10]
	0x140862ad7: mov r10, 0
	0x140862ae8: mov r9, rbp
	0x140862af2: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862b0d: mov r9, qword ptr [r9]
	0x140862b1d: add r9, 0xc
	0x140862b2e: mov r10w, word ptr [r9]
	0x140862b40: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x140862b43: push qword ptr [r10]
	0x140862b61: mov rdx, 0
	0x140862b72: mov rcx, rbp
	0x140862b8d: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140862bb3: mov rcx, qword ptr [rcx]
	0x140862bc6: add rcx, 2
	0x140862bd4: mov dx, word ptr [rcx]
	0x140862bf2: add rdx, rbp
Load [EBP+0xce](VM_REGISTER)
	0x140862c01: push qword ptr [rdx]
	0x140862c1e: mov r11, 0
	0x140862c3a: mov r9, rbp
	0x140862c59: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862c7f: mov r9, qword ptr [r9]
	0x140862c9a: add r9, 0x16
	0x140862ca4: mov r11w, word ptr [r9]
	0x140862ca8: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x140862cb7: push qword ptr [r11]
	0x140862cba: mov rdx, 0
	0x140862cc8: mov r9, rbp
	0x140862ccb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140862ce9: mov r9, qword ptr [r9]
	0x140862d08: add r9, 0x10
	0x140862d0f: mov dx, word ptr [r9]
	0x140862d2f: add rdx, rbp
Load [EBP+0x64](VM_REGISTER)
	0x140862d39: push qword ptr [rdx]
	0x140862d3b: mov r9, 0
	0x140862d56: mov r15, rbp
	0x140862d6a: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x140862d7b: mov r15, qword ptr [r15]
	0x140862d85: add r15, 6
	0x140862d8f: mov r9w, word ptr [r15]
	0x140862dab: add r9, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x140862db4: push qword ptr [r9]
	0x140862dc8: mov r15, 0
	0x140862de6: mov rsi, rbp
	0x140862e04: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140862e15: mov rsi, qword ptr [rsi]
	0x140862e18: add rsi, 0x18
	0x140862e29: mov r15w, word ptr [rsi]
	0x140862e30: add r15, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x140862e47: pop qword ptr [r15]
	0x140862e69: mov rcx, 0
	0x140862e8c: mov r10, rbp
	0x140862e96: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x140862ebc: mov r10, qword ptr [r10]
	0x140862eda: add r10, 0xa
	0x140862ef5: mov cx, word ptr [r10]
	0x140862f03: add rcx, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x140862f0d: pop qword ptr [rcx]
	0x140862f0f: mov r11, 0
	0x140862f19: mov rax, rbp
	0x140862f1f: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x140862f2c: mov rax, qword ptr [rax]
	0x140862f32: add rax, 0xe
	0x140862f46: mov r11w, word ptr [rax]
	0x140862f65: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x140862f68: pop qword ptr [r11]
	0x140862f7c: mov r14, 0
	0x140862f91: mov r11, rbp
	0x140862f9b: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x140862fa8: mov r11, qword ptr [r11]
	0x140862fab: add r11, 0
	0x140862fb2: mov r14w, word ptr [r11]
	0x140862fbd: add r14, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x140862fc7: pop qword ptr [r14]
	0x140862fd1: mov r15, 0
	0x140862fdf: mov r8, rbp
	0x140862ff3: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140863008: mov r8, qword ptr [r8]
	0x140863020: add r8, 0x14
	0x140863027: mov r15w, word ptr [r8]
	0x14086302e: add r15, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x140863038: pop qword ptr [r15]
	0x14086304c: mov rcx, 0
	0x140863076: mov rdi, rbp
	0x14086308e: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x140863095: mov rdi, qword ptr [rdi]
	0x1408630a6: add rdi, 0x12
	0x1408630ad: mov cx, word ptr [rdi]
	0x1408630b0: add rcx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1408630cb: pop qword ptr [rcx]
	0x140863138: mov r9, rbp
	0x14086314c: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14086316a: mov r9, qword ptr [r9]
	0x14086316d: add r9, 8
	0x140863174: movzx r9, word ptr [r9]
	0x140863185: mov r8, rbp
	0x140863188: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1408631a4: mov r8, qword ptr [r8]
	0x1408631aa: mov r11, rbp
	0x1408631b4: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1408631c8: sub r9d, dword ptr [r11]
	0x1408631cb: sub r9d, 0xc100775
	0x1408631ee: mov rsi, rbp
	0x1408631ff: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086321a: sub dword ptr [rsi], r9d
	0x14086321d: and r9, 0xffff
	0x14086323b: shl r9, 3
	0x14086325b: add r8, r9
	0x14086327d: mov r14, qword ptr [r8]
	0x14086328a: mov rdx, rbp
	0x1408632a5: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140942119
	0x1408632ac: add qword ptr [rdx], 0x1a
	0x1408632b3: jmp r14
handlers outputs:



	0x14086ac59: mov rdi, 0x476d70d7
	0x14086ac60: mov r10, rbp
	0x14086ac66: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086ac73: add dword ptr [r10], edi
	0x14086ac8c: mov r13, 0x2300b116
	0x14086ac9d: mov r12, rbp
	0x14086aca0: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086acad: sub dword ptr [r12], r13d
	0x14086acbe: mov r12, rbp
	0x14086acc1: mov rsi, rbp
	0x14086acc4: add r12, 0x93
Store [EBP+0x93](STATIC)
	0x14086accb: mov dword ptr [r12], 0
	0x14086acd3: add rsi, 0x145
	0x14086acda: mov r13, rbp
	0x14086acdd: add r13, 0x16e
Load [EBP+0x145](STATIC)
	0x14086ace4: mov rsi, qword ptr [rsi]
	0x14086ace7: add rsi, 6
Store [EBP+0x16e](STATIC)
	0x14086acee: mov word ptr [r13], 0
	0x14086acf5: movzx rcx, word ptr [rsi]
	0x14086acf9: mov r12, rbp
	0x14086acfc: add rcx, rbp
	0x14086acff: add r12, 0xd6
Store [EBP+0xd6](STATIC)
	0x14086ad06: mov word ptr [r12], 0
Load [EBP+0xc3](VM_REGISTER)
	0x14086ad0d: mov rcx, qword ptr [rcx]
	0x14086ad10: add r14, rcx
	0x14086ad13: pushfq
	0x14086ad22: mov r8, rbp
	0x14086ad25: add r8, 0x120
Store [EBP+0x120](STATIC)
	0x14086ad2f: mov dword ptr [r8], 0
	0x14086ad4b: mov r8, rbp
	0x14086ad4e: add r8, 0xb3
	0x14086ad58: pop r14
Store [EBP+0xb3](STATIC)
	0x14086ad5a: mov dword ptr [r8], 0
	0x14086ad61: mov r14, rbp
	0x14086ad64: add r14, 0x24
Store [EBP+0x24](STATIC)
	0x14086ad6b: mov word ptr [r14], 0
	0x14086ad71: mov r13, rbp
	0x14086ad74: add r13, 0xa7
Store [EBP+0xa7](STATIC)
	0x14086ad7b: mov dword ptr [r13], 0
	0x14086ad83: mov r11, rbp
	0x14086ad86: add r11, 0x58
Store [EBP+0x58](STATIC)
	0x14086ad8d: mov dword ptr [r11], 0
	0x14086ad94: mov r8, rbp
	0x14086ad97: add r8, 0xf0
Store [EBP+0xf0](STATIC)
	0x14086ad9e: mov dword ptr [r8], 0
	0x14086ada5: mov r10, rbp
	0x14086ada8: add r10, 0xbf
Store [EBP+0xbf](STATIC)
	0x14086adaf: mov dword ptr [r10], 0
	0x14086adb6: mov rax, rbp
	0x14086adb9: add rax, 0x130
Store [EBP+0x130](STATIC)
	0x14086adbf: mov byte ptr [rax], 0
	0x14086adc5: mov r14, 0
	0x14086adcc: mov rcx, rbp
	0x14086add5: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14086ade3: mov rcx, qword ptr [rcx]
	0x14086adf2: add rcx, 4
	0x14086adfc: mov r14w, word ptr [rcx]
	0x14086ae15: shl r14, 3
	0x14086ae2e: mov r11, rbp
	0x14086ae31: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14086ae38: mov r9, qword ptr [r11]
	0x14086ae49: add r9, r14
	0x14086ae5d: mov rcx, qword ptr [r9]
	0x14086ae71: mov r11, rbp
	0x14086ae89: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940dd8
	0x14086ae90: add qword ptr [r11], 8
	0x14086ae97: jmp rcx
handlers outputs:



	0x1407753a0: mov rax, rbp
	0x1407753a3: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407753a9: mov rax, qword ptr [rax]
	0x1407753bd: add rax, 4
	0x1407753c3: movzx r12, word ptr [rax]
	0x1407753d8: mov r9, rbp
	0x1407753e1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407753f2: sub r12d, dword ptr [r9]
	0x140775406: mov r10, rbp
	0x140775417: add r10, 0xf0
Load [EBP+0xf0](STATIC)
	0x140775425: add r12d, dword ptr [r10]
	0x140775428: mov r10, rbp
	0x14077542b: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140775440: add dword ptr [r10], r12d
	0x140775478: mov rcx, rbp
	0x14077547b: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x140775489: mov r10b, byte ptr [rcx]
	0x14077548c: cmp r10b, 0x48
	0x140775490: jbe 0x1407754a0
	0x1407754b4: mov r13, rbp
	0x1407754b7: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407754cc: add word ptr [r13], r12w
	0x1407754db: mov rcx, rbp
	0x1407754de: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407754e5: mov rcx, qword ptr [rcx]
	0x1407754f9: add rcx, 6
	0x140775511: mov r9d, dword ptr [rcx]
	0x140775544: mov rdi, rbp
	0x140775555: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x140775571: add r9d, dword ptr [rdi]
	0x140775582: mov r15, rbp
	0x140775585: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14077559a: add dword ptr [r15], r9d
	0x1407755b2: mov rax, rbp
	0x1407755b5: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407755bb: xor dword ptr [rax], 0x10f93f15
	0x1407755cb: mov r12, rbp
	0x1407755d5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407755e6: add dword ptr [r12], r9d
	0x1407755ff: mov rdx, rbp
	0x140775602: add rdx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x140775609: sub dword ptr [rdx], r9d
	0x14077561d: mov r15, rbp
	0x140775623: mov rdx, rbp
	0x140775626: add rdx, 0x16e
Load [EBP+0x16e](STATIC)
	0x14077562d: movzx rdx, word ptr [rdx]
	0x140775631: add r15, 0x58
Load [EBP+0x58](STATIC)
	0x14077563e: mov r15d, dword ptr [r15]
	0x14077566b: add rdx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14077566e: sub qword ptr [rdx], r15
	0x140775671: pushfq
	0x14077567c: mov r12, 0
	0x14077568a: mov rsi, rbp
	0x14077569e: mov rbx, rbp
	0x1407756ab: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407756b5: mov rbx, qword ptr [rbx]
	0x1407756c6: add rbx, 0xa
	0x1407756e2: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407756f0: mov r15d, dword ptr [rsi]
	0x1407756fa: mov r12b, byte ptr [rbx]
	0x1407756fd: cmp r12b, 0
	0x140775701: je 0x140775770
	0x140775707: mov rbx, rbp
	0x14077570a: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x140775722: mov rbx, qword ptr [rbx]
	0x140775725: add rbx, 2
	0x14077573d: mov r12w, word ptr [rbx]
	0x14077574f: add r12, rbp
	0x140775755: pop rcx
Store VM_REG [EBP+0x26]
	0x140775756: mov qword ptr [r12], rcx
	0x14077579d: and r15d, 1
	0x1407757a4: cmp r15d, 0
	0x1407757ab: je 0x1407757d6
	0x1407757b8: mov rsi, rbp
	0x1407757bb: add rsi, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407757d0: and dword ptr [rsi], 0x22dc62d3
	0x1407757e7: mov r13b, 0xdb
	0x1407757fb: mov r11, rbp
	0x14077580b: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x140775819: add byte ptr [r11], r13b
	0x14077582d: mov rsi, rbp
	0x14077583e: mov r15, rbp
	0x14077584f: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x140775856: mov r15, qword ptr [r15]
	0x140775859: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x140775860: mov rsi, qword ptr [rsi]
	0x140775863: add rsi, 0
	0x14077586d: movzx rsi, word ptr [rsi]
	0x140775871: mov r14, rbp
	0x140775877: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x140775885: xor esi, dword ptr [r14]
	0x140775888: xor esi, 0x1ebd7866
	0x140775895: mov r10, rbp
	0x1407758a5: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407758bd: sub dword ptr [r10], esi
	0x1407758c0: and rsi, 0xffff
	0x1407758df: shl rsi, 3
	0x1407758e3: add r15, rsi
	0x1407758e9: mov r8, qword ptr [r15]
	0x1407758f3: mov rcx, rbp
	0x140775900: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940de3
	0x140775907: add qword ptr [rcx], 0xb
	0x14077590e: jmp r8
handlers outputs:



	0x14081ef64: mov rdi, 0x64a91844
	0x14081ef6b: mov rcx, rbp
	0x14081ef6e: mov rdx, rbp
	0x14081ef71: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14081ef78: mov rcx, qword ptr [rcx]
	0x14081ef7b: add rcx, 8
	0x14081ef82: add rdx, 0xa7
	0x14081ef89: movzx rax, word ptr [rcx]
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081ef8d: or dword ptr [rdx], edi
	0x14081ef8f: add rax, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14081ef92: mov rax, qword ptr [rax]
	0x14081ef95: and rbx, rax
	0x14081ef98: pushfq
	0x14081efd3: mov r8, rbp
	0x14081efe0: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081eff1: mov r8, qword ptr [r8]
	0x14081f000: add r8, 4
	0x14081f00a: movzx r12, word ptr [r8]
	0x14081f01c: add r12, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14081f022: mov rsp, qword ptr [r12]
	0x14081f026: mov r11, rbp
	0x14081f029: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14081f030: mov r11, qword ptr [r11]
	0x14081f033: add r11, 0xe
	0x14081f03a: movzx r13, word ptr [r11]
	0x14081f03e: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14081f041: mov r13, qword ptr [r13]
	0x14081f045: or r10, r13
	0x14081f048: pushfq
	0x14081f06f: pop r10
	0x14081f071: mov r9, rbp
	0x14081f074: add r9, 0xa7
	0x14081f07b: mov r15, rbp
Load [EBP+0xa7](STATIC)
	0x14081f07e: mov r11d, dword ptr [r9]
	0x14081f081: and r11d, 1
	0x14081f088: cmp r11d, 0
	0x14081f08f: je 0x14081f0a6
	0x14081f095: mov r9, rbp
	0x14081f098: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081f09f: xor dword ptr [r9], 0x16359d86
	0x14081f0a6: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14081f0ad: mov r15, qword ptr [r15]
	0x14081f0b0: add r15, 2
	0x14081f0b7: movzx r9, word ptr [r15]
	0x14081f0bb: add r9, rbp
Load [EBP+0xce](VM_REGISTER)
	0x14081f0be: mov r9, qword ptr [r9]
	0x14081f0c1: xor r12, r9
	0x14081f0c4: pushfq
	0x14081f0ee: pop r12
	0x14081f12e: mov r13, rbp
	0x14081f13f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14081f149: mov r13, qword ptr [r13]
	0x14081f14d: mov rdi, rbp
	0x14081f150: add r13, 6
	0x14081f157: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14081f16c: mov rdi, qword ptr [rdi]
	0x14081f16f: movzx r13, word ptr [r13]
	0x14081f196: add r13d, 0x792c176d
	0x14081f19d: mov rdx, rbp
	0x14081f1a7: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081f1b8: or dword ptr [rdx], r13d
	0x14081f1c2: and r13, 0xffff
	0x14081f1d0: shl r13, 3
	0x14081f1e5: add rdi, r13
	0x14081f1e8: mov r14, qword ptr [rdi]
	0x14081f1eb: mov rax, rbp
	0x14081f1ee: add rax, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940df3
	0x14081f1f4: add qword ptr [rax], 0x10
	0x14081f1fb: jmp r14
handlers outputs:



	0x1407e1334: mov r14, rbp
	0x1407e1337: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e133e: xor dword ptr [r14], 0x3477f352
	0x1407e1345: mov r11, rbp
	0x1407e1348: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e134f: or dword ptr [r11], 0x7e323802
	0x1407e1356: mov r15, rbp
	0x1407e136e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e137c: mov r15, qword ptr [r15]
	0x1407e137f: add r15, 4
	0x1407e1393: mov esi, dword ptr [r15]
	0x1407e13a3: mov r14, rbp
	0x1407e13a6: add r14, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e13bb: sub esi, dword ptr [r14]
	0x1407e13c1: mov r13, rbp
	0x1407e13d1: add r13, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407e13df: xor esi, dword ptr [r13]
	0x1407e140f: mov r12, rbp
	0x1407e141f: add r12, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407e1426: xor dword ptr [r12], 0x5cfc2cec
	0x1407e1438: mov rcx, rbp
	0x1407e144c: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x1407e1453: add dword ptr [rcx], esi
	0x1407e1455: mov r13, 0x12
	0x1407e145f: mov rax, rbp
	0x1407e1477: add rax, 0x120
	0x1407e147d: and r13, 0x20
	0x1407e1484: sub r13, 0x40
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x1407e148b: add dword ptr [rax], esi
	0x1407e1493: mov r9, rbp
	0x1407e14aa: add r9, 0x58
Load [EBP+0x58](STATIC)
	0x1407e14bb: mov r13d, dword ptr [r9]
	0x1407e14c5: xor r13d, 0x2bbdd85c
	0x1407e14dd: push r13
	0x1407e14ed: mov r10, 0
	0x1407e1502: mov rsi, rbp
	0x1407e150f: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e1524: mov rsi, qword ptr [rsi]
	0x1407e1527: add rsi, 2
	0x1407e152e: mov r10w, word ptr [rsi]
	0x1407e1532: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407e153b: sub qword ptr [r10], 8
	0x1407e1591: mov r8, rbp
	0x1407e159b: add r8, 0x145
	0x1407e15b3: mov r10, rbp
	0x1407e15b6: add r10, 0xab
Load [EBP+0x145](STATIC)
	0x1407e15c3: mov r8, qword ptr [r8]
	0x1407e15cd: add r8, 0
Load [EBP+0xab](STATIC)
	0x1407e15d4: mov r10, qword ptr [r10]
	0x1407e15da: movzx r8, word ptr [r8]
	0x1407e15e5: mov rax, rbp
	0x1407e15ef: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407e1606: xor r8d, dword ptr [rax]
	0x1407e161a: xor r8d, 0x3e3fae90
	0x1407e1632: mov rdx, rbp
	0x1407e1635: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e163f: xor dword ptr [rdx], r8d
	0x1407e1653: and r8, 0xffff
	0x1407e1664: shl r8, 3
	0x1407e166b: add r10, r8
	0x1407e1678: mov rax, qword ptr [r10]
	0x1407e168c: mov rsi, rbp
	0x1407e169c: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940dfb
	0x1407e16a3: add qword ptr [rsi], 8
	0x1407e16aa: jmp rax
handlers outputs:



	0x14085bc98: mov rdx, rbp
	0x14085bca2: add rdx, 0xab
Load [EBP+0xab](STATIC)
	0x14085bcb6: mov rdx, qword ptr [rdx]
	0x14085bcb9: mov rbx, rbp
	0x14085bcca: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14085bcd1: mov rbx, qword ptr [rbx]
	0x14085bcde: add rbx, 2
	0x14085bce5: movzx rbx, word ptr [rbx]
	0x14085bd1b: mov r9, rbp
	0x14085bd2c: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14085bd33: add dword ptr [r9], ebx
	0x14085bd40: and rbx, 0xffff
	0x14085bd4e: shl rbx, 3
	0x14085bd55: add rdx, rbx
	0x14085bd65: mov r14, qword ptr [rdx]
	0x14085bd79: mov rax, rbp
	0x14085bd7c: add rax, 0xfd
Store [EBP+0xfd](STATIC)
	0x14085bd8c: mov qword ptr [rax], r14
	0x14085bdb3: mov r13, rbp
	0x14085bdbc: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14085bdd1: mov r13, qword ptr [r13]
	0x14085bddf: add r13, 0
	0x14085bde6: movzx r8, word ptr [r13]
	0x14085bdeb: mov rax, rbp
	0x14085bdee: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bdf4: xor r8d, dword ptr [rax]
	0x14085bdfe: mov rcx, rbp
	0x14085be0f: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14085be16: add r8d, dword ptr [rcx]
	0x14085be50: mov r9, rbp
	0x14085be5d: add r9, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085be6b: and dword ptr [r9], 0x530458cb
	0x14085be79: mov r9, rbp
	0x14085be83: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14085be98: mov dl, byte ptr [r9]
	0x14085be9b: cmp dl, 0x8b
	0x14085be9e: jbe 0x14085bec6
	0x14085beae: xor r8d, 0x7b1fff45
	0x14085becd: mov rbx, rbp
	0x14085bed0: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14085bede: xor word ptr [rbx], r8w
	0x14085bee2: add rbx, 0xffff
	0x14085bee9: mov rcx, 0
	0x14085bef7: mov r8, rbp
	0x14085bf0b: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14085bf1c: mov r8, qword ptr [r8]
	0x14085bf30: add r8, 4
	0x14085bf3e: mov cx, word ptr [r8]
	0x14085bf50: mov r12, rbp
	0x14085bf61: add r12, 0xbf
Load [EBP+0xbf](STATIC)
	0x14085bf79: xor ecx, dword ptr [r12]
	0x14085bfa9: mov r10, rbp
	0x14085bfb3: add r10, 0xbf
	0x14085bfdd: mov r14, rbp
	0x14085bfe3: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14085bfea: or dword ptr [r14], 0x6b521e5a
	0x14085c006: mov r11, rbp
	0x14085c009: add r11, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14085c017: sub word ptr [r11], cx
	0x14085c01b: and r10, 8
	0x14085c022: mov r12, rbp
	0x14085c025: mov rdi, rbp
	0x14085c028: add r12, 0xd6
	0x14085c043: add rdi, 0x16e
	0x14085c04a: mov r15, 0x200
Load [EBP+0xd6](STATIC)
	0x14085c058: movzx r12, word ptr [r12]
Load [EBP+0x16e](STATIC)
	0x14085c05d: movzx rdi, word ptr [rdi]
	0x14085c06f: add r12w, 0x2aa3
	0x14085c07c: add r15, r10
	0x14085c07f: add di, 0xc313
	0x14085c084: mov r13, r15
	0x14085c087: add r12, rbp
	0x14085c091: add rdi, rbp
Load [EBP+0x155](VM_REGISTER)
	0x14085c094: mov r12, qword ptr [r12]
Load [EBP+0x2e](VM_REGISTER)
	0x14085c0a6: mov rdi, qword ptr [rdi]
	0x14085c0af: or r13, 0xffff
	0x14085c0bd: mov qword ptr [rdi], r12
	0x14085c0c7: xor r13, 0xffff
	0x14085c0ce: mov r15, rbp
	0x14085c0d1: add r15, 0x145
	0x14085c0d8: add r13, 0xf0
Load [EBP+0x145](STATIC)
	0x14085c0df: mov r15, qword ptr [r15]
	0x14085c0e9: add r15, 4
	0x14085c0fe: movzx rax, word ptr [r15]
	0x14085c102: mov r12, rbp
	0x14085c113: add r12, 0xbf
	0x14085c121: mov r9, 0x400
	0x14085c128: mov rcx, rbp
	0x14085c12b: mov r15, 1
Load [EBP+0xbf](STATIC)
	0x14085c139: add eax, dword ptr [r12]
	0x14085c13d: add rcx, 0xfd
Load [EBP+0xfd](STATIC)
	0x14085c144: mov r14, qword ptr [rcx]
	0x14085c147: add r15, 0x88
	0x14085c151: push 0x20a063d2
	0x14085c156: push 0x503d5533
	0x14085c15b: push 0x162599c4
	0x14085c160: sub rsp, 8
	0x14085c164: push 0x3ee8804b
	0x14085c169: sub rsp, 8
	0x14085c16d: push 0x7943cff9
	0x14085c172: push 0x5daad038
	0x14085c177: sub rsp, 8
unknown store addr: fb8, lea_ast: ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c17e: mov qword ptr [rsp], r14
unknown read addr: fb8 ((0xffffffffffffffb8 + stack) & 0xffffffffffffffff)
unknown store addr: fc0, lea_ast: ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c182: pop qword ptr [rsp]
unknown read addr: fc0 ((0xffffffffffffffc0 + stack) & 0xffffffffffffffff)
unknown store addr: fc8, lea_ast: ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c185: pop qword ptr [rsp]
unknown read addr: fc8 ((0xffffffffffffffc8 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c188: pop qword ptr [rsp]
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c18b: pop qword ptr [rsp]
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14086ae99
	0x14085c18e: pop qword ptr [rsp]
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14085c191: pop qword ptr [rsp]
	0x14085c194: pop qword ptr [rsp]
	0x14085c197: pop qword ptr [rsp]
	0x14085c1a4: xor r15, 8
	0x14085c1b9: or r9, r9
	0x14085c1c3: mov rsi, 0x200
	0x14085c1ca: mov r11, 1
	0x14085c1d1: xor r11, 1
	0x14085c1d8: or rbx, 0xffff
	0x14085c1df: and rbx, 0x40
	0x14085c1e6: mov rdx, rbx
	0x14085c1e9: xor r11, 0x20
	0x14085c1f0: mov r12, 0
	0x14085c1f7: xor rsi, rdx
	0x14085c1fa: xor rsi, 0x20
	0x14085c201: sub rbx, r11
	0x14085c204: sub rsp, 8
	0x14085c208: push 0xb277873
	0x14085c20d: push rbp
	0x14085c20e: pop qword ptr [rsp]
	0x14085c211: pop qword ptr [rsp]
	0x14085c214: mov r14, qword ptr [rsp]
	0x14085c218: push 0x3e0d514b
	0x14085c21d: mov qword ptr [rsp], rdx
	0x14085c221: mov rdx, rsp
	0x14085c224: add rdx, 8
	0x14085c228: push 0x70bd5f62
	0x14085c22d: mov qword ptr [rsp], r15
	0x14085c231: push r14
	0x14085c233: movabs r14, 0x73fbaeec
	0x14085c23d: mov r15, r14
	0x14085c240: pop r14
	0x14085c242: xor r15, 0x73fbaee4
	0x14085c249: sub rdx, 0x7bdf3817
	0x14085c250: add rdx, r15
	0x14085c253: add rdx, 0x7bdf3817
	0x14085c25a: mov r15, qword ptr [rsp]
	0x14085c25e: sub rsp, 8
	0x14085c262: mov qword ptr [rsp], r11
	0x14085c266: mov r11, rsp
	0x14085c269: add r11, 8
	0x14085c26d: add r11, 8
	0x14085c274: push 0x5e4d91fd
	0x14085c279: mov qword ptr [rsp], r11
	0x14085c27d: push qword ptr [rsp + 8]
	0x14085c281: pop r11
	0x14085c283: pop qword ptr [rsp]
	0x14085c286: pop rsp
	0x14085c287: xor rdx, qword ptr [rsp]
	0x14085c28b: xor qword ptr [rsp], rdx
	0x14085c28f: xor rdx, qword ptr [rsp]
	0x14085c293: mov rsp, qword ptr [rsp]
	0x14085c297: sub r12, rsi
	0x14085c29a: push 0x27af3006
	0x14085c29f: mov qword ptr [rsp], r15
	0x14085c2a3: movabs r15, 0x5eeb6e51
	0x14085c2ad: push rbx
	0x14085c2ae: movabs rbx, 0x7e97a781
	0x14085c2b8: and r15, rbx
unknown read addr: fe8 0xfe8
	0x14085c2bb: push qword ptr [rsp]
	0x14085c2be: pop rbx
	0x14085c2bf: sub rsp, 8
	0x14085c2c3: mov qword ptr [rsp], r8
	0x14085c2c7: push rsp
	0x14085c2c8: pop r8
	0x14085c2ca: add r8, 8
	0x14085c2ce: sub rsp, 8
	0x14085c2d2: mov qword ptr [rsp], r12
	0x14085c2d6: movabs r12, 0x7f7e1a84
	0x14085c2e0: and r12, 0x7e9710d1
	0x14085c2e7: inc r12
	0x14085c2ea: dec r12
	0x14085c2ed: xor r12, 0x7e161088
	0x14085c2f4: add r8, r12
	0x14085c2f7: pop r12
	0x14085c2f9: push r8
	0x14085c2fb: push qword ptr [rsp + 8]
	0x14085c2ff: pop r8
	0x14085c301: pop qword ptr [rsp]
	0x14085c304: mov rsp, qword ptr [rsp]
	0x14085c308: push 0x4e8d6a20
	0x14085c30d: mov qword ptr [rsp], r12
	0x14085c311: movabs r12, 0x6febf981
	0x14085c31b: xor r15, r12
	0x14085c31e: pop r12
	0x14085c320: shl r15, 5
	0x14085c324: push 0xc6b92b9
	0x14085c329: push 0x3a8c1b88
	0x14085c32e: mov qword ptr [rsp], r13
	0x14085c332: pop qword ptr [rsp]
	0x14085c335: movabs r13, 0xfffffff9d2e41145
	0x14085c33f: sub r15, 0x6fbe6200
	0x14085c346: add r15, r13
	0x14085c349: add r15, 0x6fbe6200
	0x14085c350: pop r13
	0x14085c352: sub r14, 0x6f17a6ca
	0x14085c359: sub r14, 0x33ab1736
	0x14085c360: add r14, r15
	0x14085c363: add r14, 0x33ab1736
	0x14085c36a: add r14, 0x6f17a6ca
	0x14085c371: pop r15
	0x14085c373: push rax
	0x14085c374: movabs rax, 0x5f8f4497
	0x14085c37e: dec rax
	0x14085c381: not rax
	0x14085c384: push rcx
	0x14085c385: mov rcx, 0x5f8f449d
	0x14085c38c: add rax, rcx
	0x14085c38f: pop rcx
Load [EBP+0x145](STATIC)
bytecode=0x102e4e83e
	0x14085c390: sub qword ptr [r14], 0x3daf25bd
	0x14085c397: push rdx
	0x14085c398: push rsi
	0x14085c399: mov rsi, rsp
	0x14085c39c: add rsi, 8
	0x14085c3a0: push r9
	0x14085c3a2: movabs r9, 8
	0x14085c3ac: sub rsi, r9
	0x14085c3af: pop r9
	0x14085c3b1: xor rsi, qword ptr [rsp]
	0x14085c3b5: xor qword ptr [rsp], rsi
	0x14085c3bd: pop rsp
	0x14085c3be: mov qword ptr [rsp], r15
	0x14085c3c2: movabs r15, 0x5fd83cc1
	0x14085c3cc: push r8
	0x14085c3ce: movabs r8, 0x203c3108
	0x14085c3d8: xor r15, r8
	0x14085c3df: add rsp, 8
	0x14085c3e3: shr r15, 6
	0x14085c3e7: push r12
	0x14085c3e9: movabs r12, 0xfffffffffe006fc9
	0x14085c3f3: add r15, r12
	0x14085c3f6: pop r12
	0x14085c3f8: mov rdx, r15
	0x14085c3ff: add rsp, 8
	0x14085c406: add rdx, 0x16727e90
	0x14085c40d: add rdx, r14
	0x14085c410: sub rdx, 0x16727e90
Load [EBP+0x145](STATIC)
bytecode=0x11a9c546f
	0x14085c417: add qword ptr [rdx], 0x17b76c31
Load [EBP+0x145](STATIC)
bytecode=0x11a9c5475
	0x14085c41e: add qword ptr [rdx], rax
Load [EBP+0x145](STATIC)
bytecode=0x102e4e844
	0x14085c421: sub qword ptr [rdx], 0x17b76c31
unknown read addr: fe8 0xfe8
	0x14085c428: push qword ptr [rsp]
	0x14085c42f: add rsp, 8
	0x14085c436: add rsp, 8
Load [EBP+0x145](STATIC)
bytecode=0x140940e01
	0x14085c43a: add qword ptr [r14], 0x3daf25bd
	0x14085c445: add rsp, 8
	0x14085c45e: ret 0
handlers outputs:



	0x14086ae99: mov rax, 0x9f0e1c9
	0x14086aea0: mov rcx, rbp
	0x14086aea3: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086aeaa: or dword ptr [rcx], eax
	0x14086aec1: mov rsi, 0
	0x14086aecf: mov r13, rbp
	0x14086aed2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14086aed9: mov r13, qword ptr [r13]
	0x14086aedd: add r13, 4
	0x14086aee4: mov si, word ptr [r13]
	0x14086aee9: mov rbx, rbp
	0x14086aef3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086aefa: add esi, dword ptr [rbx]
	0x14086af06: mov rax, rbp
	0x14086af10: add rax, 0x120
Load [EBP+0x120](STATIC)
	0x14086af16: xor esi, dword ptr [rax]
	0x14086af22: mov r12, rbp
	0x14086af33: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086af47: xor dword ptr [r12], esi
	0x14086af52: mov rbx, rbp
	0x14086af6a: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086af71: sub dword ptr [rbx], 0xed79955
	0x14086af85: mov rax, rbp
	0x14086af8f: add rax, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x14086af98: add word ptr [rax], si
	0x14086afa9: mov r11, rbp
	0x14086afaf: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14086afbd: mov r11, qword ptr [r11]
	0x14086afc0: add r11, 6
	0x14086afd1: movzx rdi, word ptr [r11]
	0x14086afea: mov rax, rbp
	0x14086affb: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14086b001: sub edi, dword ptr [rax]
	0x14086b00d: mov rdx, rbp
	0x14086b01a: add rdx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14086b024: xor edi, dword ptr [rdx]
	0x14086b026: mov r9, rbp
	0x14086b037: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b041: xor dword ptr [r9], edi
	0x14086b051: mov r14, rbp
	0x14086b064: add r14, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14086b06b: or dword ptr [r14], 0x49c158a5
	0x14086b078: mov r11, rbp
	0x14086b088: add r11, 0x130
Load [EBP+0x130](STATIC)
	0x14086b09c: mov sil, byte ptr [r11]
	0x14086b09f: cmp sil, 0x69
	0x14086b0a3: jbe 0x14086b0ca
	0x14086b0af: xor edi, 0x7e20ca66
	0x14086b0ca: mov r14, rbp
	0x14086b0e2: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14086b0f7: add word ptr [r14], di
	0x14086b102: mov rcx, rbp
	0x14086b105: add rcx, 0x145
	0x14086b10c: mov r8, rbp
	0x14086b115: add r8, 0xab
Load [EBP+0x145](STATIC)
	0x14086b129: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14086b141: mov r8, qword ptr [r8]
	0x14086b152: add rcx, 8
	0x14086b167: movzx rcx, word ptr [rcx]
	0x14086b19e: sub ecx, 0x2b434b1a
	0x14086b1b2: mov rdx, rbp
	0x14086b1bf: add rdx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b1d3: xor dword ptr [rdx], ecx
	0x14086b1d5: and rcx, 0xffff
	0x14086b1ed: shl rcx, 3
	0x14086b1f4: add r8, rcx
	0x14086b1fe: mov r13, qword ptr [r8]
	0x14086b208: mov rdi, rbp
	0x14086b215: add rdi, 0xfd
Store [EBP+0xfd](STATIC)
	0x14086b21c: mov qword ptr [rdi], r13
	0x14086b233: mov rbx, rbp
	0x14086b239: add rbx, 0x16e
	0x14086b254: mov r9, rbp
	0x14086b268: add r9, 0xd6
Load [EBP+0xd6](STATIC)
	0x14086b284: movzx r9, word ptr [r9]
Load [EBP+0x16e](STATIC)
	0x14086b292: movzx rbx, word ptr [rbx]
	0x14086b296: mov r12, 1
	0x14086b2a0: sub r9w, 0xbaf6
	0x14086b2a6: add bx, 0x41fb
	0x14086b2bc: add r9, rbp
	0x14086b2c2: mov r15, rbx
Load [EBP+0x2e](VM_REGISTER)
	0x14086b2c5: mov r9, qword ptr [r9]
	0x14086b2c8: mov r8, 0
	0x14086b2cf: add rbx, rbp
Store VM_REG [EBP+0x14d]
	0x14086b2d2: mov qword ptr [rbx], r9
	0x14086b2d5: mov rax, rbp
	0x14086b2d8: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14086b2de: mov rax, qword ptr [rax]
	0x14086b2e1: add rax, 0
	0x14086b2e7: movzx rdx, word ptr [rax]
	0x14086b2eb: add rdx, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14086b2ee: mov rdx, qword ptr [rdx]
	0x14086b2f1: or r8, rdx
	0x14086b2f4: pushfq
	0x14086b2f5: and rdx, 0x45f7a4ac
	0x14086b303: mov rdi, rbp
	0x14086b306: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14086b30d: mov rdi, qword ptr [rdi]
	0x14086b310: add rdi, 2
	0x14086b31e: pop r8
	0x14086b320: sub rcx, 0xffff
	0x14086b327: xor rdi, 4
	0x14086b32e: and r12, 0x400
	0x14086b33f: and rdi, 0x20
	0x14086b346: add rcx, r13
	0x14086b349: mov rax, rbp
	0x14086b34c: and rdi, 0xffffffff80000000
	0x14086b353: xor r12, 8
	0x14086b35a: mov r10, r11
	0x14086b35d: xor rdi, r10
	0x14086b360: add rax, 0xfd
Load [EBP+0xfd](STATIC)
	0x14086b366: mov r14, qword ptr [rax]
	0x14086b369: xor rdi, 0x800
	0x14086b370: push 0x387ba803
	0x14086b375: push r12
	0x14086b377: mov r12, rsp
	0x14086b37a: add r12, 8
	0x14086b37e: push r10
	0x14086b380: push r15
	0x14086b382: push rbx
	0x14086b383: movabs rbx, 0x5ff9d0e4
	0x14086b38d: push rbx
unknown read addr: fd0 ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff)
unknown store addr: fd0, lea_ast: ((0xffffffffffffffd0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x105fd644
	0x14086b38e: sub qword ptr [rsp], 0x4f99faa0
	0x14086b396: pop r15
	0x14086b398: add r15, 0x4f99faa0
	0x14086b39f: pop rbx
	0x14086b3a0: mov r10, r15
unknown read addr: fe0 ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff)
	0x14086b3a3: mov r15, qword ptr [rsp]
	0x14086b3a7: push r13
	0x14086b3a9: mov r13, rsp
	0x14086b3ac: add r13, 8
	0x14086b3b0: add r13, 8
unknown read addr: fd8 ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff)
unknown store addr: fd8, lea_ast: ((0xffffffffffffffd8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x14086b3b7: xchg qword ptr [rsp], r13
	0x14086b3bb: pop rsp
	0x14086b3bc: xor r10, 0x3e9df773
	0x14086b3c3: shr r10, 1
	0x14086b3c7: shl r10, 8
	0x14086b3cb: push rax
	0x14086b3cc: movabs rax, 0xffffffcf4dec3508
	0x14086b3d6: add r10, rax
	0x14086b3d9: push qword ptr [rsp]
	0x14086b3dc: mov rax, qword ptr [rsp]
	0x14086b3e0: add rsp, 8
	0x14086b3e4: push 0x573f7af1
	0x14086b3e9: push rbp
	0x14086b3ea: pop qword ptr [rsp]
	0x14086b3ed: mov rbp, rsp
	0x14086b3f0: add rbp, 8
	0x14086b3f4: add rbp, 8
	0x14086b3fb: xor rbp, qword ptr [rsp]
	0x14086b3ff: xor qword ptr [rsp], rbp
	0x14086b403: xor rbp, qword ptr [rsp]
	0x14086b407: pop rsp
	0x14086b408: sub r12, r10
	0x14086b40b: pop r10
unknown read addr: ff0 0xff0
	0x14086b40d: xchg qword ptr [rsp], r12
	0x14086b411: pop rsp
	0x14086b412: sub rsp, 8
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b419: mov qword ptr [rsp], r14
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b41d: pop qword ptr [rsp]
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x14081c612
	0x14086b420: pop qword ptr [rsp]
	0x14086b423: sub rdi, rax
	0x14086b426: or rdi, r14
	0x14086b429: xor rcx, 4
	0x14086b430: sub rcx, 0x88
	0x14086b437: and rcx, 0x78
	0x14086b43e: add rcx, 0x20
	0x14086b44f: and r10, 0xffffffff80000000
	0x14086b456: or r10, r13
	0x14086b459: sub rsp, 8
	0x14086b45d: push rdi
	0x14086b45e: push rdx
	0x14086b45f: mov rdx, rbp
	0x14086b462: mov rdi, rdx
	0x14086b465: pop rdx
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14086b466: mov qword ptr [rsp + 8], rdi
	0x14086b46b: pop rdi
	0x14086b46c: push r15
	0x14086b46e: movabs r15, 0x2dfb61b5
	0x14086b478: sub rsp, 8
	0x14086b47c: mov qword ptr [rsp], rbx
	0x14086b480: movabs rbx, 0x39bb52cc
	0x14086b48a: add r15, rbx
	0x14086b48d: mov rbx, qword ptr [rsp]
	0x14086b491: add rsp, 8
	0x14086b495: shl r15, 2
	0x14086b499: and r15, 0x6ff3f052
	0x14086b4a0: xor r15, 0x753de652
	0x14086b4a7: sub qword ptr [rsp + 8], r15
	0x14086b4ac: mov r15, qword ptr [rsp]
	0x14086b4b0: add rsp, 8
	0x14086b4b4: pop r8
	0x14086b4b6: push 0x5fbdd07e
	0x14086b4bb: mov qword ptr [rsp], rbx
	0x14086b4bf: push 0x18d17966
	0x14086b4c4: mov qword ptr [rsp], r10
	0x14086b4c8: movabs r10, 0x5db8b138
	0x14086b4d2: movabs rbx, 0x7b740664
	0x14086b4dc: or rbx, 0x5bada547
	0x14086b4e3: add rbx, 0x6bca43b0
	0x14086b4ea: push r8
	0x14086b4ec: movabs r8, 0xffffffff3a3ea2dd
	0x14086b4f6: add rbx, r8
	0x14086b4f9: pop r8
	0x14086b4fb: add rbx, r10
	0x14086b4fe: pop r10
	0x14086b500: push r15
	0x14086b502: movabs r15, 0x75dd834c
	0x14086b50c: xor r15, 0x4a267110
	0x14086b513: or rbx, r15
	0x14086b516: pop r15
	0x14086b518: not rbx
	0x14086b51b: not rbx
	0x14086b51e: dec rbx
	0x14086b521: push r10
	0x14086b523: movabs r10, 0x410c929
	0x14086b52d: xor rbx, r10
	0x14086b530: push qword ptr [rsp]
	0x14086b533: pop r10
	0x14086b535: add rsp, 8
	0x14086b539: add r8, rbx
	0x14086b53c: mov rbx, qword ptr [rsp]
	0x14086b540: add rsp, 8
	0x14086b547: or rcx, 0xffffffff80000000
	0x14086b54e: mov r9, 0x200
	0x14086b555: push 0x761b344
	0x14086b55a: mov qword ptr [rsp], r9
	0x14086b55e: push 0x3fdb86ee
	0x14086b563: mov qword ptr [rsp], r14
	0x14086b567: movabs r14, 0x7fd7b6a9
	0x14086b571: push rax
	0x14086b572: movabs rax, 0x7fd7b7ec
	0x14086b57c: sub rsp, 8
	0x14086b583: mov qword ptr [rsp], rax
	0x14086b587: push rcx
	0x14086b588: movabs rcx, 0x3ffebba5
	0x14086b592: push rdi
	0x14086b593: mov rdi, rcx
	0x14086b596: xor qword ptr [rsp + 0x10], rdi
	0x14086b59b: mov rdi, qword ptr [rsp]
	0x14086b59f: add rsp, 8
	0x14086b5a6: pop rcx
	0x14086b5a7: mov r9, qword ptr [rsp]
	0x14086b5ab: add rsp, 8
	0x14086b5af: push rcx
	0x14086b5b0: movabs rcx, 0x3ffebba5
	0x14086b5ba: xor r9, rcx
	0x14086b5bd: pop rcx
	0x14086b5be: pop rax
	0x14086b5bf: xor r9, r14
	0x14086b5c2: push qword ptr [rsp]
	0x14086b5c5: pop r14
	0x14086b5c7: push r10
	0x14086b5c9: mov r10, rsp
	0x14086b5cc: add r10, 8
	0x14086b5d0: add r10, 8
	0x14086b5d7: xchg qword ptr [rsp], r10
	0x14086b5db: pop rsp
	0x14086b5dc: add r8, 0x3ff906f6
	0x14086b5e3: sub r8, 0x3fb7bb46
	0x14086b5ea: add r8, r9
	0x14086b5ed: add r8, 0x3fb7bb46
	0x14086b5f4: sub r8, 0x3ff906f6
	0x14086b5fb: push qword ptr [rsp]
	0x14086b5fe: mov r9, qword ptr [rsp]
	0x14086b602: add rsp, 8
	0x14086b606: add rsp, 8
	0x14086b60a: mov rsi, 0x400
	0x14086b611: sub rsp, 8
	0x14086b618: mov qword ptr [rsp], rsi
	0x14086b61c: push rdi
	0x14086b61d: movabs rdi, 0x6ff9146c
	0x14086b627: push r15
	0x14086b629: movabs r15, 0x7e3da9ab
	0x14086b633: inc r15
	0x14086b636: xor r15, 0x3fca4fd0
	0x14086b63d: shl r15, 1
	0x14086b641: push 0x7c01114
	0x14086b646: mov qword ptr [rsp], rbp
	0x14086b64a: movabs rbp, 0xec16d88e
	0x14086b654: xor r15, rbp
	0x14086b657: pop rbp
	0x14086b658: mov rsi, r15
	0x14086b65b: pop r15
	0x14086b65d: sub rsi, 0xfefd526
	0x14086b664: sub rsi, rdi
	0x14086b667: add rsi, 0xfefd526
	0x14086b66e: mov rdi, qword ptr [rsp]
	0x14086b672: add rsp, 8
	0x14086b676: push rbx
	0x14086b677: mov rbx, rsp
	0x14086b67a: add rbx, 8
	0x14086b67e: sub rbx, 8
	0x14086b685: xchg qword ptr [rsp], rbx
	0x14086b689: mov rsp, qword ptr [rsp]
	0x14086b68d: push r13
	0x14086b68f: pop qword ptr [rsp]
	0x14086b692: mov r13, 0
	0x14086b699: add r13, r8
	0x14086b69c: push r11
	0x14086b69e: push rcx
	0x14086b69f: movabs rcx, 0x79df8656
	0x14086b6a9: mov r11, rcx
	0x14086b6ac: pop rcx
	0x14086b6ad: push r9
	0x14086b6af: movabs r9, 0x3de5165c
	0x14086b6b9: and r11, r9
	0x14086b6bc: pop r9
	0x14086b6be: xor r11, 0x5defe419
	0x14086b6c5: push rsi
	0x14086b6c6: movabs rsi, 0x77bf49bd
	0x14086b6d0: shl rsi, 1
	0x14086b6d4: sub rsi, 0x6fcd4d5f
	0x14086b6db: push rdi
	0x14086b6dc: movabs rdi, 0xe3dc2868
	0x14086b6e6: sub rsi, rdi
	0x14086b6e9: pop rdi
	0x14086b6ea: add r11, rsi
	0x14086b6ed: pop rsi
	0x14086b6ee: sub r11, 0x647abf53
	0x14086b6f5: add r11, r13
	0x14086b6f8: add r11, 0x647abf53
Load [EBP+0x145](STATIC)
bytecode=0x140940e0b
	0x14086b6ff: add qword ptr [r11], rsi
	0x14086b702: pop r11
	0x14086b704: pop r13
	0x14086b706: push qword ptr [rsp]
	0x14086b709: pop rsi
	0x14086b70a: add rsp, 8
	0x14086b72f: mov r10, 0x1df9384b
	0x14086b736: mov r9, rbp
	0x14086b739: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14086b740: sub dword ptr [r9], r10d
	0x14086b74a: ret 0
handlers outputs:



	0x14081c63f: mov r8, rbp
	0x14081c642: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14081c653: mov r8, qword ptr [r8]
	0x14081c65d: add r8, 6
	0x14081c66e: mov r11d, dword ptr [r8]
	0x14081c697: mov rbx, rbp
	0x14081c69d: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x14081c6aa: xor r11d, dword ptr [rbx]
	0x14081c6be: mov r8, rbp
	0x14081c6c8: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c6e0: add dword ptr [r8], r11d
	0x14081c6ea: mov rbx, rbp
	0x14081c6ed: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c6fe: xor dword ptr [rbx], 0x4259691c
	0x14081c70b: mov rcx, rbp
	0x14081c711: add rcx, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14081c718: add dword ptr [rcx], r11d
	0x14081c730: mov rcx, rbp
	0x14081c741: add rcx, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14081c74f: or dword ptr [rcx], r11d
	0x14081c78c: mov r9, rbp
	0x14081c796: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14081c7a0: mov r9, qword ptr [r9]
	0x14081c7b1: add r9, 4
	0x14081c7bf: movzx rdx, word ptr [r9]
	0x14081c7fe: mov rbx, rbp
	0x14081c801: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c80b: sub edx, dword ptr [rbx]
	0x14081c80d: mov rdi, rbp
	0x14081c817: add rdi, 0xf0
Load [EBP+0xf0](STATIC)
	0x14081c825: add edx, dword ptr [rdi]
	0x14081c82e: mov r13, rbp
	0x14081c842: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c85a: add dword ptr [r13], edx
	0x14081c865: mov rbx, rbp
	0x14081c875: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c889: or dword ptr [rbx], 0x3bd9dc1c
	0x14081c895: mov rcx, rbp
	0x14081c898: add rcx, 0x130
Load [EBP+0x130](STATIC)
	0x14081c89f: mov r8b, byte ptr [rcx]
	0x14081c8a2: cmp r8b, 0x85
	0x14081c8a6: jbe 0x14081c8b5
	0x14081c8ac: xor edx, 0x4e82fe7c
	0x14081c8ca: mov rdi, rbp
	0x14081c8cd: add rdi, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14081c8db: xor word ptr [rdi], dx
	0x14081c8de: mov r12, rbp
	0x14081c8e1: add r12, 0x58
	0x14081c8e8: mov r14, rbp
	0x14081c8eb: mov r11, rbp
Load [EBP+0x58](STATIC)
	0x14081c8ee: mov r12d, dword ptr [r12]
	0x14081c8f2: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081c8f9: sub dword ptr [r14], 0x42c39068
	0x14081c900: mov r10, rbp
	0x14081c903: add r10, 0xa7
	0x14081c90a: add r11, 0x16e
	0x14081c911: add r12d, 0x7c1ba3aa
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14081c918: or dword ptr [r10], 0x2179ee0a
Load [EBP+0x16e](STATIC)
	0x14081c91f: movzx r11, word ptr [r11]
	0x14081c923: sub r11w, 0x7fbf
	0x14081c929: add r11, rbp
Load [EBP+0x14d](VM_REGISTER)
Store VM_REG [EBP+0x14d]
	0x14081c92c: add qword ptr [r11], r12
	0x14081c942: mov cl, 0xcb
	0x14081c94e: mov r12, rbp
	0x14081c95b: add r12, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14081c970: or byte ptr [r12], cl
	0x14081c98a: mov r15, rbp
	0x14081c99e: mov rsi, rbp
	0x14081c9a1: add r15, 0xab
Load [EBP+0xab](STATIC)
	0x14081c9ab: mov r15, qword ptr [r15]
	0x14081c9b8: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14081c9bf: mov rsi, qword ptr [rsi]
	0x14081c9cf: add rsi, 0xa
	0x14081c9dc: movzx rsi, word ptr [rsi]
	0x14081c9e0: mov rcx, rbp
	0x14081c9ed: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14081c9fb: add esi, dword ptr [rcx]
	0x14081ca04: sub esi, 0x3a934216
	0x14081ca14: mov r8, rbp
	0x14081ca28: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14081ca40: sub dword ptr [r8], esi
	0x14081ca46: and rsi, 0xffff
	0x14081ca5e: shl rsi, 3
	0x14081ca69: add r15, rsi
	0x14081ca7a: mov r10, qword ptr [r15]
	0x14081ca8a: mov r14, rbp
	0x14081ca8d: add r14, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e19
	0x14081ca94: add qword ptr [r14], 0xe
	0x14081ca9b: jmp r10
handlers outputs:



	0x1407eb5ac: mov rbx, rbp
	0x1407eb5af: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5b6: mov edi, dword ptr [rbx]
	0x1407eb5b8: and edi, 1
	0x1407eb5be: cmp edi, 0
	0x1407eb5c4: je 0x1407eb5d4
	0x1407eb5e1: mov r11, rbp
	0x1407eb5e7: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x1407eb5ee: mov eax, dword ptr [r11]
	0x1407eb5f1: and eax, 1
	0x1407eb5f6: cmp eax, 0
	0x1407eb5fb: je 0x1407eb612
	0x1407eb601: mov r11, rbp
	0x1407eb604: add r11, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb60b: and dword ptr [r11], 0x7baa9818
	0x1407eb620: mov r10, rbp
	0x1407eb623: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb630: mov r10, qword ptr [r10]
	0x1407eb63d: add r10, 2
	0x1407eb644: movzx r12, word ptr [r10]
	0x1407eb66e: mov r13, rbp
	0x1407eb686: add r13, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407eb694: xor r12d, dword ptr [r13]
	0x1407eb69b: mov r9, rbp
	0x1407eb6a1: add r9, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407eb6ab: add dword ptr [r9], r12d
	0x1407eb6ba: mov rbx, rbp
	0x1407eb6d1: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407eb6d8: xor dword ptr [rbx], 0x516cdefe
	0x1407eb6e4: mov rdx, rbp
	0x1407eb6e7: add rdx, 0x130
Load [EBP+0x130](STATIC)
	0x1407eb6ee: mov bl, byte ptr [rdx]
	0x1407eb6f0: cmp bl, 0x4c
	0x1407eb6f3: jbe 0x1407eb709
	0x1407eb709: mov r13, rbp
	0x1407eb70c: add r13, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407eb71d: xor word ptr [r13], r12w
	0x1407eb72c: mov r8, rbp
	0x1407eb73d: add r8, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407eb752: movzx r14, word ptr [r8]
	0x1407eb75c: sub r14w, 0x345c
	0x1407eb770: add r14, rbp
Load [EBP+0x14d](VM_REGISTER)
	0x1407eb773: mov r14, qword ptr [r14]
	0x1407eb776: pop rcx
	0x1407eb78c: mov qword ptr [r14], rcx
	0x1407eb792: mov r8, r14
	0x1407eb79f: mov rdi, 0
	0x1407eb7a6: mov r10, rbp
	0x1407eb7ba: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407eb7c7: mov r10, qword ptr [r10]
	0x1407eb7d1: add r10, 4
	0x1407eb7e9: mov di, word ptr [r10]
	0x1407eb7f4: add rdi, rbp
	0x1407eb7f7: cmp r8, rdi
	0x1407eb7fa: je 0x1407eb82d
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407eb826: add qword ptr [rdi], 8
	0x1407eb85d: mov rsi, rbp
	0x1407eb863: add rsi, 0x145
	0x1407eb877: mov rax, rbp
Load [EBP+0x145](STATIC)
	0x1407eb881: mov rsi, qword ptr [rsi]
	0x1407eb895: add rsi, 0
	0x1407eb8a6: add rax, 0xab
	0x1407eb8b6: movzx rsi, word ptr [rsi]
Load [EBP+0xab](STATIC)
	0x1407eb8cf: mov rax, qword ptr [rax]
	0x1407eb8df: mov rbx, rbp
	0x1407eb8f3: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407eb8fa: xor esi, dword ptr [rbx]
	0x1407eb8fc: add esi, 0x500f8777
	0x1407eb932: and rsi, 0xffff
	0x1407eb943: shl rsi, 3
	0x1407eb947: add rax, rsi
	0x1407eb94a: mov r13, qword ptr [rax]
	0x1407eb957: mov rsi, rbp
	0x1407eb961: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e1f
	0x1407eb968: add qword ptr [rsi], 6
	0x1407eb96f: jmp r13
handlers outputs:



	0x14084b974: mov r13, rbp
	0x14084b97e: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14084b98f: mov r13, qword ptr [r13]
	0x14084b9a8: add r13, 6
	0x14084b9c4: mov eax, dword ptr [r13]
	0x14084ba0a: mov rdi, rbp
	0x14084ba1e: add rdi, 0xa7
Load [EBP+0xa7](STATIC)
	0x14084ba25: add eax, dword ptr [rdi]
	0x14084ba2e: mov r10, rbp
	0x14084ba38: add r10, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084ba3f: add dword ptr [r10], eax
	0x14084ba42: mov rcx, rbp
	0x14084ba5a: add rcx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084ba6b: and dword ptr [rcx], 0x53667bde
	0x14084ba71: mov r8, rbp
	0x14084ba77: add r8, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14084ba7e: add dword ptr [r8], eax
	0x14084ba88: mov r12, rbp
	0x14084ba92: add r12, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14084ba99: and dword ptr [r12], eax
	0x14084baab: mov r9, rbp
	0x14084babc: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14084bad4: mov r9, qword ptr [r9]
	0x14084bae1: add r9, 4
	0x14084baf6: movzx rax, word ptr [r9]
	0x14084bb08: mov r8, rbp
	0x14084bb0b: add r8, 0xbf
Load [EBP+0xbf](STATIC)
	0x14084bb19: xor eax, dword ptr [r8]
	0x14084bb23: mov rcx, rbp
	0x14084bb26: add rcx, 0xf0
Load [EBP+0xf0](STATIC)
	0x14084bb2d: xor eax, dword ptr [rcx]
	0x14084bb3d: mov r8, rbp
	0x14084bb40: add r8, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084bb4e: or dword ptr [r8], eax
	0x14084bb51: mov rdx, rbp
	0x14084bb57: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14084bb5e: and dword ptr [rdx], 0x122a5e93
	0x14084bb72: mov r9, rbp
	0x14084bb8a: add r9, 0x130
Load [EBP+0x130](STATIC)
	0x14084bb91: mov r13b, byte ptr [r9]
	0x14084bb94: cmp r13b, 0xd2
	0x14084bb98: jbe 0x14084bbaf
	0x14084bbaf: mov r14, rbp
	0x14084bbb5: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14084bbcd: add word ptr [r14], ax
	0x14084bbd8: mov rbx, rbp
	0x14084bbe2: mov rsi, rbp
	0x14084bbec: add rbx, 0x16e
	0x14084bbfd: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084bc19: and dword ptr [rsi], 0x247d15cf
	0x14084bc45: mov rdx, rbp
	0x14084bc59: add rdx, 0x58
Load [EBP+0x58](STATIC)
	0x14084bc60: mov edx, dword ptr [rdx]
	0x14084bc6f: add edx, 0x41f1d495
Load [EBP+0x16e](STATIC)
	0x14084bc75: movzx rbx, word ptr [rbx]
	0x14084bc8e: add rbx, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14084bca6: mov rbx, qword ptr [rbx]
Deref(t3541,ds)
	0x14084bca9: add dword ptr [rbx], edx
	0x14084bcab: pushfq
	0x14084bcec: mov rax, 0
	0x14084bd00: mov r14, rbp
	0x14084bd09: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084bd17: mov r14, qword ptr [r14]
	0x14084bd2a: add r14, 0xa
	0x14084bd46: mov al, byte ptr [r14]
	0x14084bd49: cmp al, 0
	0x14084bd4b: je 0x14084bdbe
	0x14084bd58: mov r14, rbp
	0x14084bd5b: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084bd62: mov r14, qword ptr [r14]
	0x14084bd72: add r14, 2
	0x14084bd8a: mov ax, word ptr [r14]
	0x14084bd8e: add rax, rbp
	0x14084bda6: pop r11
Store VM_REG [EBP+0x26]
	0x14084bda8: mov qword ptr [rax], r11
	0x14084be05: mov rdi, rbp
	0x14084be19: mov r14, rbp
	0x14084be2d: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14084be42: mov r14, qword ptr [r14]
	0x14084be53: add r14, 0
	0x14084be64: add rdi, 0xab
Load [EBP+0xab](STATIC)
	0x14084be7c: mov rdi, qword ptr [rdi]
	0x14084be7f: movzx r14, word ptr [r14]
	0x14084be9d: mov rsi, rbp
	0x14084bea0: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14084beae: and dword ptr [rsi], r14d
	0x14084beb4: and r14, 0xffff
	0x14084bed3: shl r14, 3
	0x14084bee5: add rdi, r14
	0x14084bef2: mov r11, qword ptr [rdi]
	0x14084bf03: mov rcx, rbp
	0x14084bf06: add rcx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e2a
	0x14084bf0d: add qword ptr [rcx], 0xb
	0x14084bf14: jmp r11
handlers outputs:



basic block ends with indirect unconditional branch
	0x1407dcd80: mov r13, 0
	0x1407dcd87: mov r8, rbp
	0x1407dcd8a: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x1407dcd91: mov r8, qword ptr [r8]
	0x1407dcd94: add r8, 2
	0x1407dcd9b: mov r13w, word ptr [r8]
	0x1407dcd9f: add r13, rbp
	0x1407dcda2: mov r10, 0
	0x1407dcda9: mov r12, rbp
	0x1407dcdac: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x1407dcdb3: mov r12, qword ptr [r12]
	0x1407dcdb7: add r12, 4
	0x1407dcdbe: mov r10w, word ptr [r12]
	0x1407dcdc3: add r10, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407dcdc6: push qword ptr [r13]
Load [EBP+0x155](VM_REGISTER)
	0x1407dcdca: push qword ptr [r10]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407dcdcd: pop qword ptr [r13]
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407dcdd1: pop qword ptr [r10]
	0x1407dcdd4: mov rcx, rbp
	0x1407dcdd7: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x1407dcde8: mov rcx, qword ptr [rcx]
	0x1407dcdeb: add rcx, 6
	0x1407dcdf2: movzx r12, word ptr [rcx]
	0x1407dcdf6: mov r11, rbp
	0x1407dcdff: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x1407dce0d: add r12d, dword ptr [r11]
	0x1407dce17: mov r14, rbp
	0x1407dce28: add r14, 0xf0
Load [EBP+0xf0](STATIC)
	0x1407dce39: sub r12d, dword ptr [r14]
	0x1407dce3c: mov rcx, rbp
	0x1407dce3f: add rcx, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dce4d: add dword ptr [rcx], r12d
	0x1407dce5e: mov r8, rbp
	0x1407dce61: add r8, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x1407dce6e: sub dword ptr [r8], 0x58e6e155
	0x1407dce7f: mov r14, rbp
	0x1407dce89: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x1407dce93: mov cl, byte ptr [r14]
	0x1407dce96: cmp cl, 0x40
	0x1407dce99: jbe 0x1407dceb6
	0x1407dcea6: add r12d, 0xf3e5b04
	0x1407dcec0: mov rbx, rbp
	0x1407dced4: add rbx, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x1407dcedb: xor word ptr [rbx], r12w
	0x1407dcf04: mov rsi, rbp
	0x1407dcf07: add rsi, 0x16e
Load [EBP+0x16e](STATIC)
	0x1407dcf11: movzx rdx, word ptr [rsi]
	0x1407dcf88: sub dx, 0xd8a5
	0x1407dcf8d: add rdx, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x1407dcfa1: mov rdx, qword ptr [rdx]
Deref(t3549,ds)
	0x1407dcfae: mov rdx, qword ptr [rdx]
	0x1407dcfb1: push rdx
	0x1407dcfb5: mov r10, 0
	0x1407dcfca: mov r11, rbp
	0x1407dcfcd: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407dcfd4: mov r11, qword ptr [r11]
	0x1407dcfde: add r11, 8
	0x1407dcfef: mov r10w, word ptr [r11]
	0x1407dcff3: add r10, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x1407dd00a: sub qword ptr [r10], 8
	0x1407dd047: mov r11b, 0xa9
	0x1407dd04a: mov r9, rbp
	0x1407dd04d: add r9, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407dd062: add byte ptr [r9], r11b
	0x1407dd072: mov r11, rbp
	0x1407dd083: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407dd098: mov r11, qword ptr [r11]
	0x1407dd09e: add r11, 0
	0x1407dd0ba: movzx r11, word ptr [r11]
	0x1407dd0d3: mov r8, rbp
	0x1407dd0e7: add r8, 0xab
Load [EBP+0xab](STATIC)
	0x1407dd0f8: mov r8, qword ptr [r8]
	0x1407dd123: mov r15, rbp
	0x1407dd126: add r15, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407dd12d: or dword ptr [r15], r11d
	0x1407dd136: and r11, 0xffff
	0x1407dd13d: shl r11, 3
	0x1407dd14f: add r8, r11
	0x1407dd159: mov r12, qword ptr [r8]
	0x1407dd15c: mov r11, rbp
	0x1407dd166: add r11, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e34
	0x1407dd16d: add qword ptr [r11], 0xa
	0x1407dd174: jmp r12
handlers outputs:



	0x140767a58: mov r11, 0
	0x140767a66: mov r9, rbp
	0x140767a69: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x140767a85: mov r9, qword ptr [r9]
	0x140767a88: add r9, 4
	0x140767a9c: mov r11w, word ptr [r9]
	0x140767ad3: mov r14, rbp
	0x140767ae4: add r14, 0x120
Load [EBP+0x120](STATIC)
	0x140767af2: xor r11d, dword ptr [r14]
	0x140767afc: mov rdi, rbp
	0x140767b09: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767b17: or dword ptr [rdi], r11d
	0x140767b21: mov rdx, rbp
	0x140767b35: add rdx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767b3f: or dword ptr [rdx], 0xe0e0af6
	0x140767b45: mov rsi, rbp
	0x140767b5d: add rsi, 0xd6
Load [EBP+0xd6](STATIC)
Store [EBP+0xd6](STATIC)
	0x140767b72: sub word ptr [rsi], r11w
	0x140767b8b: mov r10, rbp
	0x140767b95: add r10, 0xab
Load [EBP+0xab](STATIC)
	0x140767ba3: mov r10, qword ptr [r10]
	0x140767bb7: mov r8, rbp
	0x140767bcb: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767bd9: mov r8, qword ptr [r8]
	0x140767be9: add r8, 8
	0x140767bf0: movzx r8, word ptr [r8]
	0x140767c02: mov r15, rbp
	0x140767c13: add r15, 0xbf
Load [EBP+0xbf](STATIC)
	0x140767c1a: xor r8d, dword ptr [r15]
	0x140767c24: add r8d, 0x724b433
	0x140767c57: and r8, 0xffff
	0x140767c73: shl r8, 3
	0x140767c7a: add r10, r8
	0x140767c7d: mov rdi, qword ptr [r10]
	0x140767c8a: mov rsi, rbp
	0x140767c9b: add rsi, 0xfd
Store [EBP+0xfd](STATIC)
	0x140767cb3: mov qword ptr [rsi], rdi
	0x140767cc4: mov r8, rbp
	0x140767cd8: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x140767ce6: mov r8, qword ptr [r8]
	0x140767ce9: add r8, 6
	0x140767cf0: movzx r9, word ptr [r8]
	0x140767d02: mov r8, rbp
	0x140767d05: add r8, 0xbf
	0x140767d13: mov r15, 0xd5
Load [EBP+0xbf](STATIC)
	0x140767d20: xor r9d, dword ptr [r8]
	0x140767d23: and r15, 0x20
	0x140767d2a: mov rbx, rbp
	0x140767d2d: add rbx, 0xf0
	0x140767d34: mov rdx, 0
Load [EBP+0xf0](STATIC)
	0x140767d42: add r9d, dword ptr [rbx]
	0x140767d45: and r15, 0x10
	0x140767d53: mov r12, rbp
	0x140767d56: add r12, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767d64: add dword ptr [r12], r9d
	0x140767d76: mov rax, rbp
	0x140767d80: add rax, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x140767d89: or dword ptr [rax], 0x67d1c4a3
	0x140767d96: mov r14, rbp
	0x140767d99: add r14, 0x130
Load [EBP+0x130](STATIC)
	0x140767da0: mov r12b, byte ptr [r14]
	0x140767da3: cmp r12b, 0xb2
	0x140767da7: jbe 0x140767dd3
	0x140767dd3: mov r14, rbp
	0x140767de4: add r14, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x140767deb: sub word ptr [r14], r9w
	0x140767def: mov rcx, rbp
	0x140767df2: mov r10, rbp
	0x140767df5: add r10, 0x145
	0x140767dfc: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x140767e03: mov rcx, qword ptr [rcx]
Load [EBP+0x145](STATIC)
	0x140767e06: mov r10, qword ptr [r10]
	0x140767e09: add rcx, 0xc
	0x140767e10: add r10, 4
	0x140767e17: movzx rbx, word ptr [rcx]
	0x140767e1f: add rbx, rbp
	0x140767e22: mov rdi, rbp
	0x140767e25: add rdi, 0xbf
Load [EBP+0xe8](VM_REGISTER)
	0x140767e2c: mov rbx, qword ptr [rbx]
	0x140767e2f: sub rdi, rbx
	0x140767e32: pushfq
	0x140767e57: pop rdi
	0x140767e5f: mov rbx, rbp
	0x140767e73: mov r8, rbp
	0x140767e76: add rbx, 0x145
	0x140767e84: add r8, 0x16e
	0x140767e99: mov r9, rbp
	0x140767ea3: add r9, 0xd6
Load [EBP+0x145](STATIC)
	0x140767eb4: mov rbx, qword ptr [rbx]
	0x140767ec4: add rbx, 0
Load [EBP+0xd6](STATIC)
	0x140767edc: movzx r9, word ptr [r9]
	0x140767eee: mov r15d, dword ptr [rbx]
	0x140767ef8: add r9, rbp
	0x140767f0c: mov rsi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x140767f20: mov r9, qword ptr [r9]
Deref(t3557,ds)
	0x140767f30: mov r9, qword ptr [r9]
Load [EBP+0x16e](STATIC)
	0x140767f33: movzx r8, word ptr [r8]
	0x140767f3e: sub r8w, 0xc1e2
	0x140767f4a: add r8, rbp
	0x140767f50: add rsi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x140767f5a: and dword ptr [rsi], r15d
Store VM_REG [EBP+0x155]
	0x140767f64: mov qword ptr [r8], r9
	0x140767f8e: mov r11, 0
	0x140767f9c: mov r13, 0x400
	0x140767fa3: or r11, 0x78
	0x140767faa: mov rdi, 0xd5
	0x140767fb8: and r11, 0x80
	0x140767fbf: mov rax, 0
	0x140767fc6: add r11, rdi
	0x140767fc9: and rax, r8
	0x140767fcc: sub rax, 4
	0x140767fd2: xor r11, rdx
	0x140767fd8: push 0x2a02c743
	0x140767fdd: sub rsp, 8
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x8927f5e
	0x140767fe1: mov qword ptr [rsp], r15
unknown read addr: ff0 ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff)
unknown store addr: ff8, lea_ast: ((0xfffffffffffffff8 + stack) & 0xffffffffffffffff), simplified_source_node: 0x8927f5e
	0x140767fe5: pop qword ptr [rsp]
	0x140767fe8: push 0x7d00de51
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x140767fed: mov qword ptr [rsp], rbp
	0x140767ff1: pop r15
	0x140767ff3: push 0x5c32610a
unknown store addr: ff0, lea_ast: ((0xfffffffffffffff0 + stack) & 0xffffffffffffffff), simplified_source_node: 0x400
	0x140767ff8: mov qword ptr [rsp], r13
	0x140767ffc: push 0x76159375
unknown store addr: fe8, lea_ast: ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff), simplified_source_node: ((0x155 + context) & 0xffffffffffffffff)
	0x140768001: mov qword ptr [rsp], r8
	0x140768005: push 0x3181c26a
unknown store addr: fe0, lea_ast: ((0xffffffffffffffe0 + stack) & 0xffffffffffffffff), simplified_source_node: context
	0x14076800a: mov qword ptr [rsp], r15
	0x14076800e: pop r8
	0x140768010: push r8
	0x140768012: pop r13
unknown read addr: fe8 ((0xffffffffffffffe8 + stack) & 0xffffffffffffffff)
	0x140768014: push qword ptr [rsp]
	0x14076801b: add rsp, 8
	0x140768022: add rsp, 8
	0x140768026: push rax
	0x140768027: push r10
	0x140768029: mov r10, r13
	0x14076802c: mov rax, r10
	0x14076802f: mov r10, qword ptr [rsp]
	0x140768033: add rsp, 8
	0x14076803a: mov r12, rax
	0x14076803d: mov rax, qword ptr [rsp]
	0x140768041: add rsp, 8
	0x140768045: pop r13
	0x140768047: pop r15
	0x140768049: add r13, 8
	0x140768057: mov r8, rbp
	0x14076805a: xor rax, 0x80
	0x140768060: add r8, 0xfd
Load [EBP+0xfd](STATIC)
	0x140768067: mov rsi, qword ptr [r8]
	0x140768078: xor rsi, 0x1c50de46
	0x14076807f: push rsi
	0x140768087: or rax, 8
	0x14076808d: sub r13, 0x80
	0x140768094: push 0x2ff3da44
	0x140768099: sub rsp, 8
	0x14076809d: sub rsp, 8
	0x1407680a1: mov qword ptr [rsp], rbp
	0x1407680a5: pop qword ptr [rsp]
	0x1407680a8: pop qword ptr [rsp]
	0x1407680ab: push r11
	0x1407680ad: movabs r11, 0x39fe759
	0x1407680b7: mov rbp, r11
	0x1407680ba: pop r11
	0x1407680bc: push 0x5f6e2247
	0x1407680c1: push 0x579e8292
	0x1407680c6: mov qword ptr [rsp], rax
	0x1407680ca: pop qword ptr [rsp]
	0x1407680cd: movabs rax, 0x39fe61c
	0x1407680d7: xor rbp, rax
	0x1407680de: add rsp, 8
	0x1407680e2: sub r12, 0x6ff65921
	0x1407680e9: add r12, 0x7beebae4
	0x1407680f0: sub r12, 0x3f777f7f
	0x1407680f7: sub r12, 0x6930edb6
	0x1407680fe: sub r12, 0x77ebfdd9
	0x140768105: add r12, rbp
	0x140768108: add r12, 0x77ebfdd9
	0x14076810f: add r12, 0x6930edb6
	0x140768116: add r12, 0x3f777f7f
	0x14076811d: sub r12, 0x7beebae4
	0x140768124: add r12, 0x6ff65921
	0x14076812b: push qword ptr [rsp]
	0x14076812e: pop rbp
	0x14076812f: add rsp, 8
	0x14076813a: mov rdx, 0x200
	0x140768141: mov rcx, 0
	0x140768156: push 0x1e01f800
	0x14076815b: mov qword ptr [rsp], r11
	0x14076815f: movabs r11, 0xe
	0x140768169: sub rsp, 8
	0x14076816d: push r10
	0x14076816f: pop qword ptr [rsp]
	0x140768172: mov r10, 0
	0x140768179: sub r10, 0x5a778f12
	0x140768180: add r10, r12
	0x140768183: add r10, 0x5a778f12
	0x14076818a: push 0x32901bb1
	0x14076818f: push r8
	0x140768191: push rcx
	0x140768192: push rdx
	0x140768193: add qword ptr [rsp], 0x476fea9c
	0x14076819b: pop rcx
	0x14076819c: sub rcx, 0x476fea9c
	0x1407681a3: push r15
	0x1407681a5: mov r15, rcx
	0x1407681a8: mov r8, r15
	0x1407681ab: pop r15
	0x1407681b1: push r13
	0x1407681b3: mov r13, rsp
	0x1407681b6: add r13, 8
	0x1407681ba: add r13, 8
	0x1407681c1: xchg qword ptr [rsp], r13
	0x1407681c5: pop rsp
	0x1407681c6: mov qword ptr [rsp + 8], r8
	0x1407681cf: add rsp, 8
	0x1407681d6: mov rdx, 0
	0x1407681dd: sub rdx, 0x3ffbad30
	0x1407681e4: add rdx, r10
	0x1407681e7: add rdx, 0x3ffbad30
	0x1407681ee: add qword ptr [rdx], r11
	0x1407681f5: add rsp, 8
	0x1407681fc: pop r10
	0x1407681fe: push qword ptr [rsp]
	0x140768205: add rsp, 8
	0x14076820c: add rsp, 8
	0x140768248: pop rbx
	0x140768249: xor rbx, 0x1c50de46
	0x140768250: jmp rbx
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e4d
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0xe0](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e59
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



	0x14088a09d: mov r12, 0x7a0b84b4
	0x14088a0a4: mov r14, rbp
	0x14088a0a7: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a0ae: or dword ptr [r14], r12d
	0x14088a0b8: mov r15, rbp
	0x14088a0bb: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088a0c9: mov r15, qword ptr [r15]
	0x14088a0dd: add r15, 9
	0x14088a0e4: movzx r11, word ptr [r15]
	0x14088a0ef: mov r9, rbp
	0x14088a0f9: add r9, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a100: xor r11d, dword ptr [r9]
	0x14088a12b: mov rdi, rbp
	0x14088a143: add rdi, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a154: and dword ptr [rdi], r11d
	0x14088a161: mov r15, rbp
	0x14088a16e: add r15, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a17f: add dword ptr [r15], 0x6476d567
	0x14088a197: mov rdi, rbp
	0x14088a19a: add rdi, 0x130
Load [EBP+0x130](STATIC)
	0x14088a1a1: mov r14b, byte ptr [rdi]
	0x14088a1a4: cmp r14b, 0x4d
	0x14088a1a8: jbe 0x14088a1b5
	0x14088a1ae: xor r11d, 0x5a049d3e
	0x14088a1b5: mov rax, rbp
	0x14088a1c9: add rax, 0x16e
Load [EBP+0x16e](STATIC)
Store [EBP+0x16e](STATIC)
	0x14088a1d2: sub word ptr [rax], r11w
	0x14088a1dd: mov rbx, rbp
	0x14088a1e0: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14088a1f8: mov rbx, qword ptr [rbx]
	0x14088a1fb: add rbx, 2
	0x14088a210: mov esi, dword ptr [rbx]
	0x14088a268: mov r11, rbp
	0x14088a280: add r11, 0xa7
Load [EBP+0xa7](STATIC)
	0x14088a287: add esi, dword ptr [r11]
	0x14088a28a: mov rax, rbp
	0x14088a293: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a299: sub dword ptr [rax], esi
	0x14088a2a9: mov rbx, rbp
	0x14088a2b3: add rbx, 0xa7
Load [EBP+0xa7](STATIC)
Store [EBP+0xa7](STATIC)
	0x14088a2bd: add dword ptr [rbx], 0x4d8ff095
	0x14088a2d1: mov r12, rbp
	0x14088a2e5: add r12, 0x58
Load [EBP+0x58](STATIC)
Store [EBP+0x58](STATIC)
	0x14088a2fa: xor dword ptr [r12], esi
	0x14088a30f: mov rax, rbp
	0x14088a327: add rax, 0x120
Load [EBP+0x120](STATIC)
Store [EBP+0x120](STATIC)
	0x14088a334: add dword ptr [rax], esi
	0x14088a336: mov rbx, rbp
	0x14088a343: mov rcx, rbp
	0x14088a354: add rbx, 0x58
Load [EBP+0x58](STATIC)
	0x14088a370: mov ebx, dword ptr [rbx]
	0x14088a379: add rcx, 0x16e
	0x14088a380: add ebx, 0x52c42d13
Load [EBP+0x16e](STATIC)
	0x14088a386: movzx rcx, word ptr [rcx]
	0x14088a398: add rcx, rbp
Load [EBP+0x2e](VM_REGISTER)
Store VM_REG [EBP+0x2e]
	0x14088a39b: add qword ptr [rcx], rbx
	0x14088a39e: pushfq
	0x14088a3a6: mov r12, 0
	0x14088a3b4: mov r9, rbp
	0x14088a3b7: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a3c5: mov r9, qword ptr [r9]
	0x14088a3c8: add r9, 6
	0x14088a3e4: mov r12b, byte ptr [r9]
	0x14088a3e7: cmp r12b, 0
	0x14088a3eb: je 0x14088a433
	0x14088a3f8: mov r9, rbp
	0x14088a3fb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14088a402: mov r9, qword ptr [r9]
	0x14088a405: add r9, 7
	0x14088a41a: mov r12w, word ptr [r9]
	0x14088a41e: add r12, rbp
	0x14088a428: pop r11
Store VM_REG [EBP+0x26]
	0x14088a42a: mov qword ptr [r12], r11
	0x14088a43f: mov r13b, 0x63
	0x14088a450: mov rbx, rbp
	0x14088a45d: add rbx, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14088a46b: or byte ptr [rbx], r13b
	0x14088a47c: mov rcx, rbp
	0x14088a47f: add rcx, 0x145
	0x14088a490: mov r15, rbp
	0x14088a496: add r15, 0xab
Load [EBP+0x145](STATIC)
	0x14088a49d: mov rcx, qword ptr [rcx]
Load [EBP+0xab](STATIC)
	0x14088a4ae: mov r15, qword ptr [r15]
	0x14088a4bb: add rcx, 0
	0x14088a4c8: movzx rcx, word ptr [rcx]
	0x14088a4cc: mov rax, rbp
	0x14088a4cf: add rax, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088a4dc: sub ecx, dword ptr [rax]
	0x14088a4e5: mov r13, rbp
	0x14088a4ef: add r13, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088a507: xor dword ptr [r13], ecx
	0x14088a518: and rcx, 0xffff
	0x14088a530: shl rcx, 3
	0x14088a549: add r15, rcx
	0x14088a561: mov r14, qword ptr [r15]
	0x14088a56e: mov r8, rbp
	0x14088a571: add r8, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e64
	0x14088a578: add qword ptr [r8], 0xb
	0x14088a57f: jmp r14
handlers outputs:



	0x14088bb6e: mov r14, 0
	0x14088bb75: mov r10, rbp
	0x14088bb78: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14088bb7f: mov r10, qword ptr [r10]
	0x14088bb82: add r10, 0xa
	0x14088bb89: mov r14w, word ptr [r10]
	0x14088bb8d: add r14, rbp
	0x14088bb90: mov r10, 0
	0x14088bb97: mov rdx, rbp
	0x14088bb9a: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x14088bba1: mov rdx, qword ptr [rdx]
	0x14088bba4: add rdx, 8
	0x14088bbab: mov r10w, word ptr [rdx]
	0x14088bbaf: add r10, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14088bbb2: push qword ptr [r14]
Load [EBP+0xc3](VM_REGISTER)
	0x14088bbb5: push qword ptr [r10]
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14088bbb8: pop qword ptr [r14]
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14088bbbb: pop qword ptr [r10]
	0x14088bbbe: or r14, 0x20
	0x14088bbcc: mov r15, rbp
	0x14088bbcf: sub r14, -0x80000000
	0x14088bbdc: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x14088bbe3: mov r15, qword ptr [r15]
	0x14088bbf4: add r15, 4
	0x14088bc02: movzx rdi, word ptr [r15]
	0x14088bc06: and r14, 8
	0x14088bc10: add rdi, rbp
Load [EBP+0x2e](VM_REGISTER)
	0x14088bc13: mov rsp, qword ptr [rdi]
	0x14088bc16: mov rdi, rbp
	0x14088bc2a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bc31: mov rdi, qword ptr [rdi]
	0x14088bc34: add rdi, 0
	0x14088bc3b: movzx r11, word ptr [rdi]
	0x14088bc3f: add r11, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x14088bc42: mov r11, qword ptr [r11]
	0x14088bc45: xor r14, r11
	0x14088bc48: pushfq
	0x14088bc6a: pop r14
	0x14088bca6: mov r11, rbp
	0x14088bcb0: mov rsi, rbp
	0x14088bcc0: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14088bcc7: mov rsi, qword ptr [rsi]
	0x14088bcca: add r11, 0xab
Load [EBP+0xab](STATIC)
	0x14088bcd8: mov r11, qword ptr [r11]
	0x14088bce2: add rsi, 2
	0x14088bcf7: movzx rsi, word ptr [rsi]
	0x14088bd10: mov rbx, rbp
	0x14088bd13: add rbx, 0xbf
Load [EBP+0xbf](STATIC)
	0x14088bd2f: xor esi, dword ptr [rbx]
	0x14088bd38: mov r14, rbp
	0x14088bd42: add r14, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14088bd50: and dword ptr [r14], esi
	0x14088bd53: and rsi, 0xffff
	0x14088bd61: shl rsi, 3
	0x14088bd6c: add r11, rsi
	0x14088bd80: mov rdi, qword ptr [r11]
	0x14088bd83: mov rdx, rbp
	0x14088bd86: add rdx, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e70
	0x14088bd8d: add qword ptr [rdx], 0xc
	0x14088bd94: jmp rdi
handlers outputs:



	0x14076cfe5: mov r8, 0
	0x14076cfec: mov rcx, rbp
	0x14076cfef: add rcx, 0x145
Load [EBP+0x145](STATIC)
	0x14076cff6: mov rcx, qword ptr [rcx]
	0x14076cff9: add rcx, 0x20
	0x14076d000: mov r8w, word ptr [rcx]
	0x14076d004: add r8, rbp
Load [EBP+0x97](VM_REGISTER)
	0x14076d007: push qword ptr [r8]
	0x14076d00a: mov r8, 0
	0x14076d011: mov r14, rbp
	0x14076d014: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d01b: mov r14, qword ptr [r14]
	0x14076d01e: add r14, 2
	0x14076d025: mov r8w, word ptr [r14]
	0x14076d029: add r8, rbp
Load [EBP+0x105](VM_REGISTER)
	0x14076d02c: push qword ptr [r8]
	0x14076d02f: mov rcx, 0
	0x14076d036: mov r14, rbp
	0x14076d039: add r14, 0x145
Load [EBP+0x145](STATIC)
	0x14076d040: mov r14, qword ptr [r14]
	0x14076d043: add r14, 0x1a
	0x14076d04a: mov cx, word ptr [r14]
	0x14076d04e: add rcx, rbp
Load [EBP+0xe0](VM_REGISTER)
	0x14076d051: push qword ptr [rcx]
	0x14076d053: mov rdi, 0
	0x14076d05a: mov r10, rbp
	0x14076d05d: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d064: mov r10, qword ptr [r10]
	0x14076d067: add r10, 4
	0x14076d06e: mov di, word ptr [r10]
	0x14076d072: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
	0x14076d075: push qword ptr [rdi]
	0x14076d077: mov rbx, 0
	0x14076d07e: mov r11, rbp
	0x14076d081: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x14076d088: mov r11, qword ptr [r11]
	0x14076d08b: add r11, 0x1e
	0x14076d092: mov bx, word ptr [r11]
	0x14076d096: add rbx, rbp
Load [EBP+0x10](VM_REGISTER)
	0x14076d099: push qword ptr [rbx]
	0x14076d09b: mov r13, 0
	0x14076d0a2: mov rsi, rbp
	0x14076d0a5: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0ac: mov rsi, qword ptr [rsi]
	0x14076d0af: add rsi, 0x1c
	0x14076d0b6: mov r13w, word ptr [rsi]
	0x14076d0ba: add r13, rbp
Load [EBP+0x5c](VM_REGISTER)
	0x14076d0bd: push qword ptr [r13]
	0x14076d0c1: mov rsi, 0
	0x14076d0c8: mov r9, rbp
	0x14076d0cb: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0d2: mov r9, qword ptr [r9]
	0x14076d0d5: add r9, 0xc
	0x14076d0dc: mov si, word ptr [r9]
	0x14076d0e0: add rsi, rbp
Load [EBP+0xc3](VM_REGISTER)
	0x14076d0e3: push qword ptr [rsi]
	0x14076d0e5: mov rcx, 0
	0x14076d0ec: mov r13, rbp
	0x14076d0ef: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d0f6: mov r13, qword ptr [r13]
	0x14076d0fa: add r13, 0
	0x14076d101: mov cx, word ptr [r13]
	0x14076d106: add rcx, rbp
Load [EBP+0x10d](VM_REGISTER)
	0x14076d109: push qword ptr [rcx]
	0x14076d10b: mov r15, 0
	0x14076d112: mov r10, rbp
	0x14076d115: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x14076d11c: mov r10, qword ptr [r10]
	0x14076d11f: add r10, 0x10
	0x14076d126: mov r15w, word ptr [r10]
	0x14076d12a: add r15, rbp
Load [EBP+0x10d](VM_REGISTER)
Store VM_REG [EBP+0x10d]
	0x14076d12d: pop qword ptr [r15]
	0x14076d130: mov rsi, 0
	0x14076d137: mov rdi, rbp
	0x14076d13a: add rdi, 0x145
Load [EBP+0x145](STATIC)
	0x14076d141: mov rdi, qword ptr [rdi]
	0x14076d144: add rdi, 0xa
	0x14076d14b: mov si, word ptr [rdi]
	0x14076d14e: add rsi, rbp
Load [EBP+0x105](VM_REGISTER)
Store VM_REG [EBP+0x105]
	0x14076d151: pop qword ptr [rsi]
	0x14076d153: mov rbx, 0
	0x14076d15a: mov r12, rbp
	0x14076d15d: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d164: mov r12, qword ptr [r12]
	0x14076d168: add r12, 0x18
	0x14076d16f: mov bx, word ptr [r12]
	0x14076d174: add rbx, rbp
Load [EBP+0x5c](VM_REGISTER)
Store VM_REG [EBP+0x5c]
	0x14076d177: pop qword ptr [rbx]
	0x14076d179: mov r10, 0
	0x14076d180: mov r8, rbp
	0x14076d183: add r8, 0x145
Load [EBP+0x145](STATIC)
	0x14076d18a: mov r8, qword ptr [r8]
	0x14076d18d: add r8, 0x16
	0x14076d194: mov r10w, word ptr [r8]
	0x14076d198: add r10, rbp
Load [EBP+0x10](VM_REGISTER)
Store VM_REG [EBP+0x10]
	0x14076d19b: pop qword ptr [r10]
	0x14076d19e: mov rdi, 0
	0x14076d1a5: mov r12, rbp
	0x14076d1a8: add r12, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1af: mov r12, qword ptr [r12]
	0x14076d1b3: add r12, 6
	0x14076d1ba: mov di, word ptr [r12]
	0x14076d1bf: add rdi, rbp
Load [EBP+0x7a](VM_REGISTER)
Store VM_REG [EBP+0x7a]
	0x14076d1c2: pop qword ptr [rdi]
	0x14076d1c4: mov r13, 0
	0x14076d1cb: mov rax, rbp
	0x14076d1ce: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1d4: mov rax, qword ptr [rax]
	0x14076d1d7: add rax, 0x14
	0x14076d1dd: mov r13w, word ptr [rax]
	0x14076d1e1: add r13, rbp
Load [EBP+0xc3](VM_REGISTER)
Store VM_REG [EBP+0xc3]
	0x14076d1e4: pop qword ptr [r13]
	0x14076d1e8: mov r12, 0
	0x14076d1ef: mov r13, rbp
	0x14076d1f2: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d1f9: mov r13, qword ptr [r13]
	0x14076d1fd: add r13, 0x12
	0x14076d204: mov r12w, word ptr [r13]
	0x14076d209: add r12, rbp
Load [EBP+0xe0](VM_REGISTER)
Store VM_REG [EBP+0xe0]
	0x14076d20c: pop qword ptr [r12]
	0x14076d210: mov rsi, 0
	0x14076d217: mov r13, rbp
	0x14076d21a: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x14076d221: mov r13, qword ptr [r13]
	0x14076d225: add r13, 8
	0x14076d22c: mov si, word ptr [r13]
	0x14076d231: add rsi, rbp
Load [EBP+0x97](VM_REGISTER)
Store VM_REG [EBP+0x97]
	0x14076d234: pop qword ptr [rsi]
	0x14076d236: mov r10b, 0x4c
	0x14076d239: mov r11, rbp
	0x14076d23c: add r11, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x14076d243: add byte ptr [r11], r10b
	0x14076d246: mov rbx, rbp
	0x14076d249: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x14076d250: mov rbx, qword ptr [rbx]
	0x14076d253: add rbx, 0xe
	0x14076d25a: movzx rbx, word ptr [rbx]
	0x14076d25e: mov rcx, rbp
	0x14076d261: add rcx, 0xab
Load [EBP+0xab](STATIC)
	0x14076d268: mov rcx, qword ptr [rcx]
	0x14076d26b: mov r11, rbp
	0x14076d26e: add r11, 0xbf
Load [EBP+0xbf](STATIC)
	0x14076d275: xor ebx, dword ptr [r11]
	0x14076d278: xor ebx, 0x353a19ed
	0x14076d27e: mov rax, rbp
	0x14076d281: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x14076d287: and dword ptr [rax], ebx
	0x14076d289: and rbx, 0xffff
	0x14076d290: shl rbx, 3
	0x14076d294: add rcx, rbx
	0x14076d297: mov r10, qword ptr [rcx]
	0x14076d29a: mov rsi, rbp
	0x14076d29d: add rsi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940e92
	0x14076d2a4: add qword ptr [rsi], 0x22
	0x14076d2ab: jmp r10
handlers outputs:



	0x1407e5c78: mov rbx, 0
	0x1407e5c7f: mov r13, rbp
	0x1407e5c8f: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5cb9: mov r13, qword ptr [r13]
	0x1407e5cbd: add r13, 6
	0x1407e5cd8: mov bx, word ptr [r13]
	0x1407e5cfb: add rbx, rbp
Load [EBP+0xe8](VM_REGISTER)
	0x1407e5d0f: push qword ptr [rbx]
	0x1407e5d18: mov r12, 0
	0x1407e5d22: mov r13, rbp
	0x1407e5d43: add r13, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5d4a: mov r13, qword ptr [r13]
	0x1407e5d62: add r13, 0x18
	0x1407e5d85: mov r12w, word ptr [r13]
	0x1407e5da5: add r12, rbp
Load [EBP+0x155](VM_REGISTER)
	0x1407e5dc2: push qword ptr [r12]
	0x1407e5de0: mov r8, 0
	0x1407e5dff: mov r15, rbp
	0x1407e5e1d: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5e32: mov r15, qword ptr [r15]
	0x1407e5e3c: add r15, 2
	0x1407e5e4a: mov r8w, word ptr [r15]
	0x1407e5e65: add r8, rbp
Load [EBP+0xce](VM_REGISTER)
	0x1407e5e7d: push qword ptr [r8]
	0x1407e5e86: mov r12, 0
	0x1407e5ea2: mov r9, rbp
	0x1407e5ea5: add r9, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5ec4: mov r9, qword ptr [r9]
	0x1407e5ee2: add r9, 4
	0x1407e5ef0: mov r12w, word ptr [r9]
	0x1407e5f08: add r12, rbp
Load [EBP+0xb7](VM_REGISTER)
	0x1407e5f2e: push qword ptr [r12]
	0x1407e5f51: mov r12, 0
	0x1407e5f6f: mov r11, rbp
	0x1407e5f72: add r11, 0x145
Load [EBP+0x145](STATIC)
	0x1407e5f8d: mov r11, qword ptr [r11]
	0x1407e5f97: add r11, 0xc
	0x1407e5f9e: mov r12w, word ptr [r11]
	0x1407e5fb3: add r12, rbp
Load [EBP+0x64](VM_REGISTER)
	0x1407e5fcd: push qword ptr [r12]
	0x1407e5ff4: mov r9, 0
	0x1407e6008: mov r15, rbp
	0x1407e600e: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e602a: mov r15, qword ptr [r15]
	0x1407e6034: add r15, 0x16
	0x1407e6057: mov r9w, word ptr [r15]
	0x1407e6069: add r9, rbp
Load [EBP+0x15d](VM_REGISTER)
	0x1407e607a: push qword ptr [r9]
	0x1407e6084: mov rdx, 0
	0x1407e6098: mov rax, rbp
	0x1407e60a9: add rax, 0x145
Load [EBP+0x145](STATIC)
	0x1407e60af: mov rax, qword ptr [rax]
	0x1407e60cd: add rax, 0x10
	0x1407e60ee: mov dx, word ptr [rax]
	0x1407e60f1: add rdx, rbp
Load [EBP+0x15d](VM_REGISTER)
Store VM_REG [EBP+0x15d]
	0x1407e60fe: pop qword ptr [rdx]
	0x1407e611c: mov r13, 0
	0x1407e6126: mov rsi, rbp
	0x1407e6137: add rsi, 0x145
Load [EBP+0x145](STATIC)
	0x1407e614c: mov rsi, qword ptr [rsi]
	0x1407e6172: add rsi, 0xe
	0x1407e6179: mov r13w, word ptr [rsi]
	0x1407e6198: add r13, rbp
Load [EBP+0x64](VM_REGISTER)
Store VM_REG [EBP+0x64]
	0x1407e61ac: pop qword ptr [r13]
	0x1407e61c1: mov rsi, 0
	0x1407e61c8: mov rbx, rbp
	0x1407e61d8: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e61ed: mov rbx, qword ptr [rbx]
	0x1407e61f6: add rbx, 0x12
	0x1407e6215: mov si, word ptr [rbx]
	0x1407e622c: add rsi, rbp
Load [EBP+0xb7](VM_REGISTER)
Store VM_REG [EBP+0xb7]
	0x1407e622f: pop qword ptr [rsi]
	0x1407e6234: mov r11, 0
	0x1407e623b: mov r15, rbp
	0x1407e6253: add r15, 0x145
Load [EBP+0x145](STATIC)
	0x1407e626f: mov r15, qword ptr [r15]
	0x1407e628e: add r15, 0x14
	0x1407e62ac: mov r11w, word ptr [r15]
	0x1407e62b0: add r11, rbp
Load [EBP+0xce](VM_REGISTER)
Store VM_REG [EBP+0xce]
	0x1407e62ba: pop qword ptr [r11]
	0x1407e62cb: mov rdx, 0
	0x1407e62ed: mov rbx, rbp
	0x1407e6307: add rbx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e632a: mov rbx, qword ptr [rbx]
	0x1407e632d: add rbx, 8
	0x1407e633a: mov dx, word ptr [rbx]
	0x1407e634b: add rdx, rbp
Load [EBP+0x155](VM_REGISTER)
Store VM_REG [EBP+0x155]
	0x1407e636a: pop qword ptr [rdx]
	0x1407e637a: mov rdx, 0
	0x1407e63a0: mov r10, rbp
	0x1407e63b7: add r10, 0x145
Load [EBP+0x145](STATIC)
	0x1407e63cb: mov r10, qword ptr [r10]
	0x1407e63f1: add r10, 0
	0x1407e6401: mov dx, word ptr [r10]
	0x1407e6405: add rdx, rbp
Load [EBP+0xe8](VM_REGISTER)
Store VM_REG [EBP+0xe8]
	0x1407e6408: pop qword ptr [rdx]
	0x1407e641b: mov r13b, 0x90
	0x1407e641e: mov rsi, rbp
	0x1407e6432: add rsi, 0x130
Load [EBP+0x130](STATIC)
Store [EBP+0x130](STATIC)
	0x1407e6440: and byte ptr [rsi], r13b
	0x1407e645e: mov rdx, rbp
	0x1407e6467: mov r9, rbp
	0x1407e646a: add r9, 0xab
	0x1407e647e: add rdx, 0x145
Load [EBP+0x145](STATIC)
	0x1407e64a1: mov rdx, qword ptr [rdx]
Load [EBP+0xab](STATIC)
	0x1407e64ab: mov r9, qword ptr [r9]
	0x1407e64ae: add rdx, 0xa
	0x1407e64bf: movzx rdx, word ptr [rdx]
	0x1407e6507: sub edx, 0x1de5eae3
	0x1407e651e: mov rax, rbp
	0x1407e653d: add rax, 0xbf
Load [EBP+0xbf](STATIC)
Store [EBP+0xbf](STATIC)
	0x1407e654a: sub dword ptr [rax], edx
	0x1407e654c: and rdx, 0xffff
	0x1407e6568: shl rdx, 3
	0x1407e656c: add r9, rdx
	0x1407e6584: mov r12, qword ptr [r9]
	0x1407e6591: mov rdi, rbp
	0x1407e65ac: add rdi, 0x145
Load [EBP+0x145](STATIC)
bytecode=0x140940eac
	0x1407e65b3: add qword ptr [rdi], 0x1a
	0x1407e65ba: jmp r12
handlers outputs:



b-140940747
b-140940747
	mov t1,VM_REG_C3
	mov t2,VM_REG_E0
	mov VM_REG_C3,t2
	mov VM_REG_E0,t1
b-140940753
b-14094075b
	mov VM_REG_2E,rsp
b-140940763
	mov t11,VM_REG_64
	mov t12,VM_REG_B7
	mov VM_REG_64,t12
	mov VM_REG_B7,t11
	mov VM_REG_97,topofstack
	mov t18,VM_REG_2E
	mov t19,Add(t18, 0x8)
	mov VM_REG_2E,t19
b-140940771
	mov t21,VM_REG_105
	mov t22,VM_REG_E0
	mov VM_REG_105,t22
	mov VM_REG_E0,t21
	mov VM_REG_C3,topofstack
	mov t28,VM_REG_2E
	mov t29,Add(t28, 0x8)
	mov VM_REG_2E,t29
b-14094077f
	mov t31,VM_REG_E8
	mov t32,VM_REG_155
	mov VM_REG_E8,t32
	mov VM_REG_155,t31
	mov VM_REG_105,topofstack
	mov t38,VM_REG_2E
	mov t39,Add(t38, 0x8)
	mov VM_REG_2E,t39
b-14094078d
	mov VM_REG_7A,topofstack
	mov t41,VM_REG_2E
	mov t42,Add(t41, 0x8)
	mov VM_REG_2E,t42
b-140940795
	mov VM_REG_10,topofstack
	mov t44,VM_REG_2E
	mov t45,Add(t44, 0x8)
	mov VM_REG_2E,t45
b-14094079d
	mov t47,VM_REG_97
	mov t48,VM_REG_10D
	mov VM_REG_97,t48
	mov VM_REG_10D,t47
	mov VM_REG_5C,topofstack
	mov t54,VM_REG_2E
	mov t55,Add(t54, 0x8)
	mov VM_REG_2E,t55
b-1409407ab
	mov t57,VM_REG_B7
	mov t58,VM_REG_15D
	mov VM_REG_B7,t58
	mov VM_REG_15D,t57
	mov VM_REG_E0,topofstack
	mov t64,VM_REG_2E
	mov t65,Add(t64, 0x8)
	mov VM_REG_2E,t65
b-1409407b9
	mov t67,VM_REG_10
	mov t68,VM_REG_5C
	mov VM_REG_10,t68
	mov VM_REG_5C,t67
	mov VM_REG_97,topofstack
	mov t74,VM_REG_2E
	mov t75,Add(t74, 0x8)
	mov VM_REG_2E,t75
b-1409407c7
	mov VM_REG_B7,topofstack
	mov t77,VM_REG_2E
	mov t78,Add(t77, 0x8)
	mov VM_REG_2E,t78
b-1409407cf
	mov t80,VM_REG_C3
	mov t81,VM_REG_7A
	mov VM_REG_C3,t81
	mov VM_REG_7A,t80
	mov VM_REG_15D,topofstack
	mov t87,VM_REG_2E
	mov t88,Add(t87, 0x8)
	mov VM_REG_2E,t88
b-1409407dd
	mov VM_REG_131,topofstack
	mov t90,VM_REG_2E
	mov t91,Add(t90, 0x8)
	mov VM_REG_2E,t91
b-1409407e5
	mov VM_REG_E8,topofstack
	mov t93,VM_REG_2E
	mov t94,Add(t93, 0x8)
	mov VM_REG_2E,t94
b-1409407ed
	mov VM_REG_E8,topofstack
	mov t96,VM_REG_2E
	mov t97,Add(t96, 0x8)
	mov VM_REG_2E,t97
b-1409407f5
	mov VM_REG_64,topofstack
	mov t99,VM_REG_2E
	mov t100,Add(t99, 0x8)
	mov VM_REG_2E,t100
b-1409407fd
	mov VM_REG_CE,topofstack
	mov t102,VM_REG_2E
	mov t103,Add(t102, 0x8)
	mov VM_REG_2E,t103
b-140940805
	mov VM_REG_155,topofstack
	mov t105,VM_REG_2E
	mov t106,Add(t105, 0x8)
	mov VM_REG_2E,t106
b-14094080d
	mov VM_REG_26,topofstack
	mov t109,VM_REG_2E
	mov t110,Add(t109, 0x8)
	mov VM_REG_2E,t110
b-140940813
	mov t112,VM_REG_2E
	mov t113,Add(t112, 0x10)
	mov VM_REG_2E,t113
b-140940824
	mov t115,VM_REG_155
	mov t116,VM_REG_2E
	mov t117,Sub(t116, 0x8)
	mov VM_REG_2E,t117
	mov qword ptr ds:[Add(stack, -0x8)],t115
b-14094082a
	mov t119,VM_REG_64
	mov t120,VM_REG_2E
	mov t121,Sub(t120, 0x8)
	mov VM_REG_2E,t121
	mov qword ptr ds:[Add(stack, -0x8)],t119
b-140940832
	mov VM_REG_65,0x26
b-14094083b
	mov t130,VM_REG_E8
	mov VM_REG_155,Extract(t130,15,0)
b-140940841
	mov VM_REG_64,topofstack
	mov t139,VM_REG_2E
	mov t140,Add(t139, 0x8)
	mov VM_REG_2E,t140
b-140940849
	mov t142,VM_REG_155
	mov t143,Shr(t142, 0x4)
	mov VM_REG_155,t143
	mov VM_REG_159,0x0
b-140940853
b-14094085d
	mov t148,VM_REG_CE
	mov t149,VM_REG_155
	mov t150,And(t149, Extract(t148,31,0))
	mov t151,FlagsOf(And(t149, Extract(t148,31,0)))
	mov VM_REG_155,t150
	mov VM_REG_159,0x0
	mov VM_REG_26,t151
b-140940866
	mov t152,VM_REG_64
	mov t153,VM_REG_15D
	mov VM_REG_64,t153
	mov VM_REG_15D,t152
	mov VM_REG_155,topofstack
	mov t159,VM_REG_2E
	mov t160,Add(t159, 0x8)
	mov VM_REG_2E,t160
b-140940874
	mov t162,VM_REG_CE
	mov t163,VM_REG_2E
	mov t164,Sub(t163, 0x8)
	mov VM_REG_2E,t164
	mov qword ptr ds:[Add(stack, -0x8)],t162
b-14094087c
	mov t169,VM_REG_15D
	mov t170,VM_REG_CE
	mov t171,Sub(t170, Extract(t169,31,0))
	mov VM_REG_CE,t171
	mov VM_REG_D2,0x0
b-140940888
	mov t176,VM_REG_131
	mov t177,VM_REG_CE
	mov t178,Sub(t177, Extract(t176,31,0))
	mov VM_REG_CE,t178
	mov VM_REG_D2,0x0
b-140940894
	mov t180,VM_REG_E8
	mov t181,VM_REG_64
	mov VM_REG_E8,t181
	mov VM_REG_64,t180
	mov t184,VM_REG_CE
	mov t185,Test(t184, 0xe9)
	mov VM_REG_26,t185
b-1409408a0
	mov t186,VM_REG_15D
	mov VM_REG_CE,Extract(t186,7,0)
b-1409408a6
	mov t187,VM_REG_15D
	mov t188,VM_REG_15D
	mov VM_REG_15D,t188
	mov VM_REG_15D,t187
	mov VM_REG_CE,topofstack
	mov t194,VM_REG_2E
	mov t195,Add(t194, 0x8)
	mov VM_REG_2E,t195
b-1409408b4
	mov t197,VM_REG_155
	mov t198,VM_REG_2E
	mov t199,Sub(t198, 0x8)
	mov VM_REG_2E,t199
	mov qword ptr ds:[Add(stack, -0x8)],t197
b-1409408bc
	mov t204,VM_REG_26
	mov t205,VM_REG_2E
	mov t206,Sub(t205, 0x8)
	mov VM_REG_2E,t206
	mov qword ptr ds:[Add(stack, -0x8)],t204
b-1409408c6
	mov t208,VM_REG_CE
	mov t209,VM_REG_156
	mov t210,Xor(t209, Extract(t208,7,0))
	mov VM_REG_156,t210
b-1409408d0
	mov VM_REG_26,topofstack
	mov t213,VM_REG_2E
	mov t214,Add(t213, 0x8)
	mov VM_REG_2E,t214
b-1409408d6
	mov t216,VM_REG_CF
	mov t217,Test(t216, 0x66)
	mov VM_REG_26,t217
b-1409408de
	mov t218,VM_REG_64
	mov t219,VM_REG_155
	mov t220,Xor(t219, Extract(t218,15,0))
	mov VM_REG_155,t220
b-1409408e4
	mov t222,VM_REG_CF
	mov t223,VM_REG_156
	mov t224,Add(t223, Extract(t222,7,0))
	mov t225,FlagsOf(Add(t223, Extract(t222,7,0)))
	mov VM_REG_156,t224
	mov VM_REG_26,t225
b-1409408ed
	mov VM_REG_155,topofstack
	mov t226,VM_REG_2E
	mov t227,Add(t226, 0x8)
	mov VM_REG_2E,t227
b-1409408f5
	mov t229,VM_REG_2E
	mov t230,Sub(t229, 0x8)
	mov t231,FlagsOf(Sub(t229, 0x8))
	mov VM_REG_2E,t230
	mov VM_REG_26,t231
b-140940904
b-140940914
	mov t245,VM_REG_97
	mov t246,VM_REG_2E
	mov t247,Sub(t246, 0x8)
	mov VM_REG_2E,t247
	mov qword ptr ds:[Add(stack, -0x8)],t245
b-14094091a
	mov t249,VM_REG_155
	mov VM_REG_97,t249
b-140940926
	mov t259,VM_REG_2E
	mov VM_REG_14D,t259
b-140940932
	mov t264,VM_REG_14D
	mov t265,Add(t264, 0x8)
	mov VM_REG_14D,t265
b-14094093a
	mov t268,VM_REG_97
	mov t269,VM_REG_14D
	mov qword ptr ds:[t269],t268
b-140940942
	mov VM_REG_97,topofstack
	mov t282,VM_REG_2E
	mov t283,Add(t282, 0x8)
	mov VM_REG_2E,t283
b-14094094a
	mov t285,VM_REG_2E
	mov t286,Sub(t285, 0x8)
	mov t287,FlagsOf(Sub(t285, 0x8))
	mov VM_REG_2E,t286
	mov VM_REG_26,t287
b-140940955
	mov t288,VM_REG_155
	mov t289,VM_REG_155
	mov VM_REG_155,t289
	mov VM_REG_155,t288
b-140940961
	mov t296,VM_REG_2E
	mov t297,Sub(t296, 0x8)
	mov VM_REG_2E,t297
	mov qword ptr ds:[Add(stack, -0x8)],0x31ae056d
b-140940969
	mov t299,VM_REG_15D
	mov t300,VM_REG_2E
	mov qword ptr ds:[t300],t299
b-14094096f
	mov t301,VM_REG_2E
	mov VM_REG_14D,t301
b-14094097b
	mov t305,VM_REG_14D
	mov t306,Add(t305, 0x8)
	mov VM_REG_14D,t306
b-140940983
	mov t308,VM_REG_14D
	mov qword ptr ds:[t308],topofstack
	mov t310,VM_REG_2E
	mov t311,Add(t310, 0x8)
	mov VM_REG_2E,t311
b-140940989
	mov t313,VM_REG_2E
	mov t314,Sub(t313, 0x8)
	mov VM_REG_2E,t314
b-140940991
b-1409409a1
	mov t326,VM_REG_2E
	mov t327,Sub(t326, 0x8)
	mov t328,FlagsOf(Sub(t326, 0x8))
	mov VM_REG_2E,t327
	mov VM_REG_26,t328
b-1409409b0
b-1409409b6
	mov t333,VM_REG_64
	mov t334,VM_REG_2E
	mov qword ptr ds:[t334],t333
b-1409409bc
	mov t335,VM_REG_2E
	mov VM_REG_14D,t335
b-1409409c6
	mov t341,VM_REG_14D
	mov t342,Add(t341, 0x8)
	mov VM_REG_14D,t342
b-1409409d4
	mov t344,VM_REG_14D
	mov qword ptr ds:[t344],topofstack
	mov t346,VM_REG_2E
	mov t347,Add(t346, 0x8)
	mov VM_REG_2E,t347
b-1409409da
	mov t349,VM_REG_2E
	mov t350,Sub(t349, 0x8)
	mov t351,FlagsOf(Sub(t349, 0x8))
	mov VM_REG_2E,t350
	mov VM_REG_26,t351
b-1409409e5
b-1409409eb
	mov t353,VM_REG_2E
	mov t354,Sub(t353, 0x8)
	mov VM_REG_2E,t354
	mov qword ptr ds:[Add(stack, -0x8)],0x31e378c9
b-1409409f3
	mov t357,VM_REG_131
	mov t358,VM_REG_2E
	mov qword ptr ds:[t358],t357
b-1409409fb
	mov t377,VM_REG_2E
	mov VM_REG_14D,t377
b-140940a07
	mov t382,VM_REG_14D
	mov t383,Add(t382, 0x8)
	mov VM_REG_14D,t383
b-140940a0f
	mov t385,VM_REG_14D
	mov qword ptr ds:[t385],topofstack
	mov t387,VM_REG_2E
	mov t388,Add(t387, 0x8)
	mov VM_REG_2E,t388
b-140940a15
	mov VM_REG_131,0x12bd61014
b-140940a19
	mov VM_REG_131,0x12bd61014
b-140940a1d
	mov t390,VM_REG_131
	mov VM_REG_14D,t390
b-140940a27
	mov t396,VM_REG_14D
	mov t397,Add(t396, 0x143a2fe1)
	mov VM_REG_14D,t397
b-140940a2f
	mov t399,VM_REG_14D
	mov t400,dword ptr ds:[t399]
	mov VM_REG_64,t400
	mov VM_REG_68,0x0
b-140940a35
	mov t401,VM_REG_155
	mov t402,VM_REG_2E
	mov t403,Sub(t402, 0x8)
	mov VM_REG_2E,t403
	mov qword ptr ds:[Add(stack, -0x8)],t401
b-140940a3d
	mov t405,VM_REG_5C
	mov t406,VM_REG_2E
	mov t407,Sub(t406, 0x8)
	mov VM_REG_2E,t407
	mov qword ptr ds:[Add(stack, -0x8)],t405
b-140940a45
	mov VM_REG_5C,0x1f4abde0
	mov VM_REG_60,0x0
b-140940a4d
	mov t409,VM_REG_5C
	mov t410,Neg(t409)
	mov t411,FlagsOf(Neg(t409))
	mov VM_REG_5C,t410
	mov VM_REG_60,0x0
	mov VM_REG_26,t411
b-140940a54
	mov t412,VM_REG_B7
	mov t413,VM_REG_E8
	mov VM_REG_B7,t413
	mov VM_REG_E8,t412
	mov t416,VM_REG_5C
	mov t417,Xor(t416, 0x6fefb74e)
	mov VM_REG_5C,t417
	mov VM_REG_60,0x0
b-140940a60
	mov t419,VM_REG_10D
	mov t420,VM_REG_10D
	mov VM_REG_10D,t420
	mov VM_REG_10D,t419
	mov t426,VM_REG_5C
	mov t427,Shl(t426, 0x3)
	mov VM_REG_5C,t427
	mov VM_REG_60,0x0
b-140940a70
	mov t429,VM_REG_5C
	mov t430,Shr(t429, 0x3)
	mov t431,FlagsOf(Shr(t429, 0x3))
	mov VM_REG_5C,t430
	mov VM_REG_60,0x0
	mov VM_REG_26,t431
b-140940a78
	mov t432,VM_REG_E0
	mov t433,VM_REG_10
	mov VM_REG_E0,t433
	mov VM_REG_10,t432
	mov t437,VM_REG_5C
	mov t438,Inc(t437)
	mov t439,FlagsOf(Inc(t437))
	mov VM_REG_5C,t438
	mov VM_REG_60,0x0
	mov VM_REG_26,t439
b-140940a83
	mov t440,VM_REG_5C
	mov t441,Sub(t440, 0xf5af560)
	mov t442,FlagsOf(Sub(t440, 0xf5af560))
	mov VM_REG_5C,t441
	mov VM_REG_60,0x0
	mov VM_REG_26,t442
b-140940a94
	mov t446,VM_REG_5C
	mov t447,VM_REG_2E
	mov t448,Sub(t447, 0x8)
	mov VM_REG_2E,t448
	mov qword ptr ds:[Add(stack, -0x8)],t446
b-140940a9a
	mov t450,VM_REG_2E
	mov t451,dword ptr ds:[t450]
	mov t452,Add(t451, 0x459dfd97)
	mov t453,FlagsOf(Add(t451, 0x459dfd97))
	mov dword ptr ds:[t450],t452
	mov VM_REG_26,t453
b-140940aa5
	mov t454,VM_REG_10
	mov t455,VM_REG_10
	mov VM_REG_10,t455
	mov VM_REG_10,t454
	mov VM_REG_155,topofstack
	mov t461,VM_REG_2E
	mov t462,Add(t461, 0x8)
	mov VM_REG_2E,t462
b-140940ab3
	mov t464,VM_REG_155
	mov t465,Sub(t464, 0x459dfd97)
	mov t466,FlagsOf(Sub(t464, 0x459dfd97))
	mov VM_REG_155,t465
	mov VM_REG_159,0x0
	mov VM_REG_26,t466
b-140940ac4
	mov VM_REG_5C,topofstack
	mov t470,VM_REG_2E
	mov t471,Add(t470, 0x8)
	mov VM_REG_2E,t471
b-140940acc
	mov t473,VM_REG_155
	mov t474,VM_REG_64
	mov t475,And(t474, Extract(t473,31,0))
	mov t476,FlagsOf(And(t474, Extract(t473,31,0)))
	mov VM_REG_64,t475
	mov VM_REG_68,0x0
	mov VM_REG_26,t476
b-140940ad5
	mov VM_REG_155,topofstack
	mov t477,VM_REG_2E
	mov t478,Add(t477, 0x8)
	mov VM_REG_2E,t478
b-140940add
	mov t480,VM_REG_64
	mov t481,Cmp(t480, 0x4)
	mov VM_REG_26,t481
b-140940aee
	mov t482,VM_REG_10D
	mov t483,VM_REG_7A
	mov t484,VM_REG_105
	mov t485,VM_REG_C3
	mov t486,VM_REG_5C
	mov t487,VM_REG_E0
	mov t488,VM_REG_10
	mov t489,VM_REG_97
	mov VM_REG_10D,t489
	mov VM_REG_105,t488
	mov VM_REG_5C,t487
	mov VM_REG_10,t486
	mov VM_REG_7A,t485
	mov VM_REG_C3,t484
	mov VM_REG_E0,t483
	mov VM_REG_97,t482
b-140940b10
	mov t498,VM_REG_155
	mov t499,VM_REG_64
	mov t500,VM_REG_CE
	mov t501,VM_REG_15D
	mov t502,VM_REG_B7
	mov t503,VM_REG_E8
	mov VM_REG_15D,t503
	mov VM_REG_64,t502
	mov VM_REG_B7,t501
	mov VM_REG_CE,t500
	mov VM_REG_155,t499
	mov VM_REG_E8,t498
b-140940b2a
	jcc b-140940c3e
b-140940b37
b-140940b37
	mov t516,VM_REG_10D
	mov t517,VM_REG_2E
	mov t518,Sub(t517, 0x8)
	mov VM_REG_2E,t518
	mov qword ptr ds:[Add(stack, -0x8)],t516
b-140940b3f
	mov VM_REG_10D,0x57bf64ea
	mov VM_REG_111,0x0
b-140940b47
	mov t520,VM_REG_5C
	mov t521,VM_REG_2E
	mov t522,Sub(t521, 0x8)
	mov VM_REG_2E,t522
	mov qword ptr ds:[Add(stack, -0x8)],t520
b-140940b4d
	mov VM_REG_5C,0x6b2bd492
	mov VM_REG_60,0x0
b-140940b5d
	mov t530,VM_REG_5C
	mov t531,VM_REG_10D
	mov t532,Add(t531, Extract(t530,31,0))
	mov t533,FlagsOf(Add(t531, Extract(t530,31,0)))
	mov VM_REG_10D,t532
	mov VM_REG_111,0x0
	mov VM_REG_26,t533
b-140940b66
	mov VM_REG_5C,topofstack
	mov t534,VM_REG_2E
	mov t535,Add(t534, 0x8)
	mov VM_REG_2E,t535
b-140940b6e
	mov t537,VM_REG_10D
	mov t538,Shr(t537, 0x6)
	mov VM_REG_10D,t538
	mov VM_REG_111,0x0
b-140940b78
	mov t540,VM_REG_10D
	mov t541,Shl(t540, 0x6)
	mov t542,FlagsOf(Shl(t540, 0x6))
	mov VM_REG_10D,t541
	mov VM_REG_111,0x0
	mov VM_REG_26,t542
b-140940b80
	mov t543,VM_REG_10D
	mov t544,Xor(t543, 0x757b1fe3)
	mov t545,FlagsOf(Xor(t543, 0x757b1fe3))
	mov VM_REG_10D,t544
	mov VM_REG_111,0x0
	mov VM_REG_26,t545
b-140940b8f
	mov t546,VM_REG_10D
	mov t547,Not(t546)
	mov VM_REG_10D,t547
	mov VM_REG_111,0x0
b-140940b93
	mov t548,VM_REG_E8
	mov t549,VM_REG_15D
	mov VM_REG_E8,t549
	mov VM_REG_15D,t548
	mov t552,VM_REG_10D
	mov t553,Add(t552, 0xb79026a6)
	mov VM_REG_10D,t553
	mov VM_REG_111,0x0
b-140940ba7
	mov t555,VM_REG_10D
	mov t556,VM_REG_155
	mov t557,Add(t556, Extract(t555,31,0))
	mov t558,FlagsOf(Add(t556, Extract(t555,31,0)))
	mov VM_REG_155,t557
	mov VM_REG_159,0x0
	mov VM_REG_26,t558
b-140940bb0
	mov t559,VM_REG_E8
	mov t560,VM_REG_CE
	mov VM_REG_E8,t560
	mov VM_REG_CE,t559
	mov VM_REG_10D,topofstack
	mov t566,VM_REG_2E
	mov t567,Add(t566, 0x8)
	mov VM_REG_2E,t567
b-140940bbe
	mov t569,VM_REG_97
	mov t570,VM_REG_E0
	mov t571,VM_REG_C3
	mov t572,VM_REG_7A
	mov t573,VM_REG_10
	mov t574,VM_REG_5C
	mov t575,VM_REG_105
	mov t576,VM_REG_10D
	mov VM_REG_10D,t576
	mov VM_REG_105,t575
	mov VM_REG_5C,t574
	mov VM_REG_10,t573
	mov VM_REG_7A,t572
	mov VM_REG_C3,t571
	mov VM_REG_E0,t570
	mov VM_REG_97,t569
b-140940be0
	mov t585,VM_REG_15D
	mov t586,VM_REG_155
	mov t587,VM_REG_E8
	mov t588,VM_REG_B7
	mov t589,VM_REG_64
	mov t590,VM_REG_CE
	mov VM_REG_15D,t590
	mov VM_REG_64,t589
	mov VM_REG_B7,t588
	mov VM_REG_CE,t587
	mov VM_REG_155,t586
	mov VM_REG_E8,t585
b-140940bfa
	jmp b-140940eac
b-140940c3e
b-140940c3e
b-140940c46
	mov t3317,VM_REG_155
	mov t3318,Cmp(t3317, 0xa)
	mov VM_REG_26,t3318
b-140940c57
	mov t3319,VM_REG_97
	mov t3320,VM_REG_E0
	mov t3321,VM_REG_C3
	mov t3322,VM_REG_7A
	mov t3323,VM_REG_10
	mov t3324,VM_REG_5C
	mov t3325,VM_REG_105
	mov t3326,VM_REG_10D
	mov VM_REG_10D,t3326
	mov VM_REG_105,t3325
	mov VM_REG_5C,t3324
	mov VM_REG_10,t3323
	mov VM_REG_7A,t3322
	mov VM_REG_C3,t3321
	mov VM_REG_E0,t3320
	mov VM_REG_97,t3319
b-140940c79
	mov t3335,VM_REG_E8
	mov t3336,VM_REG_155
	mov t3337,VM_REG_CE
	mov t3338,VM_REG_B7
	mov t3339,VM_REG_64
	mov t3340,VM_REG_15D
	mov VM_REG_15D,t3340
	mov VM_REG_64,t3339
	mov VM_REG_B7,t3338
	mov VM_REG_CE,t3337
	mov VM_REG_155,t3336
	mov VM_REG_E8,t3335
b-140940c93
	jcc b-140940dd0
b-140940ca0
b-140940ca0
	mov t3353,VM_REG_2E
	mov t3354,Sub(t3353, 0x8)
	mov VM_REG_2E,t3354
	mov qword ptr ds:[Add(stack, -0x8)],0x644f95b
b-140940ca8
	mov t3356,VM_REG_B7
	mov t3357,VM_REG_E8
	mov VM_REG_B7,t3357
	mov VM_REG_E8,t3356
	mov t3360,VM_REG_B7
	mov t3361,VM_REG_2E
	mov qword ptr ds:[t3361],t3360
b-140940cb2
	mov VM_REG_B7,0x538da
	mov VM_REG_BB,0x0
b-140940cc2
	mov t3370,VM_REG_B7
	mov t3371,VM_REG_155
	mov t3372,Add(t3371, Extract(t3370,31,0))
	mov t3373,FlagsOf(Add(t3371, Extract(t3370,31,0)))
	mov VM_REG_155,t3372
	mov VM_REG_159,0x0
	mov VM_REG_26,t3373
b-140940ccb
	mov t3377,VM_REG_2E
	mov t3378,qword ptr ds:[t3377]
	mov VM_REG_B7,t3378
b-140940cd9
	mov t3379,VM_REG_2E
	mov t3380,Add(t3379, 0x8)
	mov t3381,FlagsOf(Add(t3379, 0x8))
	mov VM_REG_2E,t3380
	mov VM_REG_26,t3381
b-140940ce4
b-140940cf4
	mov t3392,VM_REG_15D
	mov t3393,VM_REG_2E
	mov t3394,Sub(t3393, 0x8)
	mov VM_REG_2E,t3394
	mov qword ptr ds:[Add(stack, -0x8)],t3392
b-140940cfa
	mov VM_REG_15D,0x8460d
	mov VM_REG_161,0x0
b-140940d0a
	mov t3402,VM_REG_155
	mov t3403,Sub(t3402, 0x66d1171)
	mov VM_REG_155,t3403
	mov VM_REG_159,0x0
b-140940d12
	mov t3405,VM_REG_15D
	mov t3406,VM_REG_155
	mov t3407,Sub(t3406, Extract(t3405,31,0))
	mov VM_REG_155,t3407
	mov VM_REG_159,0x0
b-140940d18
	mov t3409,VM_REG_155
	mov t3410,Add(t3409, 0x66d1171)
	mov t3411,FlagsOf(Add(t3409, 0x66d1171))
	mov VM_REG_155,t3410
	mov VM_REG_159,0x0
	mov VM_REG_26,t3411
b-140940d27
	mov t3415,VM_REG_2E
	mov t3416,qword ptr ds:[t3415]
	mov VM_REG_15D,t3416
b-140940d35
	mov t3417,VM_REG_2E
	mov t3418,Add(t3417, 0x8)
	mov t3419,FlagsOf(Add(t3417, 0x8))
	mov VM_REG_2E,t3418
	mov VM_REG_26,t3419
b-140940d40
b-140940d50
	mov t3430,VM_REG_97
	mov t3431,VM_REG_E0
	mov t3432,VM_REG_C3
	mov t3433,VM_REG_7A
	mov t3434,VM_REG_10
	mov t3435,VM_REG_5C
	mov t3436,VM_REG_105
	mov t3437,VM_REG_10D
	mov VM_REG_10D,t3437
	mov VM_REG_105,t3436
	mov VM_REG_5C,t3435
	mov VM_REG_10,t3434
	mov VM_REG_7A,t3433
	mov VM_REG_C3,t3432
	mov VM_REG_E0,t3431
	mov VM_REG_97,t3430
b-140940d72
	mov t3446,VM_REG_B7
	mov t3447,VM_REG_155
	mov t3448,VM_REG_CE
	mov t3449,VM_REG_E8
	mov t3450,VM_REG_64
	mov t3451,VM_REG_15D
	mov VM_REG_15D,t3451
	mov VM_REG_64,t3450
	mov VM_REG_B7,t3449
	mov VM_REG_CE,t3448
	mov VM_REG_155,t3447
	mov VM_REG_E8,t3446
b-140940d8c
	jmp b-140940eac
b-140940dd0
b-140940dd0
b-140940dd8
	mov t3509,VM_REG_2E
	mov t3510,Sub(t3509, 0x8)
	mov t3511,FlagsOf(Sub(t3509, 0x8))
	mov VM_REG_2E,t3510
	mov VM_REG_26,t3511
b-140940de3
b-140940df3
	mov t3522,VM_REG_2E
	mov t3523,Sub(t3522, 0x8)
	mov VM_REG_2E,t3523
	mov qword ptr ds:[Add(stack, -0x8)],0x7fd5d905
b-140940dfb
	mov t3525,VM_REG_155
	mov t3526,VM_REG_2E
	mov qword ptr ds:[t3526],t3525
b-140940e01
	mov t3527,VM_REG_2E
	mov VM_REG_14D,t3527
b-140940e0b
	mov t3533,VM_REG_14D
	mov t3534,Add(t3533, 0x8)
	mov VM_REG_14D,t3534
b-140940e19
	mov t3536,VM_REG_14D
	mov qword ptr ds:[t3536],topofstack
	mov t3538,VM_REG_2E
	mov t3539,Add(t3538, 0x8)
	mov VM_REG_2E,t3539
b-140940e1f
	mov t3541,VM_REG_2E
	mov t3542,dword ptr ds:[t3541]
	mov t3543,Add(t3542, 0x4)
	mov t3544,FlagsOf(Add(t3542, 0x4))
	mov dword ptr ds:[t3541],t3543
	mov VM_REG_26,t3544
b-140940e2a
	mov t3545,VM_REG_155
	mov t3546,VM_REG_155
	mov VM_REG_155,t3546
	mov VM_REG_155,t3545
	mov t3549,VM_REG_2E
	mov t3550,qword ptr ds:[t3549]
	mov t3551,VM_REG_2E
	mov t3552,Sub(t3551, 0x8)
	mov VM_REG_2E,t3552
	mov qword ptr ds:[Add(stack, -0x8)],t3550
b-140940e34
	mov t3557,VM_REG_2E
	mov t3558,qword ptr ds:[t3557]
	mov VM_REG_155,t3558
b-140940e42
	mov t3559,VM_REG_2E
	mov t3560,Add(t3559, 0x8)
	mov t3561,FlagsOf(Add(t3559, 0x8))
	mov VM_REG_2E,t3560
	mov VM_REG_26,t3561
b-140940e4d
	mov t3562,VM_REG_C3
	mov t3563,VM_REG_E0
	mov VM_REG_C3,t3563
	mov VM_REG_E0,t3562
b-140940e59
	mov t3570,VM_REG_2E
	mov t3571,Add(t3570, 0x8)
	mov t3572,FlagsOf(Add(t3570, 0x8))
	mov VM_REG_2E,t3571
	mov VM_REG_26,t3572
b-140940e64
	mov t3573,VM_REG_105
	mov t3574,VM_REG_C3
	mov VM_REG_105,t3574
	mov VM_REG_C3,t3573
b-140940e70
	mov t3581,VM_REG_97
	mov t3582,VM_REG_105
	mov t3583,VM_REG_E0
	mov t3584,VM_REG_7A
	mov t3585,VM_REG_10
	mov t3586,VM_REG_5C
	mov t3587,VM_REG_C3
	mov t3588,VM_REG_10D
	mov VM_REG_10D,t3588
	mov VM_REG_105,t3587
	mov VM_REG_5C,t3586
	mov VM_REG_10,t3585
	mov VM_REG_7A,t3584
	mov VM_REG_C3,t3583
	mov VM_REG_E0,t3582
	mov VM_REG_97,t3581
b-140940e92
	mov t3597,VM_REG_E8
	mov t3598,VM_REG_155
	mov t3599,VM_REG_CE
	mov t3600,VM_REG_B7
	mov t3601,VM_REG_64
	mov t3602,VM_REG_15D
	mov VM_REG_15D,t3602
	mov VM_REG_64,t3601
	mov VM_REG_B7,t3600
	mov VM_REG_CE,t3599
	mov VM_REG_155,t3598
	mov VM_REG_E8,t3597
b-140940eac
b-140940eac
b-140940eb2
	mov t603,VM_REG_131
	mov VM_REG_14D,t603
b-140940ebe
	mov t608,VM_REG_14D
	mov t609,Add(t608, 0x143a2fe1)
	mov VM_REG_14D,t609
b-140940ecc
	mov t611,VM_REG_155
	mov t612,VM_REG_14D
	mov dword ptr ds:[t612],Extract(t611,31,0)
b-140940ed2
	mov t629,VM_REG_131
	mov VM_REG_14D,t629
b-140940edc
	mov t635,VM_REG_14D
	mov t636,Add(t635, 0x143a73d4)
	mov VM_REG_14D,t636
b-140940ee4
	mov t641,VM_REG_14D
	mov t642,qword ptr ds:[t641]
	mov VM_REG_E8,t642
b-140940ef2
	mov t649,VM_REG_131
	mov VM_REG_14D,t649
b-140940efe
	mov t654,VM_REG_14D
	mov t655,Add(t654, 0x14b924ba)
	mov VM_REG_14D,t655
b-140940f0c
	mov t657,VM_REG_14D
	mov t658,dword ptr ds:[t657]
	mov VM_REG_B7,t658
	mov VM_REG_BB,0x0
b-140940f12
	mov t659,VM_REG_E8
	mov t660,Sub(t659, 0xfefed16)
	mov t661,FlagsOf(Sub(t659, 0xfefed16))
	mov VM_REG_E8,t660
	mov VM_REG_26,t661
b-140940f21
	mov t665,VM_REG_E8
	mov t666,Add(t665, 0xeef353a)
	mov VM_REG_E8,t666
b-140940f2f
	mov t668,VM_REG_E8
	mov t669,Sub(t668, 0x9ff933d)
	mov VM_REG_E8,t669
b-140940f37
	mov t671,VM_REG_B7
	mov t672,VM_REG_E8
	mov t673,Sub(t672, t671)
	mov VM_REG_E8,t673
b-140940f3d
	mov t675,VM_REG_E8
	mov t676,Add(t675, 0x9ff933d)
	mov VM_REG_E8,t676
b-140940f45
	mov t678,VM_REG_E8
	mov t679,Sub(t678, 0xeef353a)
	mov t680,FlagsOf(Sub(t678, 0xeef353a))
	mov VM_REG_E8,t679
	mov VM_REG_26,t680
b-140940f50
	mov t681,VM_REG_E8
	mov t682,Add(t681, 0xfefed16)
	mov t683,FlagsOf(Add(t681, 0xfefed16))
	mov VM_REG_E8,t682
	mov VM_REG_26,t683
b-140940f5b
	mov t690,VM_REG_131
	mov VM_REG_14D,t690
b-140940f67
	mov t695,VM_REG_14D
	mov t696,Add(t695, 0x143a2efb)
	mov VM_REG_14D,t696
b-140940f6f
	mov t698,VM_REG_14D
	mov t699,qword ptr ds:[t698]
	mov VM_REG_155,t699
b-140940f75
	mov t700,VM_REG_131
	mov VM_REG_14D,t700
b-140940f7f
	mov t706,VM_REG_14D
	mov t707,Add(t706, 0x143a2376)
	mov VM_REG_14D,t707
b-140940f8d
	mov t709,VM_REG_14D
	mov t710,dword ptr ds:[t709]
	mov VM_REG_B7,t710
	mov VM_REG_BB,0x0
b-140940f93
	mov t711,VM_REG_B7
	mov t712,VM_REG_155
	mov t713,Xor(t712, t711)
	mov t714,FlagsOf(Xor(t712, t711))
	mov VM_REG_155,t713
	mov VM_REG_26,t714
b-140940fa0
	mov t715,VM_REG_E8
	mov t716,VM_REG_2E
	mov t717,Sub(t716, 0x8)
	mov VM_REG_2E,t717
	mov qword ptr ds:[Add(stack, -0x8)],t715
b-140940fa6
	mov VM_REG_82,0x7ffbadf9
	mov VM_REG_86,0x0
b-140940fb2
	mov t719,VM_REG_82
	mov VM_REG_E8,t719
b-140940fbc
	mov t726,VM_REG_E8
	mov t727,Inc(t726)
	mov t728,FlagsOf(Inc(t726))
	mov VM_REG_E8,t727
	mov VM_REG_26,t728
b-140940fc5
	mov t732,VM_REG_E8
	mov t733,VM_REG_15D
	mov VM_REG_E8,t733
	mov VM_REG_15D,t732
b-140940fcf
	mov t737,VM_REG_15D
	mov t738,Not(t737)
	mov VM_REG_15D,t738
b-140940fdb
	mov t742,VM_REG_E8
	mov t743,VM_REG_15D
	mov VM_REG_E8,t743
	mov VM_REG_15D,t742
b-140940fe5
	mov t744,VM_REG_E8
	mov t745,Xor(t744, 0x7edec906)
	mov t746,FlagsOf(Xor(t744, 0x7edec906))
	mov VM_REG_E8,t745
	mov VM_REG_26,t746
b-140940ff2
	mov t747,VM_REG_E8
	mov t748,VM_REG_64
	mov VM_REG_E8,t748
	mov VM_REG_64,t747
	mov t751,VM_REG_64
	mov t752,Or(t751, 0x51edc4fd)
	mov t753,FlagsOf(Or(t751, 0x51edc4fd))
	mov VM_REG_64,t752
	mov VM_REG_26,t753
b-140941001
	mov t755,VM_REG_64
	mov t756,Dec(t755)
	mov t757,FlagsOf(Dec(t755))
	mov VM_REG_64,t756
	mov VM_REG_26,t757
b-14094100c
	mov t761,VM_REG_CE
	mov t762,VM_REG_2E
	mov t763,Sub(t762, 0x8)
	mov VM_REG_2E,t763
	mov qword ptr ds:[Add(stack, -0x8)],t761
b-140941014
	mov VM_REG_82,-0x200e
	mov VM_REG_86,-0x1
b-140941020
	mov t765,VM_REG_82
	mov VM_REG_CE,t765
b-14094102c
	mov t769,VM_REG_CE
	mov t770,VM_REG_64
	mov t771,Sub(t770, t769)
	mov t772,FlagsOf(Sub(t770, t769))
	mov VM_REG_64,t771
	mov VM_REG_26,t772
b-140941035
	mov t773,VM_REG_2E
	mov t774,qword ptr ds:[t773]
	mov VM_REG_CE,t774
b-14094103b
	mov t775,VM_REG_2E
	mov t776,Add(t775, 0x8)
	mov VM_REG_2E,t776
b-140941043
b-140941049
	mov t782,VM_REG_64
	mov t783,VM_REG_155
	mov t784,Add(t783, t782)
	mov t785,FlagsOf(Add(t783, t782))
	mov VM_REG_155,t784
	mov VM_REG_26,t785
b-140941056
	mov t786,VM_REG_155
	mov t787,VM_REG_E8
	mov VM_REG_155,t787
	mov VM_REG_E8,t786
	mov VM_REG_64,topofstack
	mov t793,VM_REG_2E
	mov t794,Add(t793, 0x8)
	mov VM_REG_2E,t794
b-140941064
	mov t796,VM_REG_E8
	mov t797,dword ptr ds:[t796]
	mov VM_REG_E8,t797
	mov VM_REG_EC,0x0
b-14094106a
	mov t804,VM_REG_131
	mov VM_REG_14D,t804
b-140941076
	mov t809,VM_REG_14D
	mov t810,Add(t809, 0x14b4f388)
	mov VM_REG_14D,t810
b-140941084
	mov t812,VM_REG_14D
	mov t813,dword ptr ds:[t812]
	mov t814,VM_REG_E8
	mov t815,Xor(t814, t813)
	mov t816,FlagsOf(Xor(t814, t813))
	mov VM_REG_E8,t815
	mov VM_REG_EC,0x0
	mov VM_REG_26,t816
b-14094108d
	mov t817,VM_REG_131
	mov VM_REG_14D,t817
b-140941097
	mov t823,VM_REG_14D
	mov t824,Add(t823, 0x143a1ad0)
	mov VM_REG_14D,t824
b-1409410a5
	mov t826,VM_REG_14D
	mov t827,dword ptr ds:[t826]
	mov t828,VM_REG_E8
	mov t829,Cmp(t828, t827)
	mov VM_REG_26,t829
b-1409410ae
	mov t830,VM_REG_97
	mov t831,VM_REG_E0
	mov t832,VM_REG_C3
	mov t833,VM_REG_7A
	mov t834,VM_REG_10
	mov t835,VM_REG_5C
	mov t836,VM_REG_105
	mov t837,VM_REG_10D
	mov VM_REG_10D,t837
	mov VM_REG_105,t836
	mov VM_REG_5C,t835
	mov VM_REG_10,t834
	mov VM_REG_7A,t833
	mov VM_REG_C3,t832
	mov VM_REG_E0,t831
	mov VM_REG_97,t830
b-1409410d0
	mov t846,VM_REG_64
	mov t847,VM_REG_E8
	mov t848,VM_REG_CE
	mov t849,VM_REG_B7
	mov t850,VM_REG_155
	mov t851,VM_REG_15D
	mov VM_REG_15D,t851
	mov VM_REG_64,t850
	mov VM_REG_B7,t849
	mov VM_REG_CE,t848
	mov VM_REG_155,t847
	mov VM_REG_E8,t846
b-1409410ea
	jcc b-1409411a2
b-1409410f7
b-1409410f7
	mov t864,VM_REG_64
	mov t865,Add(t864, 0x5f953781)
	mov VM_REG_64,t865
	mov VM_REG_68,0x0
b-1409410ff
	mov t867,VM_REG_E8
	mov t868,VM_REG_155
	mov VM_REG_E8,t868
	mov VM_REG_155,t867
	mov t871,VM_REG_64
	mov t872,Sub(t871, 0x77ef3116)
	mov VM_REG_64,t872
	mov VM_REG_68,0x0
b-14094110b
	mov t874,VM_REG_105
	mov t875,VM_REG_7A
	mov VM_REG_105,t875
	mov VM_REG_7A,t874
	mov t878,VM_REG_64
	mov t879,Sub(t878, 0x5bd6986f)
	mov VM_REG_64,t879
	mov VM_REG_68,0x0
b-140941117
	mov t881,VM_REG_E8
	mov t882,VM_REG_64
	mov t883,Add(t882, Extract(t881,31,0))
	mov t884,FlagsOf(Add(t882, Extract(t881,31,0)))
	mov VM_REG_64,t883
	mov VM_REG_68,0x0
	mov VM_REG_26,t884
b-140941120
	mov t885,VM_REG_64
	mov t886,Add(t885, 0x5bd6986f)
	mov t887,FlagsOf(Add(t885, 0x5bd6986f))
	mov VM_REG_64,t886
	mov VM_REG_68,0x0
	mov VM_REG_26,t887
b-14094112f
	mov t888,VM_REG_64
	mov t889,Add(t888, 0x77ef3116)
	mov VM_REG_64,t889
	mov VM_REG_68,0x0
b-140941137
	mov t891,VM_REG_64
	mov t892,Sub(t891, 0x5f953781)
	mov VM_REG_64,t892
	mov VM_REG_68,0x0
b-14094113f
	mov t894,VM_REG_B7
	mov t895,VM_REG_64
	mov t896,Xor(t895, Extract(t894,31,0))
	mov VM_REG_64,t896
	mov VM_REG_68,0x0
b-140941147
	mov t898,VM_REG_2E
	mov t899,dword ptr ds:[t898]
	mov t900,Add(t899, 0x8)
	mov dword ptr ds:[t898],t900
b-14094114f
	mov t902,VM_REG_2E
	mov t903,Add(t902, 0x4)
	mov t904,FlagsOf(Add(t902, 0x4))
	mov VM_REG_2E,t903
	mov VM_REG_26,t904
b-14094115a
	mov t905,VM_REG_105
	mov t906,VM_REG_10
	mov VM_REG_105,t906
	mov VM_REG_10,t905
b-140941166
	mov t913,VM_REG_97
	mov t914,VM_REG_E0
	mov t915,VM_REG_C3
	mov t916,VM_REG_10
	mov t917,VM_REG_105
	mov t918,VM_REG_5C
	mov t919,VM_REG_7A
	mov t920,VM_REG_10D
	mov VM_REG_10D,t920
	mov VM_REG_105,t919
	mov VM_REG_5C,t918
	mov VM_REG_10,t917
	mov VM_REG_7A,t916
	mov VM_REG_C3,t915
	mov VM_REG_E0,t914
	mov VM_REG_97,t913
b-140941188
	mov t929,VM_REG_155
	mov t930,VM_REG_E8
	mov t931,VM_REG_CE
	mov t932,VM_REG_B7
	mov t933,VM_REG_64
	mov t934,VM_REG_15D
	mov VM_REG_15D,t934
	mov VM_REG_64,t933
	mov VM_REG_B7,t932
	mov VM_REG_CE,t931
	mov VM_REG_155,t930
	mov VM_REG_E8,t929
b-1409411a2
b-1409411a2
b-1409411aa
	mov t944,VM_REG_2E
	mov t945,qword ptr ds:[t944]
	mov t946,VM_REG_2E
	mov t947,Sub(t946, 0x8)
	mov VM_REG_2E,t947
	mov qword ptr ds:[Add(stack, -0x8)],t945
b-1409411b4
	mov t949,VM_REG_E8
	mov t950,VM_REG_CE
	mov VM_REG_E8,t950
	mov VM_REG_CE,t949
	mov VM_REG_131,topofstack
	mov t956,VM_REG_2E
	mov t957,Add(t956, 0x8)
	mov VM_REG_2E,t957
b-1409411c2
	mov t959,VM_REG_C3
	mov t960,VM_REG_2E
	mov t961,Sub(t960, 0x8)
	mov VM_REG_2E,t961
	mov qword ptr ds:[Add(stack, -0x8)],t959
b-1409411c8
	mov t963,VM_REG_2E
	mov VM_REG_C3,t963
b-1409411d2
	mov t969,VM_REG_C3
	mov t970,Add(t969, 0x8)
	mov VM_REG_C3,t970
b-1409411e0
	mov t972,VM_REG_C3
	mov t973,Add(t972, 0x8)
	mov t974,FlagsOf(Add(t972, 0x8))
	mov VM_REG_C3,t973
	mov VM_REG_26,t974
b-1409411eb
	mov t975,VM_REG_2E
	mov t976,VM_REG_C3
	mov t977,qword ptr ds:[t975]
	mov qword ptr ds:[t975],t976
	mov VM_REG_C3,t977
b-1409411f1
	mov t978,VM_REG_15D
	mov t979,VM_REG_CE
	mov VM_REG_15D,t979
	mov VM_REG_CE,t978
	mov VM_REG_2E,topofstack
b-1409411ff
	mov qword ptr ds:[Add(stack, -0x8)],0x0
b-140941205
	mov t986,VM_REG_2E
	mov t987,qword ptr ds:[t986]
	mov t988,VM_REG_2E
	mov t989,Sub(t988, 0x8)
	mov VM_REG_2E,t989
	mov qword ptr ds:[Add(stack, -0x8)],t987
b-14094120f
	mov t991,VM_REG_7A
	mov t992,VM_REG_10
	mov VM_REG_7A,t992
	mov VM_REG_10,t991
	mov VM_REG_155,topofstack
	mov t998,VM_REG_2E
	mov t999,Add(t998, 0x8)
	mov VM_REG_2E,t999
b-14094121d
	mov t1001,VM_REG_2E
	mov t1002,Add(t1001, 0x8)
	mov t1003,FlagsOf(Add(t1001, 0x8))
	mov VM_REG_2E,t1002
	mov VM_REG_26,t1003
b-140941228
	mov qword ptr ds:[Add(stack, -0x8)],0x0
b-14094122e
	mov t1005,VM_REG_2E
	mov t1006,qword ptr ds:[t1005]
	mov t1007,VM_REG_2E
	mov t1008,Sub(t1007, 0x8)
	mov VM_REG_2E,t1008
	mov qword ptr ds:[Add(stack, -0x8)],t1006
b-140941234
	mov VM_REG_B7,topofstack
	mov t1010,VM_REG_2E
	mov t1011,Add(t1010, 0x8)
	mov VM_REG_2E,t1011
b-14094123c
	mov t1013,VM_REG_15D
	mov t1014,VM_REG_2E
	mov t1015,Sub(t1014, 0x8)
	mov VM_REG_2E,t1015
	mov qword ptr ds:[Add(stack, -0x8)],t1013
b-140941242
	mov t1017,VM_REG_2E
	mov VM_REG_15D,t1017
b-14094124e
	mov t1021,VM_REG_15D
	mov t1022,Add(t1021, 0x8)
	mov t1023,FlagsOf(Add(t1021, 0x8))
	mov VM_REG_15D,t1022
	mov VM_REG_26,t1023
b-140941259
	mov t1024,VM_REG_15D
	mov t1025,Add(t1024, 0x8)
	mov t1026,FlagsOf(Add(t1024, 0x8))
	mov VM_REG_15D,t1025
	mov VM_REG_26,t1026
b-140941264
	mov t1027,VM_REG_2E
	mov t1029,qword ptr ds:[t1027]
	mov VM_REG_15D,t1029
b-14094126a
	mov t1030,VM_REG_7A
	mov t1031,VM_REG_10
	mov VM_REG_7A,t1031
	mov VM_REG_10,t1030
	mov VM_REG_2E,topofstack
b-140941278
	mov t1037,VM_REG_15D
	mov t1038,VM_REG_CE
	mov VM_REG_15D,t1038
	mov VM_REG_CE,t1037
	mov qword ptr ds:[Add(stack, -0x8)],0x10
b-140941284
	mov t1045,VM_REG_2E
	mov t1046,qword ptr ds:[t1045]
	mov t1047,VM_REG_2E
	mov t1048,Sub(t1047, 0x8)
	mov VM_REG_2E,t1048
	mov qword ptr ds:[Add(stack, -0x8)],t1046
b-14094128e
	mov t1050,VM_REG_2E
	mov t1051,qword ptr ds:[t1050]
	mov VM_REG_CE,t1051
b-140941294
	mov t1052,VM_REG_2E
	mov t1053,Add(t1052, 0x8)
	mov t1054,FlagsOf(Add(t1052, 0x8))
	mov VM_REG_2E,t1053
	mov VM_REG_26,t1054
b-14094129f
	mov qword ptr ds:[Add(stack, -0x8)],0x10
b-1409412af
	mov t1065,VM_REG_2E
	mov t1066,Add(t1065, 0x8)
	mov t1067,FlagsOf(Add(t1065, 0x8))
	mov VM_REG_2E,t1066
	mov VM_REG_26,t1067
b-1409412ba
	mov t1068,VM_REG_155
	mov t1069,VM_REG_E8
	mov VM_REG_155,t1069
	mov VM_REG_E8,t1068
	mov qword ptr ds:[Add(stack, -0x8)],0x0
b-1409412c6
	mov t1076,VM_REG_2E
	mov VM_REG_14D,t1076
b-1409412d0
	mov t1082,VM_REG_14D
	mov t1083,Add(t1082, 0x450)
	mov VM_REG_14D,t1083
b-1409412d8
	mov t1085,VM_REG_14D
	mov VM_REG_B7,t1085
b-1409412e4
	mov t1089,VM_REG_2E
	mov VM_REG_14D,t1089
b-1409412f0
	mov t1093,VM_REG_14D
	mov t1094,Add(t1093, 0x20)
	mov VM_REG_14D,t1094
b-1409412f8
	mov t1102,VM_REG_14D
	mov VM_REG_155,t1102
b-140941304
	mov t1107,VM_REG_2E
	mov VM_REG_14D,t1107
b-14094130e
	mov t1113,VM_REG_14D
	mov t1114,Add(t1113, 0x450)
	mov VM_REG_14D,t1114
b-14094131c
	mov t1116,VM_REG_105
	mov t1117,VM_REG_C3
	mov VM_REG_105,t1117
	mov VM_REG_C3,t1116
b-140941328
	mov t1121,VM_REG_CE
	mov t1122,VM_REG_15D
	mov VM_REG_CE,t1122
	mov VM_REG_15D,t1121
	mov VM_REG_14D,0x1d5a
b-140941334
	mov t1125,VM_REG_E0
	mov t1126,VM_REG_7A
	mov VM_REG_E0,t1126
	mov VM_REG_7A,t1125
	mov t1129,VM_REG_14D
	mov t1130,Add(t1129, 0x140000000)
	mov VM_REG_14D,t1130
b-14094133e
	mov t1132,VM_REG_14D
	mov t1133,Add(t1132, 0xd2fe)
	mov VM_REG_14D,t1133
b-140941346
	mov t1135,VM_REG_15D
	mov t1136,VM_REG_2E
	mov t1137,Sub(t1136, 0x8)
	mov VM_REG_2E,t1137
	mov qword ptr ds:[Add(stack, -0x8)],t1135
b-14094134e
	mov t1139,VM_REG_15D
	mov t1140,VM_REG_2E
	mov t1141,Sub(t1140, 0x8)
	mov VM_REG_2E,t1141
	mov qword ptr ds:[Add(stack, -0x8)],t1139
b-140941354
	mov t1146,VM_REG_26
	mov t1147,VM_REG_2E
	mov t1148,Sub(t1147, 0x8)
	mov VM_REG_2E,t1148
	mov qword ptr ds:[Add(stack, -0x8)],t1146
b-14094135e
	mov t1150,VM_REG_15D
	mov t1151,VM_REG_2E
	mov t1152,Sub(t1151, 0x8)
	mov VM_REG_2E,t1152
	mov qword ptr ds:[Add(stack, -0x8)],t1150
b-140941364
	mov t1154,VM_REG_155
	mov t1155,VM_REG_2E
	mov t1156,Sub(t1155, 0x8)
	mov VM_REG_2E,t1156
	mov qword ptr ds:[Add(stack, -0x8)],t1154
b-14094136a
	mov t1158,VM_REG_B7
	mov t1159,VM_REG_2E
	mov t1160,Sub(t1159, 0x8)
	mov VM_REG_2E,t1160
	mov qword ptr ds:[Add(stack, -0x8)],t1158
b-140941370
	mov t1162,VM_REG_E8
	mov t1163,VM_REG_2E
	mov t1164,Sub(t1163, 0x8)
	mov VM_REG_2E,t1164
	mov qword ptr ds:[Add(stack, -0x8)],t1162
b-140941376
	mov t1166,VM_REG_131
	mov t1167,VM_REG_2E
	mov t1168,Sub(t1167, 0x8)
	mov VM_REG_2E,t1168
	mov qword ptr ds:[Add(stack, -0x8)],t1166
b-14094137e
	mov t1170,VM_REG_64
	mov t1171,VM_REG_2E
	mov t1172,Sub(t1171, 0x8)
	mov VM_REG_2E,t1172
	mov qword ptr ds:[Add(stack, -0x8)],t1170
b-140941386
	mov t1174,VM_REG_CE
	mov t1175,VM_REG_2E
	mov t1176,Sub(t1175, 0x8)
	mov VM_REG_2E,t1176
	mov qword ptr ds:[Add(stack, -0x8)],t1174
b-14094138c
	mov t1178,VM_REG_10D
	mov t1179,VM_REG_2E
	mov t1180,Sub(t1179, 0x8)
	mov VM_REG_2E,t1180
	mov qword ptr ds:[Add(stack, -0x8)],t1178
b-140941392
	mov t1182,VM_REG_C3
	mov t1183,VM_REG_2E
	mov t1184,Sub(t1183, 0x8)
	mov VM_REG_2E,t1184
	mov qword ptr ds:[Add(stack, -0x8)],t1182
b-14094139a
	mov t1186,VM_REG_5C
	mov t1187,VM_REG_2E
	mov t1188,Sub(t1187, 0x8)
	mov VM_REG_2E,t1188
	mov qword ptr ds:[Add(stack, -0x8)],t1186
b-1409413a0
	mov t1190,VM_REG_10
	mov t1191,VM_REG_2E
	mov t1192,Sub(t1191, 0x8)
	mov VM_REG_2E,t1192
	mov qword ptr ds:[Add(stack, -0x8)],t1190
b-1409413a8
	mov t1194,VM_REG_E0
	mov t1195,VM_REG_2E
	mov t1196,Sub(t1195, 0x8)
	mov VM_REG_2E,t1196
	mov qword ptr ds:[Add(stack, -0x8)],t1194
b-1409413b0
	mov t1198,VM_REG_105
	mov t1199,VM_REG_2E
	mov t1200,Sub(t1199, 0x8)
	mov VM_REG_2E,t1200
	mov qword ptr ds:[Add(stack, -0x8)],t1198
b-1409413b6
	mov t1202,VM_REG_7A
	mov t1203,VM_REG_2E
	mov t1204,Sub(t1203, 0x8)
	mov VM_REG_2E,t1204
	mov qword ptr ds:[Add(stack, -0x8)],t1202
b-1409413be
	mov t1206,VM_REG_97
	mov t1207,VM_REG_2E
	mov t1208,Sub(t1207, 0x8)
	mov VM_REG_2E,t1208
	mov qword ptr ds:[Add(stack, -0x8)],t1206
b-1409413c6
	mov t1210,VM_REG_97
	mov t1211,VM_REG_7A
	mov t1212,VM_REG_105
	mov t1213,VM_REG_E0
	mov t1214,VM_REG_10
	mov t1215,VM_REG_5C
	mov t1216,VM_REG_C3
	mov t1217,VM_REG_10D
	mov VM_REG_10D,t1217
	mov VM_REG_105,t1216
	mov VM_REG_5C,t1215
	mov VM_REG_10,t1214
	mov VM_REG_7A,t1213
	mov VM_REG_C3,t1212
	mov VM_REG_E0,t1211
	mov VM_REG_97,t1210
b-1409413e8
	mov t1226,VM_REG_15D
	mov t1227,VM_REG_E8
	mov t1228,VM_REG_155
	mov t1229,VM_REG_B7
	mov t1230,VM_REG_64
	mov t1231,VM_REG_CE
	mov VM_REG_15D,t1231
	mov VM_REG_64,t1230
	mov VM_REG_B7,t1229
	mov VM_REG_CE,t1228
	mov VM_REG_155,t1227
	mov VM_REG_E8,t1226
b-140941402
b-140941404
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
b-14094140c
b-14094140c
b-140941414
	mov VM_REG_2E,rsp
	mov t1246,VM_REG_E8
	mov t1247,VM_REG_B7
	mov VM_REG_E8,t1247
	mov VM_REG_B7,t1246
b-140941424
	mov VM_REG_97,topofstack
	mov t1250,VM_REG_2E
	mov t1251,Add(t1250, 0x8)
	mov VM_REG_2E,t1251
b-14094142c
	mov VM_REG_E0,topofstack
	mov t1253,VM_REG_2E
	mov t1254,Add(t1253, 0x8)
	mov VM_REG_2E,t1254
b-140941434
	mov VM_REG_C3,topofstack
	mov t1256,VM_REG_2E
	mov t1257,Add(t1256, 0x8)
	mov VM_REG_2E,t1257
b-14094143c
	mov VM_REG_7A,topofstack
	mov t1259,VM_REG_2E
	mov t1260,Add(t1259, 0x8)
	mov VM_REG_2E,t1260
b-140941444
	mov t1262,VM_REG_5C
	mov t1263,VM_REG_5C
	mov VM_REG_5C,t1263
	mov VM_REG_5C,t1262
	mov VM_REG_10,topofstack
	mov t1269,VM_REG_2E
	mov t1270,Add(t1269, 0x8)
	mov VM_REG_2E,t1270
b-140941452
	mov VM_REG_5C,topofstack
	mov t1272,VM_REG_2E
	mov t1273,Add(t1272, 0x8)
	mov VM_REG_2E,t1273
b-14094145a
	mov t1275,VM_REG_97
	mov t1276,VM_REG_C3
	mov VM_REG_97,t1276
	mov VM_REG_C3,t1275
	mov VM_REG_105,topofstack
	mov t1282,VM_REG_2E
	mov t1283,Add(t1282, 0x8)
	mov VM_REG_2E,t1283
b-140941468
	mov t1285,VM_REG_64
	mov t1286,VM_REG_15D
	mov VM_REG_64,t1286
	mov VM_REG_15D,t1285
	mov VM_REG_10D,topofstack
	mov t1292,VM_REG_2E
	mov t1293,Add(t1292, 0x8)
	mov VM_REG_2E,t1293
b-140941476
	mov t1295,VM_REG_7A
	mov t1296,VM_REG_97
	mov VM_REG_7A,t1296
	mov VM_REG_97,t1295
	mov VM_REG_64,topofstack
	mov t1302,VM_REG_2E
	mov t1303,Add(t1302, 0x8)
	mov VM_REG_2E,t1303
b-140941484
	mov VM_REG_15D,topofstack
	mov t1305,VM_REG_2E
	mov t1306,Add(t1305, 0x8)
	mov VM_REG_2E,t1306
b-14094148c
	mov t1308,VM_REG_7A
	mov t1309,VM_REG_97
	mov VM_REG_7A,t1309
	mov VM_REG_97,t1308
	mov VM_REG_131,topofstack
	mov t1315,VM_REG_2E
	mov t1316,Add(t1315, 0x8)
	mov VM_REG_2E,t1316
b-14094149a
	mov t1318,VM_REG_155
	mov t1319,VM_REG_155
	mov VM_REG_155,t1319
	mov VM_REG_155,t1318
	mov VM_REG_155,topofstack
	mov t1325,VM_REG_2E
	mov t1326,Add(t1325, 0x8)
	mov VM_REG_2E,t1326
b-1409414a8
	mov VM_REG_155,topofstack
	mov t1328,VM_REG_2E
	mov t1329,Add(t1328, 0x8)
	mov VM_REG_2E,t1329
b-1409414b0
	mov t1331,VM_REG_B7
	mov t1332,VM_REG_E8
	mov VM_REG_B7,t1332
	mov VM_REG_E8,t1331
	mov VM_REG_B7,topofstack
	mov t1338,VM_REG_2E
	mov t1339,Add(t1338, 0x8)
	mov VM_REG_2E,t1339
b-1409414be
	mov t1341,VM_REG_C3
	mov t1342,VM_REG_97
	mov VM_REG_C3,t1342
	mov VM_REG_97,t1341
	mov VM_REG_CE,topofstack
	mov t1348,VM_REG_2E
	mov t1349,Add(t1348, 0x8)
	mov VM_REG_2E,t1349
b-1409414cc
	mov VM_REG_E8,topofstack
	mov t1351,VM_REG_2E
	mov t1352,Add(t1351, 0x8)
	mov VM_REG_2E,t1352
b-1409414d4
	mov VM_REG_26,topofstack
	mov t1355,VM_REG_2E
	mov t1356,Add(t1355, 0x8)
	mov VM_REG_2E,t1356
b-1409414da
	mov t1358,VM_REG_2E
	mov t1359,Add(t1358, 0x10)
	mov VM_REG_2E,t1359
b-1409414df
	mov t1361,VM_REG_7A
	mov t1362,VM_REG_10
	mov VM_REG_7A,t1362
	mov VM_REG_10,t1361
	mov t1365,VM_REG_E8
	mov t1366,VM_REG_E8
	mov t1367,Test(t1366, Extract(t1365,31,0))
	mov VM_REG_26,t1367
b-1409414ec
	mov t1368,VM_REG_97
	mov t1369,VM_REG_E0
	mov t1370,VM_REG_C3
	mov t1371,VM_REG_10
	mov t1372,VM_REG_7A
	mov t1373,VM_REG_5C
	mov t1374,VM_REG_105
	mov t1375,VM_REG_10D
	mov VM_REG_10D,t1375
	mov VM_REG_105,t1374
	mov VM_REG_5C,t1373
	mov VM_REG_10,t1372
	mov VM_REG_7A,t1371
	mov VM_REG_C3,t1370
	mov VM_REG_E0,t1369
	mov VM_REG_97,t1368
b-14094150e
	mov t1384,VM_REG_E8
	mov t1385,VM_REG_155
	mov t1386,VM_REG_CE
	mov t1387,VM_REG_B7
	mov t1388,VM_REG_15D
	mov t1389,VM_REG_64
	mov VM_REG_15D,t1389
	mov VM_REG_64,t1388
	mov VM_REG_B7,t1387
	mov VM_REG_CE,t1386
	mov VM_REG_155,t1385
	mov VM_REG_E8,t1384
b-140941528
	jcc b-1409420a5
b-140941535
b-140941535
	mov t1402,VM_REG_2E
	mov VM_REG_14D,t1402
b-14094153f
	mov t1408,VM_REG_14D
	mov t1409,Add(t1408, 0x20)
	mov VM_REG_14D,t1409
b-14094154d
	mov t1411,VM_REG_14D
	mov t1412,word ptr ds:[t1411]
	mov VM_REG_97,ZeroExtend(t1412)
	mov VM_REG_9B,0x0
b-140941553
	mov VM_REG_82,0x42cf7d48
	mov VM_REG_86,0x114c3a4c
b-14094155f
	mov t1417,VM_REG_82
	mov VM_REG_E8,t1417
b-140941569
	mov VM_REG_E0,0x1
	mov VM_REG_E4,0x0
b-140941575
	mov t1426,VM_REG_E8
	mov t1427,VM_REG_97
	mov t1428,Add(t1427, t1426)
	mov t1429,FlagsOf(Add(t1427, t1426))
	mov VM_REG_97,t1428
	mov VM_REG_26,t1429
b-140941582
	mov t1436,VM_REG_2E
	mov VM_REG_14D,t1436
b-14094158e
	mov t1441,VM_REG_14D
	mov t1442,Add(t1441, 0x450)
	mov VM_REG_14D,t1442
b-140941596
	mov t1444,VM_REG_E0
	mov t1445,VM_REG_14D
	mov t1446,dword ptr ds:[t1445]
	mov t1447,Cmp(t1446, Extract(t1444,31,0))
	mov VM_REG_26,t1447
b-14094159f
	mov t1448,VM_REG_97
	mov t1449,VM_REG_E0
	mov t1450,VM_REG_C3
	mov t1451,VM_REG_7A
	mov t1452,VM_REG_10
	mov t1453,VM_REG_5C
	mov t1454,VM_REG_105
	mov t1455,VM_REG_10D
	mov VM_REG_10D,t1455
	mov VM_REG_105,t1454
	mov VM_REG_5C,t1453
	mov VM_REG_10,t1452
	mov VM_REG_7A,t1451
	mov VM_REG_C3,t1450
	mov VM_REG_E0,t1449
	mov VM_REG_97,t1448
b-1409415c1
	mov t1464,VM_REG_E8
	mov t1465,VM_REG_155
	mov t1466,VM_REG_CE
	mov t1467,VM_REG_B7
	mov t1468,VM_REG_64
	mov t1469,VM_REG_15D
	mov VM_REG_15D,t1469
	mov VM_REG_64,t1468
	mov VM_REG_B7,t1467
	mov VM_REG_CE,t1466
	mov VM_REG_155,t1465
	mov VM_REG_E8,t1464
b-1409415db
	jcc b-140941c39
b-1409415e8
b-1409415e8
	mov t1492,VM_REG_2E
	mov VM_REG_14D,t1492
b-1409415f4
	mov t1497,VM_REG_14D
	mov t1498,Add(t1497, 0x20)
	mov VM_REG_14D,t1498
b-1409415fc
	mov t1500,VM_REG_14D
	mov t1501,word ptr ds:[t1500]
	mov VM_REG_7A,ZeroExtend(t1501)
	mov VM_REG_7E,0x0
b-140941606
	mov t1515,VM_REG_2E
	mov VM_REG_14D,t1515
b-140941610
	mov t1521,VM_REG_14D
	mov t1522,Add(t1521, 0x22)
	mov VM_REG_14D,t1522
b-14094161e
	mov t1530,VM_REG_14D
	mov VM_REG_C3,t1530
b-14094162a
	mov t1535,VM_REG_97
	mov t1536,VM_REG_E0
	mov t1537,VM_REG_C3
	mov t1538,VM_REG_7A
	mov t1539,VM_REG_10
	mov t1540,VM_REG_5C
	mov t1541,VM_REG_105
	mov t1542,VM_REG_10D
	mov VM_REG_10D,t1542
	mov VM_REG_105,t1541
	mov VM_REG_5C,t1540
	mov VM_REG_10,t1539
	mov VM_REG_7A,t1538
	mov VM_REG_C3,t1537
	mov VM_REG_E0,t1536
	mov VM_REG_97,t1535
b-14094164c
	mov t1551,VM_REG_E8
	mov t1552,VM_REG_155
	mov t1553,VM_REG_CE
	mov t1554,VM_REG_B7
	mov t1555,VM_REG_64
	mov t1556,VM_REG_15D
	mov VM_REG_15D,t1556
	mov VM_REG_64,t1555
	mov VM_REG_B7,t1554
	mov VM_REG_CE,t1553
	mov VM_REG_155,t1552
	mov VM_REG_E8,t1551
b-140941666
b-140941666
b-14094166e
	mov t1566,VM_REG_E0
	mov VM_REG_CE,Extract(t1566,31,0)
	mov VM_REG_D2,0x0
b-140941674
	mov t1567,VM_REG_7A
	mov VM_REG_E8,Extract(t1567,31,0)
	mov VM_REG_EC,0x0
b-14094167a
	mov t1568,VM_REG_E0
	mov t1569,Inc(t1568)
	mov VM_REG_E0,t1569
	mov VM_REG_E4,0x0
b-140941682
	mov t1571,VM_REG_CE
	mov t1575,VM_REG_E8
	mov t1576,Shl(t1575, Extract(t1571,7,0))
	mov t1577,FlagsOf(Shl(t1575, Extract(t1571,7,0)))
	mov VM_REG_E8,t1576
	mov VM_REG_EC,0x0
	mov VM_REG_26,t1577
b-14094168b
	mov t1578,VM_REG_E8
	mov t1579,VM_REG_2E
	mov t1580,Sub(t1579, 0x8)
	mov VM_REG_2E,t1580
	mov qword ptr ds:[Add(stack, -0x8)],t1578
b-140941691
	mov t1585,VM_REG_26
	mov t1586,VM_REG_2E
	mov t1587,Sub(t1586, 0x8)
	mov VM_REG_2E,t1587
	mov qword ptr ds:[Add(stack, -0x8)],t1585
b-14094169b
	mov t1589,VM_REG_E8
	mov t1590,VM_REG_2E
	mov t1591,Sub(t1590, 0x8)
	mov VM_REG_2E,t1591
	mov qword ptr ds:[Add(stack, -0x8)],t1589
b-1409416a1
	mov t1593,VM_REG_CE
	mov t1594,VM_REG_2E
	mov t1595,Sub(t1594, 0x8)
	mov VM_REG_2E,t1595
	mov qword ptr ds:[Add(stack, -0x8)],t1593
b-1409416a7
	mov t1597,VM_REG_B7
	mov t1598,VM_REG_2E
	mov t1599,Sub(t1598, 0x8)
	mov VM_REG_2E,t1599
	mov qword ptr ds:[Add(stack, -0x8)],t1597
b-1409416af
	mov t1601,VM_REG_155
	mov t1602,VM_REG_2E
	mov t1603,Sub(t1602, 0x8)
	mov VM_REG_2E,t1603
	mov qword ptr ds:[Add(stack, -0x8)],t1601
b-1409416b7
	mov t1605,VM_REG_131
	mov t1606,VM_REG_2E
	mov t1607,Sub(t1606, 0x8)
	mov VM_REG_2E,t1607
	mov qword ptr ds:[Add(stack, -0x8)],t1605
b-1409416bd
	mov t1609,VM_REG_64
	mov t1610,VM_REG_2E
	mov t1611,Sub(t1610, 0x8)
	mov VM_REG_2E,t1611
	mov qword ptr ds:[Add(stack, -0x8)],t1609
b-1409416c3
	mov t1613,VM_REG_15D
	mov t1614,VM_REG_2E
	mov t1615,Sub(t1614, 0x8)
	mov VM_REG_2E,t1615
	mov qword ptr ds:[Add(stack, -0x8)],t1613
b-1409416c9
	mov t1617,VM_REG_10D
	mov t1618,VM_REG_2E
	mov t1619,Sub(t1618, 0x8)
	mov VM_REG_2E,t1619
	mov qword ptr ds:[Add(stack, -0x8)],t1617
b-1409416cf
	mov t1621,VM_REG_105
	mov t1622,VM_REG_2E
	mov t1623,Sub(t1622, 0x8)
	mov VM_REG_2E,t1623
	mov qword ptr ds:[Add(stack, -0x8)],t1621
b-1409416d5
	mov t1625,VM_REG_5C
	mov t1626,VM_REG_2E
	mov t1627,Sub(t1626, 0x8)
	mov VM_REG_2E,t1627
	mov qword ptr ds:[Add(stack, -0x8)],t1625
b-1409416db
	mov t1629,VM_REG_10
	mov t1630,VM_REG_2E
	mov t1631,Sub(t1630, 0x8)
	mov VM_REG_2E,t1631
	mov qword ptr ds:[Add(stack, -0x8)],t1629
b-1409416e1
	mov t1633,VM_REG_7A
	mov t1634,VM_REG_2E
	mov t1635,Sub(t1634, 0x8)
	mov VM_REG_2E,t1635
	mov qword ptr ds:[Add(stack, -0x8)],t1633
b-1409416e7
	mov t1637,VM_REG_C3
	mov t1638,VM_REG_2E
	mov t1639,Sub(t1638, 0x8)
	mov VM_REG_2E,t1639
	mov qword ptr ds:[Add(stack, -0x8)],t1637
b-1409416ef
	mov t1641,VM_REG_E0
	mov t1642,VM_REG_2E
	mov t1643,Sub(t1642, 0x8)
	mov VM_REG_2E,t1643
	mov qword ptr ds:[Add(stack, -0x8)],t1641
b-1409416f5
	mov t1645,VM_REG_97
	mov t1646,VM_REG_2E
	mov t1647,Sub(t1646, 0x8)
	mov VM_REG_2E,t1647
	mov qword ptr ds:[Add(stack, -0x8)],t1645
b-1409416fd
	mov t1649,VM_REG_97
	mov t1650,VM_REG_E0
	mov t1651,VM_REG_C3
	mov t1652,VM_REG_7A
	mov t1653,VM_REG_10
	mov t1654,VM_REG_5C
	mov t1655,VM_REG_105
	mov t1656,VM_REG_10D
	mov VM_REG_10D,t1656
	mov VM_REG_105,t1655
	mov VM_REG_5C,t1654
	mov VM_REG_10,t1653
	mov VM_REG_7A,t1652
	mov VM_REG_C3,t1651
	mov VM_REG_E0,t1650
	mov VM_REG_97,t1649
b-14094171f
	mov t1665,VM_REG_E8
	mov t1666,VM_REG_155
	mov t1667,VM_REG_CE
	mov t1668,VM_REG_B7
	mov t1669,VM_REG_64
	mov t1670,VM_REG_15D
	mov VM_REG_15D,t1670
	mov VM_REG_64,t1669
	mov VM_REG_B7,t1668
	mov VM_REG_CE,t1667
	mov VM_REG_155,t1666
	mov VM_REG_E8,t1665
b-140941739
b-14094173b
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
	movsxd rdx, eax
b-140941748
b-140941748
b-140941750
	mov VM_REG_2E,rsp
b-140941760
	mov t1683,VM_REG_15D
	mov t1684,VM_REG_155
	mov VM_REG_15D,t1684
	mov VM_REG_155,t1683
	mov VM_REG_97,topofstack
	mov t1690,VM_REG_2E
	mov t1691,Add(t1690, 0x8)
	mov VM_REG_2E,t1691
b-14094176e
	mov t1693,VM_REG_C3
	mov t1694,VM_REG_10
	mov VM_REG_C3,t1694
	mov VM_REG_10,t1693
	mov VM_REG_E0,topofstack
	mov t1700,VM_REG_2E
	mov t1701,Add(t1700, 0x8)
	mov VM_REG_2E,t1701
b-14094177c
	mov VM_REG_10,topofstack
	mov t1703,VM_REG_2E
	mov t1704,Add(t1703, 0x8)
	mov VM_REG_2E,t1704
b-140941784
	mov t1706,VM_REG_7A
	mov t1707,VM_REG_97
	mov VM_REG_7A,t1707
	mov VM_REG_97,t1706
	mov VM_REG_97,topofstack
	mov t1713,VM_REG_2E
	mov t1714,Add(t1713, 0x8)
	mov VM_REG_2E,t1714
b-140941792
	mov VM_REG_C3,topofstack
	mov t1716,VM_REG_2E
	mov t1717,Add(t1716, 0x8)
	mov VM_REG_2E,t1717
b-14094179a
	mov t1719,VM_REG_97
	mov t1720,VM_REG_C3
	mov VM_REG_97,t1720
	mov VM_REG_C3,t1719
	mov VM_REG_5C,topofstack
	mov t1726,VM_REG_2E
	mov t1727,Add(t1726, 0x8)
	mov VM_REG_2E,t1727
b-1409417a8
	mov t1729,VM_REG_CE
	mov t1730,VM_REG_B7
	mov VM_REG_CE,t1730
	mov VM_REG_B7,t1729
	mov VM_REG_105,topofstack
	mov t1736,VM_REG_2E
	mov t1737,Add(t1736, 0x8)
	mov VM_REG_2E,t1737
b-1409417b6
	mov t1739,VM_REG_10
	mov t1740,VM_REG_97
	mov VM_REG_10,t1740
	mov VM_REG_97,t1739
	mov VM_REG_10D,topofstack
	mov t1746,VM_REG_2E
	mov t1747,Add(t1746, 0x8)
	mov VM_REG_2E,t1747
b-1409417c4
	mov VM_REG_155,topofstack
	mov t1749,VM_REG_2E
	mov t1750,Add(t1749, 0x8)
	mov VM_REG_2E,t1750
b-1409417cc
	mov VM_REG_64,topofstack
	mov t1752,VM_REG_2E
	mov t1753,Add(t1752, 0x8)
	mov VM_REG_2E,t1753
b-1409417d4
	mov t1755,VM_REG_CE
	mov t1756,VM_REG_E8
	mov VM_REG_CE,t1756
	mov VM_REG_E8,t1755
	mov VM_REG_131,topofstack
	mov t1762,VM_REG_2E
	mov t1763,Add(t1762, 0x8)
	mov VM_REG_2E,t1763
b-1409417e2
	mov t1765,VM_REG_C3
	mov t1766,VM_REG_5C
	mov VM_REG_C3,t1766
	mov VM_REG_5C,t1765
	mov VM_REG_15D,topofstack
	mov t1772,VM_REG_2E
	mov t1773,Add(t1772, 0x8)
	mov VM_REG_2E,t1773
b-1409417f0
	mov VM_REG_15D,topofstack
	mov t1775,VM_REG_2E
	mov t1776,Add(t1775, 0x8)
	mov VM_REG_2E,t1776
b-1409417f8
	mov VM_REG_E8,topofstack
	mov t1778,VM_REG_2E
	mov t1779,Add(t1778, 0x8)
	mov VM_REG_2E,t1779
b-140941800
	mov t1781,VM_REG_155
	mov t1782,VM_REG_B7
	mov VM_REG_155,t1782
	mov VM_REG_B7,t1781
	mov VM_REG_155,topofstack
	mov t1788,VM_REG_2E
	mov t1789,Add(t1788, 0x8)
	mov VM_REG_2E,t1789
b-14094180e
	mov t1791,VM_REG_10
	mov t1792,VM_REG_5C
	mov VM_REG_10,t1792
	mov VM_REG_5C,t1791
	mov VM_REG_CE,topofstack
	mov t1798,VM_REG_2E
	mov t1799,Add(t1798, 0x8)
	mov VM_REG_2E,t1799
b-14094181c
	mov VM_REG_26,topofstack
	mov t1802,VM_REG_2E
	mov t1803,Add(t1802, 0x8)
	mov VM_REG_2E,t1803
b-140941822
	mov t1805,VM_REG_2E
	mov t1806,Add(t1805, 0x10)
	mov VM_REG_2E,t1806
b-140941827
	mov t1808,VM_REG_97
	mov t1809,word ptr ds:[t1808]
	mov VM_REG_CE,ZeroExtend(t1809)
	mov VM_REG_D2,0x0
b-140941831
	mov t1823,VM_REG_97
	mov VM_REG_14D,t1823
b-14094183d
	mov t1827,VM_REG_14D
	mov t1828,Add(t1827, 0x2)
	mov VM_REG_14D,t1828
b-140941845
	mov t1830,VM_REG_14D
	mov VM_REG_97,t1830
b-140941851
	mov t1834,VM_REG_E8
	mov t1835,VM_REG_7A
	mov t1836,Imul(t1835, t1834)
	mov t1837,FlagsOf(Imul(t1835, t1834))
	mov VM_REG_7A,t1836
	mov VM_REG_26,t1837
b-140941860
	mov t1838,VM_REG_CE
	mov t1839,VM_REG_2E
	mov t1840,Sub(t1839, 0x8)
	mov VM_REG_2E,t1840
	mov qword ptr ds:[Add(stack, -0x8)],t1838
b-140941866
	mov t1845,VM_REG_26
	mov t1846,VM_REG_2E
	mov t1847,Sub(t1846, 0x8)
	mov VM_REG_2E,t1847
	mov qword ptr ds:[Add(stack, -0x8)],t1845
b-140941870
	mov t1849,VM_REG_CE
	mov t1850,VM_REG_2E
	mov t1851,Sub(t1850, 0x8)
	mov VM_REG_2E,t1851
	mov qword ptr ds:[Add(stack, -0x8)],t1849
b-140941876
	mov t1853,VM_REG_155
	mov t1854,VM_REG_2E
	mov t1855,Sub(t1854, 0x8)
	mov VM_REG_2E,t1855
	mov qword ptr ds:[Add(stack, -0x8)],t1853
b-14094187c
	mov t1857,VM_REG_E8
	mov t1858,VM_REG_2E
	mov t1859,Sub(t1858, 0x8)
	mov VM_REG_2E,t1859
	mov qword ptr ds:[Add(stack, -0x8)],t1857
b-140941882
	mov t1861,VM_REG_15D
	mov t1862,VM_REG_2E
	mov t1863,Sub(t1862, 0x8)
	mov VM_REG_2E,t1863
	mov qword ptr ds:[Add(stack, -0x8)],t1861
b-140941888
	mov t1865,VM_REG_131
	mov t1866,VM_REG_2E
	mov t1867,Sub(t1866, 0x8)
	mov VM_REG_2E,t1867
	mov qword ptr ds:[Add(stack, -0x8)],t1865
b-140941890
	mov t1869,VM_REG_64
	mov t1870,VM_REG_2E
	mov t1871,Sub(t1870, 0x8)
	mov VM_REG_2E,t1871
	mov qword ptr ds:[Add(stack, -0x8)],t1869
b-140941896
	mov t1873,VM_REG_B7
	mov t1874,VM_REG_2E
	mov t1875,Sub(t1874, 0x8)
	mov VM_REG_2E,t1875
	mov qword ptr ds:[Add(stack, -0x8)],t1873
b-14094189c
	mov t1877,VM_REG_10D
	mov t1878,VM_REG_2E
	mov t1879,Sub(t1878, 0x8)
	mov VM_REG_2E,t1879
	mov qword ptr ds:[Add(stack, -0x8)],t1877
b-1409418a2
	mov t1881,VM_REG_105
	mov t1882,VM_REG_2E
	mov t1883,Sub(t1882, 0x8)
	mov VM_REG_2E,t1883
	mov qword ptr ds:[Add(stack, -0x8)],t1881
b-1409418a8
	mov t1885,VM_REG_C3
	mov t1886,VM_REG_2E
	mov t1887,Sub(t1886, 0x8)
	mov VM_REG_2E,t1887
	mov qword ptr ds:[Add(stack, -0x8)],t1885
b-1409418ae
	mov t1889,VM_REG_5C
	mov t1890,VM_REG_2E
	mov t1891,Sub(t1890, 0x8)
	mov VM_REG_2E,t1891
	mov qword ptr ds:[Add(stack, -0x8)],t1889
b-1409418b6
	mov t1893,VM_REG_10
	mov t1894,VM_REG_2E
	mov t1895,Sub(t1894, 0x8)
	mov VM_REG_2E,t1895
	mov qword ptr ds:[Add(stack, -0x8)],t1893
b-1409418bc
	mov t1897,VM_REG_97
	mov t1898,VM_REG_2E
	mov t1899,Sub(t1898, 0x8)
	mov VM_REG_2E,t1899
	mov qword ptr ds:[Add(stack, -0x8)],t1897
b-1409418c4
	mov t1901,VM_REG_E0
	mov t1902,VM_REG_2E
	mov t1903,Sub(t1902, 0x8)
	mov VM_REG_2E,t1903
	mov qword ptr ds:[Add(stack, -0x8)],t1901
b-1409418ca
	mov t1905,VM_REG_7A
	mov t1906,VM_REG_2E
	mov t1907,Sub(t1906, 0x8)
	mov VM_REG_2E,t1907
	mov qword ptr ds:[Add(stack, -0x8)],t1905
b-1409418d2
	mov t1909,VM_REG_7A
	mov t1910,VM_REG_E0
	mov t1911,VM_REG_97
	mov t1912,VM_REG_10
	mov t1913,VM_REG_5C
	mov t1914,VM_REG_C3
	mov t1915,VM_REG_105
	mov t1916,VM_REG_10D
	mov VM_REG_10D,t1916
	mov VM_REG_105,t1915
	mov VM_REG_5C,t1914
	mov VM_REG_10,t1913
	mov VM_REG_7A,t1912
	mov VM_REG_C3,t1911
	mov VM_REG_E0,t1910
	mov VM_REG_97,t1909
b-1409418f4
	mov t1925,VM_REG_CE
	mov t1926,VM_REG_15D
	mov t1927,VM_REG_155
	mov t1928,VM_REG_E8
	mov t1929,VM_REG_64
	mov t1930,VM_REG_B7
	mov VM_REG_15D,t1930
	mov VM_REG_64,t1929
	mov VM_REG_B7,t1928
	mov VM_REG_CE,t1927
	mov VM_REG_155,t1926
	mov VM_REG_E8,t1925
b-14094190e
b-140941910
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
	imul eax, eax, 0x4c49f128
b-14094191d
b-14094191d
b-140941923
	mov VM_REG_2E,rsp
b-14094192b
	mov VM_REG_97,topofstack
	mov t1937,VM_REG_2E
	mov t1938,Add(t1937, 0x8)
	mov VM_REG_2E,t1938
b-140941933
	mov VM_REG_E0,topofstack
	mov t1940,VM_REG_2E
	mov t1941,Add(t1940, 0x8)
	mov VM_REG_2E,t1941
b-14094193b
	mov t1943,VM_REG_155
	mov t1944,VM_REG_E8
	mov VM_REG_155,t1944
	mov VM_REG_E8,t1943
	mov VM_REG_C3,topofstack
	mov t1950,VM_REG_2E
	mov t1951,Add(t1950, 0x8)
	mov VM_REG_2E,t1951
b-140941949
	mov VM_REG_7A,topofstack
	mov t1953,VM_REG_2E
	mov t1954,Add(t1953, 0x8)
	mov VM_REG_2E,t1954
b-140941951
	mov t1956,VM_REG_155
	mov t1957,VM_REG_CE
	mov VM_REG_155,t1957
	mov VM_REG_CE,t1956
	mov VM_REG_10,topofstack
	mov t1963,VM_REG_2E
	mov t1964,Add(t1963, 0x8)
	mov VM_REG_2E,t1964
b-14094195f
	mov VM_REG_5C,topofstack
	mov t1966,VM_REG_2E
	mov t1967,Add(t1966, 0x8)
	mov VM_REG_2E,t1967
b-140941967
	mov t1969,VM_REG_15D
	mov t1970,VM_REG_64
	mov VM_REG_15D,t1970
	mov VM_REG_64,t1969
	mov VM_REG_105,topofstack
	mov t1976,VM_REG_2E
	mov t1977,Add(t1976, 0x8)
	mov VM_REG_2E,t1977
b-140941975
	mov VM_REG_10D,topofstack
	mov t1979,VM_REG_2E
	mov t1980,Add(t1979, 0x8)
	mov VM_REG_2E,t1980
b-14094197d
	mov VM_REG_64,topofstack
	mov t1982,VM_REG_2E
	mov t1983,Add(t1982, 0x8)
	mov VM_REG_2E,t1983
b-140941985
	mov t1985,VM_REG_105
	mov t1986,VM_REG_E0
	mov VM_REG_105,t1986
	mov VM_REG_E0,t1985
	mov VM_REG_15D,topofstack
	mov t1992,VM_REG_2E
	mov t1993,Add(t1992, 0x8)
	mov VM_REG_2E,t1993
b-140941993
	mov t1995,VM_REG_B7
	mov t1996,VM_REG_15D
	mov VM_REG_B7,t1996
	mov VM_REG_15D,t1995
	mov VM_REG_131,topofstack
	mov t2002,VM_REG_2E
	mov t2003,Add(t2002, 0x8)
	mov VM_REG_2E,t2003
b-1409419a1
	mov VM_REG_E8,topofstack
	mov t2005,VM_REG_2E
	mov t2006,Add(t2005, 0x8)
	mov VM_REG_2E,t2006
b-1409419a9
	mov t2008,VM_REG_155
	mov t2009,VM_REG_155
	mov VM_REG_155,t2009
	mov VM_REG_155,t2008
	mov VM_REG_E8,topofstack
	mov t2015,VM_REG_2E
	mov t2016,Add(t2015, 0x8)
	mov VM_REG_2E,t2016
b-1409419b7
	mov t2018,VM_REG_C3
	mov t2019,VM_REG_10
	mov VM_REG_C3,t2019
	mov VM_REG_10,t2018
	mov VM_REG_15D,topofstack
	mov t2025,VM_REG_2E
	mov t2026,Add(t2025, 0x8)
	mov VM_REG_2E,t2026
b-1409419c5
	mov t2028,VM_REG_B7
	mov t2029,VM_REG_B7
	mov VM_REG_B7,t2029
	mov VM_REG_B7,t2028
	mov VM_REG_155,topofstack
	mov t2035,VM_REG_2E
	mov t2036,Add(t2035, 0x8)
	mov VM_REG_2E,t2036
b-1409419d3
	mov t2038,VM_REG_10
	mov t2039,VM_REG_7A
	mov VM_REG_10,t2039
	mov VM_REG_7A,t2038
	mov VM_REG_CE,topofstack
	mov t2045,VM_REG_2E
	mov t2046,Add(t2045, 0x8)
	mov VM_REG_2E,t2046
b-1409419e1
	mov VM_REG_26,topofstack
	mov t2049,VM_REG_2E
	mov t2050,Add(t2049, 0x8)
	mov VM_REG_2E,t2050
b-1409419e7
	mov t2052,VM_REG_2E
	mov t2053,Add(t2052, 0x10)
	mov VM_REG_2E,t2053
b-1409419ec
	mov t2055,VM_REG_CE
	mov t2056,VM_REG_2E
	mov t2057,Sub(t2056, 0x8)
	mov VM_REG_2E,t2057
	mov qword ptr ds:[Add(stack, -0x8)],t2055
b-1409419f2
	mov t2062,VM_REG_26
	mov t2063,VM_REG_2E
	mov t2064,Sub(t2063, 0x8)
	mov VM_REG_2E,t2064
	mov qword ptr ds:[Add(stack, -0x8)],t2062
b-1409419fc
	mov t2066,VM_REG_CE
	mov t2067,VM_REG_2E
	mov t2068,Sub(t2067, 0x8)
	mov VM_REG_2E,t2068
	mov qword ptr ds:[Add(stack, -0x8)],t2066
b-140941a02
	mov t2070,VM_REG_155
	mov t2071,VM_REG_2E
	mov t2072,Sub(t2071, 0x8)
	mov VM_REG_2E,t2072
	mov qword ptr ds:[Add(stack, -0x8)],t2070
b-140941a08
	mov t2074,VM_REG_15D
	mov t2075,VM_REG_2E
	mov t2076,Sub(t2075, 0x8)
	mov VM_REG_2E,t2076
	mov qword ptr ds:[Add(stack, -0x8)],t2074
b-140941a0e
	mov t2078,VM_REG_E8
	mov t2079,VM_REG_2E
	mov t2080,Sub(t2079, 0x8)
	mov VM_REG_2E,t2080
	mov qword ptr ds:[Add(stack, -0x8)],t2078
b-140941a16
	mov t2082,VM_REG_131
	mov t2083,VM_REG_2E
	mov t2084,Sub(t2083, 0x8)
	mov VM_REG_2E,t2084
	mov qword ptr ds:[Add(stack, -0x8)],t2082
b-140941a1c
	mov t2086,VM_REG_B7
	mov t2087,VM_REG_2E
	mov t2088,Sub(t2087, 0x8)
	mov VM_REG_2E,t2088
	mov qword ptr ds:[Add(stack, -0x8)],t2086
b-140941a24
	mov t2090,VM_REG_64
	mov t2091,VM_REG_2E
	mov t2092,Sub(t2091, 0x8)
	mov VM_REG_2E,t2092
	mov qword ptr ds:[Add(stack, -0x8)],t2090
b-140941a2c
	mov t2094,VM_REG_10D
	mov t2095,VM_REG_2E
	mov t2096,Sub(t2095, 0x8)
	mov VM_REG_2E,t2096
	mov qword ptr ds:[Add(stack, -0x8)],t2094
b-140941a32
	mov t2098,VM_REG_E0
	mov t2099,VM_REG_2E
	mov t2100,Sub(t2099, 0x8)
	mov VM_REG_2E,t2100
	mov qword ptr ds:[Add(stack, -0x8)],t2098
b-140941a38
	mov t2102,VM_REG_5C
	mov t2103,VM_REG_2E
	mov t2104,Sub(t2103, 0x8)
	mov VM_REG_2E,t2104
	mov qword ptr ds:[Add(stack, -0x8)],t2102
b-140941a3e
	mov t2106,VM_REG_C3
	mov t2107,VM_REG_2E
	mov t2108,Sub(t2107, 0x8)
	mov VM_REG_2E,t2108
	mov qword ptr ds:[Add(stack, -0x8)],t2106
b-140941a46
	mov t2110,VM_REG_10
	mov t2111,VM_REG_2E
	mov t2112,Sub(t2111, 0x8)
	mov VM_REG_2E,t2112
	mov qword ptr ds:[Add(stack, -0x8)],t2110
b-140941a4e
	mov t2114,VM_REG_7A
	mov t2115,VM_REG_2E
	mov t2116,Sub(t2115, 0x8)
	mov VM_REG_2E,t2116
	mov qword ptr ds:[Add(stack, -0x8)],t2114
b-140941a54
	mov t2118,VM_REG_105
	mov t2119,VM_REG_2E
	mov t2120,Sub(t2119, 0x8)
	mov VM_REG_2E,t2120
	mov qword ptr ds:[Add(stack, -0x8)],t2118
b-140941a5c
	mov t2122,VM_REG_97
	mov t2123,VM_REG_2E
	mov t2124,Sub(t2123, 0x8)
	mov VM_REG_2E,t2124
	mov qword ptr ds:[Add(stack, -0x8)],t2122
b-140941a64
	mov t2126,VM_REG_97
	mov t2127,VM_REG_105
	mov t2128,VM_REG_7A
	mov t2129,VM_REG_10
	mov t2130,VM_REG_C3
	mov t2131,VM_REG_5C
	mov t2132,VM_REG_E0
	mov t2133,VM_REG_10D
	mov VM_REG_10D,t2133
	mov VM_REG_105,t2132
	mov VM_REG_5C,t2131
	mov VM_REG_10,t2130
	mov VM_REG_7A,t2129
	mov VM_REG_C3,t2128
	mov VM_REG_E0,t2127
	mov VM_REG_97,t2126
b-140941a86
	mov t2142,VM_REG_CE
	mov t2143,VM_REG_E8
	mov t2144,VM_REG_155
	mov t2145,VM_REG_15D
	mov t2146,VM_REG_B7
	mov t2147,VM_REG_64
	mov VM_REG_15D,t2147
	mov VM_REG_64,t2146
	mov VM_REG_B7,t2145
	mov VM_REG_CE,t2144
	mov VM_REG_155,t2143
	mov VM_REG_E8,t2142
b-140941aa0
b-140941aa2
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
	cdqe 
b-140941aaf
b-140941aaf
b-140941ab7
	mov VM_REG_2E,rsp
b-140941abf
	mov t2157,VM_REG_7A
	mov t2158,VM_REG_105
	mov VM_REG_7A,t2158
	mov VM_REG_105,t2157
	mov VM_REG_97,topofstack
	mov t2164,VM_REG_2E
	mov t2165,Add(t2164, 0x8)
	mov VM_REG_2E,t2165
b-140941acd
	mov VM_REG_E0,topofstack
	mov t2167,VM_REG_2E
	mov t2168,Add(t2167, 0x8)
	mov VM_REG_2E,t2168
b-140941ad5
	mov t2170,VM_REG_10D
	mov t2171,VM_REG_105
	mov VM_REG_10D,t2171
	mov VM_REG_105,t2170
	mov VM_REG_C3,topofstack
	mov t2177,VM_REG_2E
	mov t2178,Add(t2177, 0x8)
	mov VM_REG_2E,t2178
b-140941ae3
	mov VM_REG_10D,topofstack
	mov t2180,VM_REG_2E
	mov t2181,Add(t2180, 0x8)
	mov VM_REG_2E,t2181
b-140941aeb
	mov t2183,VM_REG_10
	mov t2184,VM_REG_10D
	mov VM_REG_10,t2184
	mov VM_REG_10D,t2183
	mov VM_REG_10D,topofstack
	mov t2190,VM_REG_2E
	mov t2191,Add(t2190, 0x8)
	mov VM_REG_2E,t2191
b-140941af9
	mov t2193,VM_REG_CE
	mov t2194,VM_REG_155
	mov VM_REG_CE,t2194
	mov VM_REG_155,t2193
	mov VM_REG_5C,topofstack
	mov t2200,VM_REG_2E
	mov t2201,Add(t2200, 0x8)
	mov VM_REG_2E,t2201
b-140941b07
	mov VM_REG_7A,topofstack
	mov t2203,VM_REG_2E
	mov t2204,Add(t2203, 0x8)
	mov VM_REG_2E,t2204
b-140941b0f
	mov VM_REG_105,topofstack
	mov t2206,VM_REG_2E
	mov t2207,Add(t2206, 0x8)
	mov VM_REG_2E,t2207
b-140941b17
	mov t2209,VM_REG_C3
	mov t2210,VM_REG_105
	mov VM_REG_C3,t2210
	mov VM_REG_105,t2209
	mov VM_REG_15D,topofstack
	mov t2216,VM_REG_2E
	mov t2217,Add(t2216, 0x8)
	mov VM_REG_2E,t2217
b-140941b25
	mov VM_REG_64,topofstack
	mov t2219,VM_REG_2E
	mov t2220,Add(t2219, 0x8)
	mov VM_REG_2E,t2220
b-140941b2d
	mov t2222,VM_REG_10D
	mov t2223,VM_REG_C3
	mov VM_REG_10D,t2223
	mov VM_REG_C3,t2222
	mov VM_REG_131,topofstack
	mov t2229,VM_REG_2E
	mov t2230,Add(t2229, 0x8)
	mov VM_REG_2E,t2230
b-140941b3b
	mov t2232,VM_REG_CE
	mov t2233,VM_REG_64
	mov VM_REG_CE,t2233
	mov VM_REG_64,t2232
	mov VM_REG_64,topofstack
	mov t2239,VM_REG_2E
	mov t2240,Add(t2239, 0x8)
	mov VM_REG_2E,t2240
b-140941b49
	mov t2242,VM_REG_10
	mov t2243,VM_REG_105
	mov VM_REG_10,t2243
	mov VM_REG_105,t2242
	mov VM_REG_64,topofstack
	mov t2249,VM_REG_2E
	mov t2250,Add(t2249, 0x8)
	mov VM_REG_2E,t2250
b-140941b57
	mov t2252,VM_REG_15D
	mov t2253,VM_REG_E8
	mov VM_REG_15D,t2253
	mov VM_REG_E8,t2252
	mov VM_REG_B7,topofstack
	mov t2259,VM_REG_2E
	mov t2260,Add(t2259, 0x8)
	mov VM_REG_2E,t2260
b-140941b65
	mov VM_REG_155,topofstack
	mov t2262,VM_REG_2E
	mov t2263,Add(t2262, 0x8)
	mov VM_REG_2E,t2263
b-140941b6d
	mov t2265,VM_REG_E8
	mov t2266,VM_REG_64
	mov VM_REG_E8,t2266
	mov VM_REG_64,t2265
	mov VM_REG_15D,topofstack
	mov t2272,VM_REG_2E
	mov t2273,Add(t2272, 0x8)
	mov VM_REG_2E,t2273
b-140941b7b
	mov VM_REG_26,topofstack
	mov t2276,VM_REG_2E
	mov t2277,Add(t2276, 0x8)
	mov VM_REG_2E,t2277
b-140941b81
	mov t2279,VM_REG_2E
	mov t2280,Add(t2279, 0x10)
	mov VM_REG_2E,t2280
b-140941b86
	mov t2282,VM_REG_15D
	mov t2283,VM_REG_97
	mov t2284,Xor(t2283, t2282)
	mov t2285,FlagsOf(Xor(t2283, t2282))
	mov VM_REG_97,t2284
	mov VM_REG_26,t2285
b-140941b93
	mov t2286,VM_REG_2E
	mov VM_REG_14D,t2286
b-140941b9d
	mov t2292,VM_REG_14D
	mov t2293,Add(t2292, 0x450)
	mov VM_REG_14D,t2293
b-140941bab
	mov t2295,VM_REG_14D
	mov t2296,dword ptr ds:[t2295]
	mov t2297,VM_REG_E0
	mov t2298,Cmp(t2297, t2296)
	mov VM_REG_26,t2298
b-140941bb4
	mov t2299,VM_REG_97
	mov t2300,VM_REG_E0
	mov t2301,VM_REG_10
	mov t2302,VM_REG_105
	mov t2303,VM_REG_C3
	mov t2304,VM_REG_5C
	mov t2305,VM_REG_7A
	mov t2306,VM_REG_10D
	mov VM_REG_10D,t2306
	mov VM_REG_105,t2305
	mov VM_REG_5C,t2304
	mov VM_REG_10,t2303
	mov VM_REG_7A,t2302
	mov VM_REG_C3,t2301
	mov VM_REG_E0,t2300
	mov VM_REG_97,t2299
b-140941bd6
	mov t2315,VM_REG_15D
	mov t2316,VM_REG_E8
	mov t2317,VM_REG_155
	mov t2318,VM_REG_B7
	mov t2319,VM_REG_CE
	mov t2320,VM_REG_64
	mov VM_REG_15D,t2320
	mov VM_REG_64,t2319
	mov VM_REG_B7,t2318
	mov VM_REG_CE,t2317
	mov VM_REG_155,t2316
	mov VM_REG_E8,t2315
b-140941bf0
	jcc b-140941666
b-140941bfd
b-140941bfd
	mov t2333,VM_REG_97
	mov t2334,VM_REG_E0
	mov t2335,VM_REG_C3
	mov t2336,VM_REG_7A
	mov t2337,VM_REG_10
	mov t2338,VM_REG_5C
	mov t2339,VM_REG_105
	mov t2340,VM_REG_10D
	mov VM_REG_10D,t2340
	mov VM_REG_105,t2339
	mov VM_REG_5C,t2338
	mov VM_REG_10,t2337
	mov VM_REG_7A,t2336
	mov VM_REG_C3,t2335
	mov VM_REG_E0,t2334
	mov VM_REG_97,t2333
b-140941c1f
	mov t2349,VM_REG_E8
	mov t2350,VM_REG_155
	mov t2351,VM_REG_CE
	mov t2352,VM_REG_B7
	mov t2353,VM_REG_64
	mov t2354,VM_REG_15D
	mov VM_REG_15D,t2354
	mov VM_REG_64,t2353
	mov VM_REG_B7,t2352
	mov VM_REG_CE,t2351
	mov VM_REG_155,t2350
	mov VM_REG_E8,t2349
b-140941c39
b-140941c39
b-140941c3f
	mov VM_REG_82,0x4271e90d
	mov VM_REG_86,0xc5a875e
b-140941c4b
	mov t2361,VM_REG_82
	mov VM_REG_E0,t2361
b-140941c55
	mov t2373,VM_REG_2E
	mov VM_REG_14D,t2373
b-140941c61
	mov t2378,VM_REG_14D
	mov t2379,Add(t2378, 0x230)
	mov VM_REG_14D,t2379
b-140941c69
	mov t2381,VM_REG_14D
	mov VM_REG_CE,t2381
b-140941c75
	mov VM_REG_B7,0x104
	mov VM_REG_BB,0x0
b-140941c7d
	mov t2385,VM_REG_97
	mov t2386,VM_REG_E0
	mov t2387,Add(t2386, t2385)
	mov t2388,FlagsOf(Add(t2386, t2385))
	mov VM_REG_E0,t2387
	mov VM_REG_26,t2388
b-140941c86
	mov t2389,VM_REG_155
	mov t2390,VM_REG_E8
	mov VM_REG_155,t2390
	mov VM_REG_E8,t2389
	mov VM_REG_14D,0x1de0
b-140941c92
	mov t2393,VM_REG_97
	mov t2394,VM_REG_5C
	mov VM_REG_97,t2394
	mov VM_REG_5C,t2393
	mov t2397,VM_REG_14D
	mov t2398,Add(t2397, 0x140000000)
	mov VM_REG_14D,t2398
b-140941c9c
	mov t2400,VM_REG_14D
	mov t2401,Add(t2400, 0xdae0)
	mov VM_REG_14D,t2401
b-140941caa
	mov t2409,VM_REG_14D
	mov VM_REG_5C,t2409
b-140941cb6
	mov t2414,VM_REG_155
	mov t2415,VM_REG_2E
	mov t2416,Sub(t2415, 0x8)
	mov VM_REG_2E,t2416
	mov qword ptr ds:[Add(stack, -0x8)],t2414
b-140941cbe
	mov t2421,VM_REG_26
	mov t2422,VM_REG_2E
	mov t2423,Sub(t2422, 0x8)
	mov VM_REG_2E,t2423
	mov qword ptr ds:[Add(stack, -0x8)],t2421
b-140941cc8
	mov t2425,VM_REG_155
	mov t2426,VM_REG_2E
	mov t2427,Sub(t2426, 0x8)
	mov VM_REG_2E,t2427
	mov qword ptr ds:[Add(stack, -0x8)],t2425
b-140941cce
	mov t2429,VM_REG_CE
	mov t2430,VM_REG_2E
	mov t2431,Sub(t2430, 0x8)
	mov VM_REG_2E,t2431
	mov qword ptr ds:[Add(stack, -0x8)],t2429
b-140941cd6
	mov t2433,VM_REG_B7
	mov t2434,VM_REG_2E
	mov t2435,Sub(t2434, 0x8)
	mov VM_REG_2E,t2435
	mov qword ptr ds:[Add(stack, -0x8)],t2433
b-140941cdc
	mov t2437,VM_REG_E8
	mov t2438,VM_REG_2E
	mov t2439,Sub(t2438, 0x8)
	mov VM_REG_2E,t2439
	mov qword ptr ds:[Add(stack, -0x8)],t2437
b-140941ce2
	mov t2441,VM_REG_131
	mov t2442,VM_REG_2E
	mov t2443,Sub(t2442, 0x8)
	mov VM_REG_2E,t2443
	mov qword ptr ds:[Add(stack, -0x8)],t2441
b-140941cea
	mov t2445,VM_REG_64
	mov t2446,VM_REG_2E
	mov t2447,Sub(t2446, 0x8)
	mov VM_REG_2E,t2447
	mov qword ptr ds:[Add(stack, -0x8)],t2445
b-140941cf0
	mov t2449,VM_REG_15D
	mov t2450,VM_REG_2E
	mov t2451,Sub(t2450, 0x8)
	mov VM_REG_2E,t2451
	mov qword ptr ds:[Add(stack, -0x8)],t2449
b-140941cf6
	mov t2453,VM_REG_10D
	mov t2454,VM_REG_2E
	mov t2455,Sub(t2454, 0x8)
	mov VM_REG_2E,t2455
	mov qword ptr ds:[Add(stack, -0x8)],t2453
b-140941cfc
	mov t2457,VM_REG_105
	mov t2458,VM_REG_2E
	mov t2459,Sub(t2458, 0x8)
	mov VM_REG_2E,t2459
	mov qword ptr ds:[Add(stack, -0x8)],t2457
b-140941d04
	mov t2461,VM_REG_97
	mov t2462,VM_REG_2E
	mov t2463,Sub(t2462, 0x8)
	mov VM_REG_2E,t2463
	mov qword ptr ds:[Add(stack, -0x8)],t2461
b-140941d0c
	mov t2465,VM_REG_10
	mov t2466,VM_REG_2E
	mov t2467,Sub(t2466, 0x8)
	mov VM_REG_2E,t2467
	mov qword ptr ds:[Add(stack, -0x8)],t2465
b-140941d12
	mov t2469,VM_REG_7A
	mov t2470,VM_REG_2E
	mov t2471,Sub(t2470, 0x8)
	mov VM_REG_2E,t2471
	mov qword ptr ds:[Add(stack, -0x8)],t2469
b-140941d1a
	mov t2473,VM_REG_C3
	mov t2474,VM_REG_2E
	mov t2475,Sub(t2474, 0x8)
	mov VM_REG_2E,t2475
	mov qword ptr ds:[Add(stack, -0x8)],t2473
b-140941d20
	mov t2477,VM_REG_E0
	mov t2478,VM_REG_2E
	mov t2479,Sub(t2478, 0x8)
	mov VM_REG_2E,t2479
	mov qword ptr ds:[Add(stack, -0x8)],t2477
b-140941d28
	mov t2481,VM_REG_5C
	mov t2482,VM_REG_2E
	mov t2483,Sub(t2482, 0x8)
	mov VM_REG_2E,t2483
	mov qword ptr ds:[Add(stack, -0x8)],t2481
b-140941d30
	mov t2485,VM_REG_5C
	mov t2486,VM_REG_E0
	mov t2487,VM_REG_C3
	mov t2488,VM_REG_7A
	mov t2489,VM_REG_10
	mov t2490,VM_REG_97
	mov t2491,VM_REG_105
	mov t2492,VM_REG_10D
	mov VM_REG_10D,t2492
	mov VM_REG_105,t2491
	mov VM_REG_5C,t2490
	mov VM_REG_10,t2489
	mov VM_REG_7A,t2488
	mov VM_REG_C3,t2487
	mov VM_REG_E0,t2486
	mov VM_REG_97,t2485
b-140941d52
	mov t2501,VM_REG_155
	mov t2502,VM_REG_E8
	mov t2503,VM_REG_CE
	mov t2504,VM_REG_B7
	mov t2505,VM_REG_64
	mov t2506,VM_REG_15D
	mov VM_REG_15D,t2506
	mov VM_REG_64,t2505
	mov VM_REG_B7,t2504
	mov VM_REG_CE,t2503
	mov VM_REG_155,t2502
	mov VM_REG_E8,t2501
b-140941d6c
b-140941d6e
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
	bswap r9
b-140941d7b
b-140941d7b
b-140941d81
	mov VM_REG_2E,rsp
b-140941d91
	mov t2516,VM_REG_7A
	mov t2517,VM_REG_5C
	mov VM_REG_7A,t2517
	mov VM_REG_5C,t2516
	mov VM_REG_97,topofstack
	mov t2523,VM_REG_2E
	mov t2524,Add(t2523, 0x8)
	mov VM_REG_2E,t2524
b-140941d9f
	mov t2526,VM_REG_CE
	mov t2527,VM_REG_CE
	mov VM_REG_CE,t2527
	mov VM_REG_CE,t2526
	mov VM_REG_E0,topofstack
	mov t2533,VM_REG_2E
	mov t2534,Add(t2533, 0x8)
	mov VM_REG_2E,t2534
b-140941dad
	mov VM_REG_C3,topofstack
	mov t2536,VM_REG_2E
	mov t2537,Add(t2536, 0x8)
	mov VM_REG_2E,t2537
b-140941db5
	mov t2539,VM_REG_E8
	mov t2540,VM_REG_155
	mov VM_REG_E8,t2540
	mov VM_REG_155,t2539
	mov VM_REG_5C,topofstack
	mov t2546,VM_REG_2E
	mov t2547,Add(t2546, 0x8)
	mov VM_REG_2E,t2547
b-140941dc3
	mov t2549,VM_REG_10D
	mov t2550,VM_REG_5C
	mov VM_REG_10D,t2550
	mov VM_REG_5C,t2549
	mov VM_REG_10,topofstack
	mov t2556,VM_REG_2E
	mov t2557,Add(t2556, 0x8)
	mov VM_REG_2E,t2557
b-140941dd1
	mov VM_REG_7A,topofstack
	mov t2559,VM_REG_2E
	mov t2560,Add(t2559, 0x8)
	mov VM_REG_2E,t2560
b-140941dd9
	mov VM_REG_105,topofstack
	mov t2562,VM_REG_2E
	mov t2563,Add(t2562, 0x8)
	mov VM_REG_2E,t2563
b-140941de1
	mov t2565,VM_REG_15D
	mov t2566,VM_REG_E8
	mov VM_REG_15D,t2566
	mov VM_REG_E8,t2565
	mov VM_REG_5C,topofstack
	mov t2572,VM_REG_2E
	mov t2573,Add(t2572, 0x8)
	mov VM_REG_2E,t2573
b-140941def
	mov VM_REG_E8,topofstack
	mov t2575,VM_REG_2E
	mov t2576,Add(t2575, 0x8)
	mov VM_REG_2E,t2576
b-140941df7
	mov t2578,VM_REG_CE
	mov t2579,VM_REG_B7
	mov VM_REG_CE,t2579
	mov VM_REG_B7,t2578
	mov VM_REG_64,topofstack
	mov t2585,VM_REG_2E
	mov t2586,Add(t2585, 0x8)
	mov VM_REG_2E,t2586
b-140941e05
	mov VM_REG_131,topofstack
	mov t2588,VM_REG_2E
	mov t2589,Add(t2588, 0x8)
	mov VM_REG_2E,t2589
b-140941e0d
	mov VM_REG_15D,topofstack
	mov t2591,VM_REG_2E
	mov t2592,Add(t2591, 0x8)
	mov VM_REG_2E,t2592
b-140941e15
	mov VM_REG_15D,topofstack
	mov t2594,VM_REG_2E
	mov t2595,Add(t2594, 0x8)
	mov VM_REG_2E,t2595
b-140941e1d
	mov t2597,VM_REG_15D
	mov t2598,VM_REG_64
	mov VM_REG_15D,t2598
	mov VM_REG_64,t2597
	mov VM_REG_CE,topofstack
	mov t2604,VM_REG_2E
	mov t2605,Add(t2604, 0x8)
	mov VM_REG_2E,t2605
b-140941e2b
	mov t2607,VM_REG_E0
	mov t2608,VM_REG_97
	mov VM_REG_E0,t2608
	mov VM_REG_97,t2607
	mov VM_REG_B7,topofstack
	mov t2614,VM_REG_2E
	mov t2615,Add(t2614, 0x8)
	mov VM_REG_2E,t2615
b-140941e39
	mov t2617,VM_REG_E8
	mov t2618,VM_REG_CE
	mov VM_REG_E8,t2618
	mov VM_REG_CE,t2617
	mov VM_REG_155,topofstack
	mov t2624,VM_REG_2E
	mov t2625,Add(t2624, 0x8)
	mov VM_REG_2E,t2625
b-140941e47
	mov VM_REG_26,topofstack
	mov t2628,VM_REG_2E
	mov t2629,Add(t2628, 0x8)
	mov VM_REG_2E,t2629
b-140941e4d
	mov t2631,VM_REG_2E
	mov t2632,Add(t2631, 0x10)
	mov VM_REG_2E,t2632
b-140941e5e
	mov t2634,VM_REG_155
	mov t2635,VM_REG_2E
	mov t2636,Sub(t2635, 0x8)
	mov VM_REG_2E,t2636
	mov qword ptr ds:[Add(stack, -0x8)],t2634
b-140941e64
	mov t2638,VM_REG_155
	mov t2639,VM_REG_2E
	mov t2640,Sub(t2639, 0x8)
	mov VM_REG_2E,t2640
	mov qword ptr ds:[Add(stack, -0x8)],t2638
b-140941e6a
	mov t2645,VM_REG_26
	mov t2646,VM_REG_2E
	mov t2647,Sub(t2646, 0x8)
	mov VM_REG_2E,t2647
	mov qword ptr ds:[Add(stack, -0x8)],t2645
b-140941e74
	mov t2649,VM_REG_155
	mov t2650,VM_REG_2E
	mov t2651,Sub(t2650, 0x8)
	mov VM_REG_2E,t2651
	mov qword ptr ds:[Add(stack, -0x8)],t2649
b-140941e7a
	mov t2653,VM_REG_B7
	mov t2654,VM_REG_2E
	mov t2655,Sub(t2654, 0x8)
	mov VM_REG_2E,t2655
	mov qword ptr ds:[Add(stack, -0x8)],t2653
b-140941e82
	mov t2657,VM_REG_E8
	mov t2658,VM_REG_2E
	mov t2659,Sub(t2658, 0x8)
	mov VM_REG_2E,t2659
	mov qword ptr ds:[Add(stack, -0x8)],t2657
b-140941e88
	mov t2661,VM_REG_64
	mov t2662,VM_REG_2E
	mov t2663,Sub(t2662, 0x8)
	mov VM_REG_2E,t2663
	mov qword ptr ds:[Add(stack, -0x8)],t2661
b-140941e8e
	mov t2665,VM_REG_131
	mov t2666,VM_REG_2E
	mov t2667,Sub(t2666, 0x8)
	mov VM_REG_2E,t2667
	mov qword ptr ds:[Add(stack, -0x8)],t2665
b-140941e96
	mov t2669,VM_REG_15D
	mov t2670,VM_REG_2E
	mov t2671,Sub(t2670, 0x8)
	mov VM_REG_2E,t2671
	mov qword ptr ds:[Add(stack, -0x8)],t2669
b-140941e9c
	mov t2673,VM_REG_CE
	mov t2674,VM_REG_2E
	mov t2675,Sub(t2674, 0x8)
	mov VM_REG_2E,t2675
	mov qword ptr ds:[Add(stack, -0x8)],t2673
b-140941ea4
	mov t2677,VM_REG_5C
	mov t2678,VM_REG_2E
	mov t2679,Sub(t2678, 0x8)
	mov VM_REG_2E,t2679
	mov qword ptr ds:[Add(stack, -0x8)],t2677
b-140941eaa
	mov t2681,VM_REG_105
	mov t2682,VM_REG_2E
	mov t2683,Sub(t2682, 0x8)
	mov VM_REG_2E,t2683
	mov qword ptr ds:[Add(stack, -0x8)],t2681
b-140941eb2
	mov t2685,VM_REG_7A
	mov t2686,VM_REG_2E
	mov t2687,Sub(t2686, 0x8)
	mov VM_REG_2E,t2687
	mov qword ptr ds:[Add(stack, -0x8)],t2685
b-140941eba
	mov t2689,VM_REG_10
	mov t2690,VM_REG_2E
	mov t2691,Sub(t2690, 0x8)
	mov VM_REG_2E,t2691
	mov qword ptr ds:[Add(stack, -0x8)],t2689
b-140941ec2
	mov t2693,VM_REG_10D
	mov t2694,VM_REG_2E
	mov t2695,Sub(t2694, 0x8)
	mov VM_REG_2E,t2695
	mov qword ptr ds:[Add(stack, -0x8)],t2693
b-140941ec8
	mov t2697,VM_REG_C3
	mov t2698,VM_REG_2E
	mov t2699,Sub(t2698, 0x8)
	mov VM_REG_2E,t2699
	mov qword ptr ds:[Add(stack, -0x8)],t2697
b-140941ece
	mov t2701,VM_REG_97
	mov t2702,VM_REG_2E
	mov t2703,Sub(t2702, 0x8)
	mov VM_REG_2E,t2703
	mov qword ptr ds:[Add(stack, -0x8)],t2701
b-140941ed4
	mov t2705,VM_REG_E0
	mov t2706,VM_REG_2E
	mov t2707,Sub(t2706, 0x8)
	mov VM_REG_2E,t2707
	mov qword ptr ds:[Add(stack, -0x8)],t2705
b-140941eda
	mov t2709,VM_REG_E0
	mov t2710,VM_REG_97
	mov t2711,VM_REG_C3
	mov t2712,VM_REG_10D
	mov t2713,VM_REG_10
	mov t2714,VM_REG_7A
	mov t2715,VM_REG_105
	mov t2716,VM_REG_5C
	mov VM_REG_10D,t2716
	mov VM_REG_105,t2715
	mov VM_REG_5C,t2714
	mov VM_REG_10,t2713
	mov VM_REG_7A,t2712
	mov VM_REG_C3,t2711
	mov VM_REG_E0,t2710
	mov VM_REG_97,t2709
b-140941efc
	mov t2725,VM_REG_155
	mov t2726,VM_REG_64
	mov t2727,VM_REG_B7
	mov t2728,VM_REG_E8
	mov t2729,VM_REG_15D
	mov t2730,VM_REG_CE
	mov VM_REG_15D,t2730
	mov VM_REG_64,t2729
	mov VM_REG_B7,t2728
	mov VM_REG_CE,t2727
	mov VM_REG_155,t2726
	mov VM_REG_E8,t2725
b-140941f16
b-140941f18
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
b-140941f22
b-140941f22
b-140941f2a
	mov VM_REG_2E,rsp
b-140941f3a
	mov VM_REG_97,topofstack
	mov t2743,VM_REG_2E
	mov t2744,Add(t2743, 0x8)
	mov VM_REG_2E,t2744
b-140941f42
	mov VM_REG_E0,topofstack
	mov t2746,VM_REG_2E
	mov t2747,Add(t2746, 0x8)
	mov VM_REG_2E,t2747
b-140941f4a
	mov t2749,VM_REG_10D
	mov t2750,VM_REG_5C
	mov VM_REG_10D,t2750
	mov VM_REG_5C,t2749
	mov VM_REG_C3,topofstack
	mov t2756,VM_REG_2E
	mov t2757,Add(t2756, 0x8)
	mov VM_REG_2E,t2757
b-140941f58
	mov t2759,VM_REG_B7
	mov t2760,VM_REG_B7
	mov VM_REG_B7,t2760
	mov VM_REG_B7,t2759
	mov VM_REG_7A,topofstack
	mov t2766,VM_REG_2E
	mov t2767,Add(t2766, 0x8)
	mov VM_REG_2E,t2767
b-140941f66
	mov t2769,VM_REG_C3
	mov t2770,VM_REG_10
	mov VM_REG_C3,t2770
	mov VM_REG_10,t2769
	mov VM_REG_C3,topofstack
	mov t2776,VM_REG_2E
	mov t2777,Add(t2776, 0x8)
	mov VM_REG_2E,t2777
b-140941f74
	mov t2779,VM_REG_64
	mov t2780,VM_REG_155
	mov VM_REG_64,t2780
	mov VM_REG_155,t2779
	mov VM_REG_10D,topofstack
	mov t2786,VM_REG_2E
	mov t2787,Add(t2786, 0x8)
	mov VM_REG_2E,t2787
b-140941f82
	mov VM_REG_105,topofstack
	mov t2789,VM_REG_2E
	mov t2790,Add(t2789, 0x8)
	mov VM_REG_2E,t2790
b-140941f8a
	mov VM_REG_5C,topofstack
	mov t2792,VM_REG_2E
	mov t2793,Add(t2792, 0x8)
	mov VM_REG_2E,t2793
b-140941f92
	mov t2795,VM_REG_E0
	mov t2796,VM_REG_5C
	mov VM_REG_E0,t2796
	mov VM_REG_5C,t2795
	mov VM_REG_15D,topofstack
	mov t2802,VM_REG_2E
	mov t2803,Add(t2802, 0x8)
	mov VM_REG_2E,t2803
b-140941fa0
	mov VM_REG_155,topofstack
	mov t2805,VM_REG_2E
	mov t2806,Add(t2805, 0x8)
	mov VM_REG_2E,t2806
b-140941fa8
	mov t2808,VM_REG_10
	mov t2809,VM_REG_10
	mov VM_REG_10,t2809
	mov VM_REG_10,t2808
	mov VM_REG_131,topofstack
	mov t2815,VM_REG_2E
	mov t2816,Add(t2815, 0x8)
	mov VM_REG_2E,t2816
b-140941fb6
	mov VM_REG_64,topofstack
	mov t2818,VM_REG_2E
	mov t2819,Add(t2818, 0x8)
	mov VM_REG_2E,t2819
b-140941fbe
	mov t2821,VM_REG_10D
	mov t2822,VM_REG_97
	mov VM_REG_10D,t2822
	mov VM_REG_97,t2821
	mov VM_REG_64,topofstack
	mov t2828,VM_REG_2E
	mov t2829,Add(t2828, 0x8)
	mov VM_REG_2E,t2829
b-140941fcc
	mov t2831,VM_REG_155
	mov t2832,VM_REG_15D
	mov VM_REG_155,t2832
	mov VM_REG_15D,t2831
	mov VM_REG_B7,topofstack
	mov t2838,VM_REG_2E
	mov t2839,Add(t2838, 0x8)
	mov VM_REG_2E,t2839
b-140941fda
	mov VM_REG_CE,topofstack
	mov t2841,VM_REG_2E
	mov t2842,Add(t2841, 0x8)
	mov VM_REG_2E,t2842
b-140941fe2
	mov VM_REG_E8,topofstack
	mov t2844,VM_REG_2E
	mov t2845,Add(t2844, 0x8)
	mov VM_REG_2E,t2845
b-140941fea
	mov VM_REG_26,topofstack
	mov t2848,VM_REG_2E
	mov t2849,Add(t2848, 0x8)
	mov VM_REG_2E,t2849
b-140941ff0
	mov t2851,VM_REG_2E
	mov t2852,Add(t2851, 0x10)
	mov VM_REG_2E,t2852
b-140942001
	mov t2854,VM_REG_2E
	mov VM_REG_14D,t2854
b-14094200b
	mov t2860,VM_REG_14D
	mov t2861,Add(t2860, 0x230)
	mov VM_REG_14D,t2861
b-140942019
	mov t2869,VM_REG_14D
	mov VM_REG_B7,t2869
b-140942025
	mov t2874,VM_REG_10D
	mov t2875,VM_REG_5C
	mov t2876,VM_REG_10
	mov t2877,VM_REG_7A
	mov t2878,VM_REG_C3
	mov t2879,VM_REG_97
	mov t2880,VM_REG_105
	mov t2881,VM_REG_E0
	mov VM_REG_10D,t2881
	mov VM_REG_105,t2880
	mov VM_REG_5C,t2879
	mov VM_REG_10,t2878
	mov VM_REG_7A,t2877
	mov VM_REG_C3,t2876
	mov VM_REG_E0,t2875
	mov VM_REG_97,t2874
b-140942047
	mov t2890,VM_REG_E8
	mov t2891,VM_REG_64
	mov t2892,VM_REG_CE
	mov t2893,VM_REG_B7
	mov t2894,VM_REG_15D
	mov t2895,VM_REG_155
	mov VM_REG_15D,t2895
	mov VM_REG_64,t2894
	mov VM_REG_B7,t2893
	mov VM_REG_CE,t2892
	mov VM_REG_155,t2891
	mov VM_REG_E8,t2890
b-140942061
	jmp b-140942119
b-1409420a5
b-1409420a5
b-1409420ad
	mov t3461,VM_REG_E8
	mov t3462,VM_REG_15D
	mov VM_REG_E8,t3462
	mov VM_REG_15D,t3461
	mov VM_REG_14D,0x1df9
b-1409420b9
	mov t3468,VM_REG_14D
	mov t3469,Add(t3468, 0x140000000)
	mov VM_REG_14D,t3469
b-1409420c9
	mov t3471,VM_REG_14D
	mov t3472,Add(t3471, 0xdb67)
	mov VM_REG_14D,t3472
b-1409420d1
	mov t3474,VM_REG_14D
	mov VM_REG_B7,t3474
b-1409420dd
	mov t3478,VM_REG_97
	mov t3479,VM_REG_E0
	mov t3480,VM_REG_C3
	mov t3481,VM_REG_7A
	mov t3482,VM_REG_10
	mov t3483,VM_REG_5C
	mov t3484,VM_REG_105
	mov t3485,VM_REG_10D
	mov VM_REG_10D,t3485
	mov VM_REG_105,t3484
	mov VM_REG_5C,t3483
	mov VM_REG_10,t3482
	mov VM_REG_7A,t3481
	mov VM_REG_C3,t3480
	mov VM_REG_E0,t3479
	mov VM_REG_97,t3478
b-1409420ff
	mov t3494,VM_REG_15D
	mov t3495,VM_REG_155
	mov t3496,VM_REG_CE
	mov t3497,VM_REG_B7
	mov t3498,VM_REG_64
	mov t3499,VM_REG_E8
	mov VM_REG_15D,t3499
	mov VM_REG_64,t3498
	mov VM_REG_B7,t3497
	mov VM_REG_CE,t3496
	mov VM_REG_155,t3495
	mov VM_REG_E8,t3494
b-140942119
b-140942119
b-14094211f
	mov t2902,VM_REG_97
	mov t2903,VM_REG_C3
	mov VM_REG_97,t2903
	mov VM_REG_C3,t2902
	mov VM_REG_14D,0x1e00
b-14094212b
	mov t2906,VM_REG_64
	mov t2907,VM_REG_64
	mov VM_REG_64,t2907
	mov VM_REG_64,t2906
	mov t2910,VM_REG_E8
	mov t2911,VM_REG_15D
	mov VM_REG_E8,t2911
	mov VM_REG_15D,t2910
	mov t2917,VM_REG_14D
	mov t2918,Add(t2917, 0x140000000)
	mov VM_REG_14D,t2918
b-14094213b
	mov t2920,VM_REG_14D
	mov t2921,Add(t2920, 0x16840)
	mov VM_REG_14D,t2921
b-140942143
	mov t2923,VM_REG_14D
	mov t2924,qword ptr ds:[t2923]
	mov VM_REG_CE,t2924
b-140942149
	mov t2925,VM_REG_10
	mov t2926,VM_REG_E0
	mov VM_REG_10,t2926
	mov VM_REG_E0,t2925
	mov VM_REG_14D,0x1e07
b-140942155
	mov t2929,VM_REG_64
	mov t2930,VM_REG_155
	mov VM_REG_64,t2930
	mov VM_REG_155,t2929
	mov t2933,VM_REG_155
	mov t2934,VM_REG_E8
	mov VM_REG_155,t2934
	mov VM_REG_E8,t2933
	mov t2940,VM_REG_14D
	mov t2941,Add(t2940, 0x140000000)
	mov VM_REG_14D,t2941
b-140942165
	mov t2943,VM_REG_14D
	mov t2944,Add(t2943, 0xda21)
	mov VM_REG_14D,t2944
b-140942173
	mov t2946,VM_REG_14D
	mov VM_REG_C3,t2946
b-14094217d
	mov VM_REG_10,0x40
	mov VM_REG_14,0x0
b-140942185
	mov t2958,VM_REG_CE
	mov VM_REG_14D,t2958
b-140942191
	mov t2963,VM_REG_14D
	mov t2964,Add(t2963, 0x10)
	mov VM_REG_14D,t2964
b-14094219f
	mov t2966,VM_REG_14D
	mov t2967,qword ptr ds:[t2966]
	mov VM_REG_CE,t2967
b-1409421a5
	mov t2968,VM_REG_105
	mov t2969,VM_REG_5C
	mov VM_REG_105,t2969
	mov VM_REG_5C,t2968
	mov VM_REG_14D,0x1e17
b-1409421b1
	mov t2972,VM_REG_B7
	mov t2973,VM_REG_15D
	mov VM_REG_B7,t2973
	mov VM_REG_15D,t2972
	mov t2976,VM_REG_B7
	mov t2977,VM_REG_15D
	mov VM_REG_B7,t2977
	mov VM_REG_15D,t2976
	mov t2983,VM_REG_14D
	mov t2984,Add(t2983, 0x140000000)
	mov VM_REG_14D,t2984
b-1409421c1
	mov t2986,VM_REG_14D
	mov t2987,Add(t2986, 0xd471)
	mov VM_REG_14D,t2987
b-1409421cf
	mov t2989,VM_REG_15D
	mov t2990,VM_REG_2E
	mov t2991,Sub(t2990, 0x8)
	mov VM_REG_2E,t2991
	mov qword ptr ds:[Add(stack, -0x8)],t2989
b-1409421d5
	mov t2993,VM_REG_15D
	mov t2994,VM_REG_2E
	mov t2995,Sub(t2994, 0x8)
	mov VM_REG_2E,t2995
	mov qword ptr ds:[Add(stack, -0x8)],t2993
b-1409421db
	mov t3000,VM_REG_26
	mov t3001,VM_REG_2E
	mov t3002,Sub(t3001, 0x8)
	mov VM_REG_2E,t3002
	mov qword ptr ds:[Add(stack, -0x8)],t3000
b-1409421e5
	mov t3004,VM_REG_15D
	mov t3005,VM_REG_2E
	mov t3006,Sub(t3005, 0x8)
	mov VM_REG_2E,t3006
	mov qword ptr ds:[Add(stack, -0x8)],t3004
b-1409421eb
	mov t3008,VM_REG_CE
	mov t3009,VM_REG_2E
	mov t3010,Sub(t3009, 0x8)
	mov VM_REG_2E,t3010
	mov qword ptr ds:[Add(stack, -0x8)],t3008
b-1409421f1
	mov t3012,VM_REG_B7
	mov t3013,VM_REG_2E
	mov t3014,Sub(t3013, 0x8)
	mov VM_REG_2E,t3014
	mov qword ptr ds:[Add(stack, -0x8)],t3012
b-1409421f7
	mov t3016,VM_REG_64
	mov t3017,VM_REG_2E
	mov t3018,Sub(t3017, 0x8)
	mov VM_REG_2E,t3018
	mov qword ptr ds:[Add(stack, -0x8)],t3016
b-1409421fd
	mov t3020,VM_REG_131
	mov t3021,VM_REG_2E
	mov t3022,Sub(t3021, 0x8)
	mov VM_REG_2E,t3022
	mov qword ptr ds:[Add(stack, -0x8)],t3020
b-140942203
	mov t3024,VM_REG_E8
	mov t3025,VM_REG_2E
	mov t3026,Sub(t3025, 0x8)
	mov VM_REG_2E,t3026
	mov qword ptr ds:[Add(stack, -0x8)],t3024
b-140942209
	mov t3028,VM_REG_155
	mov t3029,VM_REG_2E
	mov t3030,Sub(t3029, 0x8)
	mov VM_REG_2E,t3030
	mov qword ptr ds:[Add(stack, -0x8)],t3028
b-14094220f
	mov t3032,VM_REG_10D
	mov t3033,VM_REG_2E
	mov t3034,Sub(t3033, 0x8)
	mov VM_REG_2E,t3034
	mov qword ptr ds:[Add(stack, -0x8)],t3032
b-140942217
	mov t3036,VM_REG_5C
	mov t3037,VM_REG_2E
	mov t3038,Sub(t3037, 0x8)
	mov VM_REG_2E,t3038
	mov qword ptr ds:[Add(stack, -0x8)],t3036
b-14094221d
	mov t3040,VM_REG_105
	mov t3041,VM_REG_2E
	mov t3042,Sub(t3041, 0x8)
	mov VM_REG_2E,t3042
	mov qword ptr ds:[Add(stack, -0x8)],t3040
b-140942225
	mov t3044,VM_REG_E0
	mov t3045,VM_REG_2E
	mov t3046,Sub(t3045, 0x8)
	mov VM_REG_2E,t3046
	mov qword ptr ds:[Add(stack, -0x8)],t3044
b-14094222d
	mov t3048,VM_REG_7A
	mov t3049,VM_REG_2E
	mov t3050,Sub(t3049, 0x8)
	mov VM_REG_2E,t3050
	mov qword ptr ds:[Add(stack, -0x8)],t3048
b-140942235
	mov t3052,VM_REG_97
	mov t3053,VM_REG_2E
	mov t3054,Sub(t3053, 0x8)
	mov VM_REG_2E,t3054
	mov qword ptr ds:[Add(stack, -0x8)],t3052
b-14094223b
	mov t3056,VM_REG_10
	mov t3057,VM_REG_2E
	mov t3058,Sub(t3057, 0x8)
	mov VM_REG_2E,t3058
	mov qword ptr ds:[Add(stack, -0x8)],t3056
b-140942243
	mov t3060,VM_REG_C3
	mov t3061,VM_REG_2E
	mov t3062,Sub(t3061, 0x8)
	mov VM_REG_2E,t3062
	mov qword ptr ds:[Add(stack, -0x8)],t3060
b-14094224b
	mov t3064,VM_REG_C3
	mov t3065,VM_REG_10
	mov t3066,VM_REG_97
	mov t3067,VM_REG_7A
	mov t3068,VM_REG_E0
	mov t3069,VM_REG_105
	mov t3070,VM_REG_5C
	mov t3071,VM_REG_10D
	mov VM_REG_10D,t3071
	mov VM_REG_105,t3070
	mov VM_REG_5C,t3069
	mov VM_REG_10,t3068
	mov VM_REG_7A,t3067
	mov VM_REG_C3,t3066
	mov VM_REG_E0,t3065
	mov VM_REG_97,t3064
b-14094226d
	mov t3080,VM_REG_15D
	mov t3081,VM_REG_64
	mov t3082,VM_REG_CE
	mov t3083,VM_REG_B7
	mov t3084,VM_REG_E8
	mov t3085,VM_REG_155
	mov VM_REG_15D,t3085
	mov VM_REG_64,t3084
	mov VM_REG_B7,t3083
	mov VM_REG_CE,t3082
	mov VM_REG_155,t3081
	mov VM_REG_E8,t3080
b-140942287
b-140942289
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
b-140942291
b-140942291
b-140942297
	mov VM_REG_2E,rsp
b-1409422a7
	mov VM_REG_97,topofstack
	mov t3097,VM_REG_2E
	mov t3098,Add(t3097, 0x8)
	mov VM_REG_2E,t3098
b-1409422af
	mov t3100,VM_REG_7A
	mov t3101,VM_REG_7A
	mov VM_REG_7A,t3101
	mov VM_REG_7A,t3100
	mov VM_REG_E0,topofstack
	mov t3107,VM_REG_2E
	mov t3108,Add(t3107, 0x8)
	mov VM_REG_2E,t3108
b-1409422bd
	mov t3110,VM_REG_64
	mov t3111,VM_REG_CE
	mov VM_REG_64,t3111
	mov VM_REG_CE,t3110
	mov VM_REG_C3,topofstack
	mov t3117,VM_REG_2E
	mov t3118,Add(t3117, 0x8)
	mov VM_REG_2E,t3118
b-1409422cb
	mov t3120,VM_REG_105
	mov t3121,VM_REG_7A
	mov VM_REG_105,t3121
	mov VM_REG_7A,t3120
	mov VM_REG_105,topofstack
	mov t3127,VM_REG_2E
	mov t3128,Add(t3127, 0x8)
	mov VM_REG_2E,t3128
b-1409422d9
	mov VM_REG_10,topofstack
	mov t3130,VM_REG_2E
	mov t3131,Add(t3130, 0x8)
	mov VM_REG_2E,t3131
b-1409422e1
	mov t3133,VM_REG_105
	mov t3134,VM_REG_E0
	mov VM_REG_105,t3134
	mov VM_REG_E0,t3133
	mov VM_REG_5C,topofstack
	mov t3140,VM_REG_2E
	mov t3141,Add(t3140, 0x8)
	mov VM_REG_2E,t3141
b-1409422ef
	mov t3143,VM_REG_E8
	mov t3144,VM_REG_E8
	mov VM_REG_E8,t3144
	mov VM_REG_E8,t3143
	mov VM_REG_7A,topofstack
	mov t3150,VM_REG_2E
	mov t3151,Add(t3150, 0x8)
	mov VM_REG_2E,t3151
b-1409422fd
	mov VM_REG_10D,topofstack
	mov t3153,VM_REG_2E
	mov t3154,Add(t3153, 0x8)
	mov VM_REG_2E,t3154
b-140942305
	mov VM_REG_15D,topofstack
	mov t3156,VM_REG_2E
	mov t3157,Add(t3156, 0x8)
	mov VM_REG_2E,t3157
b-14094230d
	mov VM_REG_CE,topofstack
	mov t3159,VM_REG_2E
	mov t3160,Add(t3159, 0x8)
	mov VM_REG_2E,t3160
b-140942315
	mov t3162,VM_REG_B7
	mov t3163,VM_REG_B7
	mov VM_REG_B7,t3163
	mov VM_REG_B7,t3162
	mov VM_REG_131,topofstack
	mov t3169,VM_REG_2E
	mov t3170,Add(t3169, 0x8)
	mov VM_REG_2E,t3170
b-140942323
	mov t3172,VM_REG_C3
	mov t3173,VM_REG_97
	mov VM_REG_C3,t3173
	mov VM_REG_97,t3172
	mov VM_REG_155,topofstack
	mov t3179,VM_REG_2E
	mov t3180,Add(t3179, 0x8)
	mov VM_REG_2E,t3180
b-140942331
	mov VM_REG_155,topofstack
	mov t3182,VM_REG_2E
	mov t3183,Add(t3182, 0x8)
	mov VM_REG_2E,t3183
b-140942339
	mov VM_REG_B7,topofstack
	mov t3185,VM_REG_2E
	mov t3186,Add(t3185, 0x8)
	mov VM_REG_2E,t3186
b-140942341
	mov t3188,VM_REG_15D
	mov t3189,VM_REG_E8
	mov VM_REG_15D,t3189
	mov VM_REG_E8,t3188
	mov VM_REG_64,topofstack
	mov t3195,VM_REG_2E
	mov t3196,Add(t3195, 0x8)
	mov VM_REG_2E,t3196
b-14094234f
	mov t3198,VM_REG_7A
	mov t3199,VM_REG_5C
	mov VM_REG_7A,t3199
	mov VM_REG_5C,t3198
	mov VM_REG_15D,topofstack
	mov t3205,VM_REG_2E
	mov t3206,Add(t3205, 0x8)
	mov VM_REG_2E,t3206
b-14094235d
	mov VM_REG_26,topofstack
	mov t3209,VM_REG_2E
	mov t3210,Add(t3209, 0x8)
	mov VM_REG_2E,t3210
b-140942363
	mov t3212,VM_REG_2E
	mov t3213,Add(t3212, 0x10)
	mov VM_REG_2E,t3213
b-140942374
	mov t3215,VM_REG_15D
	mov t3216,VM_REG_2E
	mov t3217,Sub(t3216, 0x8)
	mov VM_REG_2E,t3217
	mov qword ptr ds:[Add(stack, -0x8)],t3215
b-14094237a
	mov t3222,VM_REG_26
	mov t3223,VM_REG_2E
	mov t3224,Sub(t3223, 0x8)
	mov VM_REG_2E,t3224
	mov qword ptr ds:[Add(stack, -0x8)],t3222
b-140942384
	mov t3226,VM_REG_15D
	mov t3227,VM_REG_2E
	mov t3228,Sub(t3227, 0x8)
	mov VM_REG_2E,t3228
	mov qword ptr ds:[Add(stack, -0x8)],t3226
b-14094238a
	mov t3230,VM_REG_64
	mov t3231,VM_REG_2E
	mov t3232,Sub(t3231, 0x8)
	mov VM_REG_2E,t3232
	mov qword ptr ds:[Add(stack, -0x8)],t3230
b-140942390
	mov t3234,VM_REG_B7
	mov t3235,VM_REG_2E
	mov t3236,Sub(t3235, 0x8)
	mov VM_REG_2E,t3236
	mov qword ptr ds:[Add(stack, -0x8)],t3234
b-140942396
	mov t3238,VM_REG_155
	mov t3239,VM_REG_2E
	mov t3240,Sub(t3239, 0x8)
	mov VM_REG_2E,t3240
	mov qword ptr ds:[Add(stack, -0x8)],t3238
b-14094239c
	mov t3242,VM_REG_131
	mov t3243,VM_REG_2E
	mov t3244,Sub(t3243, 0x8)
	mov VM_REG_2E,t3244
	mov qword ptr ds:[Add(stack, -0x8)],t3242
b-1409423a2
	mov t3246,VM_REG_CE
	mov t3247,VM_REG_2E
	mov t3248,Sub(t3247, 0x8)
	mov VM_REG_2E,t3248
	mov qword ptr ds:[Add(stack, -0x8)],t3246
b-1409423a8
	mov t3250,VM_REG_E8
	mov t3251,VM_REG_2E
	mov t3252,Sub(t3251, 0x8)
	mov VM_REG_2E,t3252
	mov qword ptr ds:[Add(stack, -0x8)],t3250
b-1409423ae
	mov t3254,VM_REG_10D
	mov t3255,VM_REG_2E
	mov t3256,Sub(t3255, 0x8)
	mov VM_REG_2E,t3256
	mov qword ptr ds:[Add(stack, -0x8)],t3254
b-1409423b4
	mov t3258,VM_REG_5C
	mov t3259,VM_REG_2E
	mov t3260,Sub(t3259, 0x8)
	mov VM_REG_2E,t3260
	mov qword ptr ds:[Add(stack, -0x8)],t3258
b-1409423ba
	mov t3262,VM_REG_7A
	mov t3263,VM_REG_2E
	mov t3264,Sub(t3263, 0x8)
	mov VM_REG_2E,t3264
	mov qword ptr ds:[Add(stack, -0x8)],t3262
b-1409423c0
	mov t3266,VM_REG_10
	mov t3267,VM_REG_2E
	mov t3268,Sub(t3267, 0x8)
	mov VM_REG_2E,t3268
	mov qword ptr ds:[Add(stack, -0x8)],t3266
b-1409423c6
	mov t3270,VM_REG_E0
	mov t3271,VM_REG_2E
	mov t3272,Sub(t3271, 0x8)
	mov VM_REG_2E,t3272
	mov qword ptr ds:[Add(stack, -0x8)],t3270
b-1409423cc
	mov t3274,VM_REG_97
	mov t3275,VM_REG_2E
	mov t3276,Sub(t3275, 0x8)
	mov VM_REG_2E,t3276
	mov qword ptr ds:[Add(stack, -0x8)],t3274
b-1409423d4
	mov t3278,VM_REG_105
	mov t3279,VM_REG_2E
	mov t3280,Sub(t3279, 0x8)
	mov VM_REG_2E,t3280
	mov qword ptr ds:[Add(stack, -0x8)],t3278
b-1409423da
	mov t3282,VM_REG_C3
	mov t3283,VM_REG_2E
	mov t3284,Sub(t3283, 0x8)
	mov VM_REG_2E,t3284
	mov qword ptr ds:[Add(stack, -0x8)],t3282
b-1409423e2
	mov t3286,VM_REG_C3
	mov t3287,VM_REG_105
	mov t3288,VM_REG_97
	mov t3289,VM_REG_E0
	mov t3290,VM_REG_10
	mov t3291,VM_REG_7A
	mov t3292,VM_REG_5C
	mov t3293,VM_REG_10D
	mov VM_REG_10D,t3293
	mov VM_REG_105,t3292
	mov VM_REG_5C,t3291
	mov VM_REG_10,t3290
	mov VM_REG_7A,t3289
	mov VM_REG_C3,t3288
	mov VM_REG_E0,t3287
	mov VM_REG_97,t3286
b-140942404
	mov t3302,VM_REG_15D
	mov t3303,VM_REG_155
	mov t3304,VM_REG_64
	mov t3305,VM_REG_B7
	mov t3306,VM_REG_CE
	mov t3307,VM_REG_E8
	mov VM_REG_15D,t3307
	mov VM_REG_64,t3306
	mov VM_REG_B7,t3305
	mov VM_REG_CE,t3304
	mov VM_REG_155,t3303
	mov VM_REG_E8,t3302
b-14094241e
b-140942420
	pop (r8)
	pop (r9)
	pop (r10)
	pop (r11)
	pop (r12)
	pop (r13)
	pop (r14)
	pop (r15)
	pop (rdi)
	pop (rsi)
	pop (rbp)
	pop (rbx)
	pop (rdx)
	pop (rcx)
	pop (rax)
	pop (eflags)
	ret 0
